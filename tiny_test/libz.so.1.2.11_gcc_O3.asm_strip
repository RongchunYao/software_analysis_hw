<_init_proc>:
    sub     rsp, 8
    mov     rax, cs:__gmon_start___ptr
    test    rax, rax
    jz      short loc_20D2
    call    rax
    
loc_20D2:
    add     rsp, 8
    retn

<sub_20E0>:
    
    push    cs:qword_21D008
    jmp     cs:qword_21D010

<deregister_tm_clones>:
    lea     rdi, completed_7697
    push    rbp
    lea     rax, completed_7697
    cmp     rax, rdi
    mov     rbp, rsp
    jz      short loc_2400
    mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
    test    rax, rax
    jz      short loc_2400
    pop     rbp
    jmp     rax
    align 20h
    
loc_2400:
    pop     rbp
    retn

<register_tm_clones>:
    lea     rdi, completed_7697
    lea     rsi, completed_7697
    push    rbp
    sub     rsi, rdi
    mov     rbp, rsp
    sar     rsi, 3
    mov     rax, rsi
    shr     rax, 3Fh
    add     rsi, rax
    sar     rsi, 1
    jz      short loc_2450
    mov     rax, cs:_ITM_registerTMCloneTable_ptr
    test    rax, rax
    jz      short loc_2450
    pop     rbp
    jmp     rax
    align 10h
    
loc_2450:
    pop     rbp
    retn

<__do_global_dtors_aux>:
    cmp     cs:completed_7697, 0
    jnz     short locret_2498
    cmp     cs:__cxa_finalize_ptr, 0
    push    rbp
    mov     rbp, rsp
    jz      short loc_2483
    mov     rdi, cs:__dso_handle
    call    __cxa_finalize
    
loc_2483:
    call    deregister_tm_clones
    mov     cs:completed_7697, 1
    pop     rbp
    retn
    align 8
    
locret_2498:
    rep retn

<frame_dummy>:
    push    rbp
    mov     rbp, rsp
    pop     rbp
    jmp     register_tm_clones

<adler32_z>:
    
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_40= qword ptr -40h
    var_38= qword ptr -38h
    
    
    mov     rax, rdi
    push    r15
    push    r14
    shr     rax, 10h
    push    r13
    push    r12
    push    rbp
    push    rbx
    movzx   eax, ax
    cmp     rdx, 1
    mov     r9, rsi
    movzx   r15d, di
    mov     [rsp+30h+var_38], rdx
    mov     [rsp+30h+var_50], rax
    jz      loc_282A
    test    rsi, rsi
    mov     eax, 1
    jz      loc_281F
    cmp     rdx, 0Fh
    mov     rax, rdx
    jbe     loc_2673
    cmp     rdx, 15AFh
    jbe     loc_2B5C
    
loc_2507:
    sub     rax, 15B0h
    mov     r10, r9
    mov     [rsp+30h+var_40], rax
    lea     rax, [r9+15B0h]
    mov     [rsp+30h+var_48], rax
    nop     dword ptr [rax+00000000h]
    
loc_2528:
    movzx   eax, byte ptr [r10]
    movzx   r14d, byte ptr [r10+1]
    add     r10, 10h
    movzx   r13d, byte ptr [r10-0Eh]
    movzx   r12d, byte ptr [r10-0Dh]
    movzx   ebp, byte ptr [r10-0Ch]
    movzx   ebx, byte ptr [r10-0Bh]
    movzx   r11d, byte ptr [r10-0Ah]
    movzx   r9d, byte ptr [r10-9]
    add     rax, r15
    movzx   r8d, byte ptr [r10-6]
    movzx   edi, byte ptr [r10-5]
    add     r14, rax
    movzx   edx, byte ptr [r10-2]
    movzx   r15d, byte ptr [r10-1]
    add     r13, r14
    add     rax, r14
    add     r12, r13
    add     rax, r13
    add     rbp, r12
    add     rax, r12
    add     rbx, rbp
    add     rax, rbp
    add     r11, rbx
    add     rbx, rax
    lea     rsi, [r9+r11]
    movzx   r9d, byte ptr [r10-8]
    add     r11, rbx
    mov     [rsp+30h+var_60], rsi
    add     r11, [rsp+30h+var_60]
    add     r9, rsi
    movzx   esi, byte ptr [r10-4]
    mov     rcx, r9
    movzx   r9d, byte ptr [r10-7]
    mov     [rsp+30h+var_58], rcx
    add     r11, [rsp+30h+var_58]
    add     r9, rcx
    movzx   ecx, byte ptr [r10-3]
    add     r8, r9
    add     r9, r11
    add     rdi, r8
    add     r8, r9
    add     rsi, rdi
    add     rdi, r8
    add     rcx, rsi
    add     rsi, rdi
    add     rdx, rcx
    add     rcx, rsi
    add     r15, rdx
    add     rdx, rcx
    add     rdx, r15
    add     [rsp+30h+var_50], rdx
    cmp     r10, [rsp+30h+var_48]
    jnz     loc_2528
    mov     rax, 0F00E10D2FC5CDh
    mov     rdi, [rsp+30h+var_50]
    mov     r9, r10
    mul     r15
    mov     rax, r15
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    shr     rdx, 0Fh
    imul    rax, rdx, 0FFF1h
    sub     r15, rax
    mov     rax, 0F00E10D2FC5CDh
    mul     rdi
    mov     rax, rdi
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    shr     rdx, 0Fh
    imul    rax, rdx, 0FFF1h
    sub     rdi, rax
    cmp     [rsp+30h+var_40], 15AFh
    mov     rax, [rsp+30h+var_40]
    mov     [rsp+30h+var_50], rdi
    jbe     loc_286D
    mov     [rsp+30h+var_38], rax
    jmp     loc_2507
    
loc_2673:
    test    rdx, rdx
    jz      loc_27D2
    movzx   eax, byte ptr [rsi]
    add     r15, rax
    add     [rsp+30h+var_50], r15
    cmp     rdx, 1
    mov     rdi, [rsp+30h+var_50]
    jz      loc_27D2
    movzx   eax, byte ptr [rsi+1]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 2
    mov     [rsp+30h+var_50], rdi
    jz      loc_27D2
    movzx   eax, byte ptr [rsi+2]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 3
    mov     [rsp+30h+var_50], rdi
    jz      loc_27D2
    movzx   eax, byte ptr [rsi+3]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 4
    mov     [rsp+30h+var_50], rdi
    jz      loc_27D2
    movzx   eax, byte ptr [rsi+4]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 5
    mov     [rsp+30h+var_50], rdi
    jz      loc_27D2
    movzx   eax, byte ptr [rsi+5]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 6
    mov     [rsp+30h+var_50], rdi
    jz      loc_27D2
    movzx   eax, byte ptr [rsi+6]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 7
    mov     [rsp+30h+var_50], rdi
    jz      loc_27D2
    movzx   eax, byte ptr [rsi+7]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 8
    mov     [rsp+30h+var_50], rdi
    jz      loc_27D2
    movzx   eax, byte ptr [rsi+8]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 9
    mov     [rsp+30h+var_50], rdi
    jz      short loc_27D2
    movzx   eax, byte ptr [rsi+9]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 0Ah
    mov     [rsp+30h+var_50], rdi
    jz      short loc_27D2
    movzx   eax, byte ptr [rsi+0Ah]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 0Bh
    mov     [rsp+30h+var_50], rdi
    jz      short loc_27D2
    movzx   eax, byte ptr [rsi+0Bh]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 0Ch
    mov     [rsp+30h+var_50], rdi
    jz      short loc_27D2
    movzx   eax, byte ptr [rsi+0Ch]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 0Dh
    mov     [rsp+30h+var_50], rdi
    jz      short loc_27D2
    movzx   eax, byte ptr [rsi+0Dh]
    add     r15, rax
    add     rdi, r15
    cmp     rdx, 0Eh
    mov     [rsp+30h+var_50], rdi
    jz      short loc_27D2
    movzx   eax, byte ptr [rsi+0Eh]
    add     r15, rax
    add     rdi, r15
    mov     [rsp+30h+var_50], rdi
    
loc_27D2:
    lea     rax, [r15-0FFF1h]
    cmp     r15, 0FFF0h
    mov     rdx, 0F00E10D2FC5CDh
    mov     rdi, [rsp+30h+var_50]
    cmova   r15, rax
    mov     rax, [rsp+30h+var_50]
    mul     rdx
    mov     rax, rdi
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rdi, rax
    mov     rax, rdi
    shl     rax, 10h
    or      rax, r15
    
loc_281F:
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_282A:
    movzx   eax, byte ptr [rsi]
    add     r15, rax
    lea     rax, [r15-0FFF1h]
    cmp     r15, 0FFF0h
    cmova   r15, rax
    mov     rax, [rsp+30h+var_50]
    pop     rbx
    pop     rbp
    add     rax, r15
    lea     rdx, [rax-0FFF1h]
    cmp     rax, 0FFF0h
    pop     r12
    cmova   rax, rdx
    shl     rax, 10h
    or      rax, r15
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_286D:
    test    rax, rax
    jz      loc_2B45
    cmp     rax, 0Fh
    jbe     loc_2B66
    
loc_2880:
    sub     rax, 10h
    shr     rax, 4
    mov     [rsp+30h+var_38], rax
    add     rax, 1
    shl     rax, 4
    add     rax, r9
    mov     [rsp+30h+var_48], rax
    
loc_289D:
    movzx   eax, byte ptr [r9]
    movzx   r14d, byte ptr [r9+1]
    add     r9, 10h
    movzx   r13d, byte ptr [r9-0Eh]
    movzx   r12d, byte ptr [r9-0Dh]
    movzx   ebp, byte ptr [r9-0Ch]
    movzx   ebx, byte ptr [r9-0Bh]
    movzx   r11d, byte ptr [r9-0Ah]
    movzx   r10d, byte ptr [r9-9]
    add     rax, r15
    movzx   r8d, byte ptr [r9-8]
    movzx   edi, byte ptr [r9-7]
    add     r14, rax
    movzx   esi, byte ptr [r9-6]
    movzx   edx, byte ptr [r9-5]
    add     r13, r14
    add     rax, r14
    movzx   r15d, byte ptr [r9-1]
    add     r12, r13
    add     rax, r13
    add     rbp, r12
    add     rax, r12
    add     rbx, rbp
    add     rax, rbp
    add     r11, rbx
    add     rax, rbx
    add     r10, r11
    add     rax, r11
    add     r8, r10
    add     rax, r10
    add     rdi, r8
    add     rax, r8
    add     rsi, rdi
    add     rax, rdi
    lea     rcx, [rdx+rsi]
    movzx   edx, byte ptr [r9-4]
    add     rax, rsi
    mov     [rsp+30h+var_60], rcx
    add     rax, [rsp+30h+var_60]
    add     rdx, rcx
    movzx   ecx, byte ptr [r9-3]
    mov     [rsp+30h+var_58], rdx
    add     rax, [rsp+30h+var_58]
    add     rcx, rdx
    movzx   edx, byte ptr [r9-2]
    add     rax, rcx
    add     rdx, rcx
    add     r15, rdx
    add     rax, rdx
    add     rax, r15
    add     [rsp+30h+var_50], rax
    cmp     r9, [rsp+30h+var_48]
    jnz     loc_289D
    mov     rax, [rsp+30h+var_38]
    mov     rdi, [rsp+30h+var_40]
    neg     rax
    shl     rax, 4
    lea     rax, [rdi+rax-11h]
    and     edi, 0Fh
    jz      loc_2AEF
    
loc_298B:
    movzx   edx, byte ptr [r9]
    add     r15, rdx
    add     [rsp+30h+var_50], r15
    test    rax, rax
    mov     rdi, [rsp+30h+var_50]
    jz      loc_2AEF
    movzx   edx, byte ptr [r9+1]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 1
    mov     [rsp+30h+var_50], rdi
    jz      loc_2AEF
    movzx   edx, byte ptr [r9+2]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 2
    mov     [rsp+30h+var_50], rdi
    jz      loc_2AEF
    movzx   edx, byte ptr [r9+3]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 3
    mov     [rsp+30h+var_50], rdi
    jz      loc_2AEF
    movzx   edx, byte ptr [r9+4]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 4
    mov     [rsp+30h+var_50], rdi
    jz      loc_2AEF
    movzx   edx, byte ptr [r9+5]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 5
    mov     [rsp+30h+var_50], rdi
    jz      loc_2AEF
    movzx   edx, byte ptr [r9+6]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 6
    mov     [rsp+30h+var_50], rdi
    jz      loc_2AEF
    movzx   edx, byte ptr [r9+7]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 7
    mov     [rsp+30h+var_50], rdi
    jz      loc_2AEF
    movzx   edx, byte ptr [r9+8]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 8
    mov     [rsp+30h+var_50], rdi
    jz      short loc_2AEF
    movzx   edx, byte ptr [r9+9]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 9
    mov     [rsp+30h+var_50], rdi
    jz      short loc_2AEF
    movzx   edx, byte ptr [r9+0Ah]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 0Ah
    mov     [rsp+30h+var_50], rdi
    jz      short loc_2AEF
    movzx   edx, byte ptr [r9+0Bh]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 0Bh
    mov     [rsp+30h+var_50], rdi
    jz      short loc_2AEF
    movzx   edx, byte ptr [r9+0Ch]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 0Ch
    mov     [rsp+30h+var_50], rdi
    jz      short loc_2AEF
    movzx   edx, byte ptr [r9+0Dh]
    add     r15, rdx
    add     rdi, r15
    cmp     rax, 0Dh
    mov     [rsp+30h+var_50], rdi
    jz      short loc_2AEF
    movzx   eax, byte ptr [r9+0Eh]
    add     r15, rax
    add     rdi, r15
    mov     [rsp+30h+var_50], rdi
    
loc_2AEF:
    mov     rax, r15
    mov     rcx, 0F00E10D2FC5CDh
    mov     rdi, [rsp+30h+var_50]
    mul     rcx
    mov     rax, r15
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     r15, rax
    mov     rax, [rsp+30h+var_50]
    mul     rcx
    mov     rax, rdi
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rdi, rax
    mov     [rsp+30h+var_50], rdi
    
loc_2B45:
    mov     rax, [rsp+30h+var_50]
    pop     rbx
    pop     rbp
    shl     rax, 10h
    pop     r12
    or      rax, r15
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_2B5C:
    mov     [rsp+30h+var_40], rdx
    jmp     loc_2880
    
loc_2B66:
    mov     rax, [rsp+30h+var_38]
    sub     rax, 15B1h
    jmp     loc_298B
    

<adler32>:
    
    mov     edx, edx
    jmp     _adler32_z
    

<adler32_combine>:
    
    test    rdx, rdx
    mov     r8, rdx
    mov     eax, 0FFFFFFFFh
    js      locret_2C6E
    mov     rax, r8
    mov     rdx, 800780708697E2E7h
    movzx   ecx, di
    imul    rdx
    mov     rax, r8
    mov     r9, rcx
    sar     rax, 3Fh
    shr     rdi, 10h
    add     rdx, r8
    sar     rdx, 0Fh
    sub     rdx, rax
    imul    rdx, 0FFF1h
    sub     r8, rdx
    imul    r9, r8
    mov     rdx, r8
    movzx   r8d, si
    shr     rsi, 10h
    movzx   esi, si
    sub     rsi, rdx
    movzx   edx, di
    add     rsi, rdx
    mov     rax, r9
    mov     rdx, 0F00E10D2FC5CDh
    mul     rdx
    mov     rax, r9
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    mov     eax, 0FFF0h
    shr     rdx, 0Fh
    imul    rdx, 0FFF1h
    sub     r9, rdx
    add     rcx, r8
    lea     rdx, [rsi+r9]
    lea     rsi, [rdx+0FFF1h]
    jz      short loc_2C43
    lea     rax, [rcx-1]
    cmp     rax, 0FFF0h
    jbe     short loc_2C43
    lea     rax, [rcx-0FFF2h]
    
loc_2C43:
    sub     rdx, 0FFF1h
    cmp     rsi, 1FFE1h
    cmova   rsi, rdx
    lea     rdx, [rsi-0FFF1h]
    cmp     rsi, 0FFF0h
    cmova   rsi, rdx
    shl     rsi, 10h
    or      rax, rsi
    
locret_2C6E:
    rep retn
    

<adler32_combine64>:
    
    test    rdx, rdx
    mov     r8, rdx
    mov     eax, 0FFFFFFFFh
    js      locret_2D4E
    mov     rax, r8
    mov     rdx, 800780708697E2E7h
    movzx   ecx, di
    imul    rdx
    mov     rax, r8
    mov     r9, rcx
    sar     rax, 3Fh
    shr     rdi, 10h
    add     rdx, r8
    sar     rdx, 0Fh
    sub     rdx, rax
    imul    rdx, 0FFF1h
    sub     r8, rdx
    imul    r9, r8
    mov     rdx, r8
    movzx   r8d, si
    shr     rsi, 10h
    movzx   esi, si
    sub     rsi, rdx
    movzx   edx, di
    add     rsi, rdx
    mov     rax, r9
    mov     rdx, 0F00E10D2FC5CDh
    mul     rdx
    mov     rax, r9
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    mov     eax, 0FFF0h
    shr     rdx, 0Fh
    imul    rdx, 0FFF1h
    sub     r9, rdx
    add     rcx, r8
    lea     rdx, [rsi+r9]
    lea     rsi, [rdx+0FFF1h]
    jz      short loc_2D23
    lea     rax, [rcx-1]
    cmp     rax, 0FFF0h
    jbe     short loc_2D23
    lea     rax, [rcx-0FFF2h]
    
loc_2D23:
    sub     rdx, 0FFF1h
    cmp     rsi, 1FFE1h
    cmova   rsi, rdx
    lea     rdx, [rsi-0FFF1h]
    cmp     rsi, 0FFF0h
    cmova   rsi, rdx
    shl     rsi, 10h
    or      rax, rsi
    
locret_2D4E:
    rep retn
    

<crc32_combine_>:
    
    var_118= qword ptr -118h
    var_10= qword ptr -10h
    
    
    push    rbx
    sub     rsp, 210h
    mov     rax, fs:28h
    mov     [rsp+218h+var_10], rax
    xor     eax, eax
    test    rdx, rdx
    mov     rax, rdi
    jle     loc_2ED9
    lea     r10, [rsp+218h+var_118]
    mov     eax, 0EDB88320h
    mov     ecx, 1
    mov     [rsp+218h+var_118], rax
    lea     r8, [r10+100h]
    lea     rax, [r10+8]
    nop     dword ptr [rax+00h]
    
loc_2DA0:
    mov     [rax], rcx
    add     rax, 8
    add     rcx, rcx
    cmp     r8, rax
    jnz     short loc_2DA0
    xor     r9d, r9d
    mov     r11, rsp
    nop     dword ptr [rax]
    
loc_2DB8:
    mov     rax, [r10+r9]
    xor     r8d, r8d
    test    rax, rax
    jz      short loc_2DE0
    mov     rcx, r10
    nop     word ptr [rax+rax+00000000h]
    
loc_2DD0:
    test    al, 1
    jz      short loc_2DD7
    xor     r8, [rcx]
    
loc_2DD7:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2DD0
    
loc_2DE0:
    mov     [r11+r9], r8
    add     r9, 8
    cmp     r9, 100h
    jnz     short loc_2DB8
    xor     r9d, r9d
    nop     dword ptr [rax+00h]
    
loc_2DF8:
    mov     rax, [r11+r9]
    xor     r8d, r8d
    test    rax, rax
    jz      short loc_2E20
    mov     rcx, r11
    nop     word ptr [rax+rax+00000000h]
    
loc_2E10:
    test    al, 1
    jz      short loc_2E17
    xor     r8, [rcx]
    
loc_2E17:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2E10
    
loc_2E20:
    mov     [r10+r9], r8
    add     r9, 8
    cmp     r9, 100h
    jnz     short loc_2DF8
    
loc_2E31:
    xor     r9d, r9d
    nop     dword ptr [rax+00h]
    
loc_2E38:
    mov     rax, [r10+r9]
    xor     r8d, r8d
    test    rax, rax
    jz      short loc_2E60
    mov     rcx, r10
    nop     word ptr [rax+rax+00000000h]
    
loc_2E50:
    test    al, 1
    jz      short loc_2E57
    xor     r8, [rcx]
    
loc_2E57:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2E50
    
loc_2E60:
    mov     [r11+r9], r8
    add     r9, 8
    cmp     r9, 100h
    jnz     short loc_2E38
    test    dl, 1
    jnz     short loc_2EF5
    
loc_2E76:
    mov     rbx, rdx
    sar     rbx, 1
    jz      short loc_2ED3
    xor     r9d, r9d
    nop     dword ptr [rax+00000000h]
    
loc_2E88:
    mov     rax, [r11+r9]
    xor     r8d, r8d
    test    rax, rax
    jz      short loc_2EB0
    mov     rcx, r11
    nop     word ptr [rax+rax+00000000h]
    
loc_2EA0:
    test    al, 1
    jz      short loc_2EA7
    xor     r8, [rcx]
    
loc_2EA7:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2EA0
    
loc_2EB0:
    mov     [r10+r9], r8
    add     r9, 8
    cmp     r9, 100h
    jnz     short loc_2E88
    and     ebx, 1
    jnz     short loc_2F25
    
loc_2EC6:
    sar     rdx, 2
    test    rdx, rdx
    jnz     loc_2E31
    
loc_2ED3:
    mov     rax, rdi
    xor     rax, rsi
    
loc_2ED9:
    mov     rsi, [rsp+218h+var_10]
    xor     rsi, fs:28h
    jnz     short loc_2F44
    add     rsp, 210h
    pop     rbx
    retn
    
loc_2EF5:
    test    rdi, rdi
    jz      loc_2E76
    mov     rax, rdi
    mov     rcx, r11
    xor     edi, edi
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_2F10:
    test    al, 1
    jz      short loc_2F17
    xor     rdi, [rcx]
    
loc_2F17:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2F10
    jmp     loc_2E76
    
loc_2F25:
    test    rdi, rdi
    jz      short loc_2EC6
    mov     rax, rdi
    mov     rcx, r10
    xor     edi, edi
    
loc_2F32:
    test    al, 1
    jz      short loc_2F39
    xor     rdi, [rcx]
    
loc_2F39:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2F32
    jmp     short loc_2EC6
    
loc_2F44:
    call    ___stack_chk_fail
    

<get_crc_table>:
    
    lea     rax, crc_table
    retn
    

<crc32_z>:
    
    test    rsi, rsi
    jz      loc_33B8
    test    rdx, rdx
    not     edi
    jz      short loc_2FA3
    test    sil, 3
    jz      short loc_2FB0
    lea     rcx, crc_table
    jmp     short loc_2F86
    align 20h
    
loc_2F80:
    test    sil, 3
    jz      short loc_2FB0
    
loc_2F86:
    add     rsi, 1
    movzx   r8d, byte ptr [rsi-1]
    xor     r8d, edi
    shr     edi, 8
    movzx   r8d, r8b
    xor     edi, [rcx+r8*4]
    sub     rdx, 1
    jnz     short loc_2F80
    
loc_2FA3:
    mov     eax, edi
    not     eax
    retn
    align 10h
    
loc_2FB0:
    cmp     rdx, 1Fh
    push    rbx
    jbe     loc_3178
    lea     rax, [rdx-20h]
    lea     rcx, crc_table
    and     rax, 0FFFFFFFFFFFFFFE0h
    lea     r8, [rsi+rax+20h]
    nop
    
loc_2FD0:
    mov     eax, [rsi]
    xor     eax, edi
    mov     edi, eax
    movzx   r10d, al
    mov     r9d, eax
    shr     edi, 18h
    mov     ebx, [rcx+r10*4+0C00h]
    shr     r9d, 10h
    xor     ebx, [rcx+rdi*4]
    movzx   eax, ah
    movzx   r9d, r9b
    xor     ebx, [rsi+4]
    xor     ebx, [rcx+rax*4+800h]
    xor     ebx, [rcx+r9*4+400h]
    mov     r9d, ebx
    movzx   eax, bl
    mov     edi, ebx
    shr     r9d, 18h
    mov     eax, [rcx+rax*4+0C00h]
    shr     edi, 10h
    xor     eax, [rcx+r9*4]
    movzx   ebx, bh
    movzx   edi, dil
    xor     eax, [rsi+8]
    xor     eax, [rcx+rbx*4+800h]
    xor     eax, [rcx+rdi*4+400h]
    mov     r9d, eax
    movzx   r10d, al
    mov     edi, eax
    shr     r9d, 18h
    mov     ebx, [rcx+r10*4+0C00h]
    shr     edi, 10h
    xor     ebx, [rcx+r9*4]
    movzx   eax, ah
    movzx   edi, dil
    xor     ebx, [rsi+0Ch]
    xor     ebx, [rcx+rax*4+800h]
    xor     ebx, [rcx+rdi*4+400h]
    mov     r9d, ebx
    movzx   eax, bl
    mov     edi, ebx
    shr     r9d, 18h
    mov     eax, [rcx+rax*4+0C00h]
    shr     edi, 10h
    xor     eax, [rcx+r9*4]
    movzx   ebx, bh
    movzx   edi, dil
    xor     eax, [rsi+10h]
    xor     eax, [rcx+rbx*4+800h]
    xor     eax, [rcx+rdi*4+400h]
    mov     r9d, eax
    movzx   r10d, al
    mov     edi, eax
    shr     r9d, 18h
    mov     ebx, [rcx+r10*4+0C00h]
    shr     edi, 10h
    xor     ebx, [rcx+r9*4]
    movzx   eax, ah
    movzx   edi, dil
    xor     ebx, [rsi+14h]
    xor     ebx, [rcx+rax*4+800h]
    xor     ebx, [rcx+rdi*4+400h]
    mov     edi, ebx
    mov     r9d, ebx
    movzx   eax, bl
    shr     edi, 10h
    shr     r9d, 18h
    mov     eax, [rcx+rax*4+0C00h]
    xor     eax, [rcx+r9*4]
    movzx   ebx, bh
    movzx   edi, dil
    xor     eax, [rsi+18h]
    add     rsi, 20h
    xor     eax, [rcx+rbx*4+800h]
    xor     eax, [rcx+rdi*4+400h]
    mov     r9d, eax
    movzx   r10d, al
    mov     edi, eax
    shr     r9d, 18h
    mov     ebx, [rcx+r10*4+0C00h]
    shr     edi, 10h
    xor     ebx, [rcx+r9*4]
    movzx   eax, ah
    movzx   edi, dil
    xor     ebx, [rsi-4]
    xor     ebx, [rcx+rax*4+800h]
    xor     ebx, [rcx+rdi*4+400h]
    mov     r9d, ebx
    mov     eax, ebx
    movzx   edi, bl
    shr     r9d, 18h
    shr     eax, 10h
    mov     edi, [rcx+rdi*4+0C00h]
    movzx   ebx, bh
    xor     edi, [rcx+r9*4]
    movzx   eax, al
    xor     edi, [rcx+rbx*4+800h]
    xor     edi, [rcx+rax*4+400h]
    cmp     rsi, r8
    jnz     loc_2FD0
    and     edx, 1Fh
    
loc_3178:
    cmp     rdx, 3
    jbe     loc_3366
    mov     eax, [rsi]
    lea     r8, crc_table
    xor     eax, edi
    mov     edi, eax
    movzx   r9d, al
    mov     ecx, eax
    shr     edi, 18h
    movzx   eax, ah
    shr     ecx, 10h
    mov     edi, [r8+rdi*4]
    xor     edi, [r8+r9*4+0C00h]
    movzx   ecx, cl
    xor     edi, [r8+rax*4+800h]
    lea     rax, [rdx-4]
    xor     edi, [r8+rcx*4+400h]
    cmp     rax, 3
    jbe     loc_335A
    mov     ecx, [rsi+4]
    xor     ecx, edi
    mov     edi, ecx
    movzx   r10d, cl
    mov     r9d, ecx
    shr     edi, 18h
    movzx   ecx, ch
    shr     r9d, 10h
    mov     edi, [r8+rdi*4]
    xor     edi, [r8+r10*4+0C00h]
    movzx   r9d, r9b
    xor     edi, [r8+rcx*4+800h]
    lea     rcx, [rdx-8]
    xor     edi, [r8+r9*4+400h]
    cmp     rcx, 3
    jbe     loc_335A
    mov     ecx, [rsi+8]
    xor     ecx, edi
    mov     edi, ecx
    movzx   r10d, cl
    mov     r9d, ecx
    shr     edi, 18h
    movzx   ecx, ch
    shr     r9d, 10h
    mov     edi, [r8+rdi*4]
    xor     edi, [r8+r10*4+0C00h]
    movzx   r9d, r9b
    xor     edi, [r8+rcx*4+800h]
    lea     rcx, [rdx-0Ch]
    xor     edi, [r8+r9*4+400h]
    cmp     rcx, 3
    jbe     loc_335A
    mov     ecx, [rsi+0Ch]
    xor     ecx, edi
    mov     edi, ecx
    movzx   r10d, cl
    mov     r9d, ecx
    shr     edi, 18h
    movzx   ecx, ch
    shr     r9d, 10h
    mov     edi, [r8+rdi*4]
    xor     edi, [r8+r10*4+0C00h]
    movzx   r9d, r9b
    xor     edi, [r8+rcx*4+800h]
    lea     rcx, [rdx-10h]
    xor     edi, [r8+r9*4+400h]
    cmp     rcx, 3
    jbe     loc_335A
    mov     ecx, [rsi+10h]
    xor     ecx, edi
    mov     edi, ecx
    movzx   r10d, cl
    mov     r9d, ecx
    shr     edi, 18h
    movzx   ecx, ch
    shr     r9d, 10h
    mov     edi, [r8+rdi*4]
    xor     edi, [r8+r10*4+0C00h]
    movzx   r9d, r9b
    xor     edi, [r8+rcx*4+800h]
    lea     rcx, [rdx-14h]
    xor     edi, [r8+r9*4+400h]
    cmp     rcx, 3
    jbe     short loc_335A
    mov     ecx, [rsi+14h]
    xor     ecx, edi
    mov     edi, ecx
    movzx   r10d, cl
    mov     r9d, ecx
    shr     edi, 18h
    movzx   ecx, ch
    shr     r9d, 10h
    mov     edi, [r8+rdi*4]
    xor     edi, [r8+r10*4+0C00h]
    movzx   r9d, r9b
    xor     edi, [r8+rcx*4+800h]
    lea     rcx, [rdx-18h]
    xor     edi, [r8+r9*4+400h]
    cmp     rcx, 3
    jbe     short loc_335A
    mov     ecx, [rsi+18h]
    xor     ecx, edi
    mov     r10d, ecx
    mov     r9d, ecx
    movzx   edi, cl
    shr     r10d, 18h
    shr     r9d, 10h
    mov     edi, [r8+rdi*4+0C00h]
    movzx   ecx, ch
    xor     edi, [r8+r10*4]
    movzx   r9d, r9b
    xor     edi, [r8+rcx*4+800h]
    xor     edi, [r8+r9*4+400h]
    
loc_335A:
    shr     rax, 2
    and     edx, 3
    lea     rsi, [rsi+rax*4+4]
    
loc_3366:
    test    rdx, rdx
    jz      short loc_33AD
    movzx   ecx, byte ptr [rsi]
    lea     r8, crc_table
    xor     ecx, edi
    shr     edi, 8
    movzx   ecx, cl
    xor     edi, [r8+rcx*4]
    cmp     rdx, 1
    jz      short loc_33AD
    movzx   ecx, byte ptr [rsi+1]
    xor     ecx, edi
    shr     edi, 8
    movzx   ecx, cl
    xor     edi, [r8+rcx*4]
    cmp     rdx, 2
    jz      short loc_33AD
    movzx   edx, byte ptr [rsi+2]
    xor     edx, edi
    shr     edi, 8
    movzx   edx, dl
    xor     edi, [r8+rdx*4]
    
loc_33AD:
    mov     eax, edi
    not     eax
    pop     rbx
    retn
    align 8
    
loc_33B8:
    xor     eax, eax
    retn
    

<crc32>:
    
    mov     edx, edx
    jmp     _crc32_z
    

<crc32_combine>:
    
    jmp     crc32_combine_
    

<crc32_combine64>:
    
    jmp     crc32_combine_
    

<longest_match>:
    
    var_48= qword ptr -48h
    var_3C= dword ptr -3Ch
    var_38= qword ptr -38h
    
    
    push    r15
    push    r14
    mov     edx, 0
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     r8d, [rdi+0ACh]
    mov     r11d, [rdi+50h]
    mov     r10, [rdi+60h]
    mov     eax, [rdi+0B8h]
    mov     ecx, [rdi+0BCh]
    mov     r15d, [rdi+0D0h]
    lea     ebx, [r11-106h]
    mov     ebp, [rdi+58h]
    lea     r9d, [r8+106h]
    lea     r12, [r10+r8]
    sub     r9d, r11d
    cmp     r8d, ebx
    mov     rbx, [rdi+70h]
    cmovbe  r9d, edx
    cmp     eax, [rdi+0CCh]
    lea     rdx, [r10+r8+102h]
    mov     [rsp+30h+var_48], rdx
    movsxd  rdx, eax
    movzx   r13d, byte ptr [r12+rdx-1]
    movzx   r11d, byte ptr [r12+rdx]
    jb      short loc_346A
    shr     ecx, 2
    
loc_346A:
    mov     r14d, [rdi+0B4h]
    mov     [rsp+30h+var_38], rdi
    cmp     r14d, r15d
    cmovb   r15d, r14d
    mov     [rsp+30h+var_3C], r15d
    jmp     short loc_348D
    align 8
    
loc_3488:
    sub     ecx, 1
    jz      short loc_34CB
    
loc_348D:
    mov     edx, esi
    movsxd  rdi, eax
    add     rdx, r10
    cmp     [rdx+rdi], r11b
    jnz     short loc_34C0
    cmp     [rdx+rdi-1], r13b
    jnz     short loc_34C0
    movzx   edi, byte ptr [r12]
    cmp     [rdx], dil
    jnz     short loc_34C0
    movzx   edi, byte ptr [r12+1]
    cmp     [rdx+1], dil
    jz      short loc_34E0
    nop     dword ptr [rax+rax+00000000h]
    
loc_34C0:
    and     esi, ebp
    movzx   esi, word ptr [rbx+rsi*2]
    cmp     r9d, esi
    jb      short loc_3488
    
loc_34CB:
    cmp     eax, r14d
    pop     rbx
    cmova   eax, r14d
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_34E0:
    lea     rdi, [r12+2]
    add     rdx, 2
    nop     dword ptr [rax+00000000h]
    
loc_34F0:
    movzx   r8d, byte ptr [rdx+1]
    cmp     [rdi+1], r8b
    jnz     loc_35BB
    movzx   r15d, byte ptr [rdx+2]
    cmp     [rdi+2], r15b
    jnz     loc_35C1
    movzx   r8d, byte ptr [rdx+3]
    cmp     [rdi+3], r8b
    jnz     loc_35C7
    movzx   r15d, byte ptr [rdx+4]
    cmp     [rdi+4], r15b
    jnz     loc_35CD
    movzx   r8d, byte ptr [rdx+5]
    cmp     [rdi+5], r8b
    jnz     loc_35D3
    movzx   r15d, byte ptr [rdx+6]
    cmp     [rdi+6], r15b
    jnz     loc_35D9
    movzx   r8d, byte ptr [rdx+7]
    cmp     [rdi+7], r8b
    jnz     loc_35DF
    add     rdx, 8
    add     rdi, 8
    movzx   r15d, byte ptr [rdx]
    cmp     [rdi], r15b
    setz    r15b
    cmp     [rsp+30h+var_48], rdi
    setnbe  r8b
    test    r15b, r8b
    jnz     loc_34F0
    
loc_357E:
    mov     rdx, [rsp+30h+var_48]
    sub     rdx, rdi
    mov     edi, 102h
    sub     edi, edx
    cmp     eax, edi
    jge     loc_34C0
    cmp     edi, [rsp+30h+var_3C]
    mov     rax, [rsp+30h+var_38]
    mov     [rax+0B0h], esi
    jge     short loc_35E5
    movsxd  rax, edi
    movzx   r13d, byte ptr [r12+rax-1]
    movzx   r11d, byte ptr [r12+rax]
    mov     eax, edi
    jmp     loc_34C0
    
loc_35BB:
    add     rdi, 1
    jmp     short loc_357E
    
loc_35C1:
    add     rdi, 2
    jmp     short loc_357E
    
loc_35C7:
    add     rdi, 3
    jmp     short loc_357E
    
loc_35CD:
    add     rdi, 4
    jmp     short loc_357E
    
loc_35D3:
    add     rdi, 5
    jmp     short loc_357E
    
loc_35D9:
    add     rdi, 6
    jmp     short loc_357E
    
loc_35DF:
    add     rdi, 7
    jmp     short loc_357E
    
loc_35E5:
    mov     eax, edi
    jmp     loc_34CB
    

<flush_pending>:
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 8
    mov     r12, [rdi+38h]
    mov     rdi, r12
    call    _tr_flush_bits
    mov     rax, [r12+28h]
    cmp     [rbx+20h], eax
    mov     ebp, eax
    cmovbe  ebp, [rbx+20h]
    test    ebp, ebp
    jnz     short loc_3630
    
loc_361B:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_3630:
    mov     rdi, [rbx+18h]
    mov     rsi, [r12+20h]
    mov     r13d, ebp
    mov     rdx, r13
    call    _memcpy
    add     [rbx+18h], r13
    add     [r12+20h], r13
    add     [rbx+28h], r13
    sub     [rbx+20h], ebp
    sub     [r12+28h], r13
    jnz     short loc_361B
    mov     rax, [r12+10h]
    mov     [r12+20h], rax
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    

<fill_window>:
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 8
    mov     r13d, [rdi+50h]
    mov     edi, [rdi+0B4h]
    mov     eax, r13d
    lea     ebp, [r13-106h]
    jmp     short loc_36E3
    align 20h
    
loc_36A0:
    test    r12d, r12d
    jnz     loc_3A58
    
loc_36A9:
    mov     edx, [rbx+172Ch]
    add     edi, r12d
    mov     [rbx+0B4h], edi
    lea     eax, [rdi+rdx]
    cmp     eax, 2
    ja      loc_38D8
    
loc_36C4:
    cmp     edi, 105h
    ja      loc_3828
    mov     rax, [rbx]
    mov     r8d, [rax+8]
    test    r8d, r8d
    jz      loc_3828
    mov     eax, [rbx+50h]
    
loc_36E3:
    mov     ecx, [rbx+68h]
    mov     esi, [rbx+0ACh]
    add     eax, ebp
    sub     ecx, edi
    mov     edi, ecx
    sub     edi, esi
    cmp     esi, eax
    mov     r12d, edi
    jnb     short loc_3770
    mov     r14, [rbx]
    mov     r15d, [r14+8]
    test    r15d, r15d
    jz      loc_3828
    
loc_370B:
    cmp     r12d, r15d
    mov     edi, [rbx+0B4h]
    jb      short loc_36A0
    xor     eax, eax
    
loc_3718:
    mov     ecx, esi
    mov     rsi, [r14]
    mov     r12d, r15d
    add     rcx, rdi
    add     rcx, [rbx+60h]
    mov     rdx, r12
    mov     [r14+8], eax
    mov     rdi, rcx
    call    _memcpy
    mov     rcx, rax
    mov     rax, [r14+38h]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jz      loc_39D0
    cmp     eax, 2
    jz      loc_39F0
    
loc_3752:
    add     [r14], r12
    add     [r14+10h], r12
    mov     r12d, r15d
    mov     edi, [rbx+0B4h]
    jmp     loc_36A9
    align 10h
    
loc_3770:
    mov     rdi, [rbx+60h]
    mov     r14d, r13d
    mov     edx, r13d
    sub     edx, r12d
    lea     rsi, [rdi+r14]
    call    _memcpy
    mov     edi, [rbx+84h]
    mov     rax, [rbx+78h]
    mov     esi, [rbx+0ACh]
    sub     [rbx+0B0h], r13d
    sub     [rbx+98h], r14
    mov     ecx, [rbx+50h]
    mov     rdx, rdi
    lea     rax, [rax+rdi*2]
    sub     esi, r13d
    sub     edx, 1
    not     rdx
    mov     [rbx+0ACh], esi
    lea     rdi, [rax+rdx*2]
    nop     dword ptr [rax+00000000h]
    
loc_37C8:
    sub     rax, 2
    movzx   edx, word ptr [rax]
    cmp     ecx, edx
    ja      loc_38C0
    sub     edx, ecx
    cmp     rdi, rax
    mov     [rax], dx
    jnz     short loc_37C8
    
loc_37E1:
    mov     rdx, [rbx+70h]
    mov     eax, ecx
    lea     rax, [rdx+rax*2]
    lea     edx, [rcx-1]
    not     rdx
    lea     rdi, [rax+rdx*2]
    nop     dword ptr [rax]
    
loc_37F8:
    sub     rax, 2
    movzx   edx, word ptr [rax]
    cmp     ecx, edx
    ja      loc_38A8
    sub     edx, ecx
    cmp     rdi, rax
    mov     [rax], dx
    jnz     short loc_37F8
    add     r12d, r13d
    
loc_3814:
    mov     r14, [rbx]
    mov     r15d, [r14+8]
    test    r15d, r15d
    jnz     loc_370B
    nop     dword ptr [rax+00h]
    
loc_3828:
    mov     rcx, [rbx+1738h]
    mov     rax, [rbx+68h]
    cmp     rcx, rax
    jnb     short loc_3895
    mov     esi, [rbx+0ACh]
    mov     edx, [rbx+0B4h]
    add     rsi, rdx
    cmp     rcx, rsi
    jnb     loc_3980
    sub     rax, rsi
    mov     edx, 102h
    cmp     rax, 102h
    cmovbe  rdx, rax
    mov     rax, [rbx+60h]
    add     rax, rsi
    cmp     edx, 8
    jnb     loc_3A08
    test    dl, 4
    jnz     loc_3A35
    test    edx, edx
    jz      short loc_388B
    test    dl, 2
    mov     byte ptr [rax], 0
    jnz     loc_3A4A
    
loc_388B:
    add     rdx, rsi
    mov     [rbx+1738h], rdx
    
loc_3895:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_38A8:
    xor     r9d, r9d
    cmp     rdi, rax
    mov     [rax], r9w
    jnz     loc_37F8
    add     r12d, r13d
    jmp     loc_3814
    
loc_38C0:
    xor     r10d, r10d
    cmp     rdi, rax
    mov     [rax], r10w
    jnz     loc_37C8
    jmp     loc_37E1
    align 8
    
loc_38D8:
    mov     esi, [rbx+0ACh]
    mov     r10, [rbx+60h]
    mov     ecx, [rbx+90h]
    mov     r11d, [rbx+8Ch]
    sub     esi, edx
    mov     eax, esi
    movzx   r8d, byte ptr [r10+rax]
    lea     eax, [rsi+1]
    mov     [rbx+80h], r8d
    movzx   eax, byte ptr [r10+rax]
    shl     r8d, cl
    xor     r8d, eax
    mov     eax, r8d
    and     eax, r11d
    mov     [rbx+80h], eax
    jmp     short loc_3974
    align 20h
    
loc_3920:
    lea     r8d, [rsi+2]
    shl     eax, cl
    mov     r12d, esi
    and     r12d, [rbx+58h]
    sub     edx, 1
    movzx   r8d, byte ptr [r10+r8]
    xor     eax, r8d
    mov     r8, [rbx+78h]
    and     eax, r11d
    mov     r9d, eax
    mov     [rbx+80h], eax
    lea     r8, [r8+r9*2]
    mov     r9, [rbx+70h]
    movzx   r14d, word ptr [r8]
    mov     [r9+r12*2], r14w
    mov     [r8], si
    lea     r8d, [rdi+rdx]
    add     esi, 1
    mov     [rbx+172Ch], edx
    cmp     r8d, 2
    jbe     loc_36C4
    
loc_3974:
    test    edx, edx
    jnz     short loc_3920
    jmp     loc_36C4
    align 20h
    
loc_3980:
    lea     rdx, [rsi+102h]
    cmp     rcx, rdx
    jnb     loc_3895
    sub     rsi, rcx
    sub     rax, rcx
    lea     rbp, [rsi+102h]
    cmp     rax, rbp
    cmovbe  rbp, rax
    add     rcx, [rbx+60h]
    xor     esi, esi
    mov     edx, ebp
    mov     rdi, rcx
    call    _memset
    add     [rbx+1738h], rbp
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_39D0:
    mov     rdi, [r14+60h]
    mov     edx, r15d
    mov     rsi, rcx
    call    _adler32
    mov     [r14+60h], rax
    jmp     loc_3752
    align 10h
    
loc_39F0:
    mov     rdi, [r14+60h]
    mov     edx, r15d
    mov     rsi, rcx
    call    _crc32
    mov     [r14+60h], rax
    jmp     loc_3752
    
loc_3A08:
    lea     rdi, [rax+8]
    mov     ecx, edx
    mov     qword ptr [rax], 0
    mov     qword ptr [rax+rcx-8], 0
    and     rdi, 0FFFFFFFFFFFFFFF8h
    sub     rax, rdi
    lea     ecx, [rdx+rax]
    xor     eax, eax
    shr     ecx, 3
    rep stosq
    jmp     loc_388B
    
loc_3A35:
    mov     ecx, edx
    mov     dword ptr [rax], 0
    mov     dword ptr [rax+rcx-4], 0
    jmp     loc_388B
    
loc_3A4A:
    mov     ecx, edx
    xor     edi, edi
    mov     [rax+rcx-2], di
    jmp     loc_388B
    
loc_3A58:
    mov     eax, r15d
    mov     r15d, r12d
    sub     eax, r12d
    jmp     loc_3718
    

<deflate_stored>:
    
    var_5C= dword ptr -5Ch
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 38h
    mov     rax, [rdi+18h]
    mov     rcx, [rdi]
    mov     [rsp+68h+var_5C], esi
    lea     r14, [rax-5]
    mov     eax, [rdi+50h]
    cmp     r14, rax
    cmovbe  rax, r14
    mov     [rsp+68h+var_58], rax
    mov     eax, [rcx+8]
    mov     [rsp+68h+var_3C], eax
    mov     edx, eax
    jmp     short loc_3B06
    align 10h
    
loc_3AB0:
    test    r15d, r15d
    mov     rcx, [rbx]
    jz      short loc_3AF2
    cmp     r15d, ebp
    mov     rsi, [rbx+98h]
    mov     rdi, [rcx+18h]
    cmova   r15d, ebp
    add     rsi, [rbx+60h]
    mov     r14d, r15d
    sub     ebp, r15d
    mov     rdx, r14
    call    _memcpy
    mov     rcx, [rbx]
    add     [rcx+18h], r14
    sub     [rcx+20h], r15d
    add     [rcx+28h], r14
    add     [rbx+98h], r14
    
loc_3AF2:
    test    ebp, ebp
    mov     edx, [rcx+8]
    jnz     loc_3C58
    test    r12d, r12d
    jnz     loc_3C85
    
loc_3B06:
    mov     eax, [rbx+1734h]
    mov     ebp, [rcx+20h]
    add     eax, 2Ah
    sar     eax, 3
    cmp     ebp, eax
    jb      loc_3D80
    mov     r8d, [rbx+0ACh]
    sub     r8d, [rbx+98h]
    sub     ebp, eax
    mov     esi, edx
    mov     eax, r8d
    mov     r15, rax
    add     rax, rsi
    lea     esi, [r15+rdx]
    cmp     rax, 0FFFFh
    mov     eax, 0FFFFh
    cmovb   eax, esi
    cmp     eax, ebp
    cmovbe  ebp, eax
    cmp     dword ptr [rsp+68h+var_58], ebp
    jbe     short loc_3B81
    mov     r10d, [rsp+68h+var_5C]
    test    ebp, ebp
    setz    dil
    cmp     r10d, 4
    setnz   al
    test    dil, al
    jnz     loc_3D80
    test    r10d, r10d
    jz      loc_3D80
    cmp     esi, ebp
    jnz     loc_3D80
    
loc_3B81:
    xor     r12d, r12d
    cmp     [rsp+68h+var_5C], 4
    jnz     short loc_3B97
    add     edx, r15d
    xor     r12d, r12d
    cmp     edx, ebp
    setz    r12b
    
loc_3B97:
    xor     edx, edx
    xor     esi, esi
    mov     ecx, r12d
    mov     rdi, rbx
    call    _tr_stored_block
    mov     rdx, [rbx+10h]
    mov     rax, [rbx+28h]
    mov     ecx, ebp
    mov     [rdx+rax-4], bpl
    mov     rdx, [rbx+10h]
    mov     rax, [rbx+28h]
    mov     [rdx+rax-3], ch
    mov     rdx, [rbx+10h]
    not     ecx
    mov     rax, [rbx+28h]
    mov     [rdx+rax-2], cl
    mov     rdx, [rbx+10h]
    mov     ecx, ebp
    mov     rax, [rbx+28h]
    not     ecx
    mov     [rdx+rax-1], ch
    mov     r13, [rbx]
    mov     r14, [r13+38h]
    mov     rdi, r14
    call    _tr_flush_bits
    mov     r9, [r14+28h]
    cmp     [r13+20h], r9d
    cmovbe  r9d, [r13+20h]
    test    r9d, r9d
    jz      loc_3AB0
    mov     rdi, [r13+18h]
    mov     rsi, [r14+20h]
    mov     r11d, r9d
    mov     rdx, r11
    mov     dword ptr [rsp+68h+var_48], r9d
    mov     [rsp+68h+var_50], r11
    call    _memcpy
    mov     r11, [rsp+68h+var_50]
    mov     r9d, dword ptr [rsp+68h+var_48]
    add     [r13+18h], r11
    add     [r14+20h], r11
    add     [r13+28h], r11
    sub     [r13+20h], r9d
    sub     [r14+28h], r11
    jnz     loc_3AB0
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     loc_3AB0
    align 8
    
loc_3C58:
    cmp     ebp, edx
    mov     r8, [rcx+18h]
    jb      loc_3D10
    test    edx, edx
    jnz     loc_418E
    
loc_3C6C:
    mov     eax, ebp
    sub     [rcx+20h], ebp
    add     [rcx+28h], rax
    add     r8, rax
    test    r12d, r12d
    mov     [rcx+18h], r8
    jz      loc_3B06
    
loc_3C85:
    mov     r12d, [rsp+68h+var_3C]
    mov     ebp, 1
    sub     r12d, edx
    jz      loc_3D90
    
loc_3C98:
    mov     eax, [rbx+50h]
    mov     rdi, [rbx+60h]
    cmp     eax, r12d
    jbe     loc_3FE0
    mov     r8d, [rbx+0ACh]
    mov     rsi, [rbx+68h]
    mov     r14d, r12d
    sub     rsi, r8
    mov     rdx, r8
    cmp     rsi, r14
    jbe     loc_40D8
    
loc_3CC5:
    mov     rsi, [rcx]
    mov     rdx, r14
    add     rdi, r8
    sub     rsi, r14
    call    _memcpy
    mov     edx, [rbx+0ACh]
    mov     eax, [rbx+50h]
    add     edx, r12d
    mov     [rbx+0ACh], edx
    
loc_3CE8:
    mov     ecx, [rbx+172Ch]
    mov     edi, edx
    mov     [rbx+98h], rdi
    sub     eax, ecx
    cmp     eax, r12d
    cmova   eax, r12d
    add     eax, ecx
    mov     [rbx+172Ch], eax
    jmp     loc_3D96
    align 10h
    
loc_3D10:
    mov     r9d, ebp
    
loc_3D13:
    mov     rsi, [rcx]
    sub     edx, r9d
    mov     r10d, r9d
    mov     [rcx+8], edx
    mov     rdi, r8
    mov     rdx, r10
    mov     [rsp+68h+var_40], r9d
    mov     [rsp+68h+var_48], rcx
    mov     [rsp+68h+var_50], r10
    call    _memcpy
    mov     rcx, [rsp+68h+var_48]
    mov     r8, rax
    mov     r10, [rsp+68h+var_50]
    mov     r9d, [rsp+68h+var_40]
    mov     rax, [rcx+38h]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jz      loc_3FB0
    cmp     eax, 2
    jz      loc_4068
    
loc_3D64:
    add     [rcx], r10
    add     [rcx+10h], r10
    mov     rcx, [rbx]
    mov     r8, [rcx+18h]
    mov     edx, [rcx+8]
    jmp     loc_3C6C
    align 20h
    
loc_3D80:
    mov     r12d, [rsp+68h+var_3C]
    xor     ebp, ebp
    sub     r12d, edx
    jnz     loc_3C98
    
loc_3D90:
    mov     edx, [rbx+0ACh]
    
loc_3D96:
    mov     ecx, edx
    cmp     [rbx+1738h], rcx
    mov     rsi, rcx
    jnb     short loc_3DAB
    mov     [rbx+1738h], rcx
    
loc_3DAB:
    test    ebp, ebp
    mov     eax, 3
    jnz     loc_3E72
    test    [rsp+68h+var_5C], 0FFFFFFFBh
    mov     r14, [rbx]
    mov     r12d, [r14+8]
    jz      loc_3E88
    test    r12d, r12d
    jnz     loc_3E88
    cmp     rcx, [rbx+98h]
    mov     eax, 1
    jz      loc_3E72
    nop     dword ptr [rax+rax+00000000h]
    
loc_3DF0:
    cmp     [rbx+1738h], rsi
    jnb     short loc_3E00
    mov     [rbx+1738h], rsi
    
loc_3E00:
    mov     eax, [rbx+1734h]
    mov     rdi, [rbx+18h]
    mov     ecx, 0FFFFh
    mov     rsi, [rbx+98h]
    add     eax, 2Ah
    sar     eax, 3
    sub     rdi, rax
    cmp     rdi, 0FFFFh
    mov     rax, rdi
    cmova   rax, rcx
    sub     edx, esi
    cmp     [rbx+50h], eax
    mov     ecx, eax
    cmovbe  ecx, [rbx+50h]
    mov     edi, eax
    cmp     ecx, edx
    jbe     loc_3F38
    mov     r11d, [rsp+68h+var_5C]
    test    edx, edx
    setnz   cl
    cmp     r11d, 4
    setz    al
    or      cl, al
    jz      short loc_3E70
    test    r11d, r11d
    jz      short loc_3E70
    mov     rax, [rbx]
    mov     r8d, [rax+8]
    test    r8d, r8d
    jnz     short loc_3E70
    cmp     edi, edx
    jnb     loc_4131
    
loc_3E70:
    xor     eax, eax
    
loc_3E72:
    add     rsp, 38h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_3E88:
    mov     ebp, edx
    not     ebp
    add     ebp, [rbx+68h]
    cmp     ebp, r12d
    jnb     short loc_3EA7
    mov     eax, [rbx+50h]
    mov     rcx, [rbx+98h]
    cmp     rcx, rax
    jge     loc_4010
    
loc_3EA7:
    cmp     ebp, r12d
    jbe     short loc_3EC8
    
loc_3EAC:
    test    r12d, r12d
    jz      loc_3DF0
    add     rsi, [rbx+60h]
    mov     ebp, r12d
    xor     eax, eax
    mov     rcx, rsi
    jmp     short loc_3EE8
    align 8
    
loc_3EC8:
    test    ebp, ebp
    jz      loc_3DF0
    add     rsi, [rbx+60h]
    cmp     ebp, r12d
    mov     rcx, rsi
    jnb     loc_417E
    mov     eax, r12d
    mov     r12d, ebp
    sub     eax, ebp
    
loc_3EE8:
    mov     rsi, [r14]
    mov     r15d, r12d
    mov     rdi, rcx
    mov     [r14+8], eax
    mov     rdx, r15
    call    _memcpy
    mov     rcx, rax
    mov     rax, [r14+38h]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jz      loc_4166
    cmp     eax, 2
    jz      loc_414E
    
loc_3F19:
    add     [r14], r15
    add     [r14+10h], r15
    
loc_3F20:
    mov     edx, [rbx+0ACh]
    add     edx, ebp
    mov     [rbx+0ACh], edx
    mov     esi, edx
    jmp     loc_3DF0
    align 8
    
loc_3F38:
    cmp     eax, edx
    cmova   eax, edx
    cmp     [rsp+68h+var_5C], 4
    jz      loc_4110
    
loc_3F48:
    xor     r12d, r12d
    
loc_3F4B:
    add     rsi, [rbx+60h]
    mov     ebp, eax
    mov     rdi, rbx
    mov     rdx, rbp
    mov     ecx, r12d
    call    _tr_stored_block
    add     [rbx+98h], rbp
    mov     rbx, [rbx]
    mov     r13, [rbx+38h]
    mov     rdi, r13
    call    _tr_flush_bits
    mov     rax, [r13+28h]
    cmp     [rbx+20h], eax
    mov     ebp, eax
    cmovbe  ebp, [rbx+20h]
    test    ebp, ebp
    jnz     loc_4098
    
loc_3F8A:
    test    r12d, r12d
    mov     eax, 2
    jz      loc_3E70
    add     rsp, 38h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_3FB0:
    mov     rdi, [rcx+60h]
    mov     edx, r9d
    mov     rsi, r8
    mov     [rsp+68h+var_48], r10
    mov     [rsp+68h+var_50], rcx
    call    _adler32
    mov     rcx, [rsp+68h+var_50]
    mov     r10, [rsp+68h+var_48]
    mov     [rcx+60h], rax
    jmp     loc_3D64
    align 20h
    
loc_3FE0:
    mov     rsi, [rcx]
    mov     edx, eax
    mov     dword ptr [rbx+1728h], 2
    sub     rsi, rdx
    call    _memcpy
    mov     edx, [rbx+50h]
    mov     [rbx+0ACh], edx
    mov     eax, edx
    jmp     loc_3CE8
    align 10h
    
loc_4010:
    mov     rdi, [rbx+60h]
    sub     rcx, rax
    sub     edx, eax
    mov     [rbx+98h], rcx
    mov     [rbx+0ACh], edx
    lea     rsi, [rdi+rax]
    call    _memcpy
    mov     eax, [rbx+1728h]
    cmp     eax, 1
    ja      short loc_4043
    add     eax, 1
    mov     [rbx+1728h], eax
    
loc_4043:
    mov     r14, [rbx]
    add     ebp, [rbx+50h]
    mov     esi, [rbx+0ACh]
    mov     r12d, [r14+8]
    mov     rdx, rsi
    cmp     ebp, r12d
    ja      loc_3EAC
    jmp     loc_3EC8
    align 8
    
loc_4068:
    mov     rdi, [rcx+60h]
    mov     edx, r9d
    mov     rsi, r8
    mov     [rsp+68h+var_48], r10
    mov     [rsp+68h+var_50], rcx
    call    _crc32
    mov     rcx, [rsp+68h+var_50]
    mov     r10, [rsp+68h+var_48]
    mov     [rcx+60h], rax
    jmp     loc_3D64
    align 8
    
loc_4098:
    mov     rdi, [rbx+18h]
    mov     rsi, [r13+20h]
    mov     r14d, ebp
    mov     rdx, r14
    call    _memcpy
    add     [rbx+18h], r14
    add     [r13+20h], r14
    add     [rbx+28h], r14
    sub     [rbx+20h], ebp
    sub     [r13+28h], r14
    jnz     loc_3F8A
    mov     rax, [r13+10h]
    mov     [r13+20h], rax
    jmp     loc_3F8A
    align 8
    
loc_40D8:
    sub     edx, eax
    lea     rsi, [rdi+rax]
    mov     [rbx+0ACh], edx
    call    _memcpy
    mov     eax, [rbx+1728h]
    cmp     eax, 1
    ja      short loc_40FD
    add     eax, 1
    mov     [rbx+1728h], eax
    
loc_40FD:
    mov     rcx, [rbx]
    mov     rdi, [rbx+60h]
    mov     r8d, [rbx+0ACh]
    jmp     loc_3CC5
    
loc_4110:
    mov     rcx, [rbx]
    mov     ecx, [rcx+8]
    test    ecx, ecx
    jnz     loc_3F48
    cmp     edi, edx
    mov     r12d, 1
    jb      loc_3F48
    jmp     loc_3F4B
    
loc_4131:
    cmp     edi, edx
    mov     eax, edx
    mov     r12d, 1
    cmovbe  eax, edi
    cmp     [rsp+68h+var_5C], 4
    jnz     loc_3F48
    jmp     loc_3F4B
    
loc_414E:
    mov     rdi, [r14+60h]
    mov     edx, r12d
    mov     rsi, rcx
    call    _crc32
    mov     [r14+60h], rax
    jmp     loc_3F19
    
loc_4166:
    mov     rdi, [r14+60h]
    mov     edx, r12d
    mov     rsi, rcx
    call    _adler32
    mov     [r14+60h], rax
    jmp     loc_3F19
    
loc_417E:
    test    r12d, r12d
    jz      loc_3F20
    xor     eax, eax
    jmp     loc_3EE8
    
loc_418E:
    mov     r9d, edx
    jmp     loc_3D13
    

<deflate_fast>:
    
    var_44= dword ptr -44h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    mov     [rsp+48h+var_40], esi
    
loc_41B5:
    mov     ebp, [rbx+0B4h]
    mov     edx, [rbx+0ACh]
    jmp     loc_42BF
    align 10h
    
loc_41D0:
    mov     r9d, edx
    sub     r9w, [rbx+0B0h]
    lea     ecx, [rax-3]
    movzx   eax, cl
    mov     [r8], r9w
    mov     [rbx+170Ch], edi
    lea     rdi, _length_code
    sub     r9d, 1
    mov     [rsi], cl
    movzx   eax, byte ptr [rdi+rax]
    add     word ptr [rbx+rax*4+4D8h], 1
    cmp     r9w, 0FFh
    ja      loc_47D0
    lea     rax, _dist_code
    movzx   r9d, r9w
    movzx   eax, byte ptr [rax+r9]
    
loc_4221:
    add     word ptr [rbx+rax*4+9C8h], 1
    xor     r10d, r10d
    mov     eax, [rbx+1708h]
    mov     r9d, [rbx+0A0h]
    mov     ebp, [rbx+0B4h]
    mov     r11, [rbx+60h]
    mov     ecx, [rbx+90h]
    sub     eax, 1
    cmp     eax, [rbx+170Ch]
    mov     r12d, [rbx+8Ch]
    mov     eax, [rbx+0ACh]
    setz    r10b
    sub     ebp, r9d
    cmp     r9d, [rbx+0C0h]
    mov     [rbx+0B4h], ebp
    ja      short loc_427F
    cmp     ebp, 2
    ja      loc_4850
    
loc_427F:
    lea     edx, [r9+rax]
    mov     dword ptr [rbx+0A0h], 0
    mov     eax, edx
    mov     [rbx+0ACh], edx
    movzx   esi, byte ptr [r11+rax]
    lea     eax, [rdx+1]
    mov     [rbx+80h], esi
    movzx   eax, byte ptr [r11+rax]
    shl     esi, cl
    xor     eax, esi
    and     r12d, eax
    mov     [rbx+80h], r12d
    
loc_42B6:
    test    r10d, r10d
    jnz     loc_43B1
    
loc_42BF:
    cmp     ebp, 105h
    jbe     loc_4430
    
loc_42CB:
    mov     rcx, [rbx+60h]
    lea     eax, [rdx+2]
    mov     edi, [rbx+80h]
    movzx   eax, byte ptr [rcx+rax]
    mov     ecx, [rbx+90h]
    shl     edi, cl
    mov     rcx, [rbx+78h]
    xor     eax, edi
    and     eax, [rbx+8Ch]
    mov     edi, edx
    and     edi, [rbx+58h]
    mov     [rbx+80h], eax
    lea     rax, [rcx+rax*2]
    mov     rcx, [rbx+70h]
    movzx   esi, word ptr [rax]
    test    esi, esi
    mov     [rcx+rdi*2], si
    mov     [rax], dx
    jz      short loc_4325
    mov     eax, [rbx+50h]
    mov     ecx, edx
    sub     ecx, esi
    sub     eax, 106h
    cmp     ecx, eax
    jbe     loc_48E0
    
loc_4325:
    mov     eax, [rbx+0A0h]
    
loc_432B:
    mov     ecx, [rbx+170Ch]
    mov     rdi, [rbx+1710h]
    lea     r8, [rdi+rcx*2]
    lea     edi, [rcx+1]
    add     rcx, [rbx+1700h]
    cmp     eax, 2
    mov     rsi, rcx
    ja      loc_41D0
    mov     eax, edx
    mov     rdx, [rbx+60h]
    xor     r9d, r9d
    xor     r10d, r10d
    movzx   eax, byte ptr [rdx+rax]
    mov     [r8], r9w
    mov     [rbx+170Ch], edi
    mov     [rcx], al
    add     word ptr [rbx+rax*4+0D4h], 1
    mov     eax, [rbx+1708h]
    sub     eax, 1
    cmp     eax, [rbx+170Ch]
    mov     eax, [rbx+0B4h]
    lea     ebp, [rax-1]
    mov     eax, [rbx+0ACh]
    setz    r10b
    test    r10d, r10d
    mov     [rbx+0B4h], ebp
    lea     edx, [rax+1]
    mov     [rbx+0ACh], edx
    jz      loc_42BF
    
loc_43B1:
    mov     rcx, [rbx+98h]
    xor     esi, esi
    sub     rdx, rcx
    test    rcx, rcx
    js      short loc_43CB
    mov     rsi, [rbx+60h]
    mov     ecx, ecx
    add     rsi, rcx
    
loc_43CB:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     rbp, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r13, [rbp+38h]
    mov     [rbx+98h], rax
    mov     rdi, r13
    call    _tr_flush_bits
    mov     rax, [r13+28h]
    cmp     [rbp+20h], eax
    mov     r12d, eax
    cmovbe  r12d, [rbp+20h]
    test    r12d, r12d
    jnz     loc_4926
    
loc_4409:
    mov     rax, [rbx]
    mov     edi, [rax+20h]
    test    edi, edi
    jnz     loc_41B5
    
loc_4417:
    xor     eax, eax
    
loc_4419:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_4430:
    mov     r13d, [rbx+50h]
    lea     edi, [r13-106h]
    mov     eax, r13d
    mov     [rsp+48h+var_44], edi
    jmp     short loc_4492
    align 8
    
loc_4448:
    test    r14d, r14d
    jnz     loc_4B14
    
loc_4451:
    mov     esi, [rbx+172Ch]
    add     ebp, r14d
    mov     [rbx+0B4h], ebp
    lea     eax, [rbp+rsi+0]
    cmp     eax, 2
    ja      loc_4688
    
loc_446D:
    cmp     ebp, 105h
    ja      loc_4730
    
loc_4479:
    mov     rax, [rbx]
    mov     r12d, [rax+8]
    test    r12d, r12d
    jz      loc_4830
    mov     edx, [rbx+0ACh]
    mov     eax, [rbx+50h]
    
loc_4492:
    mov     r14d, [rbx+68h]
    add     eax, [rsp+48h+var_44]
    sub     r14d, ebp
    sub     r14d, edx
    cmp     eax, edx
    jbe     short loc_4508
    mov     r15, [rbx]
    mov     r12d, [r15+8]
    test    r12d, r12d
    jz      loc_45C2
    
loc_44B4:
    cmp     r12d, r14d
    ja      short loc_4448
    xor     eax, eax
    
loc_44BB:
    add     rbp, rdx
    add     rbp, [rbx+60h]
    mov     rsi, [r15]
    mov     r14d, r12d
    mov     [r15+8], eax
    mov     rdx, r14
    mov     rdi, rbp
    call    _memcpy
    mov     rax, [r15+38h]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jz      loc_47F8
    cmp     eax, 2
    jz      loc_4810
    
loc_44F0:
    add     [r15], r14
    add     [r15+10h], r14
    mov     r14d, r12d
    mov     ebp, [rbx+0B4h]
    jmp     loc_4451
    align 8
    
loc_4508:
    mov     rdi, [rbx+60h]
    mov     ebp, r13d
    mov     edx, r13d
    sub     edx, r14d
    lea     rsi, [rdi+rbp]
    call    _memcpy
    mov     edi, [rbx+84h]
    mov     rax, [rbx+78h]
    mov     edx, [rbx+0ACh]
    sub     [rbx+0B0h], r13d
    sub     [rbx+98h], rbp
    mov     esi, [rbx+50h]
    mov     rcx, rdi
    lea     rax, [rax+rdi*2]
    sub     edx, r13d
    sub     ecx, 1
    not     rcx
    mov     [rbx+0ACh], edx
    lea     rdi, [rax+rcx*2]
    nop     dword ptr [rax+00000000h]
    
loc_4560:
    sub     rax, 2
    movzx   ecx, word ptr [rax]
    cmp     esi, ecx
    ja      loc_4670
    sub     ecx, esi
    cmp     rdi, rax
    mov     [rax], cx
    jnz     short loc_4560
    
loc_4579:
    mov     rcx, [rbx+70h]
    mov     eax, esi
    lea     rax, [rcx+rax*2]
    lea     ecx, [rsi-1]
    not     rcx
    lea     rdi, [rax+rcx*2]
    nop     dword ptr [rax]
    
loc_4590:
    sub     rax, 2
    movzx   ecx, word ptr [rax]
    cmp     esi, ecx
    ja      loc_4648
    sub     ecx, esi
    cmp     rdi, rax
    mov     [rax], cx
    jnz     short loc_4590
    mov     ebp, [rbx+0B4h]
    add     r14d, r13d
    
loc_45B2:
    mov     r15, [rbx]
    mov     r12d, [r15+8]
    test    r12d, r12d
    jnz     loc_44B4
    
loc_45C2:
    mov     rdi, [rbx+1738h]
    mov     rcx, [rbx+68h]
    cmp     rdi, rcx
    jnb     short loc_462E
    
loc_45D2:
    mov     esi, ebp
    add     rdx, rsi
    cmp     rdx, rdi
    jbe     loc_4758
    
loc_45E0:
    sub     rcx, rdx
    mov     rax, [rbx+60h]
    mov     esi, 102h
    cmp     rcx, 102h
    cmovbe  rsi, rcx
    add     rax, rdx
    cmp     esi, 8
    jnb     loc_48F9
    test    sil, 4
    jnz     loc_4AEF
    test    esi, esi
    jz      short loc_461E
    test    sil, 2
    mov     byte ptr [rax], 0
    jnz     loc_4B04
    
loc_461E:
    mov     ebp, [rbx+0B4h]
    add     rdx, rsi
    mov     [rbx+1738h], rdx
    
loc_462E:
    cmp     ebp, 105h
    jbe     loc_47A0
    
loc_463A:
    mov     edx, [rbx+0ACh]
    jmp     loc_42CB
    align 8
    
loc_4648:
    xor     r15d, r15d
    cmp     rdi, rax
    mov     [rax], r15w
    jnz     loc_4590
    add     r14d, r13d
    mov     ebp, [rbx+0B4h]
    jmp     loc_45B2
    align 10h
    
loc_4670:
    xor     ecx, ecx
    cmp     rdi, rax
    mov     [rax], cx
    jnz     loc_4560
    jmp     loc_4579
    align 8
    
loc_4688:
    mov     edi, [rbx+0ACh]
    mov     r8, [rbx+60h]
    mov     ecx, [rbx+90h]
    mov     r9d, [rbx+8Ch]
    sub     edi, esi
    mov     eax, edi
    movzx   edx, byte ptr [r8+rax]
    lea     eax, [rdi+1]
    mov     [rbx+80h], edx
    movzx   eax, byte ptr [r8+rax]
    shl     edx, cl
    xor     edx, eax
    mov     eax, edx
    and     eax, r9d
    mov     [rbx+80h], eax
    jmp     short loc_4720
    align 10h
    
loc_46D0:
    lea     edx, [rdi+2]
    shl     eax, cl
    mov     r11d, edi
    and     r11d, [rbx+58h]
    sub     esi, 1
    movzx   edx, byte ptr [r8+rdx]
    xor     eax, edx
    mov     rdx, [rbx+78h]
    and     eax, r9d
    mov     r10d, eax
    mov     [rbx+80h], eax
    lea     rdx, [rdx+r10*2]
    mov     r10, [rbx+70h]
    movzx   r12d, word ptr [rdx]
    mov     [r10+r11*2], r12w
    mov     [rdx], di
    lea     edx, [rbp+rsi+0]
    add     edi, 1
    mov     [rbx+172Ch], esi
    cmp     edx, 2
    jbe     loc_446D
    
loc_4720:
    test    esi, esi
    jnz     short loc_46D0
    cmp     ebp, 105h
    jbe     loc_4479
    
loc_4730:
    mov     rdi, [rbx+1738h]
    mov     rcx, [rbx+68h]
    mov     edx, [rbx+0ACh]
    cmp     rdi, rcx
    jnb     loc_42CB
    mov     esi, ebp
    add     rdx, rsi
    cmp     rdx, rdi
    ja      loc_45E0
    
loc_4758:
    add     rdx, 102h
    cmp     rdx, rdi
    jbe     loc_462E
    sub     rcx, rdi
    sub     rdx, rdi
    cmp     rcx, rdx
    cmovbe  rdx, rcx
    add     rdi, [rbx+60h]
    xor     esi, esi
    mov     rbp, rdx
    mov     edx, edx
    call    _memset
    add     [rbx+1738h], rbp
    mov     ebp, [rbx+0B4h]
    cmp     ebp, 105h
    ja      loc_463A
    xchg    ax, ax
    
loc_47A0:
    mov     r10d, [rsp+48h+var_40]
    test    r10d, r10d
    jz      loc_4417
    test    ebp, ebp
    mov     edx, [rbx+0ACh]
    jz      loc_4960
    cmp     ebp, 2
    jbe     loc_4325
    jmp     loc_42CB
    align 10h
    
loc_47D0:
    shr     r9w, 7
    lea     rdi, _dist_code
    lea     rax, [r9+100h]
    and     eax, 3FFh
    movzx   eax, byte ptr [rdi+rax]
    jmp     loc_4221
    align 8
    
loc_47F8:
    mov     rdi, [r15+60h]
    mov     edx, r12d
    mov     rsi, rbp
    call    _adler32
    mov     [r15+60h], rax
    jmp     loc_44F0
    
loc_4810:
    mov     rdi, [r15+60h]
    mov     edx, r12d
    mov     rsi, rbp
    call    _crc32
    mov     [r15+60h], rax
    jmp     loc_44F0
    align 10h
    
loc_4830:
    mov     rdi, [rbx+1738h]
    mov     rcx, [rbx+68h]
    cmp     rcx, rdi
    jbe     loc_47A0
    mov     edx, [rbx+0ACh]
    jmp     loc_45D2
    align 10h
    
loc_4850:
    mov     edi, [rbx+58h]
    lea     r8d, [r9-1]
    mov     r14, [rbx+78h]
    mov     r13, [rbx+70h]
    mov     edx, [rbx+80h]
    lea     esi, [rax+1]
    mov     [rsp+48h+var_3C], eax
    mov     [rbx+0A0h], r8d
    mov     [rsp+48h+var_44], r9d
    mov     eax, edi
    nop     word ptr [rax+rax+00h]
    
loc_4880:
    lea     edi, [rsi+2]
    mov     [rbx+0ACh], esi
    shl     edx, cl
    mov     r15d, eax
    sub     r8d, 1
    movzx   edi, byte ptr [r11+rdi]
    and     r15d, esi
    xor     edx, edi
    and     edx, r12d
    mov     edi, edx
    mov     [rbx+80h], edx
    lea     rdi, [r14+rdi*2]
    movzx   r9d, word ptr [rdi]
    mov     [r13+r15*2+0], r9w
    mov     [rdi], si
    add     esi, 1
    test    r8d, r8d
    mov     [rbx+0A0h], r8d
    jnz     short loc_4880
    mov     r9d, [rsp+48h+var_44]
    mov     eax, [rsp+48h+var_3C]
    lea     edx, [r9+rax]
    mov     [rbx+0ACh], edx
    jmp     loc_42B6
    align 20h
    
loc_48E0:
    mov     rdi, rbx
    call    longest_match
    mov     edx, [rbx+0ACh]
    mov     [rbx+0A0h], eax
    jmp     loc_432B
    
loc_48F9:
    lea     rdi, [rax+8]
    mov     ecx, esi
    mov     qword ptr [rax], 0
    mov     qword ptr [rax+rcx-8], 0
    and     rdi, 0FFFFFFFFFFFFFFF8h
    sub     rax, rdi
    lea     ecx, [rsi+rax]
    xor     eax, eax
    shr     ecx, 3
    rep stosq
    jmp     loc_461E
    
loc_4926:
    mov     rdi, [rbp+18h]
    mov     rsi, [r13+20h]
    mov     r14d, r12d
    mov     rdx, r14
    call    _memcpy
    add     [rbp+18h], r14
    add     [r13+20h], r14
    add     [rbp+28h], r14
    sub     [rbp+20h], r12d
    sub     [r13+28h], r14
    jnz     loc_4409
    mov     rax, [r13+10h]
    mov     [r13+20h], rax
    jmp     loc_4409
    
loc_4960:
    cmp     edx, 2
    mov     eax, 2
    cmovbe  eax, edx
    cmp     [rsp+48h+var_40], 4
    mov     [rbx+172Ch], eax
    jz      loc_4A03
    mov     ecx, [rbx+170Ch]
    mov     eax, 1
    test    ecx, ecx
    jz      loc_4419
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_49A9
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_49A9:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     rbp, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r12, [rbp+38h]
    mov     [rbx+98h], rax
    mov     rdi, r12
    call    _tr_flush_bits
    mov     r13, [r12+28h]
    cmp     [rbp+20h], r13d
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     loc_4AB0
    
loc_49E6:
    mov     rax, [rbx]
    mov     eax, [rax+20h]
    test    eax, eax
    setnz   al
    add     rsp, 18h
    pop     rbx
    movzx   eax, al
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_4A03:
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_4A1D
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_4A1D:
    mov     ecx, 1
    mov     rdi, rbx
    call    _tr_flush_block
    mov     rbp, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r12, [rbp+38h]
    mov     [rbx+98h], rax
    mov     rdi, r12
    call    _tr_flush_bits
    mov     r13, [r12+28h]
    cmp     [rbp+20h], r13d
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     short loc_4A78
    
loc_4A59:
    mov     rax, [rbx]
    mov     esi, [rax+20h]
    xor     eax, eax
    test    esi, esi
    setnz   al
    add     rsp, 18h
    pop     rbx
    add     eax, 2
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_4A78:
    mov     rdi, [rbp+18h]
    mov     rsi, [r12+20h]
    mov     r14d, r13d
    mov     rdx, r14
    call    _memcpy
    add     [rbp+18h], r14
    add     [r12+20h], r14
    add     [rbp+28h], r14
    sub     [rbp+20h], r13d
    sub     [r12+28h], r14
    jnz     short loc_4A59
    mov     rax, [r12+10h]
    mov     [r12+20h], rax
    jmp     short loc_4A59
    
loc_4AB0:
    mov     rdi, [rbp+18h]
    mov     rsi, [r12+20h]
    mov     r14d, r13d
    mov     rdx, r14
    call    _memcpy
    add     [rbp+18h], r14
    add     [r12+20h], r14
    add     [rbp+28h], r14
    sub     [rbp+20h], r13d
    sub     [r12+28h], r14
    jnz     loc_49E6
    mov     rax, [r12+10h]
    mov     [r12+20h], rax
    jmp     loc_49E6
    
loc_4AEF:
    mov     ecx, esi
    mov     dword ptr [rax], 0
    mov     dword ptr [rax+rcx-4], 0
    jmp     loc_461E
    
loc_4B04:
    mov     ecx, esi
    xor     r11d, r11d
    mov     [rax+rcx-2], r11w
    jmp     loc_461E
    
loc_4B14:
    mov     eax, r12d
    mov     r12d, r14d
    sub     eax, r14d
    jmp     loc_44BB
    

<deflate_slow>:
    
    var_3C= dword ptr -3Ch
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    mov     [rsp+48h+var_3C], esi
    
loc_4B45:
    mov     r8d, [rbx+0B4h]
    mov     edx, [rbx+0ACh]
    nop     word ptr [rax+rax+00h]
    
loc_4B58:
    cmp     r8d, 105h
    jbe     loc_4CE9
    
loc_4B65:
    mov     r9d, [rbx+0B0h]
    mov     edi, [rbx+0A0h]
    
loc_4B72:
    mov     rcx, [rbx+60h]
    lea     eax, [rdx+2]
    mov     esi, [rbx+80h]
    mov     r8d, edx
    and     r8d, [rbx+58h]
    movzx   eax, byte ptr [rcx+rax]
    mov     ecx, [rbx+90h]
    shl     esi, cl
    mov     rcx, [rbx+78h]
    xor     eax, esi
    and     eax, [rbx+8Ch]
    mov     [rbx+80h], eax
    lea     rax, [rcx+rax*2]
    mov     rcx, [rbx+70h]
    movzx   esi, word ptr [rax]
    test    esi, esi
    mov     [rcx+r8*2], si
    mov     [rax], dx
    mov     [rbx+0B8h], edi
    mov     [rbx+0A4h], r9d
    mov     dword ptr [rbx+0A0h], 2
    jz      loc_4DC8
    cmp     [rbx+0C0h], edi
    jbe     loc_4DC8
    mov     eax, [rbx+50h]
    mov     r8d, edx
    sub     r8d, esi
    lea     ecx, [rax-106h]
    mov     eax, 2
    cmp     r8d, ecx
    jbe     loc_53F0
    nop
    
loc_4C00:
    cmp     edi, 2
    jbe     short loc_4C0D
    cmp     edi, eax
    jnb     loc_5120
    
loc_4C0D:
    mov     r11d, [rbx+0A8h]
    test    r11d, r11d
    jz      loc_4CB8
    mov     ecx, [rbx+170Ch]
    lea     eax, [rdx-1]
    mov     rdx, [rbx+60h]
    mov     rsi, [rbx+1710h]
    xor     r10d, r10d
    movzx   eax, byte ptr [rdx+rax]
    mov     [rsi+rcx*2], r10w
    mov     rsi, [rbx+1700h]
    mov     rdx, rcx
    add     edx, 1
    mov     [rbx+170Ch], edx
    mov     [rsi+rcx], al
    add     word ptr [rbx+rax*4+0D4h], 1
    mov     eax, [rbx+1708h]
    sub     eax, 1
    cmp     [rbx+170Ch], eax
    jz      loc_52F0
    
loc_4C71:
    mov     eax, [rbx+0ACh]
    lea     edx, [rax+1]
    mov     eax, [rbx+0B4h]
    mov     [rbx+0ACh], edx
    lea     r8d, [rax-1]
    mov     rax, [rbx]
    mov     [rbx+0B4h], r8d
    mov     r9d, [rax+20h]
    test    r9d, r9d
    jnz     loc_4B58
    
loc_4CA1:
    xor     eax, eax
    
loc_4CA3:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_4CB8:
    mov     eax, [rbx+0B4h]
    add     edx, 1
    mov     dword ptr [rbx+0A8h], 1
    mov     [rbx+0ACh], edx
    lea     r8d, [rax-1]
    cmp     r8d, 105h
    mov     [rbx+0B4h], r8d
    ja      loc_4B65
    
loc_4CE9:
    mov     r12d, [rbx+50h]
    mov     eax, r12d
    lea     ebp, [r12-106h]
    jmp     short loc_4D4C
    align 20h
    
loc_4D00:
    test    r13d, r13d
    jnz     loc_569C
    
loc_4D09:
    mov     esi, [rbx+172Ch]
    add     r8d, r13d
    mov     [rbx+0B4h], r8d
    lea     eax, [r8+rsi]
    cmp     eax, 2
    ja      loc_4F58
    
loc_4D26:
    cmp     r8d, 105h
    ja      loc_5008
    
loc_4D33:
    mov     rax, [rbx]
    mov     r14d, [rax+8]
    test    r14d, r14d
    jz      loc_53B0
    mov     edx, [rbx+0ACh]
    mov     eax, [rbx+50h]
    
loc_4D4C:
    mov     r13d, [rbx+68h]
    add     eax, ebp
    sub     r13d, r8d
    sub     r13d, edx
    cmp     eax, edx
    jbe     short loc_4DD8
    mov     r14, [rbx]
    mov     r15d, [r14+8]
    test    r15d, r15d
    jz      loc_4E93
    
loc_4D6C:
    cmp     r15d, r13d
    ja      short loc_4D00
    xor     eax, eax
    
loc_4D73:
    add     r8, rdx
    add     r8, [rbx+60h]
    mov     rsi, [r14]
    mov     r13d, r15d
    mov     [r14+8], eax
    mov     rdx, r13
    mov     rdi, r8
    call    _memcpy
    mov     r8, rax
    mov     rax, [r14+38h]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jz      loc_52D8
    cmp     eax, 2
    jz      loc_5390
    
loc_4DAB:
    add     [r14], r13
    add     [r14+10h], r13
    mov     r13d, r15d
    mov     r8d, [rbx+0B4h]
    jmp     loc_4D09
    align 8
    
loc_4DC8:
    mov     eax, 2
    jmp     loc_4C00
    align 8
    
loc_4DD8:
    mov     rdi, [rbx+60h]
    mov     r14d, r12d
    mov     edx, r12d
    sub     edx, r13d
    lea     rsi, [rdi+r14]
    call    _memcpy
    mov     edi, [rbx+84h]
    mov     rax, [rbx+78h]
    mov     edx, [rbx+0ACh]
    sub     [rbx+0B0h], r12d
    sub     [rbx+98h], r14
    mov     esi, [rbx+50h]
    mov     rcx, rdi
    lea     rax, [rax+rdi*2]
    sub     edx, r12d
    sub     ecx, 1
    not     rcx
    mov     [rbx+0ACh], edx
    lea     rdi, [rax+rcx*2]
    nop     dword ptr [rax+00000000h]
    
loc_4E30:
    sub     rax, 2
    movzx   ecx, word ptr [rax]
    cmp     esi, ecx
    ja      loc_4F40
    sub     ecx, esi
    cmp     rdi, rax
    mov     [rax], cx
    jnz     short loc_4E30
    
loc_4E49:
    mov     rcx, [rbx+70h]
    mov     eax, esi
    lea     rax, [rcx+rax*2]
    lea     ecx, [rsi-1]
    not     rcx
    lea     rdi, [rax+rcx*2]
    nop     dword ptr [rax]
    
loc_4E60:
    sub     rax, 2
    movzx   ecx, word ptr [rax]
    cmp     esi, ecx
    ja      loc_4F20
    sub     ecx, esi
    cmp     rdi, rax
    mov     [rax], cx
    jnz     short loc_4E60
    mov     r8d, [rbx+0B4h]
    add     r13d, r12d
    
loc_4E83:
    mov     r14, [rbx]
    mov     r15d, [r14+8]
    test    r15d, r15d
    jnz     loc_4D6C
    
loc_4E93:
    mov     rcx, [rbx+1738h]
    mov     rax, [rbx+68h]
    cmp     rcx, rax
    jnb     short loc_4F00
    
loc_4EA3:
    mov     esi, r8d
    add     rdx, rsi
    cmp     rdx, rcx
    jbe     loc_5031
    
loc_4EB2:
    sub     rax, rdx
    mov     esi, 102h
    cmp     rax, 102h
    cmovbe  rsi, rax
    mov     rax, [rbx+60h]
    add     rax, rdx
    cmp     esi, 8
    jnb     loc_5418
    test    sil, 4
    jnz     loc_5584
    test    esi, esi
    jz      short loc_4EEF
    test    sil, 2
    mov     byte ptr [rax], 0
    jnz     loc_560E
    
loc_4EEF:
    mov     r8d, [rbx+0B4h]
    add     rsi, rdx
    mov     [rbx+1738h], rsi
    
loc_4F00:
    cmp     r8d, 105h
    jbe     loc_5080
    
loc_4F0D:
    mov     edx, [rbx+0ACh]
    jmp     loc_4B65
    align 20h
    
loc_4F20:
    xor     r15d, r15d
    cmp     rdi, rax
    mov     [rax], r15w
    jnz     loc_4E60
    add     r13d, r12d
    mov     r8d, [rbx+0B4h]
    jmp     loc_4E83
    align 20h
    
loc_4F40:
    xor     ecx, ecx
    cmp     rdi, rax
    mov     [rax], cx
    jnz     loc_4E30
    jmp     loc_4E49
    align 8
    
loc_4F58:
    mov     edi, [rbx+0ACh]
    mov     r9, [rbx+60h]
    mov     ecx, [rbx+90h]
    mov     r10d, [rbx+8Ch]
    sub     edi, esi
    mov     eax, edi
    movzx   edx, byte ptr [r9+rax]
    lea     eax, [rdi+1]
    mov     [rbx+80h], edx
    movzx   eax, byte ptr [r9+rax]
    shl     edx, cl
    xor     edx, eax
    mov     eax, edx
    and     eax, r10d
    mov     [rbx+80h], eax
    jmp     short loc_4FF0
    align 20h
    
loc_4FA0:
    lea     edx, [rdi+2]
    shl     eax, cl
    mov     r13d, edi
    and     r13d, [rbx+58h]
    sub     esi, 1
    movzx   edx, byte ptr [r9+rdx]
    xor     eax, edx
    mov     rdx, [rbx+78h]
    and     eax, r10d
    mov     r11d, eax
    mov     [rbx+80h], eax
    lea     rdx, [rdx+r11*2]
    mov     r11, [rbx+70h]
    movzx   r14d, word ptr [rdx]
    mov     [r11+r13*2], r14w
    mov     [rdx], di
    lea     edx, [r8+rsi]
    add     edi, 1
    mov     [rbx+172Ch], esi
    cmp     edx, 2
    jbe     loc_4D26
    
loc_4FF0:
    test    esi, esi
    jnz     short loc_4FA0
    cmp     r8d, 105h
    jbe     loc_4D33
    nop     dword ptr [rax+00000000h]
    
loc_5008:
    mov     rcx, [rbx+1738h]
    mov     rax, [rbx+68h]
    mov     edx, [rbx+0ACh]
    cmp     rcx, rax
    jnb     loc_4B65
    mov     esi, r8d
    add     rdx, rsi
    cmp     rdx, rcx
    ja      loc_4EB2
    
loc_5031:
    lea     rsi, [rdx+102h]
    cmp     rsi, rcx
    jbe     loc_4F00
    sub     rsi, rcx
    sub     rax, rcx
    mov     rdi, [rbx+60h]
    cmp     rax, rsi
    cmovbe  rsi, rax
    mov     rbp, rsi
    mov     edx, esi
    add     rdi, rcx
    xor     esi, esi
    call    _memset
    mov     r8d, [rbx+0B4h]
    add     [rbx+1738h], rbp
    cmp     r8d, 105h
    ja      loc_4F0D
    nop     dword ptr [rax+00h]
    
loc_5080:
    mov     r12d, [rsp+48h+var_3C]
    test    r12d, r12d
    jz      loc_4CA1
    test    r8d, r8d
    mov     edx, [rbx+0ACh]
    jz      loc_547F
    cmp     r8d, 2
    mov     r9d, [rbx+0B0h]
    mov     edi, [rbx+0A0h]
    ja      loc_4B72
    mov     [rbx+0B8h], edi
    mov     [rbx+0A4h], r9d
    mov     eax, 2
    mov     dword ptr [rbx+0A0h], 2
    jmp     loc_4C00
    
loc_50D5:
    cmp     dword ptr [rbx+0C8h], 1
    mov     edx, [rbx+0ACh]
    mov     edi, [rbx+0B8h]
    jz      short loc_5107
    cmp     eax, 3
    jnz     loc_4C00
    mov     ecx, edx
    sub     ecx, [rbx+0B0h]
    cmp     ecx, 1000h
    jbe     loc_4C00
    
loc_5107:
    cmp     edi, 2
    mov     dword ptr [rbx+0A0h], 2
    jbe     loc_4C0D
    nop     word ptr [rax+rax+00h]
    
loc_5120:
    mov     eax, [rbx+0B4h]
    mov     ecx, [rbx+170Ch]
    sub     edi, 3
    mov     rsi, [rbx+1710h]
    lea     r9d, [rdx+rax-3]
    sub     dx, [rbx+0A4h]
    mov     rax, rcx
    add     eax, 1
    lea     r8d, [rdx-1]
    sub     edx, 2
    mov     [rsi+rcx*2], r8w
    mov     rsi, [rbx+1700h]
    mov     [rbx+170Ch], eax
    lea     rax, _length_code
    mov     [rsi+rcx], dil
    movzx   edi, dil
    movzx   eax, byte ptr [rax+rdi]
    add     word ptr [rbx+rax*4+4D8h], 1
    cmp     dx, 0FFh
    ja      loc_53D0
    lea     rax, _dist_code
    movzx   edx, dx
    movzx   eax, byte ptr [rax+rdx]
    
loc_5196:
    add     word ptr [rbx+rax*4+9C8h], 1
    mov     eax, [rbx+1708h]
    mov     r11d, [rbx+0B8h]
    mov     r12d, [rbx+0ACh]
    mov     ebp, [rbx+170Ch]
    lea     r10d, [rax-1]
    mov     eax, [rbx+0B4h]
    lea     edi, [r11-2]
    lea     esi, [r12+1]
    mov     [rbx+0B8h], edi
    lea     r8d, [rax+1]
    sub     r8d, r11d
    mov     [rbx+0B4h], r8d
    
loc_51E0:
    cmp     r9d, esi
    mov     [rbx+0ACh], esi
    jb      short loc_522F
    mov     rdx, [rbx+60h]
    lea     eax, [rsi+2]
    mov     ecx, [rbx+90h]
    movzx   eax, byte ptr [rdx+rax]
    mov     edx, [rbx+80h]
    shl     edx, cl
    mov     ecx, esi
    and     ecx, [rbx+58h]
    xor     eax, edx
    and     eax, [rbx+8Ch]
    mov     rdx, [rbx+78h]
    mov     [rbx+80h], eax
    lea     rax, [rdx+rax*2]
    mov     rdx, [rbx+70h]
    movzx   r13d, word ptr [rax]
    mov     [rdx+rcx*2], r13w
    mov     [rax], si
    
loc_522F:
    sub     edi, 1
    add     esi, 1
    test    edi, edi
    mov     [rbx+0B8h], edi
    jnz     short loc_51E0
    lea     edx, [r11+r12-1]
    cmp     ebp, r10d
    mov     dword ptr [rbx+0A8h], 0
    mov     dword ptr [rbx+0A0h], 2
    mov     [rbx+0ACh], edx
    jnz     loc_4B58
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_5281
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_5281:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     rbp, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r13, [rbp+38h]
    mov     [rbx+98h], rax
    mov     rdi, r13
    call    _tr_flush_bits
    mov     rax, [r13+28h]
    cmp     [rbp+20h], eax
    mov     r12d, eax
    cmovbe  r12d, [rbp+20h]
    test    r12d, r12d
    jnz     loc_5445
    
loc_52BF:
    mov     rax, [rbx]
    mov     ebp, [rax+20h]
    test    ebp, ebp
    jnz     loc_4B45
    jmp     loc_4CA1
    align 8
    
loc_52D8:
    mov     rdi, [r14+60h]
    mov     edx, r15d
    mov     rsi, r8
    call    _adler32
    mov     [r14+60h], rax
    jmp     loc_4DAB
    
loc_52F0:
    mov     edx, [rbx+0ACh]
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_5310
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_5310:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     rbp, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r13, [rbp+38h]
    mov     [rbx+98h], rax
    mov     rdi, r13
    call    _tr_flush_bits
    mov     rax, [r13+28h]
    cmp     [rbp+20h], eax
    mov     r12d, eax
    cmovbe  r12d, [rbp+20h]
    test    r12d, r12d
    jz      loc_4C71
    mov     rdi, [rbp+18h]
    mov     rsi, [r13+20h]
    mov     r14d, r12d
    mov     rdx, r14
    call    _memcpy
    add     [rbp+18h], r14
    add     [r13+20h], r14
    add     [rbp+28h], r14
    sub     [rbp+20h], r12d
    sub     [r13+28h], r14
    jnz     loc_4C71
    mov     rax, [r13+10h]
    mov     [r13+20h], rax
    jmp     loc_4C71
    align 10h
    
loc_5390:
    mov     rdi, [r14+60h]
    mov     edx, r15d
    mov     rsi, r8
    call    _crc32
    mov     [r14+60h], rax
    jmp     loc_4DAB
    align 10h
    
loc_53B0:
    mov     rcx, [rbx+1738h]
    mov     rax, [rbx+68h]
    cmp     rax, rcx
    jbe     loc_5080
    mov     edx, [rbx+0ACh]
    jmp     loc_4EA3
    align 10h
    
loc_53D0:
    shr     dx, 7
    lea     rdi, _dist_code
    lea     rax, [rdx+100h]
    and     eax, 3FFh
    movzx   eax, byte ptr [rdi+rax]
    jmp     loc_5196
    
loc_53F0:
    mov     rdi, rbx
    call    longest_match
    cmp     eax, 5
    mov     [rbx+0A0h], eax
    jbe     loc_50D5
    mov     edi, [rbx+0B8h]
    mov     edx, [rbx+0ACh]
    jmp     loc_4C00
    
loc_5418:
    lea     rdi, [rax+8]
    mov     ecx, esi
    mov     qword ptr [rax], 0
    mov     qword ptr [rax+rcx-8], 0
    and     rdi, 0FFFFFFFFFFFFFFF8h
    sub     rax, rdi
    lea     ecx, [rsi+rax]
    xor     eax, eax
    shr     ecx, 3
    rep stosq
    jmp     loc_4EEF
    
loc_5445:
    mov     rdi, [rbp+18h]
    mov     rsi, [r13+20h]
    mov     r14d, r12d
    mov     rdx, r14
    call    _memcpy
    add     [rbp+18h], r14
    add     [r13+20h], r14
    add     [rbp+28h], r14
    sub     [rbp+20h], r12d
    sub     [r13+28h], r14
    jnz     loc_52BF
    mov     rax, [r13+10h]
    mov     [r13+20h], rax
    jmp     loc_52BF
    
loc_547F:
    mov     r8d, [rbx+0A8h]
    test    r8d, r8d
    jnz     loc_5532
    
loc_548F:
    cmp     edx, 2
    mov     eax, 2
    cmovbe  eax, edx
    cmp     [rsp+48h+var_3C], 4
    mov     [rbx+172Ch], eax
    jz      loc_5599
    mov     ecx, [rbx+170Ch]
    mov     eax, 1
    test    ecx, ecx
    jz      loc_4CA3
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_54D8
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_54D8:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     rbp, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r12, [rbp+38h]
    mov     [rbx+98h], rax
    mov     rdi, r12
    call    _tr_flush_bits
    mov     r13, [r12+28h]
    cmp     [rbp+20h], r13d
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     loc_561E
    
loc_5515:
    mov     rax, [rbx]
    mov     eax, [rax+20h]
    test    eax, eax
    setnz   al
    add     rsp, 18h
    pop     rbx
    movzx   eax, al
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_5532:
    mov     ecx, [rbx+170Ch]
    lea     eax, [rdx-1]
    mov     rdx, [rbx+60h]
    mov     rsi, [rbx+1710h]
    xor     edi, edi
    movzx   eax, byte ptr [rdx+rax]
    mov     [rsi+rcx*2], di
    mov     rsi, [rbx+1700h]
    mov     rdx, rcx
    add     edx, 1
    mov     [rbx+170Ch], edx
    mov     [rsi+rcx], al
    add     word ptr [rbx+rax*4+0D4h], 1
    mov     edx, [rbx+0ACh]
    mov     dword ptr [rbx+0A8h], 0
    jmp     loc_548F
    
loc_5584:
    mov     ecx, esi
    mov     dword ptr [rax], 0
    mov     dword ptr [rax+rcx-4], 0
    jmp     loc_4EEF
    
loc_5599:
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_55B3
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_55B3:
    mov     ecx, 1
    mov     rdi, rbx
    call    _tr_flush_block
    mov     rbp, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r12, [rbp+38h]
    mov     [rbx+98h], rax
    mov     rdi, r12
    call    _tr_flush_bits
    mov     r13, [r12+28h]
    cmp     [rbp+20h], r13d
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     short loc_565D
    
loc_55EF:
    mov     rax, [rbx]
    mov     esi, [rax+20h]
    xor     eax, eax
    test    esi, esi
    setnz   al
    add     rsp, 18h
    pop     rbx
    add     eax, 2
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_560E:
    mov     ecx, esi
    xor     r13d, r13d
    mov     [rax+rcx-2], r13w
    jmp     loc_4EEF
    
loc_561E:
    mov     rdi, [rbp+18h]
    mov     rsi, [r12+20h]
    mov     r14d, r13d
    mov     rdx, r14
    call    _memcpy
    add     [rbp+18h], r14
    add     [r12+20h], r14
    add     [rbp+28h], r14
    sub     [rbp+20h], r13d
    sub     [r12+28h], r14
    jnz     loc_5515
    mov     rax, [r12+10h]
    mov     [r12+20h], rax
    jmp     loc_5515
    
loc_565D:
    mov     rdi, [rbp+18h]
    mov     rsi, [r12+20h]
    mov     r14d, r13d
    mov     rdx, r14
    call    _memcpy
    add     [rbp+18h], r14
    add     [r12+20h], r14
    add     [rbp+28h], r14
    sub     [rbp+20h], r13d
    sub     [r12+28h], r14
    jnz     loc_55EF
    mov     rax, [r12+10h]
    mov     [r12+20h], rax
    jmp     loc_55EF
    
loc_569C:
    mov     eax, r15d
    mov     r15d, r13d
    sub     eax, r13d
    jmp     loc_4D73
    

<deflateSetDictionary>:
    
    var_50= qword ptr -50h
    var_48= dword ptr -48h
    var_44= dword ptr -44h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 28h
    test    rdi, rdi
    mov     [rsp+58h+var_50], rdi
    jz      loc_5D05
    cmp     qword ptr [rdi+40h], 0
    jz      loc_5D05
    cmp     qword ptr [rdi+48h], 0
    jz      loc_5D05
    mov     rbx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rbx, rbx
    jz      short loc_56F5
    cmp     rdi, [rbx]
    jz      short loc_5704
    
loc_56F5:
    add     rsp, 28h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_5704:
    mov     r13, rsi
    mov     esi, [rbx+8]
    mov     ebp, edx
    mov     edx, 1
    lea     ecx, [rsi-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_572F
    mov     rax, 2002000088008001h
    shr     rax, cl
    mov     rdx, rax
    not     rdx
    and     edx, 1
    
loc_572F:
    cmp     esi, 71h
    setnz   cl
    cmp     esi, 29Ah
    setnz   al
    test    cl, al
    jz      short loc_574B
    test    dl, dl
    mov     eax, 0FFFFFFFEh
    jnz     short loc_56F5
    
loc_574B:
    test    r13, r13
    jz      loc_5D05
    mov     eax, [rbx+30h]
    cmp     eax, 2
    mov     [rsp+58h+var_48], eax
    jz      loc_5D05
    cmp     eax, 1
    jz      loc_5CAA
    mov     r14d, [rbx+0B4h]
    test    r14d, r14d
    jnz     loc_5D05
    mov     eax, [rbx+50h]
    mov     dword ptr [rbx+30h], 0
    cmp     eax, ebp
    ja      short loc_57DE
    mov     r12d, [rsp+58h+var_48]
    test    r12d, r12d
    jnz     short loc_57D7
    mov     eax, [rbx+84h]
    mov     rdi, [rbx+78h]
    xor     r11d, r11d
    xor     esi, esi
    sub     eax, 1
    lea     rdx, [rax+rax]
    mov     [rdi+rax*2], r11w
    call    _memset
    mov     eax, [rbx+50h]
    mov     dword ptr [rbx+0ACh], 0
    mov     qword ptr [rbx+98h], 0
    mov     dword ptr [rbx+172Ch], 0
    
loc_57D7:
    sub     ebp, eax
    add     r13, rbp
    mov     ebp, eax
    
loc_57DE:
    mov     rax, [rsp+58h+var_50]
    mov     edi, [rax+8]
    mov     [rax+8], ebp
    mov     [rsp+58h+var_44], edi
    mov     rdi, [rax]
    mov     [rax], r13
    mov     [rsp+58h+var_40], rdi
    mov     rdi, rbx
    call    fill_window
    mov     esi, [rbx+0B4h]
    mov     r8d, [rbx+0ACh]
    nop     dword ptr [rax]
    
loc_5810:
    cmp     esi, 2
    jbe     loc_5AA0
    
loc_5819:
    mov     ecx, [rbx+90h]
    mov     rbp, [rbx+60h]
    lea     esi, [rsi+r8-2]
    mov     r11d, [rbx+8Ch]
    mov     r10, [rbx+78h]
    mov     r9, [rbx+70h]
    mov     edi, [rbx+58h]
    mov     eax, [rbx+80h]
    
loc_5840:
    lea     edx, [r8+2]
    shl     eax, cl
    mov     r12d, edi
    and     r12d, r8d
    movzx   edx, byte ptr [rbp+rdx+0]
    xor     eax, edx
    and     eax, r11d
    mov     edx, eax
    mov     [rbx+80h], eax
    lea     rdx, [r10+rdx*2]
    movzx   r13d, word ptr [rdx]
    mov     [r9+r12*2], r13w
    mov     [rdx], r8w
    add     r8d, 1
    cmp     r8d, esi
    jnz     short loc_5840
    mov     r12d, [rbx+50h]
    mov     [rbx+0ACh], r8d
    mov     esi, 2
    mov     dword ptr [rbx+0B4h], 2
    mov     eax, r12d
    lea     ebp, [r12-106h]
    jmp     short loc_58E1
    align 20h
    
loc_58A0:
    test    r13d, r13d
    jnz     loc_5D1D
    
loc_58A9:
    mov     edi, [rbx+172Ch]
    add     esi, r13d
    mov     [rbx+0B4h], esi
    lea     eax, [rsi+rdi]
    cmp     eax, 2
    ja      loc_5B48
    
loc_58C4:
    cmp     esi, 105h
    ja      loc_5A20
    mov     rax, [rbx]
    mov     edi, [rax+8]
    test    edi, edi
    jz      loc_5A20
    mov     eax, [rbx+50h]
    
loc_58E1:
    mov     r13d, [rbx+68h]
    add     eax, ebp
    sub     r13d, esi
    sub     r13d, r8d
    cmp     eax, r8d
    jbe     short loc_5960
    mov     r14, [rbx]
    mov     r15d, [r14+8]
    test    r15d, r15d
    jz      loc_5A20
    
loc_5902:
    cmp     r15d, r13d
    ja      short loc_58A0
    xor     eax, eax
    
loc_5909:
    add     r8, rsi
    add     r8, [rbx+60h]
    mov     rsi, [r14]
    mov     r13d, r15d
    mov     [r14+8], eax
    mov     rdx, r13
    mov     rdi, r8
    call    _memcpy
    mov     r8, rax
    mov     rax, [r14+38h]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jz      loc_5BF0
    cmp     eax, 2
    jz      loc_5C10
    
loc_5941:
    add     [r14], r13
    add     [r14+10h], r13
    mov     r13d, r15d
    mov     esi, [rbx+0B4h]
    mov     r8d, [rbx+0ACh]
    jmp     loc_58A9
    align 20h
    
loc_5960:
    mov     rdi, [rbx+60h]
    mov     r14d, r12d
    mov     edx, r12d
    sub     edx, r13d
    lea     rsi, [rdi+r14]
    call    _memcpy
    mov     esi, [rbx+84h]
    mov     rax, [rbx+78h]
    mov     r8d, [rbx+0ACh]
    sub     [rbx+0B0h], r12d
    sub     [rbx+98h], r14
    mov     ecx, [rbx+50h]
    mov     rdx, rsi
    lea     rax, [rax+rsi*2]
    sub     r8d, r12d
    sub     edx, 1
    not     rdx
    mov     [rbx+0ACh], r8d
    lea     rsi, [rax+rdx*2]
    nop     dword ptr [rax+rax+00h]
    
loc_59B8:
    sub     rax, 2
    movzx   edx, word ptr [rax]
    cmp     ecx, edx
    ja      loc_5B30
    sub     edx, ecx
    cmp     rsi, rax
    mov     [rax], dx
    jnz     short loc_59B8
    
loc_59D1:
    mov     rdx, [rbx+70h]
    mov     eax, ecx
    lea     rax, [rdx+rax*2]
    lea     edx, [rcx-1]
    not     rdx
    lea     rsi, [rax+rdx*2]
    nop     dword ptr [rax]
    
loc_59E8:
    sub     rax, 2
    movzx   edx, word ptr [rax]
    cmp     ecx, edx
    ja      loc_5B10
    sub     edx, ecx
    cmp     rsi, rax
    mov     [rax], dx
    jnz     short loc_59E8
    mov     esi, [rbx+0B4h]
    add     r13d, r12d
    
loc_5A0A:
    mov     r14, [rbx]
    mov     r15d, [r14+8]
    test    r15d, r15d
    jnz     loc_5902
    nop     word ptr [rax+rax+00h]
    
loc_5A20:
    mov     rcx, [rbx+1738h]
    mov     rax, [rbx+68h]
    cmp     rcx, rax
    jnb     loc_5810
    mov     r9d, r8d
    mov     edx, esi
    add     r9, rdx
    cmp     rcx, r9
    jnb     loc_5C30
    sub     rax, r9
    mov     edx, 102h
    cmp     rax, 102h
    cmovbe  rdx, rax
    mov     rax, [rbx+60h]
    add     rax, r9
    cmp     edx, 8
    jnb     loc_5C7D
    test    dl, 4
    jnz     loc_5CF0
    test    edx, edx
    jz      short loc_5A80
    test    dl, 2
    mov     byte ptr [rax], 0
    jnz     loc_5D0F
    
loc_5A80:
    mov     esi, [rbx+0B4h]
    add     rdx, r9
    mov     r8d, [rbx+0ACh]
    mov     [rbx+1738h], rdx
    cmp     esi, 2
    ja      loc_5819
    
loc_5AA0:
    lea     eax, [r8+rsi]
    mov     rdi, [rsp+58h+var_40]
    mov     [rbx+172Ch], esi
    mov     dword ptr [rbx+0A0h], 2
    mov     dword ptr [rbx+0A8h], 0
    mov     [rbx+0ACh], eax
    mov     [rbx+98h], rax
    mov     rax, 200000000h
    mov     [rbx+0B4h], rax
    mov     rax, [rsp+58h+var_50]
    mov     [rax], rdi
    mov     edi, [rsp+58h+var_44]
    mov     [rax+8], edi
    mov     eax, [rsp+58h+var_48]
    mov     [rbx+30h], eax
    add     rsp, 28h
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_5B10:
    xor     r9d, r9d
    cmp     rsi, rax
    mov     [rax], r9w
    jnz     loc_59E8
    add     r13d, r12d
    mov     esi, [rbx+0B4h]
    jmp     loc_5A0A
    align 10h
    
loc_5B30:
    xor     r10d, r10d
    cmp     rsi, rax
    mov     [rax], r10w
    jnz     loc_59B8
    jmp     loc_59D1
    align 8
    
loc_5B48:
    mov     r10, [rbx+60h]
    mov     r9d, r8d
    mov     ecx, [rbx+90h]
    sub     r9d, edi
    mov     r11d, [rbx+8Ch]
    mov     eax, r9d
    movzx   edx, byte ptr [r10+rax]
    lea     eax, [r9+1]
    mov     [rbx+80h], edx
    movzx   eax, byte ptr [r10+rax]
    shl     edx, cl
    xor     edx, eax
    mov     eax, edx
    and     eax, r11d
    mov     [rbx+80h], eax
    jmp     short loc_5BE3
    align 10h
    
loc_5B90:
    lea     edx, [r9+2]
    shl     eax, cl
    mov     r14d, r9d
    and     r14d, [rbx+58h]
    sub     edi, 1
    movzx   edx, byte ptr [r10+rdx]
    xor     eax, edx
    mov     rdx, [rbx+78h]
    and     eax, r11d
    mov     r13d, eax
    mov     [rbx+80h], eax
    lea     rdx, [rdx+r13*2]
    mov     r13, [rbx+70h]
    movzx   r15d, word ptr [rdx]
    mov     [r13+r14*2+0], r15w
    mov     [rdx], r9w
    lea     edx, [rsi+rdi]
    add     r9d, 1
    mov     [rbx+172Ch], edi
    cmp     edx, 2
    jbe     loc_58C4
    
loc_5BE3:
    test    edi, edi
    jnz     short loc_5B90
    jmp     loc_58C4
    align 10h
    
loc_5BF0:
    mov     rdi, [r14+60h]
    mov     edx, r15d
    mov     rsi, r8
    call    _adler32
    mov     [r14+60h], rax
    jmp     loc_5941
    align 10h
    
loc_5C10:
    mov     rdi, [r14+60h]
    mov     edx, r15d
    mov     rsi, r8
    call    _crc32
    mov     [r14+60h], rax
    jmp     loc_5941
    align 10h
    
loc_5C30:
    lea     rdx, [r9+102h]
    cmp     rcx, rdx
    jnb     loc_5810
    sub     r9, rcx
    sub     rax, rcx
    mov     rdi, [rbx+60h]
    lea     rbp, [r9+102h]
    cmp     rax, rbp
    cmovbe  rbp, rax
    xor     esi, esi
    add     rdi, rcx
    mov     edx, ebp
    call    _memset
    add     [rbx+1738h], rbp
    mov     esi, [rbx+0B4h]
    mov     r8d, [rbx+0ACh]
    jmp     loc_5810
    
loc_5C7D:
    lea     rdi, [rax+8]
    mov     ecx, edx
    mov     qword ptr [rax], 0
    mov     qword ptr [rax+rcx-8], 0
    and     rdi, 0FFFFFFFFFFFFFFF8h
    sub     rax, rdi
    lea     ecx, [rdx+rax]
    xor     eax, eax
    shr     ecx, 3
    rep stosq
    jmp     loc_5A80
    
loc_5CAA:
    cmp     esi, 2Ah
    jnz     short loc_5D05
    mov     edx, [rbx+0B4h]
    mov     eax, 0FFFFFFFEh
    test    edx, edx
    jnz     loc_56F5
    mov     r15, [rsp+58h+var_50]
    mov     edx, ebp
    mov     rsi, r13
    mov     rdi, [r15+60h]
    call    _adler32
    mov     [r15+60h], rax
    mov     eax, [rbx+50h]
    mov     dword ptr [rbx+30h], 0
    cmp     ebp, eax
    jb      loc_57DE
    jmp     loc_57D7
    
loc_5CF0:
    mov     ecx, edx
    mov     dword ptr [rax], 0
    mov     dword ptr [rax+rcx-4], 0
    jmp     loc_5A80
    
loc_5D05:
    mov     eax, 0FFFFFFFEh
    jmp     loc_56F5
    
loc_5D0F:
    mov     ecx, edx
    xor     esi, esi
    mov     [rax+rcx-2], si
    jmp     loc_5A80
    
loc_5D1D:
    mov     eax, r15d
    mov     r15d, r13d
    sub     eax, r13d
    jmp     loc_5909
    

<deflateGetDictionary>:
    
    test    rdi, rdi
    jz      loc_5E00
    cmp     qword ptr [rdi+40h], 0
    jz      loc_5E00
    cmp     qword ptr [rdi+48h], 0
    jz      loc_5E00
    mov     r8, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    r8, r8
    jz      short locret_5D62
    cmp     rdi, [r8]
    jz      short loc_5D68
    
locret_5D62:
    rep retn
    align 8
    
loc_5D68:
    mov     eax, [r8+8]
    mov     r9d, 1
    lea     ecx, [rax-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_5D8E
    mov     r9, 2002000088008001h
    shr     r9, cl
    not     r9
    and     r9d, 1
    
loc_5D8E:
    cmp     eax, 29Ah
    setnz   cl
    cmp     eax, 71h
    setnz   al
    test    cl, al
    jz      short loc_5DAA
    test    r9b, r9b
    mov     eax, 0FFFFFFFEh
    jnz     short locret_5D62
    
loc_5DAA:
    push    rbp
    push    rbx
    mov     rdi, rsi
    mov     rbp, rdx
    sub     rsp, 8
    mov     eax, [r8+0ACh]
    mov     esi, [r8+0B4h]
    lea     ecx, [rax+rsi]
    cmp     [r8+50h], ecx
    mov     ebx, ecx
    cmovbe  ebx, [r8+50h]
    test    rdi, rdi
    jz      short loc_5DEF
    test    ebx, ebx
    jz      short loc_5DEF
    add     rax, rsi
    mov     edx, ebx
    sub     rax, rdx
    add     rax, [r8+60h]
    mov     rsi, rax
    call    _memcpy
    
loc_5DEF:
    xor     eax, eax
    test    rbp, rbp
    jz      short loc_5DF9
    mov     [rbp+0], ebx
    
loc_5DF9:
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    
loc_5E00:
    mov     eax, 0FFFFFFFEh
    retn
    

<deflateResetKeep>:
    
    test    rdi, rdi
    jz      loc_5F30
    cmp     qword ptr [rdi+40h], 0
    jz      loc_5F30
    cmp     qword ptr [rdi+48h], 0
    jz      loc_5F30
    push    rbp
    push    rbx
    mov     eax, 0FFFFFFFEh
    sub     rsp, 8
    mov     rbp, [rdi+38h]
    test    rbp, rbp
    jz      short loc_5E49
    cmp     rdi, [rbp+0]
    jz      short loc_5E50
    
loc_5E49:
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    
loc_5E50:
    mov     eax, [rbp+8]
    mov     edx, 1
    lea     ecx, [rax-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_5E73
    mov     rdx, 2002000088008001h
    shr     rdx, cl
    not     rdx
    and     edx, 1
    
loc_5E73:
    cmp     eax, 71h
    setnz   cl
    cmp     eax, 29Ah
    setnz   al
    test    cl, al
    jz      short loc_5E8E
    test    dl, dl
    mov     eax, 0FFFFFFFEh
    jnz     short loc_5E49
    
loc_5E8E:
    mov     rax, [rbp+10h]
    mov     qword ptr [rdi+28h], 0
    mov     rbx, rdi
    mov     qword ptr [rdi+10h], 0
    mov     qword ptr [rdi+30h], 0
    mov     dword ptr [rdi+58h], 2
    mov     qword ptr [rbp+28h], 0
    mov     [rbp+20h], rax
    mov     eax, [rbp+30h]
    test    eax, eax
    js      short loc_5F08
    cmp     eax, 2
    jz      short loc_5F19
    cmp     eax, 1
    sbb     edx, edx
    and     edx, 47h
    add     edx, 2Ah
    
loc_5ED7:
    mov     [rbp+8], edx
    xor     esi, esi
    xor     edx, edx
    xor     edi, edi
    call    _adler32
    
loc_5EE5:
    mov     [rbx+60h], rax
    mov     rdi, rbp
    mov     dword ptr [rbp+4Ch], 0
    call    _tr_init
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    retn
    align 8
    
loc_5F08:
    mov     edx, eax
    neg     edx
    cmp     eax, 0FFFFFFFEh
    mov     [rbp+30h], edx
    mov     edx, 2Ah
    jnz     short loc_5ED7
    
loc_5F19:
    mov     dword ptr [rbp+8], 39h
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    call    _crc32
    jmp     short loc_5EE5
    align 10h
    
loc_5F30:
    mov     eax, 0FFFFFFFEh
    retn
    

<deflateReset>:
    
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 8
    call    _deflateResetKeep
    test    eax, eax
    mov     ebp, eax
    jnz     loc_6008
    mov     rbx, [rbx+38h]
    xor     ecx, ecx
    xor     esi, esi
    mov     eax, [rbx+50h]
    mov     rdi, [rbx+78h]
    add     rax, rax
    mov     [rbx+68h], rax
    mov     eax, [rbx+84h]
    sub     eax, 1
    lea     rdx, [rax+rax]
    mov     [rdi+rax*2], cx
    call    _memset
    movsxd  rax, dword ptr [rbx+0C4h]
    mov     qword ptr [rbx+98h], 0
    mov     dword ptr [rbx+172Ch], 0
    mov     dword ptr [rbx+0A0h], 2
    mov     qword ptr [rbx+0A8h], 0
    mov     dword ptr [rbx+80h], 0
    shl     rax, 4
    mov     rdx, rax
    lea     rax, configuration_table
    add     rax, rdx
    movzx   edx, word ptr [rax+2]
    mov     [rbx+0C0h], edx
    movzx   edx, word ptr [rax]
    mov     [rbx+0CCh], edx
    movzx   edx, word ptr [rax+4]
    movzx   eax, word ptr [rax+6]
    mov     [rbx+0D0h], edx
    mov     [rbx+0BCh], eax
    mov     rax, 200000000h
    mov     [rbx+0B4h], rax
    
loc_6008:
    add     rsp, 8
    mov     eax, ebp
    pop     rbx
    pop     rbp
    retn
    

<deflateSetHeader>:
    
    test    rdi, rdi
    jz      short loc_60A0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_60A0
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_60A0
    mov     rdx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rdx, rdx
    jz      short locret_6046
    cmp     rdi, [rdx]
    jz      short loc_6050
    
locret_6046:
    rep retn
    align 10h
    
loc_6050:
    mov     eax, [rdx+8]
    mov     edi, 1
    lea     ecx, [rax-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_6073
    mov     rdi, 2002000088008001h
    shr     rdi, cl
    not     rdi
    and     edi, 1
    
loc_6073:
    cmp     eax, 29Ah
    setnz   cl
    cmp     eax, 71h
    setnz   al
    test    cl, al
    jz      short loc_608F
    test    dil, dil
    mov     eax, 0FFFFFFFEh
    jnz     short locret_6046
    
loc_608F:
    cmp     dword ptr [rdx+30h], 2
    jnz     short loc_60A0
    mov     [rdx+38h], rsi
    xor     eax, eax
    retn
    align 20h
    
loc_60A0:
    mov     eax, 0FFFFFFFEh
    retn
    

<deflatePending>:
    
    test    rdi, rdi
    jz      loc_6140
    cmp     qword ptr [rdi+40h], 0
    jz      loc_6140
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_6140
    mov     r8, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    r8, r8
    jz      short locret_60DE
    cmp     rdi, [r8]
    jz      short loc_60E0
    
locret_60DE:
    rep retn
    
loc_60E0:
    mov     eax, [r8+8]
    mov     edi, 1
    lea     ecx, [rax-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_6104
    mov     rdi, 2002000088008001h
    shr     rdi, cl
    not     rdi
    and     edi, 1
    
loc_6104:
    cmp     eax, 29Ah
    setnz   cl
    cmp     eax, 71h
    setnz   al
    test    cl, al
    jz      short loc_6120
    test    dil, dil
    mov     eax, 0FFFFFFFEh
    jnz     short locret_60DE
    
loc_6120:
    test    rsi, rsi
    jz      short loc_612B
    mov     rax, [r8+28h]
    mov     [rsi], eax
    
loc_612B:
    xor     eax, eax
    test    rdx, rdx
    jz      short locret_60DE
    mov     ecx, [r8+1734h]
    mov     [rdx], ecx
    retn
    align 20h
    
loc_6140:
    mov     eax, 0FFFFFFFEh
    retn
    

<deflatePrime>:
    
    test    rdi, rdi
    jz      loc_6288
    cmp     qword ptr [rdi+40h], 0
    jz      loc_6288
    cmp     qword ptr [rdi+48h], 0
    jz      loc_6288
    push    r14
    push    r13
    mov     eax, 0FFFFFFFEh
    push    r12
    push    rbp
    push    rbx
    mov     rbp, [rdi+38h]
    test    rbp, rbp
    jz      short loc_618B
    cmp     rdi, [rbp+0]
    jz      short loc_6198
    
loc_618B:
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 8
    
loc_6198:
    mov     eax, [rbp+8]
    mov     r13d, edx
    mov     r12d, esi
    mov     edx, 1
    lea     ecx, [rax-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_61C1
    mov     rdx, 2002000088008001h
    shr     rdx, cl
    not     rdx
    and     edx, 1
    
loc_61C1:
    cmp     eax, 71h
    setnz   cl
    cmp     eax, 29Ah
    setnz   al
    test    cl, al
    jz      short loc_61DC
    test    dl, dl
    mov     eax, 0FFFFFFFEh
    jnz     short loc_618B
    
loc_61DC:
    mov     rax, [rbp+20h]
    add     rax, 2
    cmp     [rbp+1710h], rax
    jb      loc_628E
    mov     ebx, 10h
    
loc_61F6:
    mov     esi, [rbp+1734h]
    mov     r14d, ebx
    movzx   r8d, word ptr [rbp+1730h]
    mov     edi, 1
    sub     r14d, esi
    cmp     r12d, r14d
    jl      short loc_6258
    mov     ecx, r14d
    mov     dword ptr [rbp+1734h], 10h
    shl     edi, cl
    mov     ecx, esi
    lea     eax, [rdi-1]
    mov     rdi, rbp
    and     eax, r13d
    shl     eax, cl
    or      eax, r8d
    mov     [rbp+1730h], ax
    call    _tr_flush_bits
    mov     ecx, r14d
    sar     r13d, cl
    sub     r12d, r14d
    jnz     short loc_61F6
    xor     eax, eax
    
loc_624C:
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 8
    
loc_6258:
    mov     ecx, r12d
    shl     edi, cl
    mov     ecx, esi
    add     esi, r12d
    sub     edi, 1
    mov     [rbp+1734h], esi
    mov     edx, edi
    mov     rdi, rbp
    and     edx, r13d
    shl     edx, cl
    or      edx, r8d
    mov     [rbp+1730h], dx
    call    _tr_flush_bits
    xor     eax, eax
    jmp     short loc_624C
    
loc_6288:
    mov     eax, 0FFFFFFFEh
    retn
    
loc_628E:
    mov     eax, 0FFFFFFFBh
    jmp     loc_618B
    

<deflateTune>:
    
    test    rdi, rdi
    mov     r10d, ecx
    jz      loc_6330
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_6330
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_6330
    mov     r9, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    r9, r9
    jz      short locret_62CD
    cmp     rdi, [r9]
    jz      short loc_62D0
    
locret_62CD:
    rep retn
    align 10h
    
loc_62D0:
    mov     eax, [r9+8]
    mov     edi, 1
    lea     ecx, [rax-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_62F4
    mov     rdi, 2002000088008001h
    shr     rdi, cl
    not     rdi
    and     edi, 1
    
loc_62F4:
    cmp     eax, 29Ah
    setnz   cl
    cmp     eax, 71h
    setnz   al
    test    cl, al
    jz      short loc_6310
    test    dil, dil
    mov     eax, 0FFFFFFFEh
    jnz     short locret_62CD
    
loc_6310:
    mov     [r9+0CCh], esi
    mov     [r9+0C0h], edx
    xor     eax, eax
    mov     [r9+0D0h], r10d
    mov     [r9+0BCh], r8d
    retn
    align 10h
    
loc_6330:
    mov     eax, 0FFFFFFFEh
    retn
    

<deflateBound>:
    
    lea     r8, [rsi+7]
    lea     rax, [rsi+3Fh]
    mov     rdx, r8
    shr     rax, 6
    shr     rdx, 3
    add     rax, rdx
    add     rax, rsi
    test    rdi, rdi
    jz      short loc_637A
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_637A
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_637A
    mov     rdx, [rdi+38h]
    test    rdx, rdx
    jz      short loc_637A
    cmp     rdi, [rdx]
    jz      short loc_6380
    
loc_637A:
    add     rax, 0Bh
    retn
    align 20h
    
loc_6380:
    mov     r9d, [rdx+8]
    mov     edi, 1
    lea     ecx, [r9-2Ah]
    cmp     ecx, 3Dh
    jbe     short loc_63E0
    
loc_6392:
    cmp     r9d, 29Ah
    setnz   r10b
    cmp     r9d, 71h
    setnz   cl
    test    r10b, cl
    jz      short loc_63AE
    test    dil, dil
    jnz     short loc_637A
    
loc_63AE:
    mov     ecx, [rdx+30h]
    cmp     ecx, 1
    jz      loc_6490
    cmp     ecx, 2
    jz      short loc_6428
    cmp     ecx, 1
    sbb     rcx, rcx
    not     rcx
    and     ecx, 6
    
loc_63CB:
    cmp     dword ptr [rdx+54h], 0Fh
    jz      short loc_63F8
    
loc_63D1:
    lea     rax, [rax+rcx+5]
    retn
    align 20h
    
loc_63E0:
    mov     rdi, 2002000088008001h
    shr     rdi, cl
    not     rdi
    and     edi, 1
    jmp     short loc_6392
    align 8
    
loc_63F8:
    cmp     dword ptr [rdx+88h], 0Fh
    jnz     short loc_63D1
    mov     rdx, rsi
    mov     rax, rsi
    shr     rsi, 19h
    shr     rdx, 0Ch
    shr     rax, 0Eh
    add     rdx, r8
    add     rdx, rax
    lea     rax, [rdx+rsi]
    add     rax, rcx
    retn
    align 8
    
loc_6428:
    mov     r9, [rdx+38h]
    mov     ecx, 12h
    test    r9, r9
    jz      short loc_63CB
    cmp     qword ptr [r9+18h], 0
    jz      short loc_6448
    mov     ecx, [r9+20h]
    add     ecx, 2
    add     rcx, 12h
    
loc_6448:
    mov     rdi, [r9+28h]
    test    rdi, rdi
    jz      short loc_6463
    sub     rdi, rcx
    nop     dword ptr [rax+00h]
    
loc_6458:
    add     rcx, 1
    cmp     byte ptr [rdi+rcx-1], 0
    jnz     short loc_6458
    
loc_6463:
    mov     rdi, [r9+38h]
    test    rdi, rdi
    jz      short loc_647B
    sub     rdi, rcx
    nop
    
loc_6470:
    add     rcx, 1
    cmp     byte ptr [rdi+rcx-1], 0
    jnz     short loc_6470
    
loc_647B:
    mov     edi, [r9+44h]
    test    edi, edi
    jz      loc_63CB
    add     rcx, 2
    jmp     loc_63CB
    
loc_6490:
    cmp     dword ptr [rdx+0ACh], 1
    sbb     rcx, rcx
    and     rcx, 0FFFFFFFFFFFFFFFCh
    add     rcx, 0Ah
    jmp     loc_63CB
    

<deflate>:
    
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_3C= dword ptr -3Ch
    
    
    test    rdi, rdi
    jz      loc_76E8
    cmp     qword ptr [rdi+40h], 0
    jz      loc_76E8
    cmp     qword ptr [rdi+48h], 0
    jz      loc_76E8
    push    r15
    push    r14
    mov     eax, 0FFFFFFFEh
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 28h
    mov     rcx, [rdi+38h]
    test    rcx, rcx
    mov     [rsp+58h+var_50], rcx
    jz      short loc_64F5
    cmp     rdi, [rcx]
    jz      short loc_6508
    
loc_64F5:
    add     rsp, 28h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_6508:
    mov     edx, [rcx+8]
    mov     r8d, 1
    lea     ecx, [rdx-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_652D
    mov     r8, 2002000088008001h
    shr     r8, cl
    not     r8
    and     r8d, 1
    
loc_652D:
    cmp     edx, 71h
    setnz   cl
    cmp     edx, 29Ah
    setnz   al
    test    cl, al
    jz      short loc_654A
    test    r8b, r8b
    mov     eax, 0FFFFFFFEh
    jnz     short loc_64F5
    
loc_654A:
    cmp     esi, 5
    ja      loc_7760
    cmp     qword ptr [rdi+18h], 0
    jz      loc_76F0
    mov     eax, [rdi+8]
    test    eax, eax
    jz      short loc_656F
    cmp     qword ptr [rdi], 0
    jz      loc_76F0
    
loc_656F:
    cmp     esi, 4
    setnz   cl
    cmp     edx, 29Ah
    jnz     short loc_6585
    test    cl, cl
    jnz     loc_76F0
    
loc_6585:
    mov     r11d, [rdi+20h]
    test    r11d, r11d
    jz      loc_77B0
    mov     rbp, rdi
    mov     rdi, [rsp+58h+var_50]
    mov     r12d, esi
    cmp     qword ptr [rdi+28h], 0
    mov     esi, [rdi+4Ch]
    mov     [rdi+4Ch], r12d
    jnz     loc_6830
    test    eax, eax
    jnz     loc_66A0
    lea     edi, [r12+r12]
    cmp     r12d, 5
    mov     eax, 1
    cmovz   edi, eax
    lea     eax, [rsi+rsi]
    cmp     esi, 4
    lea     r8d, [rax-9]
    cmovg   eax, r8d
    cmp     edi, eax
    jg      short loc_65E1
    test    cl, cl
    jnz     loc_7553
    
loc_65E1:
    cmp     edx, 29Ah
    jnz     loc_66AC
    mov     r10d, [rbp+8]
    test    r10d, r10d
    jnz     loc_7553
    
loc_65FA:
    mov     r10d, [rbp+8]
    test    r10d, r10d
    jz      loc_6870
    
loc_6607:
    mov     rax, [rsp+58h+var_50]
    movsxd  rax, dword ptr [rax+0C4h]
    test    eax, eax
    jz      loc_71F0
    mov     rcx, [rsp+58h+var_50]
    mov     edx, [rcx+0C8h]
    cmp     edx, 2
    jz      loc_6A9C
    cmp     edx, 3
    jz      loc_7803
    lea     rdx, configuration_table
    shl     rax, 4
    mov     rdi, rcx
    mov     esi, r12d
    call    qword ptr [rdx+rax+8]
    
loc_664D:
    lea     edx, [rax-2]
    cmp     edx, 1
    ja      short loc_6661
    mov     rcx, [rsp+58h+var_50]
    mov     dword ptr [rcx+8], 29Ah
    
loc_6661:
    test    eax, 0FFFFFFFDh
    jnz     loc_6C98
    
loc_666C:
    mov     edi, [rbp+20h]
    test    edi, edi
    jnz     short loc_6687
    
loc_6673:
    mov     rax, [rsp+58h+var_50]
    nop     dword ptr [rax+rax+00000000h]
    
loc_6680:
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    
loc_6687:
    add     rsp, 28h
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_66A0:
    cmp     edx, 29Ah
    jz      loc_7553
    
loc_66AC:
    cmp     edx, 2Ah
    jnz     loc_67EA
    mov     rdx, [rsp+58h+var_50]
    mov     eax, [rdx+54h]
    shl     eax, 0Ch
    cmp     dword ptr [rdx+0C8h], 1
    lea     ecx, [rax-7800h]
    jle     loc_6C50
    
loc_66D3:
    mov     rax, [rsp+58h+var_50]
    mov     r9d, [rax+0ACh]
    test    r9d, r9d
    jz      short loc_66E7
    or      ecx, 20h
    
loc_66E7:
    mov     eax, ecx
    mov     edx, 8421085h
    mov     rdi, [rsp+58h+var_50]
    mul     edx
    sub     ecx, edx
    shr     ecx, 1
    add     edx, ecx
    mov     rcx, [rdi+10h]
    shr     edx, 4
    mov     eax, edx
    shl     eax, 5
    sub     eax, edx
    mov     rdx, [rdi+28h]
    add     eax, 1Fh
    lea     rsi, [rdx+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], ah
    mov     rdx, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     r8d, [rdi+0ACh]
    test    r8d, r8d
    jz      short loc_6798
    mov     rdx, [rdi+28h]
    mov     rax, [rbp+60h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    shr     rax, 10h
    mov     [rdi+28h], rsi
    mov     esi, eax
    shr     esi, 8
    mov     [rcx+rdx], sil
    mov     rdx, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     rax, [rdi+28h]
    movzx   edx, word ptr [rbp+60h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dh
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    
loc_6798:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    call    _adler32
    mov     r14, [rbp+38h]
    mov     [rbp+60h], rax
    mov     rax, [rsp+58h+var_50]
    mov     rdi, r14
    mov     dword ptr [rax+8], 71h
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    cmp     [rbp+20h], eax
    mov     r13d, eax
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     loc_6C10
    
loc_67D7:
    mov     rax, [rsp+58h+var_50]
    cmp     qword ptr [rax+28h], 0
    jnz     loc_6680
    mov     edx, [rax+8]
    
loc_67EA:
    cmp     edx, 39h
    jz      loc_7018
    
loc_67F3:
    cmp     edx, 45h
    jz      loc_68A0
    cmp     edx, 49h
    jz      loc_7570
    cmp     edx, 5Bh
    jz      loc_7710
    cmp     edx, 67h
    jnz     loc_65FA
    mov     rax, [rsp+58h+var_50]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    jmp     loc_724B
    align 10h
    
loc_6830:
    mov     rbx, rdi
    call    _tr_flush_bits
    mov     rax, [rbx+28h]
    mov     edx, [rbp+20h]
    mov     r13d, eax
    cmp     eax, edx
    cmova   r13d, edx
    test    r13d, r13d
    jnz     loc_69E0
    
loc_6851:
    test    edx, edx
    mov     rax, [rsp+58h+var_50]
    jz      loc_6680
    mov     edx, [rax+8]
    jmp     loc_65E1
    align 10h
    
loc_6870:
    mov     rax, [rsp+58h+var_50]
    mov     r9d, [rax+0B4h]
    test    r9d, r9d
    jnz     loc_6607
    test    r12d, r12d
    jz      loc_6687
    cmp     dword ptr [rax+8], 29Ah
    jnz     loc_6607
    jmp     loc_6CA1
    
loc_68A0:
    mov     rax, [rsp+58h+var_50]
    mov     rax, [rax+38h]
    
loc_68A9:
    mov     rdx, [rax+18h]
    test    rdx, rdx
    jz      loc_6DDD
    mov     rdi, [rsp+58h+var_50]
    movzx   r14d, word ptr [rax+20h]
    mov     rsi, [rdi+40h]
    mov     rcx, [rdi+28h]
    mov     r13, [rdi+18h]
    sub     r14d, esi
    mov     r15d, r14d
    mov     ebx, r14d
    lea     rax, [rcx+r15]
    cmp     r13, rax
    jb      short loc_6920
    jmp     loc_6D70
    align 8
    
loc_68E8:
    mov     rax, [rsp+58h+var_50]
    mov     rcx, [rax+28h]
    test    rcx, rcx
    jnz     loc_6680
    mov     rdi, rax
    mov     eax, ebx
    sub     eax, r13d
    mov     r13, [rdi+18h]
    mov     rsi, [rdi+40h]
    mov     r15d, eax
    mov     ebx, eax
    mov     rax, [rdi+38h]
    cmp     r15, r13
    mov     rdx, [rax+18h]
    jbe     loc_6D70
    
loc_6920:
    mov     rax, [rsp+58h+var_50]
    mov     rdi, rcx
    sub     r13d, ecx
    mov     r14d, r13d
    add     rsi, rdx
    mov     r15d, ecx
    mov     rdx, r14
    mov     [rsp+58h+var_48], rcx
    add     rdi, [rax+10h]
    call    _memcpy
    mov     rax, [rsp+58h+var_50]
    mov     rdx, [rax+18h]
    mov     [rax+28h], rdx
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_696B
    mov     rcx, [rsp+58h+var_48]
    cmp     rdx, rcx
    ja      loc_6C70
    
loc_696B:
    mov     rax, [rsp+58h+var_50]
    add     [rax+40h], r14
    mov     r14, [rbp+38h]
    mov     rdi, r14
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    cmp     [rbp+20h], eax
    mov     r15d, eax
    cmovbe  r15d, [rbp+20h]
    test    r15d, r15d
    jz      loc_68E8
    mov     rdi, [rbp+18h]
    mov     rsi, [r14+20h]
    mov     r8d, r15d
    mov     rdx, r8
    mov     [rsp+58h+var_48], r8
    call    _memcpy
    mov     r8, [rsp+58h+var_48]
    add     [rbp+18h], r8
    add     [r14+20h], r8
    add     [rbp+28h], r8
    sub     [rbp+20h], r15d
    sub     [r14+28h], r8
    jnz     loc_68E8
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     loc_68E8
    align 20h
    
loc_69E0:
    mov     rbx, [rsp+58h+var_50]
    mov     rdi, [rbp+18h]
    mov     r14d, r13d
    mov     rdx, r14
    mov     rsi, [rbx+20h]
    call    _memcpy
    mov     edx, [rbp+20h]
    add     [rbp+18h], r14
    add     [rbx+20h], r14
    add     [rbp+28h], r14
    sub     edx, r13d
    mov     [rbp+20h], edx
    sub     [rbx+28h], r14
    jnz     loc_6851
    mov     rax, [rbx+10h]
    mov     [rbx+20h], rax
    jmp     loc_6851
    align 8
    
loc_6A28:
    mov     rax, [rsi+98h]
    mov     rcx, rsi
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_6A45
    mov     eax, eax
    add     rax, [rcx+60h]
    mov     rsi, rax
    
loc_6A45:
    mov     rbx, [rsp+58h+var_50]
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     r13, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r15, [r13+38h]
    mov     [rbx+98h], rax
    mov     rdi, r15
    call    _tr_flush_bits
    mov     rax, [r15+28h]
    cmp     [r13+20h], eax
    mov     r14d, eax
    cmovbe  r14d, [r13+20h]
    test    r14d, r14d
    jnz     loc_7580
    
loc_6A89:
    mov     rax, [rsp+58h+var_50]
    mov     rax, [rax]
    mov     esi, [rax+20h]
    test    esi, esi
    jz      loc_666C
    
loc_6A9C:
    mov     rax, [rsp+58h+var_50]
    mov     eax, [rax+0B4h]
    jmp     loc_6B35
    align 10h
    
loc_6AB0:
    mov     rbx, [rsp+58h+var_50]
    xor     edi, edi
    mov     eax, [rbx+0ACh]
    mov     ecx, [rbx+170Ch]
    mov     rdx, [rbx+60h]
    mov     rsi, [rbx+1710h]
    mov     dword ptr [rbx+0A0h], 0
    movzx   eax, byte ptr [rdx+rax]
    mov     [rsi+rcx*2], di
    mov     rdx, rcx
    mov     rsi, [rbx+1700h]
    add     edx, 1
    mov     [rbx+170Ch], edx
    mov     [rsi+rcx], al
    add     word ptr [rbx+rax*4+0D4h], 1
    mov     rsi, rbx
    mov     eax, [rbx+1708h]
    lea     ecx, [rax-1]
    mov     eax, [rbx+0B4h]
    sub     eax, 1
    cmp     [rsi+170Ch], ecx
    mov     [rbx+0B4h], eax
    mov     ebx, [rbx+0ACh]
    lea     edx, [rbx+1]
    mov     [rsi+0ACh], edx
    jz      loc_6A28
    
loc_6B35:
    test    eax, eax
    jnz     loc_6AB0
    mov     rbx, [rsp+58h+var_50]
    mov     rdi, rbx
    call    fill_window
    mov     r8d, [rbx+0B4h]
    test    r8d, r8d
    jnz     loc_6AB0
    test    r12d, r12d
    jz      loc_666C
    mov     rax, [rsp+58h+var_50]
    cmp     r12d, 4
    mov     dword ptr [rax+172Ch], 0
    jz      loc_7AE0
    mov     edx, [rax+170Ch]
    test    edx, edx
    jz      loc_7360
    mov     rcx, rax
    mov     rax, [rax+98h]
    xor     esi, esi
    mov     edx, [rcx+0ACh]
    sub     rdx, rax
    test    rax, rax
    js      short loc_6BAD
    mov     eax, eax
    add     rax, [rcx+60h]
    mov     rsi, rax
    
loc_6BAD:
    mov     rbx, [rsp+58h+var_50]
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     r13, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r15, [r13+38h]
    mov     [rbx+98h], rax
    mov     rdi, r15
    call    _tr_flush_bits
    mov     rax, [r15+28h]
    cmp     [r13+20h], eax
    mov     r14d, eax
    cmovbe  r14d, [r13+20h]
    test    r14d, r14d
    jnz     loc_7CDB
    
loc_6BF1:
    mov     rax, [rsp+58h+var_50]
    mov     rax, [rax]
    mov     r15d, [rax+20h]
    xor     eax, eax
    test    r15d, r15d
    setnz   al
    jmp     loc_6661
    align 10h
    
loc_6C10:
    mov     rdi, [rbp+18h]
    mov     rsi, [r14+20h]
    mov     r15d, r13d
    mov     rdx, r15
    call    _memcpy
    add     [rbp+18h], r15
    add     [r14+20h], r15
    add     [rbp+28h], r15
    sub     [rbp+20h], r13d
    sub     [r14+28h], r15
    jnz     loc_67D7
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     loc_67D7
    align 10h
    
loc_6C50:
    mov     eax, [rdx+0C4h]
    cmp     eax, 1
    jle     loc_66D3
    cmp     eax, 5
    jg      loc_7410
    or      ecx, 40h
    jmp     loc_66D3
    
loc_6C70:
    mov     rax, [rsp+58h+var_50]
    mov     rsi, rcx
    mov     rdi, [rbp+60h]
    sub     edx, r15d
    add     rsi, [rax+10h]
    call    _crc32
    mov     [rbp+60h], rax
    jmp     loc_696B
    align 8
    
loc_6C98:
    cmp     eax, 1
    jz      loc_7360
    
loc_6CA1:
    cmp     r12d, 4
    jnz     loc_6687
    
loc_6CAB:
    mov     rdi, [rsp+58h+var_50]
    mov     eax, 1
    mov     ecx, [rdi+30h]
    test    ecx, ecx
    jle     loc_64F5
    mov     rax, [rdi+28h]
    mov     rdx, [rbp+60h]
    lea     rsi, [rax+1]
    add     rax, [rdi+10h]
    cmp     ecx, 2
    jz      loc_7480
    shr     rdx, 10h
    mov     [rdi+28h], rsi
    mov     ecx, edx
    shr     ecx, 8
    mov     [rax], cl
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [rdi+28h]
    movzx   edx, word ptr [rbp+60h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dh
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    
loc_6D25:
    mov     r13, [rbp+38h]
    mov     rdi, r13
    call    _tr_flush_bits
    mov     rax, [r13+28h]
    cmp     [rbp+20h], eax
    mov     r12d, eax
    cmovbe  r12d, [rbp+20h]
    test    r12d, r12d
    jnz     loc_7770
    
loc_6D49:
    mov     rcx, [rsp+58h+var_50]
    mov     eax, [rcx+30h]
    test    eax, eax
    jle     short loc_6D5A
    neg     eax
    mov     [rcx+30h], eax
    
loc_6D5A:
    mov     rax, [rsp+58h+var_50]
    cmp     qword ptr [rax+28h], 0
    setz    al
    movzx   eax, al
    jmp     loc_64F5
    align 10h
    
loc_6D70:
    mov     rbx, [rsp+58h+var_50]
    mov     rdi, rcx
    add     rsi, rdx
    mov     rdx, r15
    mov     [rsp+58h+var_48], rcx
    add     rdi, [rbx+10h]
    call    _memcpy
    mov     rax, [rbx+38h]
    mov     rdx, [rbx+28h]
    mov     r14d, [rax+44h]
    add     rdx, r15
    mov     [rbx+28h], rdx
    test    r14d, r14d
    jz      short loc_6DD0
    mov     rcx, [rsp+58h+var_48]
    cmp     rdx, rcx
    jbe     short loc_6DD0
    mov     rbx, [rsp+58h+var_50]
    mov     rsi, rcx
    mov     rdi, [rbp+60h]
    sub     edx, ecx
    add     rsi, [rbx+10h]
    call    _crc32
    mov     [rbp+60h], rax
    mov     rax, [rbx+38h]
    nop     dword ptr [rax]
    
loc_6DD0:
    mov     rdx, [rsp+58h+var_50]
    mov     qword ptr [rdx+40h], 0
    
loc_6DDD:
    mov     rdx, [rsp+58h+var_50]
    mov     dword ptr [rdx+8], 49h
    
loc_6DE9:
    cmp     qword ptr [rax+28h], 0
    jz      loc_6F18
    mov     rdx, [rsp+58h+var_50]
    mov     rcx, [rsp+58h+var_50]
    mov     rsi, [rdx+28h]
    mov     rdx, rsi
    jmp     short loc_6E4B
    align 10h
    
loc_6E10:
    mov     rbx, [rsp+58h+var_50]
    mov     rcx, [rax+28h]
    mov     rax, [rbx+40h]
    lea     rdi, [rax+1]
    mov     [rbx+40h], rdi
    movzx   eax, byte ptr [rcx+rax]
    lea     rdi, [rdx+1]
    mov     rcx, [rbx+10h]
    mov     [rbx+28h], rdi
    test    al, al
    mov     [rcx+rdx], al
    jz      loc_6ED8
    mov     rdx, [rbx+28h]
    mov     rax, [rbx+38h]
    mov     rcx, rbx
    
loc_6E4B:
    cmp     [rcx+18h], rdx
    jnz     short loc_6E10
    mov     r13d, [rax+44h]
    test    r13d, r13d
    jz      short loc_6E63
    cmp     rsi, rdx
    jb      loc_7328
    
loc_6E63:
    mov     r14, [rbp+38h]
    mov     rdi, r14
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    cmp     [rbp+20h], eax
    mov     r13d, eax
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     short loc_6EA0
    
loc_6E83:
    mov     rax, [rsp+58h+var_50]
    mov     rdx, [rax+28h]
    test    rdx, rdx
    jnz     loc_6680
    mov     rax, [rax+38h]
    xor     esi, esi
    jmp     loc_6E10
    
loc_6EA0:
    mov     rdi, [rbp+18h]
    mov     rsi, [r14+20h]
    mov     r15d, r13d
    mov     rdx, r15
    call    _memcpy
    add     [rbp+18h], r15
    add     [r14+20h], r15
    add     [rbp+28h], r15
    sub     [rbp+20h], r13d
    sub     [r14+28h], r15
    jnz     short loc_6E83
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     short loc_6E83
    align 8
    
loc_6ED8:
    mov     rax, [rbx+38h]
    mov     rcx, rbx
    mov     ebx, [rax+44h]
    test    ebx, ebx
    jz      short loc_6F10
    mov     rdx, [rcx+28h]
    cmp     rdx, rsi
    jbe     short loc_6F10
    sub     edx, esi
    add     rsi, [rcx+10h]
    mov     rdi, [rbp+60h]
    mov     rbx, rcx
    call    _crc32
    mov     rcx, [rsp+58h+var_50]
    mov     [rbp+60h], rax
    mov     rax, [rbx+38h]
    xchg    ax, ax
    
loc_6F10:
    mov     qword ptr [rcx+40h], 0
    
loc_6F18:
    mov     rdx, [rsp+58h+var_50]
    mov     dword ptr [rdx+8], 5Bh
    
loc_6F24:
    cmp     qword ptr [rax+38h], 0
    jz      loc_723C
    mov     rdx, [rsp+58h+var_50]
    mov     rcx, [rsp+58h+var_50]
    mov     rsi, [rdx+28h]
    mov     rdx, rsi
    jmp     short loc_6F83
    align 8
    
loc_6F48:
    mov     rbx, [rsp+58h+var_50]
    mov     rcx, [rax+38h]
    mov     rax, [rbx+40h]
    lea     rdi, [rax+1]
    mov     [rbx+40h], rdi
    movzx   eax, byte ptr [rcx+rax]
    lea     rdi, [rdx+1]
    mov     rcx, [rbx+10h]
    mov     [rbx+28h], rdi
    test    al, al
    mov     [rcx+rdx], al
    jz      loc_7208
    mov     rdx, [rbx+28h]
    mov     rax, [rbx+38h]
    mov     rcx, rbx
    
loc_6F83:
    cmp     [rcx+18h], rdx
    jnz     short loc_6F48
    mov     r11d, [rax+44h]
    test    r11d, r11d
    jz      short loc_6F9B
    cmp     rsi, rdx
    jb      loc_7340
    
loc_6F9B:
    mov     r14, [rbp+38h]
    mov     rdi, r14
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    cmp     [rbp+20h], eax
    mov     r13d, eax
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     short loc_6FE0
    
loc_6FBB:
    mov     rax, [rsp+58h+var_50]
    mov     rdx, [rax+28h]
    test    rdx, rdx
    jnz     loc_6680
    mov     rax, [rax+38h]
    xor     esi, esi
    jmp     loc_6F48
    align 20h
    
loc_6FE0:
    mov     rdi, [rbp+18h]
    mov     rsi, [r14+20h]
    mov     r15d, r13d
    mov     rdx, r15
    call    _memcpy
    add     [rbp+18h], r15
    add     [r14+20h], r15
    add     [rbp+28h], r15
    sub     [rbp+20h], r13d
    sub     [r14+28h], r15
    jnz     short loc_6FBB
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     short loc_6FBB
    align 8
    
loc_7018:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    call    _crc32
    mov     rsi, [rsp+58h+var_50]
    mov     [rbp+60h], rax
    mov     rax, [rsi+28h]
    mov     rdx, [rsi+10h]
    lea     rcx, [rax+1]
    mov     [rsi+28h], rcx
    mov     byte ptr [rdx+rax], 1Fh
    mov     rax, [rsi+28h]
    mov     rdx, [rsi+10h]
    lea     rcx, [rax+1]
    mov     [rsi+28h], rcx
    mov     byte ptr [rdx+rax], 8Bh
    mov     rax, [rsi+28h]
    mov     rdx, [rsi+10h]
    lea     rcx, [rax+1]
    mov     [rsi+28h], rcx
    mov     byte ptr [rdx+rax], 8
    mov     rax, [rsi+38h]
    test    rax, rax
    jz      loc_75C8
    mov     ecx, [rax]
    mov     esi, [rax+44h]
    test    ecx, ecx
    setnz   dl
    test    esi, esi
    jnz     loc_7400
    
loc_7087:
    cmp     qword ptr [rax+18h], 0
    jz      short loc_7091
    add     edx, 4
    
loc_7091:
    cmp     qword ptr [rax+28h], 0
    jz      short loc_709B
    add     edx, 8
    
loc_709B:
    cmp     qword ptr [rax+38h], 0
    jz      short loc_70A5
    add     edx, 10h
    
loc_70A5:
    mov     rdi, [rsp+58h+var_50]
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [rdi+38h]
    mov     rdx, [rdi+10h]
    mov     rcx, [rax+8]
    mov     rax, [rdi+28h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [rdi+38h]
    mov     rdx, [rdi+28h]
    mov     rcx, [rdi+10h]
    mov     rax, [rax+8]
    lea     rsi, [rdx+1]
    mov     [rdi+28h], rsi
    shr     rax, 8
    mov     [rcx+rdx], al
    mov     rax, [rdi+38h]
    mov     rdx, [rdi+28h]
    mov     rcx, [rdi+10h]
    mov     rax, [rax+8]
    lea     rsi, [rdx+1]
    shr     rax, 10h
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     rax, [rdi+38h]
    mov     rdx, [rdi+28h]
    mov     rcx, [rdi+10h]
    mov     rax, [rax+8]
    lea     rsi, [rdx+1]
    shr     rax, 18h
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     eax, [rdi+0C4h]
    mov     edx, 2
    cmp     eax, 9
    jz      short loc_715F
    cmp     dword ptr [rdi+0C8h], 1
    jg      short loc_7155
    xor     edx, edx
    cmp     eax, 1
    jg      short loc_715F
    
loc_7155:
    mov     rdi, [rsp+58h+var_50]
    mov     edx, 4
    
loc_715F:
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [rdi+38h]
    mov     rdx, [rdi+10h]
    mov     ecx, [rax+14h]
    mov     rax, [rdi+28h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [rdi+38h]
    cmp     qword ptr [rax+18h], 0
    jz      short loc_71CB
    mov     ecx, [rax+20h]
    mov     rax, [rdi+28h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [rdi+38h]
    mov     rdx, [rdi+10h]
    mov     ecx, [rax+20h]
    mov     rax, [rdi+28h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], ch
    mov     rax, [rdi+38h]
    
loc_71CB:
    mov     edx, [rax+44h]
    test    edx, edx
    jnz     loc_76C0
    
loc_71D6:
    mov     rdx, [rsp+58h+var_50]
    mov     qword ptr [rdx+40h], 0
    mov     dword ptr [rdx+8], 45h
    jmp     loc_68A9
    align 10h
    
loc_71F0:
    mov     rdi, [rsp+58h+var_50]
    mov     esi, r12d
    call    deflate_stored
    jmp     loc_664D
    align 8
    
loc_7208:
    mov     rax, [rbx+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      loc_72DE
    mov     rdx, [rbx+28h]
    cmp     rdx, rsi
    jbe     short loc_723F
    mov     rbx, [rsp+58h+var_50]
    sub     edx, esi
    mov     rdi, [rbp+60h]
    add     rsi, [rbx+10h]
    call    _crc32
    mov     [rbp+60h], rax
    mov     rax, [rbx+38h]
    
loc_723C:
    mov     eax, [rax+44h]
    
loc_723F:
    mov     rdx, [rsp+58h+var_50]
    mov     dword ptr [rdx+8], 67h
    
loc_724B:
    test    eax, eax
    jz      loc_72DE
    mov     rcx, [rsp+58h+var_50]
    mov     rax, [rcx+28h]
    lea     rdx, [rax+2]
    cmp     rdx, [rcx+18h]
    jbe     short loc_729C
    mov     r14, [rbp+38h]
    mov     rdi, r14
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    cmp     [rbp+20h], eax
    mov     r13d, eax
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     loc_7440
    
loc_728A:
    mov     rdx, [rsp+58h+var_50]
    mov     rax, [rdx+28h]
    test    rax, rax
    jnz     loc_7428
    
loc_729C:
    mov     rdi, [rsp+58h+var_50]
    mov     rcx, [rbp+60h]
    lea     rsi, [rax+1]
    mov     rdx, [rdi+10h]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    mov     rdx, [rdi+28h]
    mov     rax, [rbp+60h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    shr     rax, 8
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    xor     esi, esi
    xor     edx, edx
    xor     edi, edi
    call    _crc32
    mov     [rbp+60h], rax
    
loc_72DE:
    mov     rax, [rsp+58h+var_50]
    mov     r14, [rbp+38h]
    mov     dword ptr [rax+8], 71h
    mov     rdi, r14
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    cmp     [rbp+20h], eax
    mov     r13d, eax
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     loc_73C0
    
loc_730E:
    mov     rax, [rsp+58h+var_50]
    cmp     qword ptr [rax+28h], 0
    jz      loc_65FA
    jmp     loc_6680
    align 8
    
loc_7328:
    sub     edx, esi
    add     rsi, [rcx+10h]
    mov     rdi, [rbp+60h]
    call    _crc32
    mov     [rbp+60h], rax
    jmp     loc_6E63
    
loc_7340:
    sub     edx, esi
    add     rsi, [rcx+10h]
    mov     rdi, [rbp+60h]
    call    _crc32
    mov     [rbp+60h], rax
    jmp     loc_6F9B
    align 20h
    
loc_7360:
    cmp     r12d, 1
    jz      loc_7544
    cmp     r12d, 5
    jz      short loc_738A
    mov     rdi, [rsp+58h+var_50]
    xor     ecx, ecx
    xor     edx, edx
    xor     esi, esi
    call    _tr_stored_block
    cmp     r12d, 3
    jz      loc_7BB8
    
loc_738A:
    mov     r14, [rbp+38h]
    mov     rdi, r14
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    mov     edx, [rbp+20h]
    mov     r13d, eax
    cmp     eax, edx
    cmova   r13d, edx
    test    r13d, r13d
    jnz     loc_7720
    
loc_73AF:
    test    edx, edx
    jnz     loc_6CA1
    jmp     loc_6673
    align 20h
    
loc_73C0:
    mov     rdi, [rbp+18h]
    mov     rsi, [r14+20h]
    mov     r15d, r13d
    mov     rdx, r15
    call    _memcpy
    add     [rbp+18h], r15
    add     [r14+20h], r15
    add     [rbp+28h], r15
    sub     [rbp+20h], r13d
    sub     [r14+28h], r15
    jnz     loc_730E
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     loc_730E
    align 20h
    
loc_7400:
    add     edx, 2
    jmp     loc_7087
    align 10h
    
loc_7410:
    mov     edx, ecx
    or      cl, 0C0h
    or      dl, 80h
    cmp     eax, 6
    cmovz   ecx, edx
    jmp     loc_66D3
    align 8
    
loc_7428:
    mov     dword ptr [rdx+4Ch], 0FFFFFFFFh
    xor     eax, eax
    jmp     loc_64F5
    align 20h
    
loc_7440:
    mov     rdi, [rbp+18h]
    mov     rsi, [r14+20h]
    mov     r15d, r13d
    mov     rdx, r15
    call    _memcpy
    add     [rbp+18h], r15
    add     [r14+20h], r15
    add     [rbp+28h], r15
    sub     [rbp+20h], r13d
    sub     [r14+28h], r15
    jnz     loc_728A
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     loc_728A
    align 20h
    
loc_7480:
    mov     [rdi+28h], rsi
    mov     [rax], dl
    mov     rdx, [rdi+28h]
    mov     rax, [rbp+60h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    shr     rax, 8
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     rdx, [rdi+28h]
    mov     rax, [rbp+60h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    shr     rax, 10h
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     rdx, [rdi+28h]
    mov     rax, [rbp+60h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    shr     rax, 18h
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     rax, [rdi+28h]
    mov     rcx, [rbp+10h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    mov     rdx, [rdi+28h]
    mov     rax, [rbp+10h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    shr     rax, 8
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     rdx, [rdi+28h]
    mov     rax, [rbp+10h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    shr     rax, 10h
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    mov     rax, [rbp+10h]
    mov     rdx, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rdx+1]
    shr     rax, 18h
    mov     [rdi+28h], rsi
    mov     [rcx+rdx], al
    jmp     loc_6D25
    
loc_7544:
    mov     rdi, [rsp+58h+var_50]
    call    _tr_align
    jmp     loc_738A
    
loc_7553:
    lea     rax, z_errmsg
    mov     rax, [rax+38h]
    mov     [rbp+30h], rax
    mov     eax, 0FFFFFFFBh
    jmp     loc_64F5
    align 10h
    
loc_7570:
    mov     rax, [rsp+58h+var_50]
    mov     rax, [rax+38h]
    jmp     loc_6DE9
    align 20h
    
loc_7580:
    mov     rdi, [r13+18h]
    mov     rsi, [r15+20h]
    mov     ecx, r14d
    mov     rdx, rcx
    mov     [rsp+58h+var_48], rcx
    call    _memcpy
    mov     rcx, [rsp+58h+var_48]
    add     [r13+18h], rcx
    add     [r15+20h], rcx
    add     [r13+28h], rcx
    sub     [r13+20h], r14d
    sub     [r15+28h], rcx
    jnz     loc_6A89
    mov     rax, [r15+10h]
    mov     [r15+20h], rax
    jmp     loc_6A89
    align 8
    
loc_75C8:
    mov     rax, [rsi+28h]
    mov     rdx, [rsi+10h]
    lea     rcx, [rax+1]
    mov     [rsi+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     rax, [rsi+28h]
    mov     rdx, [rsi+10h]
    lea     rcx, [rax+1]
    mov     [rsi+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     rax, [rsi+28h]
    mov     rdx, [rsi+10h]
    lea     rcx, [rax+1]
    mov     [rsi+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     rax, [rsi+28h]
    mov     rdx, [rsi+10h]
    lea     rcx, [rax+1]
    mov     [rsi+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     rax, [rsi+28h]
    mov     rdx, [rsi+10h]
    lea     rcx, [rax+1]
    mov     [rsi+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     edx, 2
    mov     eax, [rsi+0C4h]
    cmp     eax, 9
    jz      short loc_7651
    cmp     dword ptr [rsi+0C8h], 1
    jg      short loc_764C
    xor     edx, edx
    cmp     eax, 1
    jg      short loc_7651
    
loc_764C:
    mov     edx, 4
    
loc_7651:
    mov     rdi, [rsp+58h+var_50]
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [rdi+28h]
    mov     rdx, [rdi+10h]
    lea     rcx, [rax+1]
    mov     [rdi+28h], rcx
    mov     byte ptr [rdx+rax], 3
    mov     r14, [rbp+38h]
    mov     dword ptr [rdi+8], 71h
    mov     rdi, r14
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    cmp     [rbp+20h], eax
    mov     r13d, eax
    cmovbe  r13d, [rbp+20h]
    test    r13d, r13d
    jnz     loc_77C9
    
loc_76A8:
    mov     rax, [rsp+58h+var_50]
    cmp     qword ptr [rax+28h], 0
    jnz     loc_6680
    mov     edx, [rax+8]
    jmp     loc_67F3
    
loc_76C0:
    mov     rbx, [rsp+58h+var_50]
    mov     rdi, [rbp+60h]
    mov     rsi, [rbx+10h]
    mov     edx, [rbx+28h]
    call    _crc32
    mov     [rbp+60h], rax
    mov     rax, [rbx+38h]
    jmp     loc_71D6
    align 8
    
loc_76E8:
    mov     eax, 0FFFFFFFEh
    retn
    align 10h
    
loc_76F0:
    lea     rax, z_errmsg
    mov     rax, [rax+20h]
    mov     [rdi+30h], rax
    mov     eax, 0FFFFFFFEh
    jmp     loc_64F5
    align 10h
    
loc_7710:
    mov     rax, [rsp+58h+var_50]
    mov     rax, [rax+38h]
    jmp     loc_6F24
    align 20h
    
loc_7720:
    mov     rdi, [rbp+18h]
    mov     rsi, [r14+20h]
    mov     r15d, r13d
    mov     rdx, r15
    call    _memcpy
    mov     edx, [rbp+20h]
    add     [rbp+18h], r15
    add     [r14+20h], r15
    add     [rbp+28h], r15
    sub     edx, r13d
    mov     [rbp+20h], edx
    sub     [r14+28h], r15
    jnz     loc_73AF
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     loc_73AF
    align 20h
    
loc_7760:
    mov     eax, 0FFFFFFFEh
    jmp     loc_64F5
    align 10h
    
loc_7770:
    mov     rdi, [rbp+18h]
    mov     rsi, [r13+20h]
    mov     r14d, r12d
    mov     rdx, r14
    call    _memcpy
    add     [rbp+18h], r14
    add     [r13+20h], r14
    add     [rbp+28h], r14
    sub     [rbp+20h], r12d
    sub     [r13+28h], r14
    jnz     loc_6D49
    mov     rax, [r13+10h]
    mov     [r13+20h], rax
    jmp     loc_6D49
    align 10h
    
loc_77B0:
    lea     rax, z_errmsg
    mov     rax, [rax+38h]
    mov     [rdi+30h], rax
    mov     eax, 0FFFFFFFBh
    jmp     loc_64F5
    
loc_77C9:
    mov     rdi, [rbp+18h]
    mov     rsi, [r14+20h]
    mov     r15d, r13d
    mov     rdx, r15
    call    _memcpy
    add     [rbp+18h], r15
    add     [r14+20h], r15
    add     [rbp+28h], r15
    sub     [rbp+20h], r13d
    sub     [r14+28h], r15
    jnz     loc_76A8
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     loc_76A8
    
loc_7803:
    lea     r13, _length_code
    
loc_780A:
    mov     rax, [rsp+58h+var_50]
    mov     eax, [rax+0B4h]
    jmp     loc_78C6
    align 20h
    
loc_7820:
    mov     rcx, [rsp+58h+var_50]
    mov     edx, [rcx+0ACh]
    mov     dword ptr [rcx+0A0h], 0
    mov     rsi, [rcx+60h]
    mov     ecx, edx
    
loc_783B:
    test    edx, edx
    jz      short loc_7851
    lea     rdx, [rsi+rcx-1]
    movzx   edi, byte ptr [rdx]
    cmp     dil, [rdx+1]
    jz      loc_7928
    
loc_7851:
    mov     rdi, [rsp+58h+var_50]
    movzx   eax, byte ptr [rsi+rcx]
    xor     ebx, ebx
    mov     ecx, [rdi+170Ch]
    mov     rsi, [rdi+1710h]
    mov     [rsi+rcx*2], bx
    mov     rsi, [rdi+1700h]
    mov     rdx, rcx
    add     edx, 1
    mov     [rdi+170Ch], edx
    mov     [rsi+rcx], al
    add     word ptr [rdi+rax*4+0D4h], 1
    xor     ecx, ecx
    mov     eax, [rdi+1708h]
    mov     ebx, [rdi+0ACh]
    sub     eax, 1
    cmp     eax, [rdi+170Ch]
    lea     edx, [rbx+1]
    mov     eax, [rdi+0B4h]
    mov     [rdi+0ACh], edx
    setz    cl
    sub     eax, 1
    mov     [rdi+0B4h], eax
    
loc_78BE:
    test    ecx, ecx
    jnz     loc_7A5F
    
loc_78C6:
    cmp     eax, 102h
    ja      loc_7820
    mov     rbx, [rsp+58h+var_50]
    mov     rdi, rbx
    call    fill_window
    mov     eax, [rbx+0B4h]
    cmp     eax, 102h
    ja      loc_7820
    test    r12d, r12d
    jz      loc_666C
    test    eax, eax
    jz      loc_7C0D
    mov     edx, [rbx+0ACh]
    cmp     eax, 2
    mov     dword ptr [rbx+0A0h], 0
    mov     rsi, [rbx+60h]
    mov     ecx, edx
    jbe     loc_7851
    jmp     loc_783B
    align 8
    
loc_7928:
    cmp     dil, [rdx+2]
    jnz     loc_7851
    cmp     dil, [rdx+3]
    jnz     loc_7851
    lea     r10, [rsi+rcx+102h]
    add     rdx, 3
    
loc_7948:
    cmp     dil, [rdx+1]
    jnz     loc_7D98
    cmp     dil, [rdx+2]
    jnz     loc_7DAA
    cmp     dil, [rdx+3]
    jnz     loc_7DA1
    cmp     dil, [rdx+4]
    jnz     loc_7DCE
    cmp     dil, [rdx+5]
    jnz     loc_7DC5
    cmp     dil, [rdx+6]
    jnz     loc_7DBC
    cmp     dil, [rdx+7]
    jnz     loc_7DB3
    add     rdx, 8
    cmp     [rdx], dil
    setz    r9b
    cmp     r10, rdx
    setnbe  r8b
    test    r9b, r8b
    jnz     short loc_7948
    
loc_79A5:
    sub     edx, r10d
    mov     rdi, [rsp+58h+var_50]
    add     edx, 102h
    cmp     edx, eax
    mov     [rdi+0A0h], edx
    jbe     loc_7D8A
    mov     [rdi+0A0h], eax
    mov     edx, eax
    
loc_79C9:
    mov     ecx, [rdi+170Ch]
    mov     rsi, [rdi+1710h]
    mov     r14d, 1
    lea     eax, [rdx-3]
    mov     [rsi+rcx*2], r14w
    mov     rsi, [rdi+1700h]
    mov     rdx, rcx
    add     edx, 1
    mov     [rdi+170Ch], edx
    mov     [rsi+rcx], al
    movzx   eax, al
    xor     ecx, ecx
    movzx   eax, byte ptr [r13+rax+0]
    add     word ptr [rdi+rax*4+4D8h], 1
    movzx   eax, cs:_dist_code
    add     word ptr [rdi+rax*4+9C8h], 1
    mov     eax, [rdi+1708h]
    mov     edx, [rdi+0A0h]
    mov     dword ptr [rdi+0A0h], 0
    sub     eax, 1
    cmp     eax, [rdi+170Ch]
    mov     eax, [rdi+0B4h]
    setz    cl
    sub     eax, edx
    add     edx, [rdi+0ACh]
    mov     [rdi+0B4h], eax
    mov     [rdi+0ACh], edx
    jmp     loc_78BE
    
loc_7A5F:
    mov     rcx, [rsp+58h+var_50]
    xor     esi, esi
    mov     rax, [rcx+98h]
    sub     rdx, rax
    test    rax, rax
    js      short loc_7A7E
    mov     eax, eax
    add     rax, [rcx+60h]
    mov     rsi, rax
    
loc_7A7E:
    mov     rbx, [rsp+58h+var_50]
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     r14, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r15, [r14+38h]
    mov     [rbx+98h], rax
    mov     rdi, r15
    call    _tr_flush_bits
    mov     rax, [r15+28h]
    cmp     [r14+20h], eax
    mov     ecx, eax
    cmovbe  ecx, [r14+20h]
    test    ecx, ecx
    jnz     loc_7B6C
    
loc_7AC0:
    mov     rax, [rsp+58h+var_50]
    mov     rax, [rax]
    mov     r11d, [rax+20h]
    test    r11d, r11d
    jnz     loc_780A
    jmp     loc_666C
    align 20h
    
loc_7AE0:
    mov     rcx, rax
    mov     rax, [rax+98h]
    xor     esi, esi
    mov     edx, [rcx+0ACh]
    sub     rdx, rax
    test    rax, rax
    js      short loc_7B03
    mov     eax, eax
    add     rax, [rcx+60h]
    mov     rsi, rax
    
loc_7B03:
    mov     rbx, [rsp+58h+var_50]
    mov     ecx, 1
    mov     rdi, rbx
    call    _tr_flush_block
    mov     r12, [rbx]
    mov     eax, [rbx+0ACh]
    mov     r14, [r12+38h]
    mov     [rbx+98h], rax
    mov     rdi, r14
    call    _tr_flush_bits
    mov     rax, [r14+28h]
    cmp     [r12+20h], eax
    mov     r13d, eax
    cmovbe  r13d, [r12+20h]
    test    r13d, r13d
    jnz     loc_7C9D
    
loc_7B4D:
    mov     rdx, [rsp+58h+var_50]
    mov     rax, [rdx]
    mov     ecx, [rax+20h]
    test    ecx, ecx
    jz      loc_7C91
    mov     dword ptr [rdx+8], 29Ah
    jmp     loc_6CAB
    
loc_7B6C:
    mov     rdi, [r14+18h]
    mov     rsi, [r15+20h]
    mov     r8d, ecx
    mov     rdx, r8
    mov     [rsp+58h+var_3C], ecx
    mov     [rsp+58h+var_48], r8
    call    _memcpy
    mov     r8, [rsp+58h+var_48]
    mov     ecx, [rsp+58h+var_3C]
    add     [r14+18h], r8
    add     [r15+20h], r8
    add     [r14+28h], r8
    sub     [r14+20h], ecx
    sub     [r15+28h], r8
    jnz     loc_7AC0
    mov     rax, [r15+10h]
    mov     [r15+20h], rax
    jmp     loc_7AC0
    
loc_7BB8:
    mov     rbx, [rsp+58h+var_50]
    xor     ecx, ecx
    xor     esi, esi
    mov     eax, [rbx+84h]
    mov     rdi, [rbx+78h]
    sub     eax, 1
    lea     rdx, [rax+rax]
    mov     [rdi+rax*2], cx
    call    _memset
    mov     esi, [rbx+0B4h]
    test    esi, esi
    jnz     loc_738A
    mov     dword ptr [rbx+0ACh], 0
    mov     qword ptr [rbx+98h], 0
    mov     dword ptr [rbx+172Ch], 0
    jmp     loc_738A
    
loc_7C0D:
    mov     rax, [rsp+58h+var_50]
    cmp     r12d, 4
    mov     dword ptr [rax+172Ch], 0
    mov     rcx, rax
    jz      loc_7D1F
    mov     r9d, [rax+170Ch]
    test    r9d, r9d
    jz      loc_7360
    mov     edx, [rcx+0ACh]
    mov     rax, [rax+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_7C59
    mov     eax, eax
    add     rax, [rcx+60h]
    mov     rsi, rax
    
loc_7C59:
    mov     rbx, [rsp+58h+var_50]
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    mov     rax, [rbx]
    mov     r8d, [rax+20h]
    xor     eax, eax
    test    r8d, r8d
    setnz   al
    jmp     loc_6661
    
loc_7C91:
    mov     dword ptr [rdx+8], 29Ah
    jmp     loc_666C
    
loc_7C9D:
    mov     rdi, [r12+18h]
    mov     rsi, [r14+20h]
    mov     r15d, r13d
    mov     rdx, r15
    call    _memcpy
    add     [r12+18h], r15
    add     [r14+20h], r15
    add     [r12+28h], r15
    sub     [r12+20h], r13d
    sub     [r14+28h], r15
    jnz     loc_7B4D
    mov     rax, [r14+10h]
    mov     [r14+20h], rax
    jmp     loc_7B4D
    
loc_7CDB:
    mov     rdi, [r13+18h]
    mov     rsi, [r15+20h]
    mov     ecx, r14d
    mov     rdx, rcx
    mov     [rsp+58h+var_48], rcx
    call    _memcpy
    mov     rcx, [rsp+58h+var_48]
    add     [r13+18h], rcx
    add     [r15+20h], rcx
    add     [r13+28h], rcx
    sub     [r13+20h], r14d
    sub     [r15+28h], rcx
    jnz     loc_6BF1
    mov     rax, [r15+10h]
    mov     [r15+20h], rax
    jmp     loc_6BF1
    
loc_7D1F:
    mov     edx, [rcx+0ACh]
    mov     rax, [rax+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_7D3F
    mov     eax, eax
    add     rax, [rcx+60h]
    mov     rsi, rax
    
loc_7D3F:
    mov     rbx, [rsp+58h+var_50]
    mov     ecx, 1
    mov     rdi, rbx
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    mov     rax, [rbx]
    mov     rdx, rbx
    mov     r10d, [rax+20h]
    test    r10d, r10d
    jz      loc_7C91
    mov     rax, [rsp+58h+var_50]
    mov     dword ptr [rax+8], 29Ah
    jmp     loc_6CAB
    
loc_7D8A:
    cmp     edx, 2
    ja      loc_79C9
    jmp     loc_7851
    
loc_7D98:
    add     rdx, 1
    jmp     loc_79A5
    
loc_7DA1:
    add     rdx, 3
    jmp     loc_79A5
    
loc_7DAA:
    add     rdx, 2
    jmp     loc_79A5
    
loc_7DB3:
    add     rdx, 7
    jmp     loc_79A5
    
loc_7DBC:
    add     rdx, 6
    jmp     loc_79A5
    
loc_7DC5:
    add     rdx, 5
    jmp     loc_79A5
    
loc_7DCE:
    add     rdx, 4
    jmp     loc_79A5
    

<deflateParams>:
    
    test    rdi, rdi
    jz      loc_804F
    push    r13
    push    r12
    mov     r12, rdi
    push    rbp
    push    rbx
    sub     rsp, 8
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_7E12
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_7E12
    mov     rbx, [rdi+38h]
    test    rbx, rbx
    jz      short loc_7E12
    cmp     rdi, [rbx]
    jz      short loc_7E28
    
loc_7E12:
    mov     eax, 0FFFFFFFEh
    
loc_7E17:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 8
    
loc_7E28:
    movsxd  rbp, esi
    mov     esi, [rbx+8]
    mov     r13d, edx
    mov     edx, 1
    lea     ecx, [rsi-2Ah]
    cmp     ecx, 3Dh
    jbe     loc_7F30
    
loc_7E42:
    cmp     esi, 71h
    setnz   al
    cmp     esi, 29Ah
    setnz   cl
    and     eax, ecx
    and     al, dl
    jnz     short loc_7E12
    cmp     ebp, 0FFFFFFFFh
    jz      loc_7F50
    cmp     ebp, 9
    setnbe  al
    
loc_7E66:
    cmp     r13d, 4
    ja      short loc_7E12
    test    al, al
    jnz     short loc_7E12
    cmp     [rbx+0C8h], r13d
    mov     eax, [rbx+0C4h]
    jz      loc_7F60
    cmp     qword ptr [rbx+1738h], 0
    jnz     loc_7F93
    
loc_7E91:
    cmp     ebp, eax
    jz      short loc_7F12
    test    eax, eax
    jnz     short loc_7ED6
    mov     eax, [rbx+1728h]
    test    eax, eax
    jz      short loc_7ED6
    mov     r8d, [rbx+84h]
    cmp     eax, 1
    mov     rdi, [rbx+78h]
    lea     ecx, [r8-1]
    lea     rdx, [rcx+rcx]
    jz      loc_7FC8
    xor     eax, eax
    mov     [rdi+rcx*2], ax
    
loc_7EC5:
    xor     esi, esi
    call    _memset
    mov     dword ptr [rbx+1728h], 0
    
loc_7ED6:
    lea     rax, configuration_table
    mov     [rbx+0C4h], ebp
    shl     rbp, 4
    add     rbp, rax
    movzx   eax, word ptr [rbp+2]
    mov     [rbx+0C0h], eax
    movzx   eax, word ptr [rbp+0]
    mov     [rbx+0CCh], eax
    movzx   eax, word ptr [rbp+4]
    mov     [rbx+0D0h], eax
    movzx   eax, word ptr [rbp+6]
    mov     [rbx+0BCh], eax
    
loc_7F12:
    mov     [rbx+0C8h], r13d
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_7F30:
    mov     rax, 2002000088008001h
    shr     rax, cl
    not     rax
    mov     edx, eax
    and     edx, 1
    jmp     loc_7E42
    align 10h
    
loc_7F50:
    mov     ebp, 6
    jmp     loc_7E66
    align 20h
    
loc_7F60:
    lea     rsi, configuration_table
    movsxd  rcx, ebp
    movsxd  rdx, eax
    shl     rdx, 4
    shl     rcx, 4
    mov     rdi, [rsi+rdx+8]
    cmp     [rsi+rcx+8], rdi
    jz      loc_7E91
    cmp     qword ptr [rbx+1738h], 0
    jz      loc_7E91
    
loc_7F93:
    mov     esi, 5
    mov     rdi, r12
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_7E12
    mov     r10d, [r12+20h]
    test    r10d, r10d
    jz      loc_8055
    mov     eax, [rbx+0C4h]
    jmp     loc_7E91
    align 8
    
loc_7FC8:
    lea     rax, [rdi+r8*2]
    not     rcx
    mov     esi, [rbx+50h]
    lea     r8, [rax+rcx*2]
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_7FE0:
    sub     rax, 2
    movzx   ecx, word ptr [rax]
    cmp     esi, ecx
    ja      short loc_8030
    sub     ecx, esi
    cmp     r8, rax
    mov     [rax], cx
    jnz     short loc_7FE0
    
loc_7FF5:
    mov     rcx, [rbx+70h]
    mov     eax, esi
    lea     rax, [rcx+rax*2]
    lea     ecx, [rsi-1]
    not     rcx
    lea     r8, [rax+rcx*2]
    nop     dword ptr [rax+00000000h]
    
loc_8010:
    sub     rax, 2
    movzx   ecx, word ptr [rax]
    cmp     esi, ecx
    ja      short loc_8040
    sub     ecx, esi
    cmp     r8, rax
    mov     [rax], cx
    jnz     short loc_8010
    jmp     loc_7EC5
    align 10h
    
loc_8030:
    xor     r9d, r9d
    cmp     r8, rax
    mov     [rax], r9w
    jnz     short loc_7FE0
    jmp     short loc_7FF5
    align 20h
    
loc_8040:
    xor     ecx, ecx
    cmp     r8, rax
    mov     [rax], cx
    jnz     short loc_8010
    jmp     loc_7EC5
    
loc_804F:
    mov     eax, 0FFFFFFFEh
    retn
    
loc_8055:
    mov     eax, 0FFFFFFFBh
    jmp     loc_7E17
    

<deflateEnd>:
    
    test    rdi, rdi
    jz      loc_8178
    cmp     qword ptr [rdi+40h], 0
    jz      loc_8178
    mov     r8, [rdi+48h]
    test    r8, r8
    jz      loc_8178
    mov     rdx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rdx, rdx
    jz      short locret_8094
    cmp     rdi, [rdx]
    jz      short loc_80A0
    
locret_8094:
    rep retn
    align 20h
    
loc_80A0:
    push    rbp
    push    rbx
    mov     esi, 1
    sub     rsp, 8
    mov     ebp, [rdx+8]
    lea     ecx, [rbp-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_80C9
    mov     rsi, 2002000088008001h
    shr     rsi, cl
    not     rsi
    and     esi, 1
    
loc_80C9:
    cmp     ebp, 29Ah
    setnz   cl
    cmp     ebp, 71h
    setnz   al
    test    cl, al
    jz      short loc_80EA
    test    sil, sil
    mov     eax, 0FFFFFFFEh
    jnz     loc_816B
    
loc_80EA:
    mov     rsi, [rdx+10h]
    mov     rbx, rdi
    mov     rdi, [rdi+50h]
    test    rsi, rsi
    jz      short loc_8109
    call    r8
    mov     rdx, [rbx+38h]
    mov     r8, [rbx+48h]
    mov     rdi, [rbx+50h]
    
loc_8109:
    mov     rsi, [rdx+78h]
    test    rsi, rsi
    jz      short loc_8121
    call    r8
    mov     rdx, [rbx+38h]
    mov     r8, [rbx+48h]
    mov     rdi, [rbx+50h]
    
loc_8121:
    mov     rsi, [rdx+70h]
    test    rsi, rsi
    jz      short loc_8139
    call    r8
    mov     rdx, [rbx+38h]
    mov     r8, [rbx+48h]
    mov     rdi, [rbx+50h]
    
loc_8139:
    mov     rsi, [rdx+60h]
    test    rsi, rsi
    jz      short loc_8151
    call    r8
    mov     r8, [rbx+48h]
    mov     rdx, [rbx+38h]
    mov     rdi, [rbx+50h]
    
loc_8151:
    mov     rsi, rdx
    call    r8
    xor     eax, eax
    cmp     ebp, 71h
    mov     qword ptr [rbx+38h], 0
    setnz   al
    lea     eax, [rax+rax*2-3]
    
loc_816B:
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 8
    
loc_8178:
    mov     eax, 0FFFFFFFEh
    retn
    

<deflateInit2_>:
    
    var_3C= dword ptr -3Ch
    arg_0= qword ptr  8
    arg_8= dword ptr  10h
    
    
    push    r15
    push    r14
    mov     r15d, esi
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    mov     rax, [rsp+48h+arg_0]
    mov     esi, [rsp+48h+arg_8]
    test    rax, rax
    jz      loc_8458
    cmp     byte ptr [rax], 31h
    setnz   al
    cmp     esi, 70h
    setnz   sil
    or      al, sil
    jnz     loc_8458
    test    rdi, rdi
    mov     rbp, rdi
    jz      loc_8440
    mov     r13d, r8d
    mov     r8, [rdi+40h]
    mov     r14d, r9d
    mov     qword ptr [rdi+30h], 0
    test    r8, r8
    jz      loc_8420
    
loc_81E0:
    cmp     qword ptr [rbp+48h], 0
    jz      loc_8410
    
loc_81EB:
    cmp     r15d, 0FFFFFFFFh
    mov     esi, 6
    cmovz   r15d, esi
    test    ecx, ecx
    js      loc_83F8
    cmp     ecx, 0Fh
    mov     r9d, 1
    jg      loc_83E0
    
loc_820F:
    lea     esi, [r13-1]
    cmp     esi, 8
    ja      loc_8440
    lea     esi, [rcx-8]
    cmp     esi, 7
    ja      loc_8440
    cmp     edx, 8
    jnz     loc_8440
    cmp     r14d, 4
    ja      loc_8440
    cmp     r15d, 9
    ja      loc_8440
    cmp     ecx, 8
    jnz     short loc_8252
    test    al, al
    jnz     loc_8440
    
loc_8252:
    cmp     ecx, 8
    mov     r12d, 9
    mov     [rsp+48h+var_3C], r9d
    cmovnz  r12d, ecx
    mov     rdi, [rbp+50h]
    mov     edx, 1740h
    mov     esi, 1
    call    r8
    test    rax, rax
    mov     rbx, rax
    jz      loc_8485
    mov     r8d, 1
    mov     r9d, [rsp+48h+var_3C]
    mov     ecx, r12d
    mov     esi, r8d
    mov     [rbp+38h], rax
    mov     [rax], rbp
    shl     esi, cl
    mov     dword ptr [rax+8], 2Ah
    mov     qword ptr [rax+38h], 0
    mov     [rax+30h], r9d
    mov     [rax+50h], esi
    lea     ecx, [r13+7]
    mov     [rax+54h], r12d
    lea     eax, [rsi-1]
    lea     edx, [r13+9]
    mov     [rbx+88h], ecx
    mov     [rsp+48h+var_3C], r8d
    mov     [rbx+58h], eax
    mov     eax, r8d
    mov     rdi, [rbp+50h]
    shl     eax, cl
    mov     ecx, 0AAAAAAABh
    mov     [rbx+84h], eax
    sub     eax, 1
    mov     [rbx+8Ch], eax
    mov     eax, edx
    mul     ecx
    shr     edx, 1
    mov     [rbx+90h], edx
    mov     edx, 2
    call    qword ptr [rbp+40h]
    mov     esi, [rbx+50h]
    mov     rdi, [rbp+50h]
    mov     edx, 2
    mov     [rbx+60h], rax
    call    qword ptr [rbp+40h]
    mov     esi, [rbx+84h]
    mov     rdi, [rbp+50h]
    mov     edx, 2
    mov     [rbx+70h], rax
    call    qword ptr [rbp+40h]
    mov     r8d, [rsp+48h+var_3C]
    lea     ecx, [r13+6]
    mov     edx, 4
    mov     [rbx+78h], rax
    mov     qword ptr [rbx+1738h], 0
    mov     rdi, [rbp+50h]
    mov     esi, r8d
    shl     esi, cl
    mov     [rbx+1708h], esi
    call    qword ptr [rbp+40h]
    mov     ecx, [rbx+1708h]
    cmp     qword ptr [rbx+60h], 0
    mov     [rbx+10h], rax
    lea     rsi, ds:0[rcx*4]
    mov     rdx, rcx
    mov     [rbx+18h], rsi
    jz      loc_8460
    cmp     qword ptr [rbx+70h], 0
    jz      loc_8460
    cmp     qword ptr [rbx+78h], 0
    jz      loc_8460
    test    rax, rax
    jz      loc_8460
    shr     edx, 1
    mov     [rbx+0C4h], r15d
    mov     [rbx+0C8h], r14d
    lea     rdx, [rax+rdx*2]
    mov     byte ptr [rbx+48h], 8
    mov     rdi, rbp
    mov     [rbx+1710h], rdx
    lea     rdx, [rcx+rcx*2]
    add     rax, rdx
    mov     [rbx+1700h], rax
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    jmp     _deflateReset
    align 20h
    
loc_83E0:
    sub     ecx, 10h
    mov     eax, 1
    mov     r9d, 2
    jmp     loc_820F
    align 8
    
loc_83F8:
    neg     ecx
    mov     eax, 1
    xor     r9d, r9d
    jmp     loc_820F
    align 10h
    
loc_8410:
    lea     rdi, zcfree
    mov     [rbp+48h], rdi
    jmp     loc_81EB
    
loc_8420:
    lea     r8, zcalloc
    mov     qword ptr [rdi+50h], 0
    mov     [rdi+40h], r8
    jmp     loc_81E0
    align 20h
    
loc_8440:
    mov     eax, 0FFFFFFFEh
    
loc_8445:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_8458:
    mov     eax, 0FFFFFFFAh
    jmp     short loc_8445
    align 20h
    
loc_8460:
    lea     rax, z_errmsg
    mov     dword ptr [rbx+8], 29Ah
    mov     rdi, rbp
    mov     rax, [rax+30h]
    mov     [rbp+30h], rax
    call    _deflateEnd
    mov     eax, 0FFFFFFFCh
    jmp     short loc_8445
    
loc_8485:
    mov     eax, 0FFFFFFFCh
    jmp     short loc_8445
    

<deflateInit_>:
    
    sub     rsp, 8
    xor     r9d, r9d
    mov     r8d, 8
    push    rcx
    push    rdx
    mov     ecx, 0Fh
    mov     edx, 8
    call    _deflateInit2_
    add     rsp, 18h
    retn
    

<deflateCopy>:
    
    test    rsi, rsi
    jz      loc_8748
    mov     r8, [rsi+40h]
    test    r8, r8
    jz      loc_8748
    cmp     qword ptr [rsi+48h], 0
    jz      loc_8748
    push    r13
    push    r12
    mov     eax, 0FFFFFFFEh
    push    rbp
    push    rbx
    sub     rsp, 8
    mov     r12, [rsi+38h]
    test    r12, r12
    jz      short loc_84FF
    cmp     rsi, [r12]
    jz      short loc_8510
    
loc_84FF:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_8510:
    mov     eax, [r12+8]
    mov     edx, 1
    lea     ecx, [rax-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_8535
    mov     rdx, 2002000088008001h
    shr     rdx, cl
    not     rdx
    and     edx, 1
    
loc_8535:
    cmp     eax, 71h
    setnz   cl
    cmp     eax, 29Ah
    setnz   al
    test    cl, al
    jz      short loc_8550
    test    dl, dl
    mov     eax, 0FFFFFFFEh
    jnz     short loc_84FF
    
loc_8550:
    test    rdi, rdi
    jz      loc_8750
    movdqu  xmm0, xmmword ptr [rsi]
    mov     rbp, rdi
    mov     edx, 1740h
    movups  xmmword ptr [rdi], xmm0
    movdqu  xmm0, xmmword ptr [rsi+10h]
    movups  xmmword ptr [rdi+10h], xmm0
    movdqu  xmm0, xmmword ptr [rsi+20h]
    movups  xmmword ptr [rdi+20h], xmm0
    movdqu  xmm0, xmmword ptr [rsi+30h]
    movups  xmmword ptr [rdi+30h], xmm0
    movdqu  xmm0, xmmword ptr [rsi+40h]
    movups  xmmword ptr [rdi+40h], xmm0
    movdqu  xmm0, xmmword ptr [rsi+50h]
    movups  xmmword ptr [rdi+50h], xmm0
    movdqu  xmm0, xmmword ptr [rsi+60h]
    mov     esi, 1
    movups  xmmword ptr [rdi+60h], xmm0
    mov     rdi, [rdi+50h]
    call    r8
    test    rax, rax
    mov     rbx, rax
    jz      loc_8760
    mov     [rbp+38h], rax
    mov     rax, [r12]
    lea     rdi, [rbx+8]
    mov     rcx, rbx
    mov     rsi, r12
    mov     edx, 2
    and     rdi, 0FFFFFFFFFFFFFFF8h
    mov     [rbx], rax
    mov     rax, [r12+1738h]
    sub     rcx, rdi
    sub     rsi, rcx
    add     ecx, 1740h
    shr     ecx, 3
    mov     [rbx+1738h], rax
    rep movsq
    mov     [rbx], rbp
    mov     esi, [rbx+50h]
    mov     rdi, [rbp+50h]
    call    qword ptr [rbp+40h]
    mov     esi, [rbx+50h]
    mov     rdi, [rbp+50h]
    mov     edx, 2
    mov     [rbx+60h], rax
    call    qword ptr [rbp+40h]
    mov     esi, [rbx+84h]
    mov     rdi, [rbp+50h]
    mov     edx, 2
    mov     [rbx+70h], rax
    call    qword ptr [rbp+40h]
    mov     rdi, [rbp+50h]
    mov     [rbx+78h], rax
    mov     edx, 4
    mov     esi, [rbx+1708h]
    call    qword ptr [rbp+40h]
    mov     rdi, [rbx+60h]
    mov     r13, rax
    mov     [rbx+10h], rax
    test    rdi, rdi
    jz      loc_8730
    cmp     qword ptr [rbx+70h], 0
    jz      loc_8730
    cmp     qword ptr [rbx+78h], 0
    jz      loc_8730
    test    rax, rax
    jz      loc_8730
    mov     eax, [rbx+50h]
    mov     rsi, [r12+60h]
    lea     edx, [rax+rax]
    call    _memcpy
    mov     edx, [rbx+50h]
    mov     rdi, [rbx+70h]
    mov     rsi, [r12+70h]
    add     rdx, rdx
    call    _memcpy
    mov     edx, [rbx+84h]
    mov     rdi, [rbx+78h]
    mov     rsi, [r12+78h]
    add     rdx, rdx
    call    _memcpy
    mov     edx, [rbx+18h]
    mov     rdi, [rbx+10h]
    mov     rsi, [r12+10h]
    call    _memcpy
    mov     rax, [r12+20h]
    mov     rdx, [rbx+10h]
    add     rax, rdx
    sub     rax, [r12+10h]
    mov     [rbx+20h], rax
    mov     eax, [rbx+1708h]
    mov     ecx, eax
    lea     rax, [rax+rax*2]
    shr     ecx, 1
    add     rdx, rax
    lea     rax, [rbx+0D4h]
    lea     rcx, [r13+rcx*2+0]
    mov     [rbx+1700h], rdx
    mov     [rbx+0B58h], rax
    lea     rax, [rbx+9C8h]
    mov     [rbx+1710h], rcx
    mov     [rbx+0B70h], rax
    lea     rax, [rbx+0ABCh]
    mov     [rbx+0B88h], rax
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    
loc_8730:
    mov     rdi, rbp
    call    _deflateEnd
    mov     eax, 0FFFFFFFCh
    jmp     loc_84FF
    align 8
    
loc_8748:
    mov     eax, 0FFFFFFFEh
    retn
    align 10h
    
loc_8750:
    mov     eax, 0FFFFFFFEh
    jmp     loc_84FF
    align 20h
    
loc_8760:
    mov     eax, 0FFFFFFFCh
    jmp     loc_84FF
    

<inflateBackInit_>:
    
    test    rcx, rcx
    jz      loc_8840
    cmp     byte ptr [rcx], 31h
    jnz     loc_8840
    cmp     r8d, 70h
    jnz     loc_8840
    test    rdi, rdi
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    jz      loc_8850
    test    rdx, rdx
    jz      loc_8850
    lea     ecx, [rsi-8]
    cmp     ecx, 7
    ja      loc_8850
    mov     rcx, [rdi+40h]
    mov     qword ptr [rdi+30h], 0
    test    rcx, rcx
    jz      short loc_8810
    cmp     qword ptr [rbx+48h], 0
    mov     rdi, [rdi+50h]
    jz      short loc_882C
    
loc_87CD:
    mov     r12, rdx
    mov     ebp, esi
    mov     edx, 1BF8h
    mov     esi, 1
    call    rcx
    test    rax, rax
    jz      short loc_8857
    mov     edx, 1
    mov     ecx, ebp
    mov     [rbx+38h], rax
    shl     edx, cl
    mov     dword ptr [rax+1Ch], 8000h
    mov     [rax+38h], ebp
    mov     [rax+3Ch], edx
    mov     [rax+48h], r12
    mov     qword ptr [rax+40h], 0
    xor     eax, eax
    
loc_880B:
    pop     rbx
    pop     rbp
    pop     r12
    retn
    
loc_8810:
    lea     rcx, zcalloc
    mov     qword ptr [rdi+50h], 0
    mov     [rdi+40h], rcx
    xor     edi, edi
    cmp     qword ptr [rbx+48h], 0
    jnz     short loc_87CD
    
loc_882C:
    lea     rax, zcfree
    mov     [rbx+48h], rax
    jmp     short loc_87CD
    align 20h
    
loc_8840:
    mov     eax, 0FFFFFFFAh
    retn
    align 10h
    
loc_8850:
    mov     eax, 0FFFFFFFEh
    jmp     short loc_880B
    
loc_8857:
    mov     eax, 0FFFFFFFCh
    jmp     short loc_880B
    

<inflateBack>:
    
    var_A8= qword ptr -0A8h
    var_A0= qword ptr -0A0h
    var_94= dword ptr -94h
    var_90= qword ptr -90h
    var_88= qword ptr -88h
    dest= qword ptr -80h
    var_78= qword ptr -78h
    var_70= qword ptr -70h
    var_68= qword ptr -68h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    src= qword ptr -48h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 78h
    mov     rax, fs:28h
    mov     [rsp+0A8h+var_40], rax
    xor     eax, eax
    test    rdi, rdi
    mov     [rsp+0A8h+var_A8], rdx
    mov     [rsp+0A8h+var_90], rcx
    mov     [rsp+0A8h+var_88], r8
    jz      loc_91F0
    mov     r12, [rdi+38h]
    mov     r15, rdi
    test    r12, r12
    jz      loc_91F0
    mov     rax, [rdi]
    xor     r14d, r14d
    mov     qword ptr [rdi+30h], 0
    mov     r13, rsi
    mov     dword ptr [r12+8], 3F3Fh
    mov     dword ptr [r12+0Ch], 0
    mov     dword ptr [r12+40h], 0
    test    rax, rax
    mov     [rsp+0A8h+src], rax
    jz      short loc_88DF
    mov     r14d, [rdi+8]
    
loc_88DF:
    mov     rax, [r12+48h]
    lea     rsi, [rsp+0A8h+src]
    xor     ebx, ebx
    xor     ebp, ebp
    mov     [rsp+0A8h+var_A0], rsi
    mov     [rsp+0A8h+dest], rax
    mov     eax, [r12+3Ch]
    mov     [rsp+0A8h+var_94], eax
    mov     eax, 3F3Fh
    
loc_8905:
    sub     eax, 3F3Fh
    cmp     eax, 12h
    ja      def_8921
    lea     rdi, jpt_8921
    movsxd  rax, ds:(jpt_8921 - 17C20h)[rdi+rax*4]
    add     rax, rdi
    jmp     rax
    align 8
    
loc_8928:
    shr     rbp, cl
    sub     ebx, edx
    mov     [r12+5Ch], r8d
    
loc_8932:
    mov     esi, [rsp+0A8h+var_94]
    test    esi, esi
    jnz     loc_95A8
    mov     eax, [r12+3Ch]
    mov     rcx, [r12+48h]
    mov     rdi, [rsp+0A8h+var_88]
    mov     [rsp+0A8h+var_94], eax
    mov     [r12+40h], eax
    mov     edx, eax
    mov     rsi, rcx
    mov     [rsp+0A8h+dest], rcx
    mov     rax, [rsp+0A8h+var_90]
    call    rax
    test    eax, eax
    mov     rcx, [rsp+0A8h+dest]
    jnz     loc_9613
    mov     r8d, [r12+5Ch]
    
loc_8979:
    sub     [rsp+0A8h+var_94], 1
    lea     rax, [rcx+1]
    mov     [rcx], r8b
    mov     dword ptr [r12+8], 3F48h
    mov     [rsp+0A8h+dest], rax
    nop     dword ptr [rax+rax+00h]
    
loc_8998:
    cmp     r14d, 5
    ja      loc_8F00
    
loc_89A2:
    mov     edi, [r12+78h]
    mov     eax, 0FFFFFFFFh
    mov     rsi, [r12+68h]
    mov     r9d, ebp
    mov     ecx, edi
    shl     eax, cl
    not     eax
    and     eax, ebp
    lea     r8, [rsi+rax*4]
    movzx   edx, byte ptr [r8+1]
    cmp     ebx, edx
    mov     ecx, edx
    jnb     loc_9370
    mov     eax, r14d
    mov     [rsp+0A8h+var_78], r15
    mov     r14, rbp
    mov     r15, r12
    mov     rbp, [rsp+0A8h+var_A0]
    mov     r12d, ebx
    mov     rbx, [rsp+0A8h+var_A8]
    nop     dword ptr [rax+00000000h]
    
loc_89F0:
    test    eax, eax
    jnz     short loc_8A0D
    mov     rsi, rbp
    mov     rdi, rbx
    call    r13
    test    eax, eax
    jz      loc_9060
    mov     rsi, [r15+68h]
    mov     edi, [r15+78h]
    
loc_8A0D:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, r12d
    add     r12d, 8
    shl     rdx, cl
    mov     ecx, edi
    add     r14, rdx
    mov     edx, 0FFFFFFFFh
    shl     edx, cl
    mov     r9d, r14d
    not     edx
    and     edx, r14d
    lea     r8, [rsi+rdx*4]
    movzx   edx, byte ptr [r8+1]
    cmp     edx, r12d
    mov     ecx, edx
    ja      short loc_89F0
    mov     rbp, r14
    mov     r14d, eax
    movzx   eax, byte ptr [r8]
    movzx   r8d, word ptr [r8+2]
    mov     ebx, r12d
    mov     r12, r15
    mov     r15, [rsp+0A8h+var_78]
    
loc_8A69:
    test    al, al
    jz      loc_8928
    test    al, 0F0h
    jz      loc_9291
    mov     ecx, edx
    sub     ebx, edx
    mov     [r12+5Ch], r8d
    shr     rbp, cl
    
loc_8A85:
    test    al, 20h
    jz      loc_9204
    mov     dword ptr [r12+8], 3F3Fh
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_8AA0:
    mov     r9d, [r12+0Ch]
    test    r9d, r9d
    jnz     loc_8DF8
    cmp     ebx, 2
    ja      short loc_8AEF
    
loc_8AB3:
    test    r14d, r14d
    jnz     short loc_8ACF
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r13
    test    eax, eax
    mov     r14d, eax
    jz      loc_8EF0
    
loc_8ACF:
    mov     rax, [rsp+0A8h+src]
    mov     ecx, ebx
    sub     r14d, 1
    add     ebx, 8
    lea     rdx, [rax+1]
    mov     [rsp+0A8h+src], rdx
    movzx   eax, byte ptr [rax]
    shl     rax, cl
    add     rbp, rax
    
loc_8AEF:
    mov     eax, ebp
    and     eax, 1
    mov     [r12+0Ch], eax
    mov     rax, rbp
    shr     rax, 1
    and     eax, 3
    cmp     eax, 2
    jnz     loc_8C00
    mov     dword ptr [r12+8], 3F44h
    shr     rbp, 3
    sub     ebx, 3
    nop     dword ptr [rax+rax+00h]
    
loc_8B20:
    cmp     ebx, 0Dh
    ja      short loc_8B87
    mov     [rsp+0A8h+var_78], r12
    mov     eax, r14d
    mov     r12, [rsp+0A8h+var_A0]
    mov     r14d, ebx
    mov     rbx, [rsp+0A8h+var_A8]
    nop     dword ptr [rax+00000000h]
    
loc_8B40:
    test    eax, eax
    jnz     short loc_8B55
    mov     rsi, r12
    mov     rdi, rbx
    call    r13
    test    eax, eax
    jz      loc_8EF0
    
loc_8B55:
    mov     rdx, [rsp+0A8h+src]
    mov     ecx, r14d
    add     r14d, 8
    sub     eax, 1
    lea     rsi, [rdx+1]
    mov     [rsp+0A8h+src], rsi
    movzx   edx, byte ptr [rdx]
    shl     rdx, cl
    add     rbp, rdx
    cmp     r14d, 0Dh
    jbe     short loc_8B40
    mov     r12, [rsp+0A8h+var_78]
    mov     ebx, r14d
    mov     r14d, eax
    
loc_8B87:
    mov     ecx, ebp
    mov     rdx, rbp
    mov     rax, rbp
    and     ecx, 1Fh
    shr     rdx, 5
    shr     rax, 0Ah
    add     ecx, 101h
    and     edx, 1Fh
    and     eax, 0Fh
    add     edx, 1
    add     eax, 4
    shr     rbp, 0Eh
    sub     ebx, 0Eh
    cmp     ecx, 11Eh
    mov     [r12+84h], ecx
    mov     [r12+88h], edx
    mov     [r12+80h], eax
    ja      short loc_8BDC
    cmp     edx, 1Eh
    jbe     loc_9080
    
loc_8BDC:
    lea     rax, aTooManyLengthO
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    
loc_8BF0:
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 0FFFFFFFDh
    jmp     loc_8CD2
    align 20h
    
loc_8C00:
    cmp     eax, 3
    jz      loc_9261
    cmp     eax, 1
    jz      loc_9225
    mov     dword ptr [r12+8], 3F41h
    shr     rbp, 3
    sub     ebx, 3
    nop     word ptr [rax+rax+00h]
    
loc_8C28:
    mov     ecx, ebx
    and     ebx, 0FFFFFFF8h
    and     ecx, 7
    shr     rbp, cl
    cmp     ebx, 1Fh
    ja      short loc_8C94
    mov     [rsp+0A8h+var_78], r12
    mov     eax, r14d
    mov     r12, [rsp+0A8h+var_A0]
    mov     r14d, ebx
    mov     rbx, [rsp+0A8h+var_A8]
    nop     dword ptr [rax+00h]
    
loc_8C50:
    test    eax, eax
    jnz     short loc_8C65
    mov     rsi, r12
    mov     rdi, rbx
    call    r13
    test    eax, eax
    jz      loc_8EF0
    
loc_8C65:
    mov     rdx, [rsp+0A8h+src]
    mov     ecx, r14d
    add     r14d, 8
    sub     eax, 1
    lea     rsi, [rdx+1]
    mov     [rsp+0A8h+src], rsi
    movzx   edx, byte ptr [rdx]
    shl     rdx, cl
    add     rbp, rdx
    cmp     r14d, 1Fh
    jbe     short loc_8C50
    mov     r12, [rsp+0A8h+var_78]
    mov     r14d, eax
    
loc_8C94:
    mov     rax, rbp
    movzx   edx, bp
    shr     rax, 10h
    xor     rax, 0FFFFh
    cmp     rdx, rax
    jz      short loc_8D00
    lea     rax, aInvalidStoredB
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    align 8
    
def_8921:
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 0FFFFFFFEh
    
loc_8CD2:
    mov     [r15], rdx
    mov     [r15+8], r14d
    
loc_8CD9:
    mov     rbx, [rsp+0A8h+var_40]
    xor     rbx, fs:28h
    jnz     loc_99B6
    add     rsp, 78h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_8D00:
    movzx   ebp, bp
    test    ebp, ebp
    mov     [r12+5Ch], ebp
    jz      loc_8DD9
    mov     [rsp+0A8h+var_70], r15
    mov     rbx, [rsp+0A8h+dest]
    mov     r15, r12
    mov     r12d, r14d
    mov     r14d, [rsp+0A8h+var_94]
    mov     [rsp+0A8h+var_78], r13
    nop     word ptr [rax+rax+00h]
    
loc_8D30:
    test    r12d, r12d
    jnz     short loc_8D50
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    mov     rax, [rsp+0A8h+var_78]
    call    rax
    test    eax, eax
    mov     r12d, eax
    jz      loc_91FA
    
loc_8D50:
    test    r14d, r14d
    jnz     short loc_8D7B
    mov     r14d, [r15+3Ch]
    mov     rbx, [r15+48h]
    mov     rdi, [rsp+0A8h+var_88]
    mov     rax, [rsp+0A8h+var_90]
    mov     [r15+40h], r14d
    mov     edx, r14d
    mov     rsi, rbx
    call    rax
    test    eax, eax
    jnz     loc_927A
    
loc_8D7B:
    cmp     r12d, r14d
    mov     ecx, r14d
    mov     rsi, [rsp+0A8h+src]
    cmovbe  ecx, r12d
    mov     rdi, rbx
    cmp     ecx, ebp
    cmovbe  ebp, ecx
    mov     r13d, ebp
    sub     r12d, ebp
    sub     r14d, ebp
    mov     rdx, r13
    add     rbx, r13
    call    _memcpy
    mov     eax, [r15+5Ch]
    add     [rsp+0A8h+src], r13
    sub     eax, ebp
    test    eax, eax
    mov     ebp, eax
    mov     [r15+5Ch], eax
    jnz     loc_8D30
    mov     [rsp+0A8h+var_94], r14d
    mov     r13, [rsp+0A8h+var_78]
    mov     r14d, r12d
    mov     r12, r15
    mov     r15, [rsp+0A8h+var_70]
    mov     [rsp+0A8h+dest], rbx
    
loc_8DD9:
    mov     r8d, [r12+0Ch]
    xor     ebp, ebp
    xor     ebx, ebx
    mov     dword ptr [r12+8], 3F3Fh
    test    r8d, r8d
    jz      loc_8AB3
    nop     dword ptr [rax+00h]
    
loc_8DF8:
    mov     dword ptr [r12+8], 3F50h
    
loc_8E01:
    mov     edx, [r12+3Ch]
    cmp     edx, [rsp+0A8h+var_94]
    jbe     loc_9070
    sub     edx, [rsp+0A8h+var_94]
    mov     rsi, [r12+48h]
    mov     rdi, [rsp+0A8h+var_88]
    mov     rax, [rsp+0A8h+var_90]
    call    rax
    test    eax, eax
    mov     rdx, [rsp+0A8h+src]
    jnz     loc_8F88
    mov     eax, 1
    jmp     loc_8CD2
    
loc_8E3C:
    lea     ecx, [rdi+rdx]
    or      r9d, 0FFFFFFFFh
    shl     r9d, cl
    mov     ecx, eax
    not     r9d
    mov     edi, r9d
    mov     dword ptr [rsp+0A8h+var_70], r9d
    and     edi, ebp
    shr     edi, cl
    lea     eax, [rdi+r8]
    lea     rcx, [rsi+rax*4]
    movzx   eax, byte ptr [rcx+1]
    lea     edi, [rax+rdx]
    cmp     ebx, edi
    jnb     loc_9BAF
    mov     [rsp+0A8h+var_68], r15
    mov     [rsp+0A8h+var_78], r13
    mov     r15d, r8d
    mov     r13, r12
    mov     r12d, edx
    jmp     short loc_8EC9
    
loc_8E83:
    mov     rsi, [r13+70h]
    
loc_8E87:
    mov     rax, [rsp+0A8h+src]
    sub     r14d, 1
    lea     rcx, [rax+1]
    mov     [rsp+0A8h+src], rcx
    movzx   eax, byte ptr [rax]
    mov     ecx, ebx
    add     ebx, 8
    shl     rax, cl
    mov     ecx, r12d
    add     rbp, rax
    mov     eax, dword ptr [rsp+0A8h+var_70]
    and     eax, ebp
    shr     eax, cl
    add     eax, r15d
    lea     rcx, [rsi+rax*4]
    movzx   eax, byte ptr [rcx+1]
    lea     edi, [rax+r12]
    cmp     edi, ebx
    jbe     loc_99BB
    
loc_8EC9:
    test    r14d, r14d
    jnz     short loc_8E87
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    mov     rax, [rsp+0A8h+var_78]
    call    rax
    test    eax, eax
    mov     r14d, eax
    jnz     short loc_8E83
    mov     r15, [rsp+0A8h+var_68]
    nop     word ptr [rax+rax+00h]
    
loc_8EF0:
    xor     edx, edx
    mov     eax, 0FFFFFFFBh
    xor     r14d, r14d
    jmp     loc_8CD2
    align 20h
    
loc_8F00:
    mov     edi, [rsp+0A8h+var_94]
    cmp     edi, 101h
    jbe     loc_89A2
    mov     rsi, [rsp+0A8h+dest]
    mov     rax, [rsp+0A8h+src]
    mov     [r15+20h], edi
    mov     [r15+8], r14d
    mov     [r15+18h], rsi
    mov     esi, [r12+3Ch]
    cmp     [r12+40h], esi
    mov     [r15], rax
    mov     [r12+50h], rbp
    mov     [r12+58h], ebx
    jnb     short loc_8F48
    mov     eax, esi
    sub     eax, edi
    mov     [r12+40h], eax
    
loc_8F48:
    mov     rdi, r15
    call    inflate_fast
    mov     rax, [r15+18h]
    mov     r14d, [r15+8]
    mov     rbp, [r12+50h]
    mov     ebx, [r12+58h]
    mov     [rsp+0A8h+dest], rax
    mov     eax, [r15+20h]
    mov     [rsp+0A8h+var_94], eax
    mov     rax, [r15]
    mov     [rsp+0A8h+src], rax
    mov     eax, [r12+8]
    jmp     loc_8905
    align 8
    
loc_8F88:
    mov     eax, 0FFFFFFFBh
    jmp     loc_8CD2
    
loc_8F92:
    mov     edx, [r12+84h]
    mov     esi, [r12+88h]
    xor     eax, eax
    mov     ecx, eax
    mov     [rsp+0A8h+var_78], r15
    mov     dword ptr [r12+8Ch], 0
    mov     eax, r14d
    mov     r15, r12
    
loc_8FBD:
    add     esi, edx
    cmp     esi, ecx
    jbe     loc_9B4C
    mov     edi, [r15+78h]
    mov     edx, 0FFFFFFFFh
    mov     rsi, [r15+68h]
    mov     ecx, edi
    shl     edx, cl
    not     edx
    and     edx, ebp
    lea     r10, [rsi+rdx*4]
    movzx   r12d, byte ptr [r10+1]
    cmp     ebx, r12d
    mov     ecx, r12d
    jnb     loc_9A9F
    mov     r12, rbp
    mov     r14, [rsp+0A8h+var_A8]
    mov     ebp, ebx
    mov     rbx, [rsp+0A8h+var_A0]
    jmp     short loc_9049
    
loc_9001:
    mov     rsi, [r15+68h]
    mov     edi, [r15+78h]
    
loc_9009:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, ebp
    add     ebp, 8
    shl     rdx, cl
    mov     ecx, edi
    add     r12, rdx
    mov     edx, 0FFFFFFFFh
    shl     edx, cl
    not     edx
    and     edx, r12d
    lea     r10, [rsi+rdx*4]
    movzx   edx, byte ptr [r10+1]
    cmp     edx, ebp
    mov     ecx, edx
    jbe     loc_95CB
    
loc_9049:
    test    eax, eax
    jnz     short loc_9009
    mov     rsi, rbx
    mov     rdi, r14
    call    r13
    test    eax, eax
    jnz     short loc_9001
    nop     word ptr [rax+rax+00h]
    
loc_9060:
    mov     r15, [rsp+0A8h+var_78]
    jmp     loc_8EF0
    align 10h
    
loc_9070:
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 1
    jmp     loc_8CD2
    align 20h
    
loc_9080:
    mov     dword ptr [r12+8Ch], 0
    mov     esi, eax
    mov     [rsp+0A8h+var_78], r15
    mov     eax, r14d
    mov     r15, r12
    mov     r14, [rsp+0A8h+var_A8]
    mov     r12d, ebx
    mov     rbx, [rsp+0A8h+var_A0]
    xor     ecx, ecx
    
loc_90A7:
    cmp     r12d, 2
    mov     edx, ecx
    ja      short loc_90EF
    test    eax, eax
    jnz     short loc_90C0
    mov     rsi, rbx
    mov     rdi, r14
    call    r13
    test    eax, eax
    jz      short loc_9060
    
loc_90C0:
    mov     rdx, [rsp+0A8h+src]
    mov     esi, [r15+80h]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, r12d
    add     r12d, 8
    shl     rdx, cl
    add     rbp, rdx
    mov     edx, [r15+8Ch]
    
loc_90EF:
    lea     rdi, order_4048
    lea     ecx, [rdx+1]
    sub     r12d, 3
    movzx   edx, word ptr [rdi+rdx*2]
    mov     edi, ebp
    shr     rbp, 3
    and     edi, 7
    cmp     ecx, esi
    mov     [r15+8Ch], ecx
    mov     [r15+rdx*2+98h], di
    jb      short loc_90A7
    cmp     ecx, 12h
    mov     ebx, r12d
    mov     r14d, eax
    mov     r12, r15
    mov     r15, [rsp+0A8h+var_78]
    ja      short loc_9164
    nop     dword ptr [rax+00000000h]
    
loc_9138:
    lea     rsi, order_4048
    mov     eax, ecx
    add     ecx, 1
    xor     edi, edi
    cmp     ecx, 13h
    movzx   eax, word ptr [rsi+rax*2]
    mov     [r12+rax*2+98h], di
    jnz     short loc_9138
    mov     dword ptr [r12+8Ch], 13h
    
loc_9164:
    lea     rax, [r12+558h]
    lea     r9, [r12+318h]
    lea     r8, [r12+78h]
    lea     rcx, [r12+90h]
    xor     edi, edi
    mov     dword ptr [r12+78h], 7
    mov     [rsp+0A8h+var_58], rax
    mov     [r12+90h], rax
    mov     edx, 13h
    mov     [r12+68h], rax
    lea     rax, [r12+98h]
    mov     [rsp+0A8h+var_70], r9
    mov     [rsp+0A8h+var_50], r8
    mov     [rsp+0A8h+var_68], rcx
    mov     rsi, rax
    mov     [rsp+0A8h+var_60], rax
    call    inflate_table
    test    eax, eax
    jz      loc_8F92
    lea     rax, aInvalidCodeLen
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    align 10h
    
loc_91F0:
    mov     eax, 0FFFFFFFEh
    jmp     loc_8CD9
    
loc_91FA:
    mov     r15, [rsp+0A8h+var_70]
    jmp     loc_8EF0
    
loc_9204:
    test    al, 40h
    jz      loc_937E
    lea     rax, aInvalidLiteral
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    
loc_9225:
    lea     rax, lenfix_4026
    mov     dword ptr [r12+8], 3F48h
    shr     rbp, 3
    sub     ebx, 3
    mov     [r12+68h], rax
    lea     rax, distfix_4027
    mov     [r12+70h], rax
    mov     rax, 500000009h
    mov     [r12+78h], rax
    jmp     loc_8998
    
loc_9261:
    lea     rax, aInvalidBlockTy
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    
loc_927A:
    mov     r14d, r12d
    mov     r15, [rsp+0A8h+var_70]
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 0FFFFFFFBh
    jmp     loc_8CD2
    
loc_9291:
    lea     ecx, [rax+rdx]
    mov     eax, 0FFFFFFFFh
    shl     eax, cl
    mov     ecx, edx
    not     eax
    and     r9d, eax
    mov     dword ptr [rsp+0A8h+var_78], eax
    shr     r9d, cl
    lea     eax, [r9+r8]
    lea     rcx, [rsi+rax*4]
    movzx   edi, byte ptr [rcx+1]
    lea     eax, [rdi+rdx]
    cmp     eax, ebx
    jbe     loc_9622
    mov     eax, r14d
    mov     [rsp+0A8h+var_70], r15
    mov     r14, r12
    mov     r15, rbp
    mov     r12d, r8d
    mov     ebp, ebx
    mov     ebx, edx
    nop     dword ptr [rax]
    
loc_92D8:
    test    eax, eax
    jnz     short loc_92F4
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r13
    test    eax, eax
    jz      loc_91FA
    mov     rsi, [r14+68h]
    
loc_92F4:
    mov     rcx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rdi, [rcx+1]
    mov     [rsp+0A8h+src], rdi
    movzx   edi, byte ptr [rcx]
    mov     ecx, ebp
    add     ebp, 8
    shl     rdi, cl
    mov     ecx, ebx
    add     r15, rdi
    mov     edi, dword ptr [rsp+0A8h+var_78]
    and     edi, r15d
    shr     edi, cl
    lea     ecx, [rdi+r12]
    lea     rcx, [rsi+rcx*4]
    movzx   edi, byte ptr [rcx+1]
    lea     r9d, [rdi+rbx]
    cmp     r9d, ebp
    ja      short loc_92D8
    mov     r12, r14
    movzx   r8d, word ptr [rcx+2]
    mov     r14d, eax
    movzx   eax, byte ptr [rcx]
    mov     edx, ebx
    mov     ebx, ebp
    mov     rbp, r15
    mov     r15, [rsp+0A8h+var_70]
    
loc_934D:
    mov     ecx, edx
    sub     ebx, edx
    mov     [r12+5Ch], r8d
    shr     rbp, cl
    mov     ecx, edi
    sub     ebx, edi
    shr     rbp, cl
    test    al, al
    jnz     loc_8A85
    jmp     loc_8932
    align 10h
    
loc_9370:
    movzx   eax, byte ptr [r8]
    movzx   r8d, word ptr [r8+2]
    jmp     loc_8A69
    
loc_937E:
    and     eax, 0Fh
    movzx   esi, al
    test    al, al
    mov     [r12+64h], esi
    jz      short loc_940A
    cmp     esi, ebx
    jbe     short loc_93F3
    mov     eax, r14d
    mov     [rsp+0A8h+var_78], r15
    mov     r14, [rsp+0A8h+var_A0]
    mov     r15d, ebx
    mov     rbx, [rsp+0A8h+var_A8]
    jmp     short loc_93D2
    
loc_93A7:
    mov     esi, [r12+64h]
    
loc_93AC:
    mov     rdx, [rsp+0A8h+src]
    mov     ecx, r15d
    add     r15d, 8
    sub     eax, 1
    lea     rdi, [rdx+1]
    mov     [rsp+0A8h+src], rdi
    movzx   edx, byte ptr [rdx]
    shl     rdx, cl
    add     rbp, rdx
    cmp     r15d, esi
    jnb     short loc_93E8
    
loc_93D2:
    test    eax, eax
    jnz     short loc_93AC
    mov     rsi, r14
    mov     rdi, rbx
    call    r13
    test    eax, eax
    jnz     short loc_93A7
    jmp     loc_9060
    
loc_93E8:
    mov     ebx, r15d
    mov     r15, [rsp+0A8h+var_78]
    mov     r14d, eax
    
loc_93F3:
    mov     ecx, esi
    mov     eax, 0FFFFFFFFh
    sub     ebx, esi
    shl     eax, cl
    not     eax
    and     eax, ebp
    add     [r12+5Ch], eax
    shr     rbp, cl
    
loc_940A:
    mov     edi, [r12+7Ch]
    mov     r8d, 0FFFFFFFFh
    mov     rsi, [r12+70h]
    mov     eax, r8d
    mov     ecx, edi
    shl     eax, cl
    not     eax
    and     eax, ebp
    lea     rcx, [rsi+rax*4]
    movzx   edx, byte ptr [rcx+1]
    cmp     edx, ebx
    mov     eax, edx
    mov     r9d, edx
    jbe     loc_99A9
    mov     eax, r14d
    mov     [rsp+0A8h+var_70], r15
    mov     r14d, ebx
    mov     r15, r12
    mov     rbx, [rsp+0A8h+var_A8]
    mov     r12, rbp
    mov     rbp, [rsp+0A8h+var_A0]
    mov     dword ptr [rsp+0A8h+var_78], r8d
    nop     dword ptr [rax+00000000h]
    
loc_9460:
    test    eax, eax
    jnz     short loc_947D
    mov     rsi, rbp
    mov     rdi, rbx
    call    r13
    test    eax, eax
    jz      loc_91FA
    mov     rsi, [r15+70h]
    mov     edi, [r15+7Ch]
    
loc_947D:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, r14d
    add     r14d, 8
    shl     rdx, cl
    mov     ecx, edi
    add     r12, rdx
    mov     edx, dword ptr [rsp+0A8h+var_78]
    shl     edx, cl
    not     edx
    and     edx, r12d
    lea     rcx, [rsi+rdx*4]
    movzx   edx, byte ptr [rcx+1]
    cmp     edx, r14d
    mov     r9d, edx
    ja      short loc_9460
    movzx   edi, byte ptr [rcx]
    movzx   r8d, word ptr [rcx+2]
    mov     rbp, r12
    mov     r12, r15
    mov     r15, [rsp+0A8h+var_70]
    mov     ebx, r14d
    mov     r14d, eax
    mov     eax, edx
    
loc_94D6:
    test    dil, 0F0h
    mov     ecx, edx
    jz      loc_8E3C
    
loc_94E2:
    shr     rbp, cl
    sub     ebx, r9d
    test    dil, 40h
    jnz     loc_95B2
    and     edi, 0Fh
    mov     [r12+60h], r8d
    movzx   ecx, dil
    test    dil, dil
    mov     [r12+64h], ecx
    jnz     short loc_9585
    
loc_9508:
    mov     edx, [r12+3Ch]
    cmp     edx, [r12+40h]
    mov     eax, 0
    cmova   eax, [rsp+0A8h+var_94]
    mov     esi, edx
    sub     esi, eax
    cmp     [r12+60h], esi
    jbe     loc_96DB
    lea     rax, aInvalidDistanc
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    
loc_9544:
    test    r14d, r14d
    jnz     short loc_9560
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r13
    test    eax, eax
    mov     r14d, eax
    jz      loc_8EF0
    
loc_9560:
    mov     rax, [rsp+0A8h+src]
    mov     ecx, ebx
    sub     r14d, 1
    add     ebx, 8
    lea     rdx, [rax+1]
    mov     [rsp+0A8h+src], rdx
    movzx   eax, byte ptr [rax]
    shl     rax, cl
    mov     ecx, [r12+64h]
    add     rbp, rax
    
loc_9585:
    cmp     ecx, ebx
    ja      short loc_9544
    or      eax, 0FFFFFFFFh
    sub     ebx, ecx
    shl     eax, cl
    not     eax
    and     eax, ebp
    shr     rbp, cl
    add     [r12+60h], eax
    jmp     loc_9508
    align 8
    
loc_95A8:
    mov     rcx, [rsp+0A8h+dest]
    jmp     loc_8979
    
loc_95B2:
    lea     rax, aInvalidDistanc_0
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    
loc_95CB:
    movzx   esi, word ptr [r10+2]
    mov     ebx, ebp
    mov     rbp, r12
    mov     r12d, edx
    
loc_95D8:
    cmp     si, 0Fh
    ja      short loc_962F
    shr     rbp, cl
    mov     ecx, [r15+8Ch]
    sub     ebx, r12d
    mov     edx, ecx
    add     ecx, 1
    mov     [r15+8Ch], ecx
    mov     [r15+rdx*2+98h], si
    mov     edx, [r15+84h]
    mov     esi, [r15+88h]
    jmp     loc_8FBD
    
loc_9613:
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 0FFFFFFFBh
    jmp     loc_8CD2
    
loc_9622:
    movzx   eax, byte ptr [rcx]
    movzx   r8d, word ptr [rcx+2]
    jmp     loc_934D
    
loc_962F:
    cmp     si, 10h
    lea     r14d, [r12+2]
    jz      short loc_9699
    cmp     si, 11h
    jz      loc_9A4F
    lea     r14d, [r12+7]
    cmp     r14d, ebx
    ja      short loc_9680
    jmp     loc_99E4
    align 8
    
loc_9658:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, ebx
    add     ebx, 8
    shl     rdx, cl
    add     rbp, rdx
    cmp     ebx, r14d
    jnb     loc_99E4
    
loc_9680:
    test    eax, eax
    jnz     short loc_9658
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r13
    test    eax, eax
    jnz     short loc_9658
    jmp     loc_9060
    
loc_9699:
    cmp     r14d, ebx
    jbe     loc_9AD8
    test    eax, eax
    jnz     short loc_96BA
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r13
    test    eax, eax
    jz      loc_9060
    
loc_96BA:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, ebx
    add     ebx, 8
    shl     rdx, cl
    add     rbp, rdx
    jmp     short loc_9699
    
loc_96DB:
    mov     [rsp+0A8h+var_78], rbp
    mov     rbp, [rsp+0A8h+dest]
    mov     dword ptr [rsp+0A8h+var_70], ebx
    
loc_96E9:
    mov     ecx, [rsp+0A8h+var_94]
    mov     ebx, edx
    test    ecx, ecx
    jnz     loc_998A
    mov     rbp, [r12+48h]
    mov     [r12+40h], edx
    mov     rdi, [rsp+0A8h+var_88]
    mov     rax, [rsp+0A8h+var_90]
    mov     rsi, rbp
    call    rax
    test    eax, eax
    jnz     loc_9613
    mov     edx, [r12+3Ch]
    
loc_971D:
    mov     eax, [r12+60h]
    sub     edx, eax
    cmp     ebx, edx
    jbe     loc_997D
    mov     eax, edx
    lea     rsi, [rbp+rax+0]
    mov     eax, ebx
    sub     eax, edx
    
loc_9737:
    mov     edx, [r12+5Ch]
    cmp     edx, eax
    cmovbe  eax, edx
    sub     edx, eax
    sub     ebx, eax
    mov     [r12+5Ch], edx
    lea     rdx, [rsi+10h]
    mov     [rsp+0A8h+var_94], ebx
    cmp     rbp, rdx
    lea     rdx, [rbp+10h]
    setnb   cl
    cmp     rsi, rdx
    setnb   dl
    or      cl, dl
    jz      loc_9993
    cmp     eax, 16h
    jbe     loc_9993
    mov     rdi, rsi
    lea     r9d, [rax-1]
    neg     rdi
    and     edi, 0Fh
    mov     ecx, r9d
    lea     edx, [rdi+0Fh]
    cmp     edx, r9d
    ja      loc_9ACE
    test    edi, edi
    jz      loc_9AC1
    movzx   r10d, byte ptr [rsi]
    cmp     edi, 1
    lea     r8, [rsi+1]
    lea     rdx, [rbp+1]
    mov     [rbp+0], r10b
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+1]
    cmp     edi, 2
    lea     r8, [rsi+2]
    lea     rdx, [rbp+2]
    mov     [rbp+1], cl
    lea     ecx, [rax-2]
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+2]
    cmp     edi, 3
    lea     r8, [rsi+3]
    lea     rdx, [rbp+3]
    mov     [rbp+2], cl
    lea     ecx, [rax-3]
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+3]
    cmp     edi, 4
    lea     r8, [rsi+4]
    lea     rdx, [rbp+4]
    mov     [rbp+3], cl
    lea     ecx, [rax-4]
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+4]
    cmp     edi, 5
    lea     r8, [rsi+5]
    lea     rdx, [rbp+5]
    mov     [rbp+4], cl
    lea     ecx, [rax-5]
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+5]
    cmp     edi, 6
    lea     r8, [rsi+6]
    lea     rdx, [rbp+6]
    mov     [rbp+5], cl
    lea     ecx, [rax-6]
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+6]
    cmp     edi, 7
    lea     r8, [rsi+7]
    lea     rdx, [rbp+7]
    mov     [rbp+6], cl
    lea     ecx, [rax-7]
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+7]
    cmp     edi, 8
    lea     r8, [rsi+8]
    lea     rdx, [rbp+8]
    mov     [rbp+7], cl
    lea     ecx, [rax-8]
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+8]
    cmp     edi, 9
    lea     r8, [rsi+9]
    lea     rdx, [rbp+9]
    mov     [rbp+8], cl
    lea     ecx, [rax-9]
    jz      loc_990D
    movzx   ecx, byte ptr [rsi+9]
    cmp     edi, 0Ah
    lea     r8, [rsi+0Ah]
    lea     rdx, [rbp+0Ah]
    mov     [rbp+9], cl
    lea     ecx, [rax-0Ah]
    jz      short loc_990D
    movzx   ecx, byte ptr [rsi+0Ah]
    cmp     edi, 0Bh
    lea     r8, [rsi+0Bh]
    lea     rdx, [rbp+0Bh]
    mov     [rbp+0Ah], cl
    lea     ecx, [rax-0Bh]
    jz      short loc_990D
    movzx   ecx, byte ptr [rsi+0Bh]
    cmp     edi, 0Ch
    lea     r8, [rsi+0Ch]
    lea     rdx, [rbp+0Ch]
    mov     [rbp+0Bh], cl
    lea     ecx, [rax-0Ch]
    jz      short loc_990D
    movzx   ecx, byte ptr [rsi+0Ch]
    cmp     edi, 0Dh
    lea     r8, [rsi+0Dh]
    lea     rdx, [rbp+0Dh]
    mov     [rbp+0Ch], cl
    lea     ecx, [rax-0Dh]
    jz      short loc_990D
    movzx   ecx, byte ptr [rsi+0Dh]
    cmp     edi, 0Fh
    lea     r8, [rsi+0Eh]
    lea     rdx, [rbp+0Eh]
    mov     [rbp+0Dh], cl
    lea     ecx, [rax-0Eh]
    jnz     short loc_990D
    movzx   ecx, byte ptr [rsi+0Eh]
    lea     r8, [rsi+0Fh]
    lea     rdx, [rbp+0Fh]
    mov     [rbp+0Eh], cl
    lea     ecx, [rax-0Fh]
    
loc_990D:
    sub     eax, edi
    mov     r11d, edi
    xor     r10d, r10d
    lea     edi, [rax-10h]
    mov     ebx, eax
    lea     rax, [rsi+r11]
    add     r11, rbp
    xor     esi, esi
    shr     edi, 4
    add     edi, 1
    
loc_9929:
    movdqa  xmm0, xmmword ptr [rax+rsi]
    add     r10d, 1
    movups  xmmword ptr [r11+rsi], xmm0
    add     rsi, 10h
    cmp     r10d, edi
    jb      short loc_9929
    shl     edi, 4
    mov     eax, edi
    sub     ecx, eax
    cmp     eax, ebx
    lea     rdi, [rdx+rax]
    lea     rsi, [r8+rax]
    jz      short loc_9961
    
loc_9953:
    lea     eax, [rcx-1]
    lea     rax, [rsi+rax+1]
    
loc_995B:
    movsb
    cmp     rax, rsi
    jnz     short loc_995B
    
loc_9961:
    mov     eax, [r12+5Ch]
    lea     rbp, [rbp+r9+1]
    test    eax, eax
    jz      loc_9AA9
    mov     edx, [r12+3Ch]
    jmp     loc_96E9
    
loc_997D:
    mov     rsi, rbp
    sub     rsi, rax
    mov     eax, ebx
    jmp     loc_9737
    
loc_998A:
    mov     ebx, [rsp+0A8h+var_94]
    jmp     loc_971D
    
loc_9993:
    sub     eax, 1
    mov     rdi, rbp
    mov     r9, rax
    lea     rax, [rsi+rax+1]
    
loc_99A1:
    movsb
    cmp     rax, rsi
    jnz     short loc_99A1
    jmp     short loc_9961
    
loc_99A9:
    movzx   edi, byte ptr [rcx]
    movzx   r8d, word ptr [rcx+2]
    jmp     loc_94D6
    
loc_99B6:
    call    ___stack_chk_fail
    
loc_99BB:
    movzx   edi, byte ptr [rcx]
    movzx   r8d, word ptr [rcx+2]
    mov     edx, r12d
    mov     r15, [rsp+0A8h+var_68]
    mov     r12, r13
    mov     r13, [rsp+0A8h+var_78]
    
loc_99D3:
    mov     ecx, edx
    sub     ebx, edx
    mov     r9d, eax
    shr     rbp, cl
    mov     ecx, eax
    jmp     loc_94E2
    
loc_99E4:
    mov     r8, rbp
    mov     ecx, r12d
    sub     ebx, r12d
    shr     r8, cl
    mov     ecx, [r15+8Ch]
    sub     ebx, 7
    mov     r10d, r8d
    shr     r8, 7
    xor     edi, edi
    and     r10d, 7Fh
    mov     rbp, r8
    add     r10d, 0Bh
    
loc_9A0E:
    mov     edx, [r15+84h]
    mov     esi, [r15+88h]
    add     r10d, ecx
    lea     r11d, [rdx+rsi]
    cmp     r10d, r11d
    ja      loc_9B8B
    
loc_9A2C:
    mov     r8d, ecx
    add     ecx, 1
    cmp     r10d, ecx
    mov     [r15+r8*2+98h], di
    jnz     short loc_9A2C
    mov     [r15+8Ch], r10d
    mov     ecx, r10d
    jmp     loc_8FBD
    
loc_9A4F:
    lea     r14d, [r12+3]
    cmp     r14d, ebx
    ja      short loc_9A86
    jmp     loc_9B19
    
loc_9A5E:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, ebx
    add     ebx, 8
    shl     rdx, cl
    add     rbp, rdx
    cmp     ebx, r14d
    jnb     loc_9B19
    
loc_9A86:
    test    eax, eax
    jnz     short loc_9A5E
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r13
    test    eax, eax
    jnz     short loc_9A5E
    jmp     loc_9060
    
loc_9A9F:
    movzx   esi, word ptr [r10+2]
    jmp     loc_95D8
    
loc_9AA9:
    mov     [rsp+0A8h+dest], rbp
    mov     ebx, dword ptr [rsp+0A8h+var_70]
    mov     rbp, [rsp+0A8h+var_78]
    mov     eax, [r12+8]
    jmp     loc_8905
    
loc_9AC1:
    mov     r8, rsi
    mov     ecx, eax
    mov     rdx, rbp
    jmp     loc_990D
    
loc_9ACE:
    mov     ecx, eax
    mov     rdi, rbp
    jmp     loc_9953
    
loc_9AD8:
    mov     ecx, r12d
    mov     r8, rbp
    sub     ebx, r12d
    shr     r8, cl
    mov     ecx, [r15+8Ch]
    test    ecx, ecx
    jz      loc_9B8B
    mov     r10d, r8d
    lea     edx, [rcx-1]
    shr     r8, 2
    and     r10d, 3
    mov     rbp, r8
    sub     ebx, 2
    movzx   edi, word ptr [r15+rdx*2+98h]
    add     r10d, 3
    jmp     loc_9A0E
    
loc_9B19:
    mov     r8, rbp
    mov     ecx, r12d
    mov     edx, 0FFFFFFFDh
    shr     r8, cl
    sub     edx, r12d
    xor     edi, edi
    mov     r10d, r8d
    shr     r8, 3
    add     ebx, edx
    and     r10d, 7
    mov     rbp, r8
    mov     ecx, [r15+8Ch]
    add     r10d, 3
    jmp     loc_9A0E
    
loc_9B4C:
    mov     r12, r15
    mov     r14d, eax
    mov     r15, [rsp+0A8h+var_78]
    cmp     dword ptr [r12+8], 3F51h
    jz      loc_8BF0
    cmp     word ptr [r12+298h], 0
    jnz     short loc_9BBC
    lea     rax, aInvalidCodeMis
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    
loc_9B8B:
    mov     r12, r15
    mov     r15, [rsp+0A8h+var_78]
    mov     r14d, eax
    lea     rax, aInvalidBitLeng
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    
loc_9BAF:
    movzx   edi, byte ptr [rcx]
    movzx   r8d, word ptr [rcx+2]
    jmp     loc_99D3
    
loc_9BBC:
    mov     rax, [rsp+0A8h+var_58]
    mov     r9, [rsp+0A8h+var_70]
    mov     edi, 1
    mov     r8, [rsp+0A8h+var_50]
    mov     rcx, [rsp+0A8h+var_68]
    mov     rsi, [rsp+0A8h+var_60]
    mov     dword ptr [r12+78h], 9
    mov     [r12+90h], rax
    mov     [r12+68h], rax
    call    inflate_table
    test    eax, eax
    jz      short loc_9C12
    lea     rax, aInvalidLiteral_0
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    
loc_9C12:
    mov     esi, [r12+84h]
    mov     rax, [r12+90h]
    lea     r8, [r12+7Ch]
    mov     edx, [r12+88h]
    mov     r9, [rsp+0A8h+var_70]
    mov     edi, 2
    mov     rcx, [rsp+0A8h+var_68]
    mov     dword ptr [r12+7Ch], 6
    mov     [r12+70h], rax
    add     rsi, rsi
    add     rsi, [rsp+0A8h+var_60]
    call    inflate_table
    test    eax, eax
    jz      short loc_9C76
    lea     rax, aInvalidDistanc_1
    mov     [r15+30h], rax
    mov     dword ptr [r12+8], 3F51h
    jmp     loc_8BF0
    
loc_9C76:
    mov     dword ptr [r12+8], 3F48h
    jmp     loc_8998
    

<inflateBackEnd>:
    
    test    rdi, rdi
    jz      short loc_9CC0
    mov     rsi, [rdi+38h]
    test    rsi, rsi
    jz      short loc_9CC0
    mov     rax, [rdi+48h]
    test    rax, rax
    jz      short loc_9CC0
    push    rbx
    mov     rbx, rdi
    mov     rdi, [rdi+50h]
    call    rax
    mov     qword ptr [rbx+38h], 0
    xor     eax, eax
    pop     rbx
    retn
    align 20h
    
loc_9CC0:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflate_fast>:
    
    var_E8= qword ptr -0E8h
    var_E0= qword ptr -0E0h
    var_D8= qword ptr -0D8h
    var_CC= dword ptr -0CCh
    var_C8= qword ptr -0C8h
    var_C0= qword ptr -0C0h
    var_B8= dword ptr -0B8h
    var_B4= dword ptr -0B4h
    var_B0= dword ptr -0B0h
    var_AC= dword ptr -0ACh
    var_A8= dword ptr -0A8h
    var_A4= dword ptr -0A4h
    var_A0= qword ptr -0A0h
    var_98= dword ptr -98h
    var_94= dword ptr -94h
    var_90= qword ptr -90h
    var_88= qword ptr -88h
    var_80= dword ptr -80h
    var_7C= dword ptr -7Ch
    var_78= dword ptr -78h
    var_74= dword ptr -74h
    var_70= dword ptr -70h
    var_6C= dword ptr -6Ch
    var_68= qword ptr -68h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    
    
    push    r15
    push    r14
    mov     r14, rdi
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 40h
    mov     eax, [rdi+8]
    mov     rbp, [rdi]
    mov     r10, [rdi+18h]
    mov     r15, [rdi+38h]
    sub     eax, 5
    add     rax, rbp
    mov     ecx, [r15+7Ch]
    mov     rbx, r10
    mov     [rsp+70h+var_E0], rax
    mov     eax, [rdi+20h]
    mov     rdx, [r15+50h]
    mov     r8d, [r15+58h]
    mov     r12, [r15+68h]
    mov     r13, [r15+70h]
    sub     esi, eax
    sub     eax, 101h
    add     rax, r10
    sub     rbx, rsi
    mov     rsi, [r15+48h]
    mov     [rsp+70h+var_E8], rax
    mov     eax, [r15+3Ch]
    mov     [rsp+70h+var_C0], rbx
    mov     ebx, [r15+44h]
    mov     [rsp+70h+var_C8], rsi
    mov     [rsp+70h+var_B0], eax
    mov     eax, [r15+40h]
    mov     [rsp+70h+var_B8], eax
    mov     eax, 1
    mov     edi, eax
    shl     edi, cl
    mov     ecx, [r15+78h]
    lea     edi, [rdi-1]
    shl     eax, cl
    mov     [rsp+70h+var_CC], edi
    lea     ecx, [rbx-1]
    sub     eax, 1
    mov     [rsp+70h+var_D8], rax
    mov     rax, rsi
    mov     [rsp+70h+var_A4], ecx
    neg     rax
    mov     edi, eax
    and     edi, 0Fh
    lea     eax, [rdi+0Fh]
    mov     [rsp+70h+var_B4], edi
    mov     [rsp+70h+var_98], eax
    mov     eax, ebx
    sub     eax, edi
    mov     edi, eax
    mov     [rsp+70h+var_94], eax
    and     eax, 0FFFFFFF0h
    mov     [rsp+70h+var_AC], eax
    mov     [rsp+70h+var_A0], rax
    mov     eax, ecx
    mov     [rsp+70h+var_90], rax
    lea     rax, [rsi+rax+1]
    shr     edi, 4
    mov     [rsp+70h+var_A8], edi
    mov     [rsp+70h+var_88], rax
    lea     eax, [rbx-2]
    mov     [rsp+70h+var_80], eax
    lea     eax, [rbx-3]
    mov     [rsp+70h+var_7C], eax
    lea     eax, [rbx-4]
    mov     [rsp+70h+var_78], eax
    lea     eax, [rbx-5]
    mov     [rsp+70h+var_74], eax
    lea     eax, [rbx-6]
    mov     [rsp+70h+var_70], eax
    lea     eax, [rbx-7]
    mov     [rsp+70h+var_6C], eax
    
loc_9DDA:
    cmp     r8d, 0Eh
    ja      short loc_9E03
    movzx   eax, byte ptr [rbp+1]
    movzx   esi, byte ptr [rbp+0]
    lea     ecx, [r8+8]
    add     rbp, 2
    shl     rax, cl
    mov     ecx, r8d
    add     r8d, 10h
    shl     rsi, cl
    add     rax, rsi
    add     rdx, rax
    
loc_9E03:
    mov     rax, [rsp+70h+var_D8]
    and     rax, rdx
    lea     rcx, [r12+rax*4]
    movzx   esi, byte ptr [rcx]
    movzx   eax, word ptr [rcx+2]
    movzx   ecx, byte ptr [rcx+1]
    shr     rdx, cl
    sub     r8d, ecx
    movzx   ecx, sil
    test    ecx, ecx
    jz      short loc_9E88
    test    sil, 10h
    jnz     loc_9F20
    test    sil, 40h
    jnz     loc_A398
    mov     edi, 1
    jmp     short loc_9E5C
    align 8
    
loc_9E48:
    test    sil, 10h
    jnz     loc_9F20
    test    sil, 40h
    jnz     loc_A398
    
loc_9E5C:
    mov     esi, edi
    shl     esi, cl
    mov     ecx, esi
    sub     ecx, 1
    and     rcx, rdx
    add     rax, rcx
    lea     rcx, [r12+rax*4]
    movzx   esi, byte ptr [rcx]
    movzx   eax, word ptr [rcx+2]
    movzx   ecx, byte ptr [rcx+1]
    shr     rdx, cl
    sub     r8d, ecx
    movzx   ecx, sil
    test    ecx, ecx
    jnz     short loc_9E48
    
loc_9E88:
    mov     [r10], al
    add     r10, 1
    
loc_9E8F:
    cmp     rbp, [rsp+70h+var_E0]
    jnb     short loc_9EA8
    cmp     r10, [rsp+70h+var_E8]
    jb      loc_9DDA
    nop     dword ptr [rax+00000000h]
    
loc_9EA8:
    mov     ecx, r8d
    mov     eax, r8d
    mov     esi, 1
    and     ecx, 7
    mov     rbx, [rsp+70h+var_E0]
    shr     eax, 3
    shl     esi, cl
    sub     rbp, rax
    mov     [r14+18h], r10
    sub     esi, 1
    mov     [r14], rbp
    and     rdx, rsi
    cmp     rbx, rbp
    jbe     loc_A3B0
    sub     rbx, rbp
    mov     rax, rbx
    add     eax, 5
    mov     [r14+8], eax
    mov     rax, [rsp+70h+var_E8]
    cmp     r10, rax
    jb      loc_A3CD
    
loc_9EF4:
    mov     eax, dword ptr [rsp+70h+var_E8]
    sub     eax, r10d
    add     eax, 101h
    
loc_9F00:
    mov     [r14+20h], eax
    mov     [r15+50h], rdx
    mov     [r15+58h], ecx
    add     rsp, 40h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_9F20:
    and     esi, 0Fh
    jz      short loc_9F60
    movzx   edi, sil
    cmp     edi, r8d
    jbe     short loc_9F44
    movzx   r9d, byte ptr [rbp+0]
    mov     ecx, r8d
    add     rbp, 1
    add     r8d, 8
    shl     r9, cl
    add     rdx, r9
    
loc_9F44:
    mov     ecx, esi
    mov     r11d, 0FFFFFFFFh
    sub     r8d, edi
    shl     r11d, cl
    mov     ecx, r11d
    not     ecx
    and     ecx, edx
    add     eax, ecx
    mov     ecx, esi
    shr     rdx, cl
    
loc_9F60:
    cmp     r8d, 0Eh
    jbe     loc_A3E0
    
loc_9F6A:
    mov     ecx, [rsp+70h+var_CC]
    and     ecx, edx
    lea     rcx, [r13+rcx*4+0]
    movzx   edi, byte ptr [rcx]
    movzx   esi, word ptr [rcx+2]
    movzx   ecx, byte ptr [rcx+1]
    shr     rdx, cl
    sub     r8d, ecx
    test    dil, 10h
    movzx   ecx, dil
    jnz     short loc_9FE1
    and     edi, 40h
    jnz     loc_A430
    mov     r9d, 1
    jmp     short loc_9FB1
    align 8
    
loc_9FA8:
    and     edi, 40h
    jnz     loc_A430
    
loc_9FB1:
    mov     edi, r9d
    shl     edi, cl
    mov     ecx, edi
    sub     ecx, 1
    and     rcx, rdx
    add     rcx, rsi
    lea     rcx, [r13+rcx*4+0]
    movzx   edi, byte ptr [rcx]
    movzx   esi, word ptr [rcx+2]
    movzx   ecx, byte ptr [rcx+1]
    shr     rdx, cl
    sub     r8d, ecx
    test    dil, 10h
    movzx   ecx, dil
    jz      short loc_9FA8
    
loc_9FE1:
    and     edi, 0Fh
    movzx   r9d, dil
    cmp     r9d, r8d
    jbe     short loc_A00F
    movzx   r11d, byte ptr [rbp+0]
    mov     ecx, r8d
    shl     r11, cl
    lea     ecx, [r8+8]
    add     rdx, r11
    cmp     r9d, ecx
    ja      loc_A86B
    add     rbp, 1
    mov     r8d, ecx
    
loc_A00F:
    mov     ecx, edi
    mov     r11d, 0FFFFFFFFh
    sub     r8d, r9d
    shl     r11d, cl
    mov     ecx, r11d
    not     ecx
    and     ecx, edx
    add     esi, ecx
    mov     ecx, edi
    shr     rdx, cl
    mov     rcx, r10
    sub     rcx, [rsp+70h+var_C0]
    mov     [rsp+70h+var_40], esi
    cmp     esi, ecx
    jbe     loc_A7FE
    sub     esi, ecx
    cmp     [rsp+70h+var_B8], esi
    mov     ecx, esi
    jnb     short loc_A058
    mov     edi, [r15+1BE8h]
    test    edi, edi
    jnz     loc_AB93
    
loc_A058:
    test    ebx, ebx
    jz      loc_A49F
    cmp     ebx, ecx
    jnb     loc_A883
    mov     edi, [rsp+70h+var_B0]
    lea     esi, [rdi+rbx]
    mov     edi, esi
    mov     rsi, [rsp+70h+var_C8]
    sub     edi, ecx
    sub     ecx, ebx
    mov     [rsp+70h+var_50], rdi
    add     rsi, rdi
    cmp     eax, ecx
    jbe     loc_A472
    mov     r11, [rsp+70h+var_C8]
    sub     eax, ecx
    lea     r9, [r11+rdi+10h]
    lea     r11, [r10+10h]
    cmp     r10, r9
    setnb   r9b
    cmp     rsi, r11
    setnb   r11b
    or      r9b, r11b
    jz      loc_AE9E
    cmp     ecx, 16h
    jbe     loc_AE9E
    mov     r9, rsi
    lea     r11d, [rcx-1]
    neg     r9
    and     r9d, 0Fh
    mov     edi, r11d
    mov     [rsp+70h+var_3C], r11d
    mov     dword ptr [rsp+70h+var_60], r11d
    lea     r11d, [r9+0Fh]
    cmp     r11d, edi
    ja      loc_AEE7
    test    r9d, r9d
    jz      loc_AEF2
    movzx   edi, byte ptr [rsi]
    lea     r11, [rsi+1]
    cmp     r9d, 1
    mov     [rsp+70h+var_68], r11
    lea     r11, [r10+1]
    mov     [r10], dil
    jz      loc_A306
    lea     rdi, [rsi+2]
    cmp     r9d, 2
    lea     r11, [r10+2]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+1]
    mov     [r10+1], dil
    lea     edi, [rcx-2]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+3]
    cmp     r9d, 3
    lea     r11, [r10+3]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+2]
    mov     [r10+2], dil
    lea     edi, [rcx-3]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+4]
    cmp     r9d, 4
    lea     r11, [r10+4]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+3]
    mov     [r10+3], dil
    lea     edi, [rcx-4]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+5]
    cmp     r9d, 5
    lea     r11, [r10+5]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+4]
    mov     [r10+4], dil
    lea     edi, [rcx-5]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+6]
    cmp     r9d, 6
    lea     r11, [r10+6]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+5]
    mov     [r10+5], dil
    lea     edi, [rcx-6]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+7]
    cmp     r9d, 7
    lea     r11, [r10+7]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+6]
    mov     [r10+6], dil
    lea     edi, [rcx-7]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+8]
    cmp     r9d, 8
    lea     r11, [r10+8]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+7]
    mov     [r10+7], dil
    lea     edi, [rcx-8]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+9]
    cmp     r9d, 9
    lea     r11, [r10+9]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+8]
    mov     [r10+8], dil
    lea     edi, [rcx-9]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+0Ah]
    cmp     r9d, 0Ah
    lea     r11, [r10+0Ah]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+9]
    mov     [r10+9], dil
    lea     edi, [rcx-0Ah]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+0Bh]
    cmp     r9d, 0Bh
    lea     r11, [r10+0Bh]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+0Ah]
    mov     [r10+0Ah], dil
    lea     edi, [rcx-0Bh]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_A306
    lea     rdi, [rsi+0Ch]
    cmp     r9d, 0Ch
    lea     r11, [r10+0Ch]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+0Bh]
    mov     [r10+0Bh], dil
    lea     edi, [rcx-0Ch]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      short loc_A306
    lea     rdi, [rsi+0Dh]
    cmp     r9d, 0Dh
    lea     r11, [r10+0Dh]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+0Ch]
    mov     [r10+0Ch], dil
    lea     edi, [rcx-0Dh]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      short loc_A306
    lea     rdi, [rsi+0Eh]
    cmp     r9d, 0Fh
    lea     r11, [r10+0Eh]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+0Dh]
    mov     [r10+0Dh], dil
    lea     edi, [rcx-0Eh]
    mov     dword ptr [rsp+70h+var_60], edi
    jnz     short loc_A306
    lea     rdi, [rsi+0Fh]
    movzx   esi, byte ptr [rsi+0Eh]
    lea     r11, [r10+0Fh]
    mov     [rsp+70h+var_68], rdi
    lea     edi, [rcx-0Fh]
    mov     [r10+0Eh], sil
    mov     dword ptr [rsp+70h+var_60], edi
    
loc_A306:
    mov     rdi, [rsp+70h+var_50]
    mov     esi, r9d
    sub     ecx, r9d
    mov     dword ptr [rsp+70h+var_48], ecx
    shr     ecx, 4
    lea     r9, [r10+rsi]
    mov     dword ptr [rsp+70h+var_58], ecx
    xor     ecx, ecx
    add     rdi, rsi
    add     rdi, [rsp+70h+var_C8]
    xor     esi, esi
    
loc_A32C:
    movdqa  xmm0, xmmword ptr [rdi+rcx]
    add     esi, 1
    movups  xmmword ptr [r9+rcx], xmm0
    add     rcx, 10h
    cmp     dword ptr [rsp+70h+var_58], esi
    ja      short loc_A32C
    mov     ecx, dword ptr [rsp+70h+var_48]
    mov     r9d, dword ptr [rsp+70h+var_60]
    and     ecx, 0FFFFFFF0h
    mov     esi, ecx
    sub     r9d, ecx
    lea     rdi, [r11+rsi]
    add     rsi, [rsp+70h+var_68]
    cmp     ecx, dword ptr [rsp+70h+var_48]
    jz      short loc_A372
    
loc_A363:
    lea     ecx, [r9-1]
    lea     rcx, [rsi+rcx+1]
    
loc_A36C:
    movsb
    cmp     rsi, rcx
    jnz     short loc_A36C
    
loc_A372:
    mov     edi, [rsp+70h+var_3C]
    cmp     ebx, eax
    mov     [rsp+70h+var_60], rdi
    lea     rcx, [r10+rdi+1]
    jb      loc_ABB4
    mov     rsi, [rsp+70h+var_C8]
    mov     r10, rcx
    jmp     loc_A472
    align 8
    
loc_A398:
    and     esi, 20h
    jz      short loc_A410
    mov     dword ptr [r15+8], 3F3Fh
    jmp     loc_9EA8
    align 10h
    
loc_A3B0:
    mov     ebx, dword ptr [rsp+70h+var_E0]
    sub     ebx, ebp
    mov     eax, ebx
    add     eax, 5
    mov     [r14+8], eax
    mov     rax, [rsp+70h+var_E8]
    cmp     r10, rax
    jnb     loc_9EF4
    
loc_A3CD:
    sub     rax, r10
    add     eax, 101h
    jmp     loc_9F00
    align 20h
    
loc_A3E0:
    movzx   esi, byte ptr [rbp+1]
    movzx   edi, byte ptr [rbp+0]
    lea     ecx, [r8+8]
    add     rbp, 2
    shl     rsi, cl
    mov     ecx, r8d
    add     r8d, 10h
    shl     rdi, cl
    add     rsi, rdi
    add     rdx, rsi
    jmp     loc_9F6A
    align 10h
    
loc_A410:
    lea     rax, aInvalidLiteral
    mov     [r14+30h], rax
    mov     dword ptr [r15+8], 3F51h
    jmp     loc_9EA8
    align 10h
    
loc_A430:
    lea     rax, aInvalidDistanc_0
    mov     [r14+30h], rax
    mov     dword ptr [r15+8], 3F51h
    jmp     loc_9EA8
    align 10h
    
loc_A450:
    movzx   ecx, byte ptr [rsi]
    add     rsi, 3
    add     r10, 3
    sub     eax, 3
    mov     [r10-3], cl
    movzx   ecx, byte ptr [rsi-2]
    mov     [r10-2], cl
    movzx   ecx, byte ptr [rsi-1]
    mov     [r10-1], cl
    
loc_A472:
    cmp     eax, 2
    ja      short loc_A450
    test    eax, eax
    jz      loc_9E8F
    movzx   ecx, byte ptr [rsi]
    cmp     eax, 2
    mov     [r10], cl
    jnz     loc_ABAB
    movzx   eax, byte ptr [rsi+1]
    add     r10, 2
    mov     [r10-1], al
    jmp     loc_9E8F
    
loc_A49F:
    mov     r11d, [rsp+70h+var_B0]
    mov     rdi, [rsp+70h+var_C8]
    sub     r11d, ecx
    cmp     eax, ecx
    lea     rsi, [rdi+r11]
    jbe     short loc_A472
    lea     rdi, [rdi+r11+10h]
    sub     eax, ecx
    cmp     r10, rdi
    lea     rdi, [r10+10h]
    setnb   r9b
    cmp     rsi, rdi
    setnb   dil
    or      r9b, dil
    jz      loc_AE84
    cmp     ecx, 16h
    jbe     loc_AE84
    mov     r9, rsi
    lea     edi, [rcx-1]
    neg     r9
    and     r9d, 0Fh
    mov     dword ptr [rsp+70h+var_50], edi
    mov     dword ptr [rsp+70h+var_68], edi
    lea     edi, [r9+0Fh]
    cmp     edi, dword ptr [rsp+70h+var_50]
    ja      loc_AED2
    test    r9d, r9d
    jz      loc_AF34
    lea     rdi, [rsi+1]
    cmp     r9d, 1
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+1]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi]
    mov     [r10], dil
    jz      loc_A771
    lea     rdi, [rsi+2]
    cmp     r9d, 2
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+2]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+1]
    mov     [r10+1], dil
    lea     edi, [rcx-2]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+3]
    cmp     r9d, 3
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+3]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+2]
    mov     [r10+2], dil
    lea     edi, [rcx-3]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+4]
    cmp     r9d, 4
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+4]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+3]
    mov     [r10+3], dil
    lea     edi, [rcx-4]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+5]
    cmp     r9d, 5
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+5]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+4]
    mov     [r10+4], dil
    lea     edi, [rcx-5]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+6]
    cmp     r9d, 6
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+6]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+5]
    mov     [r10+5], dil
    lea     edi, [rcx-6]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+7]
    cmp     r9d, 7
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+7]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+6]
    mov     [r10+6], dil
    lea     edi, [rcx-7]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+8]
    cmp     r9d, 8
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+8]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+7]
    mov     [r10+7], dil
    lea     edi, [rcx-8]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+9]
    cmp     r9d, 9
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+9]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+8]
    mov     [r10+8], dil
    lea     edi, [rcx-9]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+0Ah]
    cmp     r9d, 0Ah
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+0Ah]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+9]
    mov     [r10+9], dil
    lea     edi, [rcx-0Ah]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+0Bh]
    cmp     r9d, 0Bh
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+0Bh]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+0Ah]
    mov     [r10+0Ah], dil
    lea     edi, [rcx-0Bh]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_A771
    lea     rdi, [rsi+0Ch]
    cmp     r9d, 0Ch
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+0Ch]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+0Bh]
    mov     [r10+0Bh], dil
    lea     edi, [rcx-0Ch]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      short loc_A771
    lea     rdi, [rsi+0Dh]
    cmp     r9d, 0Dh
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+0Dh]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+0Ch]
    mov     [r10+0Ch], dil
    lea     edi, [rcx-0Dh]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      short loc_A771
    lea     rdi, [rsi+0Eh]
    cmp     r9d, 0Fh
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+0Eh]
    mov     [rsp+70h+var_58], rdi
    movzx   edi, byte ptr [rsi+0Dh]
    mov     [r10+0Dh], dil
    lea     edi, [rcx-0Eh]
    mov     dword ptr [rsp+70h+var_68], edi
    jnz     short loc_A771
    lea     rdi, [rsi+0Fh]
    movzx   esi, byte ptr [rsi+0Eh]
    mov     [rsp+70h+var_60], rdi
    lea     rdi, [r10+0Fh]
    mov     [rsp+70h+var_58], rdi
    lea     edi, [rcx-0Fh]
    mov     [r10+0Eh], sil
    mov     dword ptr [rsp+70h+var_68], edi
    
loc_A771:
    mov     esi, r9d
    sub     ecx, r9d
    lea     rdi, [r11+rsi]
    lea     r9d, [rcx-10h]
    add     rdi, [rsp+70h+var_C8]
    mov     dword ptr [rsp+70h+var_48], ecx
    lea     r11, [r10+rsi]
    xor     ecx, ecx
    shr     r9d, 4
    xor     esi, esi
    add     r9d, 1
    nop     dword ptr [rax+rax+00000000h]
    
loc_A7A0:
    movdqa  xmm0, xmmword ptr [rdi+rcx]
    add     esi, 1
    movups  xmmword ptr [r11+rcx], xmm0
    add     rcx, 10h
    cmp     esi, r9d
    jb      short loc_A7A0
    shl     r9d, 4
    mov     rdi, [rsp+70h+var_58]
    mov     ecx, dword ptr [rsp+70h+var_68]
    mov     esi, r9d
    add     rdi, rsi
    sub     ecx, r9d
    add     rsi, [rsp+70h+var_60]
    cmp     r9d, dword ptr [rsp+70h+var_48]
    jz      short loc_A7E6
    
loc_A7D8:
    sub     ecx, 1
    lea     rcx, [rsi+rcx+1]
    
loc_A7E0:
    movsb
    cmp     rcx, rsi
    jnz     short loc_A7E0
    
loc_A7E6:
    mov     ecx, dword ptr [rsp+70h+var_50]
    lea     r10, [r10+rcx+1]
    mov     ecx, [rsp+70h+var_40]
    mov     rsi, r10
    sub     rsi, rcx
    jmp     loc_A472
    
loc_A7FE:
    mov     ecx, [rsp+70h+var_40]
    mov     rdi, r10
    mov     r9, r10
    sub     rdi, rcx
    mov     rcx, rdi
    jmp     short loc_A816
    
loc_A810:
    mov     rcx, rsi
    mov     r9, r10
    
loc_A816:
    movzx   esi, byte ptr [rcx]
    sub     eax, 3
    add     r10, 3
    mov     [r10-3], sil
    movzx   esi, byte ptr [rcx+1]
    mov     [r10-2], sil
    lea     rsi, [rcx+3]
    movzx   edi, byte ptr [rsi-1]
    cmp     eax, 2
    mov     [r10-1], dil
    ja      short loc_A810
    test    eax, eax
    jz      loc_9E8F
    movzx   esi, byte ptr [rcx+3]
    cmp     eax, 2
    lea     r10, [r9+4]
    mov     [r9+3], sil
    jnz     loc_9E8F
    movzx   eax, byte ptr [rcx+4]
    lea     r10, [r9+5]
    mov     [r9+4], al
    jmp     loc_9E8F
    
loc_A86B:
    movzx   r11d, byte ptr [rbp+1]
    add     r8d, 10h
    add     rbp, 2
    shl     r11, cl
    add     rdx, r11
    jmp     loc_A00F
    
loc_A883:
    mov     rsi, [rsp+70h+var_C8]
    mov     edi, ebx
    sub     edi, ecx
    mov     [rsp+70h+var_48], rdi
    add     rsi, rdi
    cmp     eax, ecx
    jbe     loc_A472
    mov     r11, [rsp+70h+var_C8]
    sub     eax, ecx
    lea     r9, [r11+rdi+10h]
    lea     r11, [r10+10h]
    cmp     r10, r9
    setnb   r9b
    cmp     rsi, r11
    setnb   r11b
    or      r9b, r11b
    jz      loc_AEB8
    cmp     ecx, 16h
    jbe     loc_AEB8
    mov     r9, rsi
    lea     r11d, [rcx-1]
    neg     r9
    and     r9d, 0Fh
    mov     edi, r11d
    mov     dword ptr [rsp+70h+var_50], r11d
    mov     dword ptr [rsp+70h+var_60], r11d
    lea     r11d, [r9+0Fh]
    cmp     r11d, edi
    ja      loc_AF14
    test    r9d, r9d
    jz      loc_AF03
    movzx   edi, byte ptr [rsi]
    lea     r11, [rsi+1]
    cmp     r9d, 1
    mov     [rsp+70h+var_68], r11
    lea     r11, [r10+1]
    mov     [r10], dil
    jz      loc_AB18
    lea     rdi, [rsi+2]
    cmp     r9d, 2
    lea     r11, [r10+2]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+1]
    mov     [r10+1], dil
    lea     edi, [rcx-2]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+3]
    cmp     r9d, 3
    lea     r11, [r10+3]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+2]
    mov     [r10+2], dil
    lea     edi, [rcx-3]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+4]
    cmp     r9d, 4
    lea     r11, [r10+4]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+3]
    mov     [r10+3], dil
    lea     edi, [rcx-4]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+5]
    cmp     r9d, 5
    lea     r11, [r10+5]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+4]
    mov     [r10+4], dil
    lea     edi, [rcx-5]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+6]
    cmp     r9d, 6
    lea     r11, [r10+6]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+5]
    mov     [r10+5], dil
    lea     edi, [rcx-6]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+7]
    cmp     r9d, 7
    lea     r11, [r10+7]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+6]
    mov     [r10+6], dil
    lea     edi, [rcx-7]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+8]
    cmp     r9d, 8
    lea     r11, [r10+8]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+7]
    mov     [r10+7], dil
    lea     edi, [rcx-8]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+9]
    cmp     r9d, 9
    lea     r11, [r10+9]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+8]
    mov     [r10+8], dil
    lea     edi, [rcx-9]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+0Ah]
    cmp     r9d, 0Ah
    lea     r11, [r10+0Ah]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+9]
    mov     [r10+9], dil
    lea     edi, [rcx-0Ah]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+0Bh]
    cmp     r9d, 0Bh
    lea     r11, [r10+0Bh]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+0Ah]
    mov     [r10+0Ah], dil
    lea     edi, [rcx-0Bh]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      loc_AB18
    lea     rdi, [rsi+0Ch]
    cmp     r9d, 0Ch
    lea     r11, [r10+0Ch]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+0Bh]
    mov     [r10+0Bh], dil
    lea     edi, [rcx-0Ch]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      short loc_AB18
    lea     rdi, [rsi+0Dh]
    cmp     r9d, 0Dh
    lea     r11, [r10+0Dh]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+0Ch]
    mov     [r10+0Ch], dil
    lea     edi, [rcx-0Dh]
    mov     dword ptr [rsp+70h+var_60], edi
    jz      short loc_AB18
    lea     rdi, [rsi+0Eh]
    cmp     r9d, 0Fh
    lea     r11, [r10+0Eh]
    mov     [rsp+70h+var_68], rdi
    movzx   edi, byte ptr [rsi+0Dh]
    mov     [r10+0Dh], dil
    lea     edi, [rcx-0Eh]
    mov     dword ptr [rsp+70h+var_60], edi
    jnz     short loc_AB18
    lea     rdi, [rsi+0Fh]
    movzx   esi, byte ptr [rsi+0Eh]
    lea     r11, [r10+0Fh]
    mov     [rsp+70h+var_68], rdi
    lea     edi, [rcx-0Fh]
    mov     [r10+0Eh], sil
    mov     dword ptr [rsp+70h+var_60], edi
    
loc_AB18:
    sub     ecx, r9d
    mov     esi, r9d
    mov     [rsp+70h+var_3C], ecx
    sub     ecx, 10h
    lea     r9, [r10+rsi]
    shr     ecx, 4
    lea     edi, [rcx+1]
    xor     ecx, ecx
    mov     dword ptr [rsp+70h+var_58], edi
    mov     rdi, [rsp+70h+var_48]
    add     rdi, rsi
    add     rdi, [rsp+70h+var_C8]
    xor     esi, esi
    
loc_AB44:
    movdqa  xmm0, xmmword ptr [rdi+rcx]
    add     esi, 1
    movups  xmmword ptr [r9+rcx], xmm0
    add     rcx, 10h
    cmp     dword ptr [rsp+70h+var_58], esi
    ja      short loc_AB44
    mov     ecx, dword ptr [rsp+70h+var_58]
    mov     r9d, dword ptr [rsp+70h+var_60]
    shl     ecx, 4
    mov     esi, ecx
    sub     r9d, ecx
    lea     rdi, [r11+rsi]
    add     rsi, [rsp+70h+var_68]
    cmp     ecx, [rsp+70h+var_3C]
    jz      loc_A7E6
    
loc_AB7F:
    lea     ecx, [r9-1]
    lea     rcx, [rsi+rcx+1]
    
loc_AB88:
    movsb
    cmp     rsi, rcx
    jnz     short loc_AB88
    jmp     loc_A7E6
    
loc_AB93:
    lea     rax, aInvalidDistanc
    mov     [r14+30h], rax
    mov     dword ptr [r15+8], 3F51h
    jmp     loc_9EA8
    
loc_ABAB:
    add     r10, 1
    jmp     loc_9E8F
    
loc_ABB4:
    mov     r9, [rsp+70h+var_C8]
    lea     rsi, [r10+rdi+11h]
    sub     eax, ebx
    cmp     r9, rsi
    lea     rsi, [r9+10h]
    setnb   dil
    cmp     rcx, rsi
    setnb   sil
    or      dil, sil
    jz      loc_AF1F
    cmp     ebx, 16h
    jbe     loc_AF1F
    mov     esi, [rsp+70h+var_A4]
    cmp     [rsp+70h+var_98], esi
    ja      loc_AF5B
    mov     esi, [rsp+70h+var_B4]
    test    esi, esi
    jz      loc_AF47
    movzx   edi, byte ptr [r9]
    cmp     [rsp+70h+var_B4], 1
    lea     r11, [r9+1]
    lea     rsi, [rcx+1]
    mov     [rcx], dil
    jz      loc_AEDA
    movzx   edi, byte ptr [r9+1]
    cmp     [rsp+70h+var_B4], 2
    lea     r11, [r9+2]
    lea     rsi, [rcx+2]
    mov     [rcx+1], dil
    mov     edi, [rsp+70h+var_80]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+2]
    cmp     [rsp+70h+var_B4], 3
    lea     r11, [r9+3]
    lea     rsi, [rcx+3]
    mov     [rcx+2], dil
    mov     edi, [rsp+70h+var_7C]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+3]
    cmp     [rsp+70h+var_B4], 4
    lea     r11, [r9+4]
    lea     rsi, [rcx+4]
    mov     [rcx+3], dil
    mov     edi, [rsp+70h+var_78]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+4]
    cmp     [rsp+70h+var_B4], 5
    lea     r11, [r9+5]
    lea     rsi, [rcx+5]
    mov     [rcx+4], dil
    mov     edi, [rsp+70h+var_74]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+5]
    cmp     [rsp+70h+var_B4], 6
    lea     r11, [r9+6]
    lea     rsi, [rcx+6]
    mov     [rcx+5], dil
    mov     edi, [rsp+70h+var_70]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+6]
    cmp     [rsp+70h+var_B4], 7
    lea     r11, [r9+7]
    lea     rsi, [rcx+7]
    mov     [rcx+6], dil
    mov     edi, [rsp+70h+var_6C]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+7]
    cmp     [rsp+70h+var_B4], 8
    lea     r11, [r9+8]
    lea     rsi, [rcx+8]
    mov     [rcx+7], dil
    lea     edi, [rbx-8]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+8]
    cmp     [rsp+70h+var_B4], 9
    lea     r11, [r9+9]
    lea     rsi, [rcx+9]
    mov     [rcx+8], dil
    lea     edi, [rbx-9]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+9]
    cmp     [rsp+70h+var_B4], 0Ah
    lea     r11, [r9+0Ah]
    lea     rsi, [rcx+0Ah]
    mov     [rcx+9], dil
    lea     edi, [rbx-0Ah]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      loc_ADEC
    movzx   edi, byte ptr [r9+0Ah]
    cmp     [rsp+70h+var_B4], 0Bh
    lea     r11, [r9+0Bh]
    lea     rsi, [rcx+0Bh]
    mov     [rcx+0Ah], dil
    lea     edi, [rbx-0Bh]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      short loc_ADEC
    movzx   edi, byte ptr [r9+0Bh]
    cmp     [rsp+70h+var_B4], 0Ch
    lea     r11, [r9+0Ch]
    lea     rsi, [rcx+0Ch]
    mov     [rcx+0Bh], dil
    lea     edi, [rbx-0Ch]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      short loc_ADEC
    movzx   edi, byte ptr [r9+0Ch]
    cmp     [rsp+70h+var_B4], 0Dh
    lea     r11, [r9+0Dh]
    lea     rsi, [rcx+0Dh]
    mov     [rcx+0Ch], dil
    lea     edi, [rbx-0Dh]
    mov     dword ptr [rsp+70h+var_68], edi
    jz      short loc_ADEC
    movzx   edi, byte ptr [r9+0Dh]
    cmp     [rsp+70h+var_B4], 0Fh
    lea     r11, [r9+0Eh]
    lea     rsi, [rcx+0Eh]
    mov     [rcx+0Dh], dil
    lea     edi, [rbx-0Eh]
    mov     dword ptr [rsp+70h+var_68], edi
    jnz     short loc_ADEC
    movzx   edi, byte ptr [r9+0Eh]
    lea     r11, [r9+0Fh]
    lea     rsi, [rcx+0Fh]
    mov     [rcx+0Eh], dil
    lea     edi, [rbx-0Fh]
    mov     dword ptr [rsp+70h+var_68], edi
    
loc_ADEC:
    mov     edi, [rsp+70h+var_B4]
    mov     dword ptr [rsp+70h+var_50], eax
    add     r9, rdi
    mov     [rsp+70h+var_58], r9
    mov     r9, [rsp+70h+var_60]
    lea     rdi, [rdi+r9+1]
    mov     r9d, dword ptr [rsp+70h+var_68]
    add     rdi, r10
    xor     r10d, r10d
    mov     [rsp+70h+var_60], rdi
    xor     edi, edi
    
loc_AE18:
    mov     rax, [rsp+70h+var_58]
    add     r10d, 1
    movdqa  xmm0, xmmword ptr [rax+rdi]
    mov     rax, [rsp+70h+var_60]
    movups  xmmword ptr [rax+rdi], xmm0
    add     rdi, 10h
    cmp     [rsp+70h+var_A8], r10d
    ja      short loc_AE18
    mov     r10, [rsp+70h+var_A0]
    sub     r9d, [rsp+70h+var_AC]
    mov     eax, dword ptr [rsp+70h+var_50]
    lea     rdi, [rsi+r10]
    lea     rsi, [r11+r10]
    mov     r11d, [rsp+70h+var_AC]
    cmp     r11d, [rsp+70h+var_94]
    jz      short loc_AE6B
    
loc_AE5C:
    sub     r9d, 1
    lea     r9, [rsi+r9+1]
    
loc_AE65:
    movsb
    cmp     r9, rsi
    jnz     short loc_AE65
    
loc_AE6B:
    mov     rdi, [rsp+70h+var_90]
    lea     r10, [rcx+rdi+1]
    mov     ecx, [rsp+70h+var_40]
    mov     rsi, r10
    sub     rsi, rcx
    jmp     loc_A472
    
loc_AE84:
    sub     ecx, 1
    mov     rdi, r10
    mov     dword ptr [rsp+70h+var_50], ecx
    lea     rcx, [rsi+rcx+1]
    
loc_AE93:
    movsb
    cmp     rcx, rsi
    jnz     short loc_AE93
    jmp     loc_A7E6
    
loc_AE9E:
    sub     ecx, 1
    mov     rdi, r10
    mov     [rsp+70h+var_3C], ecx
    lea     rcx, [rsi+rcx+1]
    
loc_AEAD:
    movsb
    cmp     rsi, rcx
    jnz     short loc_AEAD
    jmp     loc_A372
    
loc_AEB8:
    sub     ecx, 1
    mov     rdi, r10
    mov     dword ptr [rsp+70h+var_50], ecx
    lea     rcx, [rsi+rcx+1]
    
loc_AEC7:
    movsb
    cmp     rsi, rcx
    jnz     short loc_AEC7
    jmp     loc_A7E6
    
loc_AED2:
    mov     rdi, r10
    jmp     loc_A7D8
    
loc_AEDA:
    mov     edi, [rsp+70h+var_A4]
    mov     dword ptr [rsp+70h+var_68], edi
    jmp     loc_ADEC
    
loc_AEE7:
    mov     r9d, ecx
    mov     rdi, r10
    jmp     loc_A363
    
loc_AEF2:
    mov     [rsp+70h+var_68], rsi
    mov     dword ptr [rsp+70h+var_60], ecx
    mov     r11, r10
    jmp     loc_A306
    
loc_AF03:
    mov     [rsp+70h+var_68], rsi
    mov     dword ptr [rsp+70h+var_60], ecx
    mov     r11, r10
    jmp     loc_AB18
    
loc_AF14:
    mov     r9d, ecx
    mov     rdi, r10
    jmp     loc_AB7F
    
loc_AF1F:
    mov     rsi, [rsp+70h+var_C8]
    mov     rdi, rcx
    
loc_AF27:
    movsb
    cmp     [rsp+70h+var_88], rsi
    jnz     short loc_AF27
    jmp     loc_AE6B
    
loc_AF34:
    mov     [rsp+70h+var_60], rsi
    mov     dword ptr [rsp+70h+var_68], ecx
    mov     [rsp+70h+var_58], r10
    jmp     loc_A771
    
loc_AF47:
    mov     r11, [rsp+70h+var_C8]
    mov     dword ptr [rsp+70h+var_68], ebx
    mov     rsi, rcx
    mov     r9, r11
    jmp     loc_ADEC
    
loc_AF5B:
    mov     rsi, [rsp+70h+var_C8]
    mov     r9d, ebx
    mov     rdi, rcx
    jmp     loc_AE5C
    

<inflateResetKeep>:
    
    test    rdi, rdi
    jz      loc_B048
    cmp     qword ptr [rdi+40h], 0
    jz      loc_B048
    cmp     qword ptr [rdi+48h], 0
    jz      loc_B048
    mov     rdx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rdx, rdx
    jz      short locret_AFA2
    cmp     rdi, [rdx]
    jz      short loc_AFA8
    
locret_AFA2:
    rep retn
    align 8
    
loc_AFA8:
    mov     esi, [rdx+8]
    lea     ecx, [rsi-3F34h]
    cmp     ecx, 1Fh
    ja      short locret_AFA2
    mov     eax, [rdx+10h]
    mov     qword ptr [rdx+28h], 0
    mov     qword ptr [rdi+28h], 0
    mov     qword ptr [rdi+10h], 0
    mov     qword ptr [rdi+30h], 0
    test    eax, eax
    jz      short loc_AFE4
    and     eax, 1
    mov     [rdi+60h], rax
    
loc_AFE4:
    lea     rax, [rdx+558h]
    mov     dword ptr [rdx+8], 3F34h
    mov     dword ptr [rdx+0Ch], 0
    mov     dword ptr [rdx+14h], 0
    mov     dword ptr [rdx+1Ch], 8000h
    mov     [rdx+90h], rax
    mov     [rdx+70h], rax
    mov     [rdx+68h], rax
    mov     rax, 0FFFFFFFF00000001h
    mov     qword ptr [rdx+30h], 0
    mov     [rdx+1BE8h], rax
    mov     qword ptr [rdx+50h], 0
    xor     eax, eax
    mov     dword ptr [rdx+58h], 0
    retn
    align 8
    
loc_B048:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateReset>:
    
    test    rdi, rdi
    jz      short loc_B0A8
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_B0A8
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_B0A8
    mov     rdx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rdx, rdx
    jz      short locret_B076
    cmp     rdi, [rdx]
    jz      short loc_B080
    
locret_B076:
    rep retn
    align 20h
    
loc_B080:
    mov     esi, [rdx+8]
    lea     ecx, [rsi-3F34h]
    cmp     ecx, 1Fh
    ja      short locret_B076
    mov     qword ptr [rdx+3Ch], 0
    mov     dword ptr [rdx+44h], 0
    jmp     _inflateResetKeep
    align 8
    
loc_B0A8:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateReset2>:
    
    test    rdi, rdi
    jz      loc_B18A
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbp, rdi
    sub     rsp, 8
    cmp     qword ptr [rdi+40h], 0
    jz      loc_B180
    mov     rdx, [rdi+48h]
    test    rdx, rdx
    jz      loc_B180
    mov     r12, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    r12, r12
    jz      short loc_B0F2
    cmp     rdi, [r12]
    jz      short loc_B100
    
loc_B0F2:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_B100:
    mov     ecx, [r12+8]
    sub     ecx, 3F34h
    cmp     ecx, 1Fh
    ja      short loc_B0F2
    test    esi, esi
    mov     ebx, esi
    js      short loc_B178
    mov     r13d, esi
    mov     eax, esi
    sar     r13d, 4
    and     eax, 0Fh
    add     r13d, 5
    cmp     esi, 30h
    cmovl   ebx, eax
    
loc_B12C:
    lea     eax, [rbx-8]
    cmp     eax, 7
    jbe     short loc_B138
    test    ebx, ebx
    jnz     short loc_B180
    
loc_B138:
    mov     rsi, [r12+48h]
    test    rsi, rsi
    jz      short loc_B158
    cmp     ebx, [r12+38h]
    jz      short loc_B158
    mov     rdi, [rbp+50h]
    call    rdx
    mov     qword ptr [r12+48h], 0
    
loc_B158:
    mov     [r12+10h], r13d
    mov     [r12+38h], ebx
    add     rsp, 8
    pop     rbx
    mov     rdi, rbp
    pop     rbp
    pop     r12
    pop     r13
    jmp     _inflateReset
    align 8
    
loc_B178:
    neg     ebx
    xor     r13d, r13d
    jmp     short loc_B12C
    align 20h
    
loc_B180:
    mov     eax, 0FFFFFFFEh
    jmp     loc_B0F2
    
loc_B18A:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateInit2_>:
    
    test    rdx, rdx
    push    r12
    push    rbp
    push    rbx
    jz      loc_B268
    cmp     byte ptr [rdx], 31h
    jnz     loc_B268
    cmp     ecx, 70h
    jnz     loc_B268
    test    rdi, rdi
    mov     rbx, rdi
    jz      loc_B278
    mov     rcx, [rdi+40h]
    mov     qword ptr [rdi+30h], 0
    test    rcx, rcx
    jz      short loc_B238
    cmp     qword ptr [rbx+48h], 0
    mov     rdi, [rdi+50h]
    jz      short loc_B254
    
loc_B1D7:
    mov     r12d, esi
    mov     edx, 1BF8h
    mov     esi, 1
    call    rcx
    test    rax, rax
    mov     rbp, rax
    jz      loc_B270
    mov     [rbx+38h], rax
    mov     esi, r12d
    mov     [rax], rbx
    mov     qword ptr [rax+48h], 0
    mov     dword ptr [rax+8], 3F34h
    mov     rdi, rbx
    call    _inflateReset2
    test    eax, eax
    mov     r12d, eax
    jz      short loc_B22C
    mov     rdi, [rbx+50h]
    mov     rsi, rbp
    call    qword ptr [rbx+48h]
    mov     qword ptr [rbx+38h], 0
    
loc_B22C:
    mov     eax, r12d
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_B238:
    lea     rcx, zcalloc
    mov     qword ptr [rdi+50h], 0
    mov     [rdi+40h], rcx
    xor     edi, edi
    cmp     qword ptr [rbx+48h], 0
    jnz     short loc_B1D7
    
loc_B254:
    lea     rax, zcfree
    mov     [rbx+48h], rax
    jmp     loc_B1D7
    align 8
    
loc_B268:
    mov     r12d, 0FFFFFFFAh
    jmp     short loc_B22C
    
loc_B270:
    mov     r12d, 0FFFFFFFCh
    jmp     short loc_B22C
    
loc_B278:
    mov     r12d, 0FFFFFFFEh
    jmp     short loc_B22C
    

<inflateInit_>:
    
    mov     ecx, edx
    mov     rdx, rsi
    mov     esi, 0Fh
    jmp     _inflateInit2_
    

<inflatePrime>:
    
    test    rdi, rdi
    jz      loc_B320
    cmp     qword ptr [rdi+40h], 0
    jz      loc_B320
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_B320
    mov     r8, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    r8, r8
    jz      short locret_B2BE
    cmp     rdi, [r8]
    jz      short loc_B2C0
    
locret_B2BE:
    rep retn
    
loc_B2C0:
    mov     ecx, [r8+8]
    sub     ecx, 3F34h
    cmp     ecx, 1Fh
    ja      short locret_B2BE
    test    esi, esi
    js      short loc_B308
    cmp     esi, 10h
    jg      short locret_B2BE
    mov     r9d, [r8+58h]
    lea     edi, [rsi+r9]
    cmp     edi, 20h
    ja      short locret_B2BE
    mov     ecx, esi
    mov     eax, 1
    mov     [r8+58h], edi
    shl     rax, cl
    mov     ecx, r9d
    sub     eax, 1
    and     edx, eax
    xor     eax, eax
    shl     edx, cl
    add     [r8+50h], rdx
    retn
    align 8
    
loc_B308:
    mov     qword ptr [r8+50h], 0
    mov     dword ptr [r8+58h], 0
    xor     eax, eax
    retn
    align 20h
    
loc_B320:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflate>:
    
    dest= qword ptr -80h
    n= qword ptr -78h
    var_70= qword ptr -70h
    var_68= dword ptr -68h
    var_64= dword ptr -64h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_44= word ptr -44h
    var_42= byte ptr -42h
    var_41= byte ptr -41h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 58h
    mov     rax, fs:28h
    mov     [rsp+88h+var_40], rax
    xor     eax, eax
    test    rdi, rdi
    mov     [rsp+88h+var_68], esi
    jz      def_B435
    cmp     qword ptr [rdi+40h], 0
    mov     r13, rdi
    jz      def_B435
    cmp     qword ptr [rdi+48h], 0
    jz      def_B435
    mov     rbx, [rdi+38h]
    mov     r14d, 0FFFFFFFEh
    test    rbx, rbx
    jz      short loc_B388
    cmp     rdi, [rbx]
    jz      short loc_B3B0
    
loc_B388:
    mov     rsi, [rsp+88h+var_40]
    xor     rsi, fs:28h
    mov     eax, r14d
    jnz     loc_D67B
    add     rsp, 58h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_B3B0:
    mov     edx, [rbx+8]
    lea     eax, [rdx-3F34h]
    cmp     eax, 1Fh
    ja      short loc_B388
    mov     rsi, [rdi+18h]
    test    rsi, rsi
    mov     [rsp+88h+dest], rsi
    jz      short loc_B388
    mov     r12, [rdi]
    mov     edi, [rdi+8]
    test    r12, r12
    mov     dword ptr [rsp+88h+n], edi
    jz      loc_B5C8
    
loc_B3DF:
    cmp     edx, 3F3Fh
    jnz     short loc_B3F3
    mov     dword ptr [rbx+8], 3F40h
    mov     eax, 0Ch
    
loc_B3F3:
    mov     edi, [rsp+88h+var_68]
    mov     r15d, [r13+20h]
    mov     r11, [rbx+50h]
    mov     r10d, dword ptr [rsp+88h+n]
    mov     ebp, [rbx+58h]
    mov     [rsp+88h+var_70], r13
    sub     edi, 5
    mov     dword ptr [rsp+88h+n+4], r15d
    mov     [rsp+88h+var_64], edi
    mov     r14, r11
    mov     r13d, r10d
    
loc_B41E:
    cmp     eax, 1Eh
    ja      def_B435
    lea     rdi, jpt_B435
    movsxd  rax, ds:(jpt_B435 - 185E0h)[rdi+rax*4]
    add     rax, rdi
    jmp     rax
    align 20h
    
loc_B440:
    mov     eax, [rbx+10h]
    test    eax, eax
    jnz     loc_CB10
    mov     dword ptr [rbx+8], 3F40h
    
loc_B452:
    mov     eax, [rbx+0Ch]
    test    eax, eax
    jz      loc_B5D8
    mov     ecx, ebp
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    mov     r11, r14
    and     ecx, 7
    and     ebp, 0FFFFFFF8h
    shr     r11, cl
    mov     dword ptr [rbx+8], 3F4Eh
    
loc_B47A:
    mov     eax, [rbx+10h]
    test    eax, eax
    jz      loc_CAC0
    cmp     ebp, 1Fh
    ja      loc_D4A5
    test    r10d, r10d
    jz      loc_CEB8
    movzx   edx, byte ptr [r12]
    mov     ecx, ebp
    lea     esi, [r10-1]
    lea     r14, [r12+1]
    shl     rdx, cl
    lea     ecx, [rbp+8]
    add     r11, rdx
    cmp     ecx, 1Fh
    ja      loc_D2E8
    test    esi, esi
    jz      loc_D331
    movzx   edx, byte ptr [r12+1]
    lea     esi, [r10-2]
    lea     r14, [r12+2]
    shl     rdx, cl
    lea     ecx, [rbp+10h]
    add     r11, rdx
    cmp     ecx, 1Fh
    ja      loc_D2E8
    test    esi, esi
    jz      loc_D331
    movzx   edx, byte ptr [r12+2]
    lea     esi, [r10-3]
    lea     r14, [r12+3]
    shl     rdx, cl
    lea     ecx, [rbp+18h]
    add     r11, rdx
    cmp     ecx, 1Fh
    ja      loc_D2E8
    test    esi, esi
    jz      loc_D331
    movzx   edx, byte ptr [r12+3]
    lea     r14, [r12+4]
    sub     r10d, 4
    add     ebp, 20h
    shl     rdx, cl
    add     r11, rdx
    
loc_B52B:
    mov     edx, dword ptr [rsp+88h+n+4]
    mov     esi, eax
    and     esi, 4
    sub     edx, r15d
    mov     ecx, edx
    add     [r13+28h], rcx
    add     [rbx+28h], rcx
    test    edx, edx
    jz      short loc_B54D
    test    esi, esi
    jnz     loc_D376
    
loc_B54D:
    test    esi, esi
    jz      loc_CAB2
    mov     r8d, [rbx+18h]
    mov     rdx, r11
    test    r8d, r8d
    jnz     short loc_B594
    shr     rdx, 18h
    mov     rsi, r11
    movzx   ecx, dl
    mov     rdx, r11
    shl     rsi, 18h
    shr     rdx, 8
    mov     esi, esi
    and     edx, 0FF00h
    or      rdx, rcx
    mov     rcx, r11
    shl     rcx, 8
    and     ecx, 0FF0000h
    add     rcx, rsi
    add     rdx, rcx
    
loc_B594:
    cmp     [rbx+20h], rdx
    jz      loc_CAB2
    lea     rax, aIncorrectDataC
    mov     r12, r14
    mov     dword ptr [rsp+88h+n+4], r15d
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    align 8
    
loc_B5C8:
    test    edi, edi
    jz      loc_B3DF
    jmp     loc_B388
    align 8
    
loc_B5D8:
    cmp     ebp, 2
    ja      loc_D2E0
    test    r13d, r13d
    jz      loc_D304
    movzx   esi, byte ptr [r12]
    mov     ecx, ebp
    lea     rdx, [r12+1]
    sub     r13d, 1
    add     ebp, 8
    shl     rsi, cl
    add     r14, rsi
    
loc_B603:
    mov     ecx, r14d
    and     ecx, 1
    mov     [rbx+0Ch], ecx
    mov     rcx, r14
    shr     rcx, 1
    and     ecx, 3
    cmp     ecx, 2
    jz      loc_C3B8
    cmp     ecx, 3
    jz      loc_D056
    cmp     ecx, 1
    jz      loc_B7E0
    mov     dword ptr [rbx+8], 3F41h
    shr     r14, 3
    sub     ebp, 3
    mov     r12, rdx
    
loc_B641:
    mov     ecx, ebp
    and     ebp, 0FFFFFFF8h
    and     ecx, 7
    shr     r14, cl
    cmp     ebp, 1Fh
    ja      loc_D359
    test    r13d, r13d
    jz      loc_BAE0
    movzx   eax, byte ptr [r12]
    mov     ecx, ebp
    lea     esi, [r13-1]
    lea     rdx, [r12+1]
    shl     rax, cl
    lea     ecx, [rbp+8]
    add     r14, rax
    cmp     ecx, 1Fh
    ja      loc_CF7E
    test    esi, esi
    jz      loc_CD8A
    movzx   eax, byte ptr [r12+1]
    lea     esi, [r13-2]
    lea     rdx, [r12+2]
    shl     rax, cl
    lea     ecx, [rbp+10h]
    add     r14, rax
    cmp     ecx, 1Fh
    ja      loc_CF7E
    test    esi, esi
    jz      loc_CD8A
    movzx   eax, byte ptr [r12+2]
    lea     esi, [r13-3]
    lea     rdx, [r12+3]
    shl     rax, cl
    lea     ecx, [rbp+18h]
    add     r14, rax
    cmp     ecx, 1Fh
    ja      loc_CF7E
    test    esi, esi
    jz      loc_CD8A
    movzx   eax, byte ptr [r12+3]
    lea     rdx, [r12+4]
    sub     r13d, 4
    add     ebp, 20h
    shl     rax, cl
    add     r14, rax
    
loc_B6F2:
    mov     rax, r14
    movzx   ecx, r14w
    shr     rax, 10h
    xor     rax, 0FFFFh
    cmp     rcx, rax
    jz      loc_CF50
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidStoredB
    mov     r11, r14
    mov     r12, rdx
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    align 20h
    
loc_B740:
    mov     rdx, [rsp+88h+dest]
    
loc_B745:
    test    r15d, r15d
    jz      loc_BAE0
    mov     eax, [rbx+5Ch]
    add     [rsp+88h+dest], 1
    sub     r15d, 1
    mov     [rdx], al
    mov     dword ptr [rbx+8], 3F48h
    
loc_B764:
    cmp     r13d, 5
    jbe     loc_C950
    cmp     r15d, 101h
    jbe     loc_C950
    mov     rax, [rsp+88h+var_70]
    mov     rdi, [rsp+88h+dest]
    mov     esi, dword ptr [rsp+88h+n+4]
    mov     [rax+18h], rdi
    mov     [rax+20h], r15d
    mov     rdi, rax
    mov     [rax], r12
    mov     [rax+8], r13d
    mov     r15, rax
    mov     [rbx+50h], r14
    mov     [rbx+58h], ebp
    call    inflate_fast
    mov     rax, r15
    mov     rdi, [r15+18h]
    mov     r14, [rbx+50h]
    mov     r12, [rax]
    mov     r13d, [rax+8]
    mov     eax, [rbx+8]
    mov     r15d, [r15+20h]
    mov     [rsp+88h+dest], rdi
    mov     ebp, [rbx+58h]
    cmp     eax, 3F3Fh
    jz      loc_CCB8
    
loc_B7D6:
    sub     eax, 3F34h
    jmp     loc_B41E
    
loc_B7E0:
    lea     rdi, lenfix_4065
    cmp     [rsp+88h+var_68], 6
    mov     dword ptr [rbx+8], 3F47h
    mov     [rbx+68h], rdi
    lea     rdi, distfix_4066
    mov     [rbx+70h], rdi
    mov     rdi, 500000009h
    mov     [rbx+78h], rdi
    jz      loc_D714
    shr     r14, 3
    sub     ebp, 3
    mov     r12, rdx
    
loc_B820:
    mov     dword ptr [rbx+8], 3F48h
    jmp     loc_B764
    align 10h
    
loc_B830:
    mov     esi, [rbx+64h]
    
loc_B833:
    test    esi, esi
    jnz     loc_CE18
    
loc_B83B:
    mov     dword ptr [rbx+8], 3F4Ch
    
loc_B842:
    test    r15d, r15d
    jz      loc_BAE0
    mov     edx, dword ptr [rsp+88h+n+4]
    mov     eax, [rbx+60h]
    sub     edx, r15d
    cmp     eax, edx
    jbe     loc_CE00
    sub     eax, edx
    cmp     [rbx+40h], eax
    jnb     loc_C4A0
    mov     r11d, [rbx+1BE8h]
    test    r11d, r11d
    jz      loc_C4A0
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidDistanc
    mov     r11, r14
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_B8A0:
    mov     dword ptr [rbx+8], 3F52h
    
loc_B8A7:
    mov     r14d, 0FFFFFFFCh
    jmp     loc_B388
    align 8
    
loc_B8B8:
    mov     edx, [rbx+64h]
    
loc_B8BB:
    test    edx, edx
    jnz     loc_CA50
    mov     eax, [rbx+5Ch]
    
loc_B8C6:
    mov     [rbx+1BF0h], eax
    mov     dword ptr [rbx+8], 3F4Ah
    
loc_B8D3:
    mov     ecx, [rbx+7Ch]
    mov     edi, 0FFFFFFFFh
    mov     r9, [rbx+70h]
    mov     r11d, r14d
    shl     edi, cl
    not     edi
    mov     eax, edi
    and     eax, r14d
    lea     rax, [r9+rax*4]
    movzx   edx, byte ptr [rax+1]
    movzx   esi, byte ptr [rax]
    movzx   r10d, word ptr [rax+2]
    movzx   eax, dl
    cmp     eax, ebp
    mov     r8d, eax
    jbe     short loc_B95C
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_B921
    align 8
    
loc_B918:
    test    r13d, r13d
    jz      loc_C750
    
loc_B921:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    mov     eax, edi
    and     eax, r14d
    mov     r11d, r14d
    lea     rax, [r9+rax*4]
    movzx   edx, byte ptr [rax+1]
    movzx   esi, byte ptr [rax]
    movzx   r10d, word ptr [rax+2]
    movzx   eax, dl
    cmp     eax, ecx
    mov     r8d, eax
    ja      short loc_B918
    mov     ebp, ecx
    
loc_B95C:
    test    sil, 0F0h
    mov     ecx, eax
    jz      loc_CCD0
    mov     eax, [rbx+1BECh]
    
loc_B96E:
    add     eax, ecx
    shr     r14, cl
    sub     ebp, r8d
    test    sil, 40h
    mov     [rbx+1BECh], eax
    jz      loc_CE90
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidDistanc_0
    mov     r11, r14
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    align 10h
    
loc_B9B0:
    cmp     ebp, 1Fh
    ja      loc_D349
    
loc_B9B9:
    test    r13d, r13d
    jz      loc_BAE0
    movzx   eax, byte ptr [r12]
    mov     ecx, ebp
    lea     edx, [r13-1]
    lea     rdi, [r12+1]
    shl     rax, cl
    lea     ecx, [rbp+8]
    add     r14, rax
    cmp     ecx, 1Fh
    ja      loc_CF76
    test    edx, edx
    jz      loc_CDA2
    movzx   eax, byte ptr [r12+1]
    lea     edx, [r13-2]
    lea     rdi, [r12+2]
    shl     rax, cl
    lea     ecx, [rbp+10h]
    add     r14, rax
    cmp     ecx, 1Fh
    ja      loc_CF76
    test    edx, edx
    jz      loc_CDA2
    movzx   eax, byte ptr [r12+2]
    add     ebp, 18h
    lea     edx, [r13-3]
    lea     rdi, [r12+3]
    shl     rax, cl
    add     r14, rax
    cmp     ebp, 1Fh
    ja      loc_CF76
    test    edx, edx
    jz      loc_D48F
    movzx   eax, byte ptr [r12+3]
    mov     ecx, ebp
    lea     rdi, [r12+4]
    sub     r13d, 4
    shl     rax, cl
    add     r14, rax
    
loc_BA55:
    mov     rax, r14
    mov     rdx, r14
    mov     rsi, [rsp+88h+var_70]
    shr     rax, 18h
    shr     rdx, 8
    mov     r12, rdi
    and     edx, 0FF00h
    movzx   eax, al
    xor     ebp, ebp
    or      rax, rdx
    mov     rdx, r14
    shl     r14, 18h
    shl     rdx, 8
    mov     r14d, r14d
    and     edx, 0FF0000h
    add     rdx, r14
    xor     r14d, r14d
    add     rax, rdx
    mov     [rbx+20h], rax
    mov     [rsi+60h], rax
    mov     dword ptr [rbx+8], 3F3Eh
    
loc_BAA5:
    mov     edi, [rbx+14h]
    test    edi, edi
    jz      loc_D4E3
    xor     edi, edi
    xor     edx, edx
    xor     esi, esi
    call    _adler32
    mov     rdi, [rsp+88h+var_70]
    mov     [rbx+20h], rax
    mov     [rdi+60h], rax
    
loc_BAC8:
    mov     dword ptr [rbx+8], 3F3Fh
    
loc_BACF:
    cmp     [rsp+88h+var_64], 1
    ja      loc_B452
    nop     word ptr [rax+rax+00h]
    
loc_BAE0:
    mov     r10d, r13d
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    xor     r14d, r14d
    jmp     loc_C190
    align 8
    
loc_BAF8:
    mov     eax, [rbx+18h]
    test    ah, 2
    jnz     short loc_BB69
    
loc_BB00:
    mov     rdx, [rbx+30h]
    test    rdx, rdx
    jz      short loc_BB19
    sar     eax, 9
    mov     dword ptr [rdx+48h], 1
    and     eax, 1
    mov     [rdx+44h], eax
    
loc_BB19:
    xor     edi, edi
    xor     edx, edx
    xor     esi, esi
    call    _crc32
    mov     rdi, [rsp+88h+var_70]
    mov     [rbx+20h], rax
    mov     [rdi+60h], rax
    mov     dword ptr [rbx+8], 3F3Fh
    jmp     short loc_BACF
    align 20h
    
loc_BB40:
    mov     eax, [rbx+18h]
    
loc_BB43:
    test    ah, 10h
    jnz     loc_C810
    mov     rdx, [rbx+30h]
    test    rdx, rdx
    jz      short loc_BB5D
    mov     qword ptr [rdx+38h], 0
    
loc_BB5D:
    test    ah, 2
    mov     dword ptr [rbx+8], 3F3Ch
    jz      short loc_BB00
    
loc_BB69:
    cmp     ebp, 0Fh
    ja      loc_D04E
    test    r13d, r13d
    jz      loc_BAE0
    movzx   edx, byte ptr [r12]
    mov     ecx, ebp
    lea     edi, [r13-1]
    lea     rsi, [r12+1]
    shl     rdx, cl
    lea     ecx, [rbp+8]
    add     r14, rdx
    cmp     ecx, 0Fh
    ja      loc_D0C1
    test    edi, edi
    jz      loc_CD72
    movzx   edx, byte ptr [r12+1]
    lea     rsi, [r12+2]
    sub     r13d, 2
    add     ebp, 10h
    shl     rdx, cl
    add     r14, rdx
    
loc_BBBD:
    test    byte ptr [rbx+10h], 4
    jz      loc_CAD0
    movzx   edx, word ptr [rbx+20h]
    cmp     rdx, r14
    jz      loc_CAD0
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aHeaderCrcMisma
    mov     r11, r14
    mov     r12, rsi
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    align 20h
    
loc_BC00:
    mov     eax, [rbx+18h]
    
loc_BC03:
    test    ah, 8
    jnz     loc_C8B0
    mov     rdx, [rbx+30h]
    test    rdx, rdx
    jz      short loc_BC1D
    mov     qword ptr [rdx+28h], 0
    
loc_BC1D:
    mov     dword ptr [rbx+5Ch], 0
    mov     dword ptr [rbx+8], 3F3Bh
    jmp     loc_BB43
    
loc_BC30:
    mov     eax, [rbx+18h]
    mov     ecx, eax
    and     ecx, 400h
    
loc_BC3B:
    test    ecx, ecx
    jz      loc_BCC7
    mov     edx, [rbx+5Ch]
    cmp     r13d, edx
    mov     ecx, edx
    cmovbe  ecx, r13d
    test    ecx, ecx
    jz      short loc_BCBC
    mov     rsi, [rbx+30h]
    mov     r8d, ecx
    test    rsi, rsi
    jz      short loc_BC9F
    mov     rdi, [rsi+18h]
    test    rdi, rdi
    jz      short loc_BC9F
    mov     eax, [rsi+20h]
    mov     esi, [rsi+24h]
    mov     dword ptr [rsp+88h+var_58], ecx
    mov     [rsp+88h+var_60], r8
    sub     eax, edx
    mov     edx, esi
    lea     r9d, [rcx+rax]
    sub     edx, eax
    cmp     r9d, esi
    mov     rsi, r12
    cmovbe  rdx, r8
    add     rdi, rax
    call    _memcpy
    mov     eax, [rbx+18h]
    mov     ecx, dword ptr [rsp+88h+var_58]
    mov     r8, [rsp+88h+var_60]
    
loc_BC9F:
    test    ah, 2
    jz      short loc_BCAE
    test    byte ptr [rbx+10h], 4
    jnz     loc_D163
    
loc_BCAE:
    mov     edx, [rbx+5Ch]
    sub     r13d, ecx
    add     r12, r8
    sub     edx, ecx
    mov     [rbx+5Ch], edx
    
loc_BCBC:
    test    edx, edx
    jnz     loc_BAE0
    mov     eax, [rbx+18h]
    
loc_BCC7:
    mov     dword ptr [rbx+5Ch], 0
    mov     dword ptr [rbx+8], 3F3Ah
    jmp     loc_BC03
    align 20h
    
loc_BCE0:
    mov     edx, [rbx+18h]
    test    dh, 4
    mov     eax, edx
    jnz     loc_CC40
    
loc_BCEE:
    mov     rsi, [rbx+30h]
    xor     ecx, ecx
    test    rsi, rsi
    jz      short loc_BD0B
    mov     ecx, edx
    mov     qword ptr [rsi+18h], 0
    mov     eax, edx
    and     ecx, 400h
    
loc_BD0B:
    mov     dword ptr [rbx+8], 3F39h
    jmp     loc_BC3B
    align 20h
    
loc_BD20:
    cmp     ebp, 0Fh
    ja      short loc_BD5D
    
loc_BD25:
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_BD41
    align 8
    
loc_BD38:
    test    r13d, r13d
    jz      loc_C750
    
loc_BD41:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    cmp     ecx, 0Fh
    jbe     short loc_BD38
    
loc_BD5D:
    mov     rax, [rbx+30h]
    test    rax, rax
    jz      short loc_BD77
    movzx   edx, r14b
    mov     [rax+10h], edx
    mov     rdx, r14
    shr     rdx, 8
    mov     [rax+14h], edx
    
loc_BD77:
    mov     edx, [rbx+18h]
    test    dh, 2
    mov     eax, edx
    jz      short loc_BDB8
    test    byte ptr [rbx+10h], 4
    jz      short loc_BDB8
    mov     rdi, [rbx+20h]
    lea     rsi, [rsp+88h+var_44]
    mov     byte ptr [rsp+88h+var_44], r14b
    mov     edx, 2
    shr     r14, 8
    mov     byte ptr [rsp+88h+var_44+1], r14b
    call    _crc32
    mov     edx, [rbx+18h]
    mov     [rbx+20h], rax
    mov     eax, edx
    nop     dword ptr [rax+00000000h]
    
loc_BDB8:
    test    dh, 4
    mov     dword ptr [rbx+8], 3F38h
    jnz     loc_CD58
    xor     ebp, ebp
    xor     r14d, r14d
    jmp     loc_BCEE
    align 8
    
loc_BDD8:
    cmp     ebp, 1Fh
    ja      short loc_BE15
    
loc_BDDD:
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_BDF9
    align 10h
    
loc_BDF0:
    test    r13d, r13d
    jz      loc_C750
    
loc_BDF9:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    cmp     ecx, 1Fh
    jbe     short loc_BDF0
    
loc_BE15:
    mov     rax, [rbx+30h]
    test    rax, rax
    jz      short loc_BE22
    mov     [rax+8], r14
    
loc_BE22:
    test    byte ptr [rbx+19h], 2
    jz      short loc_BE32
    test    byte ptr [rbx+10h], 4
    jnz     loc_D212
    
loc_BE32:
    mov     dword ptr [rbx+8], 3F37h
    xor     r14d, r14d
    xor     ebp, ebp
    jmp     loc_BD25
    align 8
    
loc_BE48:
    mov     r8d, [rbx+8Ch]
    
loc_BE4F:
    mov     r11d, [rbx+84h]
    mov     r9d, [rbx+88h]
    mov     r10d, 0FFFFFFFFh
    add     r9d, r11d
    
loc_BE66:
    cmp     r9d, r8d
    jbe     loc_D4AD
    mov     ecx, [rbx+78h]
    mov     edx, r10d
    mov     rsi, [rbx+68h]
    shl     edx, cl
    not     edx
    mov     eax, edx
    and     eax, r14d
    lea     rax, [rsi+rax*4]
    movzx   ecx, byte ptr [rax+1]
    movzx   edi, word ptr [rax+2]
    movzx   eax, cl
    cmp     ebp, eax
    jnb     short loc_BEE7
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_BEB1
    align 8
    
loc_BEA8:
    test    r13d, r13d
    jz      loc_C750
    
loc_BEB1:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    mov     eax, edx
    and     eax, r14d
    lea     rax, [rsi+rax*4]
    movzx   ebp, byte ptr [rax+1]
    movzx   edi, word ptr [rax+2]
    movzx   eax, bpl
    cmp     eax, ecx
    ja      short loc_BEA8
    mov     esi, ecx
    mov     ecx, ebp
    mov     ebp, esi
    
loc_BEE7:
    cmp     di, 0Fh
    jbe     loc_CAE0
    cmp     di, 10h
    jz      loc_D18C
    cmp     di, 11h
    jz      loc_D0D3
    lea     esi, [rax+7]
    cmp     esi, ebp
    jbe     short loc_BF46
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_BF29
    align 20h
    
loc_BF20:
    test    r13d, r13d
    jz      loc_C750
    
loc_BF29:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    sub     r13d, 1
    shl     rdx, cl
    add     ecx, 8
    add     r14, rdx
    cmp     ecx, esi
    jb      short loc_BF20
    mov     ebp, ecx
    
loc_BF46:
    mov     ecx, eax
    mov     edi, 0FFFFFFF9h
    shr     r14, cl
    sub     edi, eax
    xor     ecx, ecx
    mov     edx, r14d
    add     ebp, edi
    shr     r14, 7
    and     edx, 7Fh
    add     edx, 0Bh
    
loc_BF63:
    add     edx, r8d
    cmp     edx, r9d
    ja      loc_D680
    nop
    
loc_BF70:
    mov     eax, r8d
    add     r8d, 1
    cmp     edx, r8d
    mov     [rbx+rax*2+98h], cx
    jnz     short loc_BF70
    mov     [rbx+8Ch], r8d
    jmp     loc_BE66
    
loc_BF90:
    mov     ecx, [rbx+8Ch]
    mov     eax, [rbx+80h]
    cmp     ecx, eax
    jnb     loc_CF8F
    
loc_BFA4:
    sub     eax, 1
    lea     r8d, [rcx+1]
    mov     r9d, ecx
    sub     eax, ecx
    mov     ecx, ebp
    xor     edi, edi
    cmp     ecx, 2
    lea     rsi, [rax+1]
    ja      short loc_C023
    
loc_BFBD:
    test    r13d, r13d
    jz      loc_C750
    movzx   eax, byte ptr [r12]
    lea     rdx, [r12+1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    
loc_BFDD:
    lea     r10, [r9+rdi]
    lea     r11, order_4094
    lea     eax, [r8+rdi]
    add     rdi, 1
    sub     ecx, 3
    movzx   r10d, word ptr [r11+r10*2]
    mov     r11d, r14d
    shr     r14, 3
    and     r11d, 7
    cmp     rdi, rsi
    mov     [rbx+8Ch], eax
    mov     [rbx+r10*2+98h], r11w
    jz      loc_CF88
    cmp     ecx, 2
    mov     r12, rdx
    jbe     short loc_BFBD
    
loc_C023:
    mov     rdx, r12
    jmp     short loc_BFDD
    align 10h
    
loc_C030:
    mov     eax, [rbx+5Ch]
    
loc_C033:
    test    eax, eax
    jz      loc_BAC8
    cmp     r13d, eax
    cmovbe  eax, r13d
    cmp     eax, r15d
    cmova   eax, r15d
    test    eax, eax
    jz      loc_BAE0
    mov     rdi, [rsp+88h+dest]
    mov     r8d, eax
    mov     rsi, r12
    mov     rdx, r8
    mov     [rsp+88h+var_60], r8
    mov     dword ptr [rsp+88h+var_58], eax
    call    _memcpy
    mov     ecx, dword ptr [rsp+88h+var_58]
    mov     r8, [rsp+88h+var_60]
    sub     [rbx+5Ch], ecx
    add     [rsp+88h+dest], r8
    mov     eax, [rbx+8]
    sub     r13d, ecx
    add     r12, r8
    sub     r15d, ecx
    jmp     loc_B7D6
    align 10h
    
loc_C090:
    mov     eax, [rbx+5Ch]
    
loc_C093:
    mov     dword ptr [rbx+8], 3F43h
    jmp     short loc_C033
    align 20h
    
loc_C0A0:
    mov     r10d, r13d
    mov     eax, [rbx+10h]
    mov     r13, [rsp+88h+var_70]
    mov     r11, r14
    
loc_C0AE:
    test    eax, eax
    jz      loc_D31F
    mov     edi, [rbx+18h]
    test    edi, edi
    jz      loc_D31F
    cmp     ebp, 1Fh
    ja      loc_D0CB
    test    r10d, r10d
    jz      loc_CEB8
    movzx   edx, byte ptr [r12]
    mov     ecx, ebp
    lea     esi, [r10-1]
    lea     rax, [r12+1]
    shl     rdx, cl
    lea     ecx, [rbp+8]
    add     r11, rdx
    cmp     ecx, 1Fh
    ja      loc_CF00
    test    esi, esi
    jz      loc_CEB0
    movzx   edx, byte ptr [r12+1]
    lea     esi, [r10-2]
    lea     rax, [r12+2]
    shl     rdx, cl
    lea     ecx, [rbp+10h]
    add     r11, rdx
    cmp     ecx, 1Fh
    ja      loc_CF00
    test    esi, esi
    jz      loc_CEB0
    movzx   edx, byte ptr [r12+2]
    lea     esi, [r10-3]
    lea     rax, [r12+3]
    shl     rdx, cl
    lea     ecx, [rbp+18h]
    add     r11, rdx
    cmp     ecx, 1Fh
    ja      loc_CF00
    test    esi, esi
    jz      loc_CEB0
    movzx   edx, byte ptr [r12+3]
    lea     rax, [r12+4]
    sub     r10d, 4
    add     ebp, 20h
    shl     rdx, cl
    add     r11, rdx
    
loc_C167:
    mov     edx, [rbx+28h]
    cmp     rdx, r11
    jz      loc_D317
    lea     rdi, aIncorrectLengt
    mov     r12, rax
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rdi
    mov     dword ptr [rbx+8], 3F51h
    xchg    ax, ax
    
loc_C190:
    mov     esi, [rbx+3Ch]
    mov     rax, [rsp+88h+dest]
    mov     [r13+20h], r15d
    mov     [r13+0], r12
    mov     [r13+8], r10d
    test    esi, esi
    mov     [r13+18h], rax
    mov     [rbx+50h], r11
    mov     [rbx+58h], ebp
    jnz     short loc_C1E0
    cmp     dword ptr [rsp+88h+n+4], r15d
    jz      loc_C298
    mov     eax, [rbx+8]
    cmp     eax, 3F50h
    ja      loc_C298
    cmp     [rsp+88h+var_68], 4
    jnz     short loc_C1E0
    cmp     eax, 3F4Dh
    ja      loc_C298
    xchg    ax, ax
    
loc_C1E0:
    mov     rbp, [r13+38h]
    mov     r12d, dword ptr [rsp+88h+n+4]
    mov     rax, [rbp+48h]
    sub     r12d, r15d
    test    rax, rax
    jnz     short loc_C219
    mov     ecx, [rbp+38h]
    mov     esi, 1
    mov     rdi, [r13+50h]
    mov     edx, 1
    shl     esi, cl
    call    qword ptr [r13+40h]
    test    rax, rax
    mov     [rbp+48h], rax
    jz      loc_B8A0
    
loc_C219:
    mov     edx, [rbp+3Ch]
    test    edx, edx
    jnz     short loc_C235
    mov     ecx, [rbp+38h]
    mov     edx, 1
    mov     qword ptr [rbp+40h], 0
    shl     edx, cl
    mov     [rbp+3Ch], edx
    
loc_C235:
    cmp     r12d, edx
    jnb     loc_C7E0
    mov     edi, [rbp+44h]
    mov     rsi, [rsp+88h+dest]
    sub     edx, edi
    add     rdi, rax
    mov     r15d, edx
    mov     edx, r12d
    sub     rsi, rdx
    cmp     r12d, r15d
    jb      loc_C790
    mov     edx, r15d
    call    _memcpy
    sub     r12d, r15d
    jz      loc_CDF0
    mov     rsi, [rsp+88h+dest]
    mov     rdi, [rbp+48h]
    mov     edx, r12d
    sub     rsi, rdx
    call    _memcpy
    mov     eax, [rbp+3Ch]
    mov     r10d, [r13+8]
    mov     r15d, [r13+20h]
    mov     [rbp+44h], r12d
    mov     [rbp+40h], eax
    nop     dword ptr [rax+00h]
    
loc_C298:
    mov     ebp, dword ptr [rsp+88h+n]
    mov     r12d, dword ptr [rsp+88h+n+4]
    sub     ebp, r10d
    sub     r12d, r15d
    mov     eax, ebp
    add     [r13+10h], rax
    mov     eax, r12d
    add     [r13+28h], rax
    add     [rbx+28h], rax
    test    byte ptr [rbx+10h], 4
    jz      short loc_C2C7
    test    r12d, r12d
    jnz     loc_C768
    
loc_C2C7:
    mov     eax, [rbx+0Ch]
    mov     edx, [rbx+58h]
    test    eax, eax
    jz      short loc_C2D4
    add     edx, 40h
    
loc_C2D4:
    mov     ecx, [rbx+8]
    cmp     ecx, 3F3Fh
    jz      loc_C740
    cmp     ecx, 3F47h
    jz      short loc_C2F5
    xor     eax, eax
    cmp     ecx, 3F42h
    jnz     short loc_C2FA
    
loc_C2F5:
    mov     eax, 100h
    
loc_C2FA:
    add     eax, edx
    or      ebp, r12d
    mov     [r13+58h], eax
    jz      short loc_C310
    cmp     [rsp+88h+var_68], 4
    jnz     loc_B388
    
loc_C310:
    test    r14d, r14d
    jnz     loc_B388
    mov     r14d, 0FFFFFFFBh
    jmp     loc_B388
    align 8
    
loc_C328:
    cmp     ebp, 0Fh
    ja      loc_D341
    
loc_C331:
    test    r13d, r13d
    jz      loc_BAE0
    movzx   eax, byte ptr [r12]
    mov     ecx, ebp
    lea     edx, [r13-1]
    lea     r8, [r12+1]
    shl     rax, cl
    lea     ecx, [rbp+8]
    add     r14, rax
    cmp     ecx, 0Fh
    ja      loc_D36C
    test    edx, edx
    jz      loc_CDBA
    movzx   eax, byte ptr [r12+1]
    lea     r8, [r12+2]
    sub     r13d, 2
    add     ebp, 10h
    shl     rax, cl
    add     r14, rax
    
loc_C37C:
    cmp     r14b, 8
    mov     eax, r14d
    mov     [rbx+18h], r14d
    jz      loc_CF10
    
loc_C38D:
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aUnknownCompres
    mov     r11, r14
    mov     r12, r8
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_C3B8:
    mov     dword ptr [rbx+8], 3F44h
    shr     r14, 3
    sub     ebp, 3
    mov     r12, rdx
    nop     dword ptr [rax+00000000h]
    
loc_C3D0:
    cmp     ebp, 0Dh
    ja      loc_D351
    test    r13d, r13d
    jz      loc_BAE0
    movzx   eax, byte ptr [r12]
    mov     ecx, ebp
    lea     edx, [r13-1]
    lea     rsi, [r12+1]
    shl     rax, cl
    lea     ecx, [rbp+8]
    add     r14, rax
    cmp     ecx, 0Dh
    ja      loc_D3BD
    test    edx, edx
    jz      loc_CD72
    movzx   eax, byte ptr [r12+1]
    lea     rsi, [r12+2]
    sub     r13d, 2
    add     ebp, 10h
    shl     rax, cl
    add     r14, rax
    
loc_C424:
    mov     ecx, r14d
    mov     rdx, r14
    mov     rax, r14
    and     ecx, 1Fh
    shr     rdx, 5
    shr     rax, 0Ah
    add     ecx, 101h
    and     edx, 1Fh
    and     eax, 0Fh
    add     edx, 1
    add     eax, 4
    shr     r14, 0Eh
    sub     ebp, 0Eh
    cmp     ecx, 11Eh
    mov     [rbx+84h], ecx
    mov     [rbx+88h], edx
    mov     [rbx+80h], eax
    ja      short loc_C474
    cmp     edx, 1Eh
    jbe     loc_D1F7
    
loc_C474:
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aTooManyLengthO
    mov     r11, r14
    mov     r12, rsi
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    align 20h
    
loc_C4A0:
    mov     esi, [rbx+44h]
    mov     rdx, [rbx+48h]
    cmp     esi, eax
    jb      loc_CB00
    sub     esi, eax
    add     rsi, rdx
    
loc_C4B4:
    mov     edx, [rbx+5Ch]
    cmp     edx, eax
    cmovbe  eax, edx
    
loc_C4BC:
    cmp     r15d, eax
    mov     rdi, [rsp+88h+dest]
    cmovbe  eax, r15d
    sub     edx, eax
    sub     r15d, eax
    mov     [rbx+5Ch], edx
    lea     rdx, [rsi+10h]
    mov     r9, rdi
    cmp     rdi, rdx
    lea     rdx, [rdi+10h]
    setnb   cl
    cmp     rsi, rdx
    setnb   dl
    or      cl, dl
    jz      loc_CEC0
    cmp     eax, 16h
    jbe     loc_CEC0
    mov     rdx, rsi
    lea     ecx, [rax-1]
    neg     rdx
    and     edx, 0Fh
    mov     r11d, ecx
    mov     dword ptr [rsp+88h+var_60], ecx
    mov     r10d, ecx
    lea     ecx, [rdx+0Fh]
    cmp     ecx, r11d
    ja      loc_D0B9
    test    edx, edx
    jz      loc_D361
    movzx   ecx, byte ptr [rsi]
    cmp     edx, 1
    lea     r11, [rsi+1]
    lea     rdi, [rdi+1]
    mov     [r9], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+1]
    cmp     edx, 2
    lea     r11, [rsi+2]
    lea     rdi, [r9+2]
    lea     r10d, [rax-2]
    mov     [r9+1], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+2]
    cmp     edx, 3
    lea     r11, [rsi+3]
    lea     rdi, [r9+3]
    lea     r10d, [rax-3]
    mov     [r9+2], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+3]
    cmp     edx, 4
    lea     r11, [rsi+4]
    lea     rdi, [r9+4]
    lea     r10d, [rax-4]
    mov     [r9+3], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+4]
    cmp     edx, 5
    lea     r11, [rsi+5]
    lea     rdi, [r9+5]
    lea     r10d, [rax-5]
    mov     [r9+4], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+5]
    cmp     edx, 6
    lea     r11, [rsi+6]
    lea     rdi, [r9+6]
    lea     r10d, [rax-6]
    mov     [r9+5], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+6]
    cmp     edx, 7
    lea     r11, [rsi+7]
    lea     rdi, [r9+7]
    lea     r10d, [rax-7]
    mov     [r9+6], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+7]
    cmp     edx, 8
    lea     r11, [rsi+8]
    lea     rdi, [r9+8]
    lea     r10d, [rax-8]
    mov     [r9+7], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+8]
    cmp     edx, 9
    lea     r11, [rsi+9]
    lea     rdi, [r9+9]
    lea     r10d, [rax-9]
    mov     [r9+8], cl
    jz      loc_C6B8
    movzx   ecx, byte ptr [rsi+9]
    cmp     edx, 0Ah
    lea     r11, [rsi+0Ah]
    lea     rdi, [r9+0Ah]
    lea     r10d, [rax-0Ah]
    mov     [r9+9], cl
    jz      short loc_C6B8
    movzx   ecx, byte ptr [rsi+0Ah]
    cmp     edx, 0Bh
    lea     r11, [rsi+0Bh]
    lea     rdi, [r9+0Bh]
    lea     r10d, [rax-0Bh]
    mov     [r9+0Ah], cl
    jz      short loc_C6B8
    movzx   ecx, byte ptr [rsi+0Bh]
    cmp     edx, 0Ch
    lea     r11, [rsi+0Ch]
    lea     rdi, [r9+0Ch]
    lea     r10d, [rax-0Ch]
    mov     [r9+0Bh], cl
    jz      short loc_C6B8
    movzx   ecx, byte ptr [rsi+0Ch]
    cmp     edx, 0Dh
    lea     r11, [rsi+0Dh]
    lea     rdi, [r9+0Dh]
    lea     r10d, [rax-0Dh]
    mov     [r9+0Ch], cl
    jz      short loc_C6B8
    movzx   ecx, byte ptr [rsi+0Dh]
    cmp     edx, 0Fh
    lea     r11, [rsi+0Eh]
    lea     rdi, [r9+0Eh]
    lea     r10d, [rax-0Eh]
    mov     [r9+0Dh], cl
    jnz     short loc_C6B8
    movzx   ecx, byte ptr [rsi+0Eh]
    lea     r11, [rsi+0Fh]
    lea     rdi, [r9+0Fh]
    lea     r10d, [rax-0Fh]
    mov     [r9+0Eh], cl
    nop     word ptr [rax+rax+00h]
    
loc_C6B8:
    mov     r9d, edx
    sub     eax, edx
    xor     ecx, ecx
    lea     r8d, [rax-10h]
    add     rsi, r9
    add     r9, [rsp+88h+dest]
    xor     edx, edx
    shr     r8d, 4
    add     r8d, 1
    nop     dword ptr [rax]
    
loc_C6D8:
    movdqa  xmm0, xmmword ptr [rsi+rdx]
    add     ecx, 1
    movups  xmmword ptr [r9+rdx], xmm0
    add     rdx, 10h
    cmp     ecx, r8d
    jb      short loc_C6D8
    shl     r8d, 4
    mov     esi, r8d
    sub     r10d, r8d
    add     rdi, rsi
    add     rsi, r11
    cmp     r8d, eax
    jz      short loc_C716
    
loc_C703:
    lea     eax, [r10-1]
    lea     rax, [rsi+rax+1]
    nop     dword ptr [rax+00h]
    
loc_C710:
    movsb
    cmp     rax, rsi
    jnz     short loc_C710
    
loc_C716:
    mov     eax, dword ptr [rsp+88h+var_60]
    mov     rdi, [rsp+88h+dest]
    mov     r10d, [rbx+5Ch]
    lea     rax, [rdi+rax+1]
    test    r10d, r10d
    mov     [rsp+88h+dest], rax
    jz      loc_B820
    mov     eax, [rbx+8]
    jmp     loc_B7D6
    align 20h
    
loc_C740:
    sub     edx, 0FFFFFF80h
    xor     eax, eax
    jmp     loc_C2FA
    align 10h
    
loc_C750:
    mov     r10d, r13d
    mov     r11, r14
    mov     ebp, ecx
    mov     r13, [rsp+88h+var_70]
    xor     r14d, r14d
    jmp     loc_C190
    align 8
    
loc_C768:
    mov     rsi, [r13+18h]
    mov     ecx, [rbx+18h]
    mov     edx, r12d
    mov     rdi, [rbx+20h]
    sub     rsi, rax
    test    ecx, ecx
    jz      short loc_C7D0
    call    _crc32
    
loc_C782:
    mov     [rbx+20h], rax
    mov     [r13+60h], rax
    jmp     loc_C2C7
    align 10h
    
loc_C790:
    call    _memcpy
    
loc_C795:
    mov     eax, [rbp+44h]
    mov     edx, [rbp+3Ch]
    add     eax, r12d
    cmp     eax, edx
    mov     [rbp+44h], eax
    jnz     short loc_C7AC
    mov     dword ptr [rbp+44h], 0
    
loc_C7AC:
    mov     eax, [rbp+40h]
    mov     r10d, [r13+8]
    mov     r15d, [r13+20h]
    cmp     edx, eax
    jbe     loc_C298
    add     r12d, eax
    mov     [rbp+40h], r12d
    jmp     loc_C298
    align 10h
    
loc_C7D0:
    call    _adler32
    jmp     short loc_C782
    align 20h
    
loc_C7E0:
    mov     rsi, [rsp+88h+dest]
    mov     rdi, rax
    sub     rsi, rdx
    call    _memcpy
    mov     eax, [rbp+3Ch]
    mov     dword ptr [rbp+44h], 0
    mov     r10d, [r13+8]
    mov     r15d, [r13+20h]
    mov     [rbp+40h], eax
    jmp     loc_C298
    align 10h
    
loc_C810:
    test    r13d, r13d
    jz      loc_BAE0
    xor     eax, eax
    nop     dword ptr [rax+rax+00h]
    
loc_C820:
    lea     ecx, [rax+1]
    movzx   r8d, byte ptr [r12+rax]
    mov     rax, [rbx+30h]
    test    rax, rax
    jz      short loc_C84C
    mov     rsi, [rax+38h]
    test    rsi, rsi
    jz      short loc_C84C
    mov     edx, [rbx+5Ch]
    cmp     edx, [rax+40h]
    jnb     short loc_C84C
    lea     eax, [rdx+1]
    mov     [rbx+5Ch], eax
    mov     [rsi+rdx], r8b
    
loc_C84C:
    test    r8b, r8b
    mov     eax, ecx
    jz      short loc_C858
    cmp     r13d, ecx
    ja      short loc_C820
    
loc_C858:
    test    byte ptr [rbx+19h], 2
    jz      short loc_C890
    test    byte ptr [rbx+10h], 4
    jz      short loc_C890
    mov     rdi, [rbx+20h]
    mov     edx, ecx
    mov     rsi, r12
    mov     byte ptr [rsp+88h+var_58], r8b
    mov     dword ptr [rsp+88h+var_60], ecx
    call    _crc32
    movzx   r8d, byte ptr [rsp+88h+var_58]
    mov     ecx, dword ptr [rsp+88h+var_60]
    mov     [rbx+20h], rax
    nop     dword ptr [rax+00000000h]
    
loc_C890:
    mov     eax, ecx
    sub     r13d, ecx
    add     r12, rax
    test    r8b, r8b
    jnz     loc_BAE0
    mov     eax, [rbx+18h]
    jmp     loc_BB5D
    align 10h
    
loc_C8B0:
    test    r13d, r13d
    jz      loc_BAE0
    xor     eax, eax
    jmp     short loc_C8C5
    align 20h
    
loc_C8C0:
    cmp     r13d, ecx
    jbe     short loc_C8F8
    
loc_C8C5:
    lea     ecx, [rax+1]
    movzx   r8d, byte ptr [r12+rax]
    mov     rax, [rbx+30h]
    test    rax, rax
    jz      short loc_C8F1
    mov     rsi, [rax+28h]
    test    rsi, rsi
    jz      short loc_C8F1
    mov     edx, [rbx+5Ch]
    cmp     edx, [rax+30h]
    jnb     short loc_C8F1
    lea     eax, [rdx+1]
    mov     [rbx+5Ch], eax
    mov     [rsi+rdx], r8b
    
loc_C8F1:
    test    r8b, r8b
    mov     eax, ecx
    jnz     short loc_C8C0
    
loc_C8F8:
    test    byte ptr [rbx+19h], 2
    jz      short loc_C930
    test    byte ptr [rbx+10h], 4
    jz      short loc_C930
    mov     rdi, [rbx+20h]
    mov     edx, ecx
    mov     rsi, r12
    mov     byte ptr [rsp+88h+var_58], r8b
    mov     dword ptr [rsp+88h+var_60], ecx
    call    _crc32
    movzx   r8d, byte ptr [rsp+88h+var_58]
    mov     ecx, dword ptr [rsp+88h+var_60]
    mov     [rbx+20h], rax
    nop     dword ptr [rax+00000000h]
    
loc_C930:
    mov     eax, ecx
    sub     r13d, ecx
    add     r12, rax
    test    r8b, r8b
    jnz     loc_BAE0
    mov     eax, [rbx+18h]
    jmp     loc_BC1D
    align 10h
    
loc_C950:
    mov     ecx, [rbx+78h]
    mov     r9d, 0FFFFFFFFh
    mov     rdi, [rbx+68h]
    mov     dword ptr [rbx+1BECh], 0
    mov     r8d, r14d
    shl     r9d, cl
    not     r9d
    mov     eax, r9d
    and     eax, r14d
    lea     rax, [rdi+rax*4]
    movzx   ecx, byte ptr [rax+1]
    movzx   edx, byte ptr [rax]
    movzx   esi, word ptr [rax+2]
    movzx   eax, cl
    cmp     ebp, eax
    jnb     short loc_C9E6
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_C9A9
    align 20h
    
loc_C9A0:
    test    r13d, r13d
    jz      loc_C750
    
loc_C9A9:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    mov     eax, r9d
    and     eax, r14d
    mov     r8d, r14d
    lea     rax, [rdi+rax*4]
    movzx   r10d, byte ptr [rax+1]
    movzx   edx, byte ptr [rax]
    movzx   esi, word ptr [rax+2]
    movzx   eax, r10b
    cmp     eax, ecx
    ja      short loc_C9A0
    mov     ebp, ecx
    mov     ecx, r10d
    
loc_C9E6:
    test    dl, dl
    jz      loc_CEE0
    test    dl, 0F0h
    jz      loc_D252
    mov     ecx, eax
    sub     ebp, eax
    mov     [rbx+1BECh], eax
    shr     r14, cl
    mov     [rbx+5Ch], esi
    
loc_CA07:
    test    dl, 20h
    jz      loc_D088
    mov     dword ptr [rbx+1BECh], 0FFFFFFFFh
    mov     dword ptr [rbx+8], 3F3Fh
    jmp     loc_BACF
    align 10h
    
loc_CA30:
    mov     r10d, r13d
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    mov     r14d, 1
    jmp     loc_C190
    align 10h
    
loc_CA50:
    cmp     ebp, edx
    jnb     short loc_CA8E
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_CA71
    align 8
    
loc_CA68:
    test    r13d, r13d
    jz      loc_C750
    
loc_CA71:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    cmp     ecx, edx
    jb      short loc_CA68
    mov     ebp, ecx
    
loc_CA8E:
    mov     ecx, edx
    mov     eax, 0FFFFFFFFh
    sub     ebp, edx
    shl     eax, cl
    add     [rbx+1BECh], edx
    not     eax
    and     eax, r14d
    add     eax, [rbx+5Ch]
    shr     r14, cl
    mov     [rbx+5Ch], eax
    jmp     loc_B8C6
    
loc_CAB2:
    mov     dword ptr [rsp+88h+n+4], r15d
    mov     r12, r14
    xor     ebp, ebp
    xor     r11d, r11d
    nop
    
loc_CAC0:
    mov     dword ptr [rbx+8], 3F4Fh
    jmp     loc_C0AE
    align 10h
    
loc_CAD0:
    mov     r12, rsi
    xor     ebp, ebp
    xor     r14d, r14d
    jmp     loc_BB00
    align 20h
    
loc_CAE0:
    sub     ebp, eax
    lea     eax, [r8+1]
    shr     r14, cl
    mov     [rbx+8Ch], eax
    mov     [rbx+r8*2+98h], di
    mov     r8d, eax
    jmp     loc_BE66
    
loc_CB00:
    sub     eax, esi
    mov     esi, [rbx+3Ch]
    sub     esi, eax
    add     rsi, rdx
    jmp     loc_C4B4
    align 10h
    
loc_CB10:
    cmp     ebp, 0Fh
    ja      loc_D585
    test    r13d, r13d
    jz      loc_BAE0
    movzx   edx, byte ptr [r12]
    mov     ecx, ebp
    lea     esi, [r13-1]
    lea     r8, [r12+1]
    shl     rdx, cl
    lea     ecx, [rbp+8]
    add     r14, rdx
    cmp     ecx, 0Fh
    ja      loc_D58D
    test    esi, esi
    jz      loc_CDBA
    movzx   edx, byte ptr [r12+1]
    lea     r8, [r12+2]
    sub     r13d, 2
    add     ebp, 10h
    shl     rdx, cl
    add     r14, rdx
    
loc_CB64:
    test    al, 2
    jz      short loc_CB75
    cmp     r14, 8B1Fh
    jz      loc_D526
    
loc_CB75:
    mov     rdx, [rbx+30h]
    mov     dword ptr [rbx+18h], 0
    test    rdx, rdx
    jz      short loc_CB8C
    mov     dword ptr [rdx+48h], 0FFFFFFFFh
    
loc_CB8C:
    test    al, 1
    jz      loc_D138
    mov     ecx, r14d
    mov     rax, r14
    mov     rdx, 842108421084211h
    shl     ecx, 8
    shr     rax, 8
    and     ecx, 0FF00h
    add     rcx, rax
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    shr     rdx, 4
    mov     rax, rdx
    shl     rax, 5
    sub     rax, rdx
    cmp     rcx, rax
    jnz     loc_D138
    mov     eax, r14d
    and     eax, 0Fh
    cmp     eax, 8
    jnz     loc_C38D
    shr     r14, 4
    mov     eax, [rbx+38h]
    sub     ebp, 4
    mov     ecx, r14d
    and     ecx, 0Fh
    add     ecx, 8
    test    eax, eax
    jnz     loc_D61D
    cmp     ecx, 0Fh
    mov     [rbx+38h], ecx
    jbe     loc_D62E
    
loc_CC13:
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidWindowS
    mov     r11, r14
    mov     r12, r8
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    align 20h
    
loc_CC40:
    cmp     ebp, 0Fh
    ja      short loc_CC7D
    
loc_CC45:
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_CC61
    align 8
    
loc_CC58:
    test    r13d, r13d
    jz      loc_C750
    
loc_CC61:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    cmp     ecx, 0Fh
    jbe     short loc_CC58
    
loc_CC7D:
    mov     rax, [rbx+30h]
    mov     [rbx+5Ch], r14d
    test    rax, rax
    jz      short loc_CC8E
    mov     [rax+20h], r14d
    
loc_CC8E:
    test    dh, 2
    jz      short loc_CC9D
    test    byte ptr [rbx+10h], 4
    jnz     loc_D455
    
loc_CC9D:
    mov     ecx, edx
    mov     eax, edx
    xor     ebp, ebp
    and     ecx, 400h
    xor     r14d, r14d
    jmp     loc_BD0B
    align 8
    
loc_CCB8:
    mov     dword ptr [rbx+1BECh], 0FFFFFFFFh
    jmp     loc_BACF
    align 10h
    
loc_CCD0:
    lea     ecx, [rsi+rax]
    mov     r8d, 0FFFFFFFFh
    movzx   edi, r10w
    shl     r8d, cl
    mov     ecx, edx
    not     r8d
    and     r11d, r8d
    shr     r11d, cl
    lea     edx, [r11+rdi]
    jmp     short loc_CD26
    align 8
    
loc_CCF8:
    test    r13d, r13d
    jz      loc_BAE0
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    mov     ecx, ebp
    sub     r13d, 1
    add     ebp, 8
    shl     rdx, cl
    mov     ecx, eax
    add     r14, rdx
    mov     edx, r8d
    and     edx, r14d
    shr     edx, cl
    add     edx, edi
    
loc_CD26:
    lea     rdx, [r9+rdx*4]
    movzx   esi, byte ptr [rdx]
    movzx   r10d, word ptr [rdx+2]
    movzx   edx, byte ptr [rdx+1]
    lea     ecx, [rdx+rax]
    cmp     ecx, ebp
    ja      short loc_CCF8
    mov     ecx, eax
    sub     ebp, eax
    mov     r8d, edx
    shr     r14, cl
    add     eax, [rbx+1BECh]
    mov     ecx, edx
    jmp     loc_B96E
    align 8
    
loc_CD58:
    xor     r14d, r14d
    xor     ebp, ebp
    jmp     loc_CC45
    
loc_CD62:
    mov     r10d, r13d
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    jmp     loc_B47A
    
loc_CD72:
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    mov     ebp, ecx
    xor     r10d, r10d
    mov     r12, rsi
    xor     r14d, r14d
    jmp     loc_C190
    
loc_CD8A:
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    mov     ebp, ecx
    xor     r10d, r10d
    mov     r12, rdx
    xor     r14d, r14d
    jmp     loc_C190
    
loc_CDA2:
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    mov     ebp, ecx
    xor     r10d, r10d
    mov     r12, rdi
    xor     r14d, r14d
    jmp     loc_C190
    
loc_CDBA:
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    mov     ebp, ecx
    xor     r10d, r10d
    mov     r12, r8
    xor     r14d, r14d
    jmp     loc_C190
    
loc_CDD2:
    mov     r10d, r13d
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    mov     r14d, 0FFFFFFFDh
    jmp     loc_C190
    align 10h
    
loc_CDF0:
    mov     r12d, r15d
    jmp     loc_C795
    align 20h
    
loc_CE00:
    mov     rsi, [rsp+88h+dest]
    sub     rsi, rax
    mov     eax, [rbx+5Ch]
    mov     edx, eax
    jmp     loc_C4BC
    align 8
    
loc_CE18:
    cmp     ebp, esi
    jnb     short loc_CE56
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_CE39
    align 10h
    
loc_CE30:
    test    r13d, r13d
    jz      loc_C750
    
loc_CE39:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     r13d, 1
    shl     rax, cl
    add     ecx, 8
    add     r14, rax
    cmp     ecx, esi
    jb      short loc_CE30
    mov     ebp, ecx
    
loc_CE56:
    mov     ecx, esi
    mov     eax, 0FFFFFFFFh
    sub     ebp, esi
    shl     eax, cl
    add     [rbx+1BECh], esi
    not     eax
    and     eax, r14d
    shr     r14, cl
    add     [rbx+60h], eax
    jmp     loc_B83B
    align 20h
    
def_B435:
    mov     r14d, 0FFFFFFFEh
    jmp     loc_B388
    align 10h
    
loc_CE90:
    and     esi, 0Fh
    mov     [rbx+60h], r10d
    mov     dword ptr [rbx+8], 3F4Bh
    mov     [rbx+64h], esi
    jmp     loc_B833
    align 10h
    
loc_CEB0:
    mov     ebp, ecx
    xor     r10d, r10d
    mov     r12, rax
    
loc_CEB8:
    xor     r14d, r14d
    jmp     loc_C190
    
loc_CEC0:
    sub     eax, 1
    mov     dword ptr [rsp+88h+var_60], eax
    lea     rax, [rsi+rax+1]
    nop     dword ptr [rax+00h]
    
loc_CED0:
    movsb
    cmp     rax, rsi
    jnz     short loc_CED0
    jmp     loc_C716
    align 20h
    
loc_CEE0:
    shr     r14, cl
    sub     ebp, eax
    mov     [rbx+1BECh], eax
    mov     [rbx+5Ch], esi
    
loc_CEEE:
    mov     dword ptr [rbx+8], 3F4Dh
    mov     rdx, [rsp+88h+dest]
    jmp     loc_B745
    align 20h
    
loc_CF00:
    mov     ebp, ecx
    mov     r10d, esi
    jmp     loc_C167
    align 10h
    
loc_CF10:
    test    r14d, 0E000h
    jz      loc_D3D9
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aUnknownHeaderF
    mov     r11, r14
    mov     r12, r8
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    align 10h
    
loc_CF50:
    cmp     [rsp+88h+var_68], 6
    movzx   eax, r14w
    mov     dword ptr [rbx+8], 3F42h
    mov     [rbx+5Ch], eax
    jz      loc_D731
    mov     r12, rdx
    xor     ebp, ebp
    xor     r14d, r14d
    jmp     loc_C093
    
loc_CF76:
    mov     r13d, edx
    jmp     loc_BA55
    
loc_CF7E:
    mov     ebp, ecx
    mov     r13d, esi
    jmp     loc_B6F2
    
loc_CF88:
    mov     ebp, ecx
    mov     r12, rdx
    mov     ecx, eax
    
loc_CF8F:
    cmp     ecx, 12h
    ja      short loc_CFE0
    mov     edx, 12h
    mov     esi, ecx
    lea     rax, order_4094
    sub     edx, ecx
    lea     rdi, unk_18EE2
    add     rdx, rsi
    lea     rax, [rax+rsi*2]
    lea     rcx, [rdi+rdx*2]
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_CFC0:
    movzx   edx, word ptr [rax]
    add     rax, 2
    xor     esi, esi
    cmp     rcx, rax
    mov     [rbx+rdx*2+98h], si
    jnz     short loc_CFC0
    mov     dword ptr [rbx+8Ch], 13h
    
loc_CFE0:
    lea     rax, [rbx+558h]
    lea     rcx, [rbx+90h]
    lea     rsi, [rbx+98h]
    lea     r9, [rbx+318h]
    lea     r8, [rbx+78h]
    xor     edi, edi
    mov     [rbx+90h], rax
    mov     [rbx+68h], rax
    mov     edx, 13h
    mov     dword ptr [rbx+78h], 7
    call    inflate_table
    test    eax, eax
    jz      loc_D43C
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidCodeLen
    mov     r11, r14
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_D04E:
    mov     rsi, r12
    jmp     loc_BBBD
    
loc_D056:
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidBlockTy
    mov     r11, r14
    sub     ebp, 3
    mov     r12, rdx
    shr     r11, 3
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_D088:
    test    dl, 40h
    jz      loc_D3C7
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidLiteral
    mov     r11, r14
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_D0B9:
    mov     r10d, eax
    jmp     loc_C703
    
loc_D0C1:
    mov     ebp, ecx
    mov     r13d, edi
    jmp     loc_BBBD
    
loc_D0CB:
    mov     rax, r12
    jmp     loc_C167
    
loc_D0D3:
    lea     esi, [rax+3]
    cmp     ebp, esi
    jnb     short loc_D116
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_D0F9
    align 10h
    
loc_D0F0:
    test    r13d, r13d
    jz      loc_C750
    
loc_D0F9:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    sub     r13d, 1
    shl     rdx, cl
    add     ecx, 8
    add     r14, rdx
    cmp     ecx, esi
    jb      short loc_D0F0
    mov     ebp, ecx
    
loc_D116:
    mov     ecx, eax
    mov     edi, 0FFFFFFFDh
    shr     r14, cl
    sub     edi, eax
    xor     ecx, ecx
    mov     edx, r14d
    add     ebp, edi
    shr     r14, 3
    and     edx, 7
    add     edx, 3
    jmp     loc_BF63
    
loc_D138:
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aIncorrectHeade
    mov     r11, r14
    mov     r12, r8
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_D163:
    mov     rdi, [rbx+20h]
    mov     edx, ecx
    mov     rsi, r12
    mov     [rsp+88h+var_58], r8
    mov     dword ptr [rsp+88h+var_60], ecx
    call    _crc32
    mov     r8, [rsp+88h+var_58]
    mov     [rbx+20h], rax
    mov     ecx, dword ptr [rsp+88h+var_60]
    jmp     loc_BCAE
    
loc_D18C:
    lea     esi, [rax+2]
    cmp     esi, ebp
    jbe     short loc_D1C6
    test    r13d, r13d
    jz      loc_BAE0
    mov     ecx, ebp
    jmp     short loc_D1A9
    
loc_D1A0:
    test    r13d, r13d
    jz      loc_C750
    
loc_D1A9:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    sub     r13d, 1
    shl     rdx, cl
    add     ecx, 8
    add     r14, rdx
    cmp     ecx, esi
    jb      short loc_D1A0
    mov     ebp, ecx
    
loc_D1C6:
    mov     ecx, eax
    sub     ebp, eax
    shr     r14, cl
    test    r8d, r8d
    jz      loc_D680
    mov     edx, r14d
    lea     eax, [r8-1]
    shr     r14, 2
    and     edx, 3
    sub     ebp, 2
    movzx   ecx, word ptr [rbx+rax*2+98h]
    add     edx, 3
    jmp     loc_BF63
    
loc_D1F7:
    mov     dword ptr [rbx+8Ch], 0
    mov     dword ptr [rbx+8], 3F45h
    mov     r12, rsi
    xor     ecx, ecx
    jmp     loc_BFA4
    
loc_D212:
    mov     rax, r14
    mov     rdi, [rbx+20h]
    lea     rsi, [rsp+88h+var_44]
    shr     rax, 8
    mov     byte ptr [rsp+88h+var_44], r14b
    mov     edx, 4
    mov     byte ptr [rsp+88h+var_44+1], al
    mov     rax, r14
    shr     r14, 18h
    shr     rax, 10h
    mov     [rsp+88h+var_41], r14b
    mov     [rsp+88h+var_42], al
    call    _crc32
    mov     [rbx+20h], rax
    jmp     loc_BE32
    
loc_D252:
    lea     ecx, [rdx+rax]
    mov     r11d, 0FFFFFFFFh
    shl     r11d, cl
    mov     ecx, eax
    not     r11d
    and     r8d, r11d
    shr     r8d, cl
    lea     edx, [r8+rsi]
    jmp     short loc_D29E
    align 10h
    
loc_D270:
    test    r13d, r13d
    jz      loc_BAE0
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    mov     ecx, ebp
    sub     r13d, 1
    add     ebp, 8
    shl     rdx, cl
    mov     ecx, eax
    add     r14, rdx
    mov     edx, r11d
    and     edx, r14d
    shr     edx, cl
    add     edx, esi
    
loc_D29E:
    lea     rcx, [rdi+rdx*4]
    movzx   r8d, byte ptr [rcx+1]
    movzx   edx, byte ptr [rcx]
    movzx   r10d, word ptr [rcx+2]
    lea     r9d, [r8+rax]
    cmp     r9d, ebp
    ja      short loc_D270
    mov     ecx, eax
    sub     ebp, eax
    mov     [rbx+1BECh], r9d
    shr     r14, cl
    mov     ecx, r8d
    sub     ebp, r8d
    shr     r14, cl
    test    dl, dl
    mov     [rbx+5Ch], r10d
    jnz     loc_CA07
    jmp     loc_CEEE
    
loc_D2E0:
    mov     rdx, r12
    jmp     loc_B603
    
loc_D2E8:
    mov     ebp, ecx
    mov     r10d, esi
    jmp     loc_B52B
    
loc_D2F2:
    cmp     [rsp+88h+var_68], 6
    mov     dword ptr [rbx+8], 3F47h
    jnz     loc_B820
    
loc_D304:
    mov     r10d, r13d
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    mov     r14d, eax
    jmp     loc_C190
    
loc_D317:
    mov     r12, rax
    xor     ebp, ebp
    xor     r11d, r11d
    
loc_D31F:
    mov     dword ptr [rbx+8], 3F50h
    mov     r14d, 1
    jmp     loc_C190
    
loc_D331:
    mov     r12, r14
    mov     ebp, ecx
    xor     r10d, r10d
    xor     r14d, r14d
    jmp     loc_C190
    
loc_D341:
    mov     r8, r12
    jmp     loc_C37C
    
loc_D349:
    mov     rdi, r12
    jmp     loc_BA55
    
loc_D351:
    mov     rsi, r12
    jmp     loc_C424
    
loc_D359:
    mov     rdx, r12
    jmp     loc_B6F2
    
loc_D361:
    mov     r11, rsi
    mov     r10d, eax
    jmp     loc_C6B8
    
loc_D36C:
    mov     ebp, ecx
    mov     r13d, edx
    jmp     loc_C37C
    
loc_D376:
    mov     rsi, [rsp+88h+dest]
    mov     r9d, [rbx+18h]
    mov     rdi, [rbx+20h]
    mov     [rsp+88h+var_70], r11
    mov     dword ptr [rsp+88h+n+4], r10d
    sub     rsi, rcx
    test    r9d, r9d
    jz      loc_D512
    call    _crc32
    mov     r10d, dword ptr [rsp+88h+n+4]
    mov     r11, [rsp+88h+var_70]
    
loc_D3A8:
    mov     [rbx+20h], rax
    mov     [r13+60h], rax
    mov     eax, [rbx+10h]
    mov     esi, eax
    and     esi, 4
    jmp     loc_B54D
    
loc_D3BD:
    mov     ebp, ecx
    mov     r13d, edx
    jmp     loc_C424
    
loc_D3C7:
    and     edx, 0Fh
    mov     dword ptr [rbx+8], 3F49h
    mov     [rbx+64h], edx
    jmp     loc_B8BB
    
loc_D3D9:
    mov     rcx, [rbx+30h]
    test    rcx, rcx
    jz      short loc_D3EE
    mov     rdx, r14
    shr     rdx, 8
    and     edx, 1
    mov     [rcx], edx
    
loc_D3EE:
    test    ah, 2
    jz      short loc_D428
    test    byte ptr [rbx+10h], 4
    jz      short loc_D428
    mov     rdi, [rbx+20h]
    lea     rsi, [rsp+88h+var_44]
    mov     byte ptr [rsp+88h+var_44], r14b
    mov     edx, 2
    shr     r14, 8
    mov     [rsp+88h+var_60], r8
    mov     byte ptr [rsp+88h+var_44+1], r14b
    call    _crc32
    mov     r8, [rsp+88h+var_60]
    mov     [rbx+20h], rax
    
loc_D428:
    mov     dword ptr [rbx+8], 3F36h
    mov     r12, r8
    xor     r14d, r14d
    xor     ebp, ebp
    jmp     loc_BDDD
    
loc_D43C:
    mov     dword ptr [rbx+8Ch], 0
    mov     dword ptr [rbx+8], 3F46h
    xor     r8d, r8d
    jmp     loc_BE4F
    
loc_D455:
    mov     rdi, [rbx+20h]
    lea     rsi, [rsp+88h+var_44]
    mov     byte ptr [rsp+88h+var_44], r14b
    mov     edx, 2
    shr     r14, 8
    xor     ebp, ebp
    mov     byte ptr [rsp+88h+var_44+1], r14b
    xor     r14d, r14d
    call    _crc32
    mov     [rbx+20h], rax
    mov     eax, [rbx+18h]
    mov     ecx, eax
    and     ecx, 400h
    jmp     loc_BD0B
    
loc_D48F:
    mov     r11, r14
    mov     r13, [rsp+88h+var_70]
    xor     r10d, r10d
    mov     r12, rdi
    xor     r14d, r14d
    jmp     loc_C190
    
loc_D4A5:
    mov     r14, r12
    jmp     loc_B52B
    
loc_D4AD:
    cmp     word ptr [rbx+298h], 0
    jnz     loc_D597
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidCodeMis
    mov     r11, r14
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_D4E3:
    mov     r10d, r13d
    mov     rax, [rsp+88h+dest]
    mov     r13, [rsp+88h+var_70]
    mov     [r13+18h], rax
    mov     [r13+20h], r15d
    mov     [r13+0], r12
    mov     [r13+8], r10d
    mov     [rbx+50h], r14
    mov     [rbx+58h], ebp
    mov     r14d, 2
    jmp     loc_B388
    
loc_D512:
    call    _adler32
    mov     r11, [rsp+88h+var_70]
    mov     r10d, dword ptr [rsp+88h+n+4]
    jmp     loc_D3A8
    
loc_D526:
    mov     r9d, [rbx+38h]
    test    r9d, r9d
    jnz     short loc_D536
    mov     dword ptr [rbx+38h], 0Fh
    
loc_D536:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    mov     [rsp+88h+var_60], r8
    xor     r14d, r14d
    xor     ebp, ebp
    call    _crc32
    lea     rsi, [rsp+88h+var_44]
    mov     r8d, 0FFFF8B1Fh
    mov     [rbx+20h], rax
    mov     edx, 2
    mov     rdi, rax
    mov     [rsp+88h+var_44], r8w
    call    _crc32
    mov     r8, [rsp+88h+var_60]
    mov     [rbx+20h], rax
    mov     dword ptr [rbx+8], 3F35h
    mov     r12, r8
    jmp     loc_C331
    
loc_D585:
    mov     r8, r12
    jmp     loc_CB64
    
loc_D58D:
    mov     ebp, ecx
    mov     r13d, esi
    jmp     loc_CB64
    
loc_D597:
    lea     r10, [rbx+318h]
    lea     rax, [rbx+558h]
    lea     rcx, [rbx+90h]
    lea     rsi, [rbx+98h]
    lea     r8, [rbx+78h]
    mov     dword ptr [rbx+78h], 9
    mov     r9, r10
    mov     [rbx+90h], rax
    mov     [rbx+68h], rax
    mov     edx, r11d
    mov     edi, 1
    mov     [rsp+88h+var_50], r10
    mov     [rsp+88h+var_60], rcx
    mov     [rsp+88h+var_58], rsi
    call    inflate_table
    test    eax, eax
    mov     r10, [rsp+88h+var_50]
    jz      loc_D6A8
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidLiteral_0
    mov     r11, r14
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_D61D:
    cmp     ecx, 0Fh
    ja      loc_CC13
    cmp     eax, ecx
    jb      loc_CC13
    
loc_D62E:
    mov     eax, 1
    xor     edi, edi
    xor     edx, edx
    shl     eax, cl
    xor     esi, esi
    mov     [rsp+88h+var_60], r8
    mov     [rbx+1Ch], eax
    call    _adler32
    mov     rdi, [rsp+88h+var_70]
    and     r14d, 200h
    mov     [rbx+20h], rax
    mov     r8, [rsp+88h+var_60]
    mov     [rdi+60h], rax
    jz      loc_D749
    mov     dword ptr [rbx+8], 3F3Dh
    mov     r12, r8
    xor     r14d, r14d
    xor     ebp, ebp
    jmp     loc_B9B9
    
loc_D67B:
    call    ___stack_chk_fail
    
loc_D680:
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidBitLeng
    mov     r11, r14
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_D6A8:
    mov     esi, [rbx+84h]
    mov     rax, [rbx+90h]
    lea     r8, [rbx+7Ch]
    mov     edx, [rbx+88h]
    mov     rcx, [rsp+88h+var_60]
    mov     r9, r10
    mov     dword ptr [rbx+7Ch], 6
    mov     edi, 2
    mov     [rbx+70h], rax
    add     rsi, rsi
    add     rsi, [rsp+88h+var_58]
    call    inflate_table
    test    eax, eax
    jz      loc_D2F2
    mov     r10d, r13d
    mov     r13, [rsp+88h+var_70]
    lea     rax, aInvalidDistanc_1
    mov     r11, r14
    mov     r14d, 0FFFFFFFDh
    mov     [r13+30h], rax
    mov     dword ptr [rbx+8], 3F51h
    jmp     loc_C190
    
loc_D714:
    mov     r11, r14
    mov     r10d, r13d
    mov     r14d, eax
    mov     r13, [rsp+88h+var_70]
    shr     r11, 3
    sub     ebp, 3
    mov     r12, rdx
    jmp     loc_C190
    
loc_D731:
    mov     r10d, r13d
    mov     r12, rdx
    mov     r13, [rsp+88h+var_70]
    xor     r14d, r14d
    xor     ebp, ebp
    xor     r11d, r11d
    jmp     loc_C190
    
loc_D749:
    mov     dword ptr [rbx+8], 3F3Fh
    mov     r12, r8
    xor     ebp, ebp
    jmp     loc_BACF
    

<inflateEnd>:
    
    test    rdi, rdi
    jz      short loc_D7D0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_D7D0
    mov     rcx, [rdi+48h]
    test    rcx, rcx
    jz      short loc_D7D0
    mov     rdx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rdx, rdx
    jz      short locret_D788
    cmp     rdi, [rdx]
    jz      short loc_D790
    
locret_D788:
    rep retn
    align 10h
    
loc_D790:
    mov     esi, [rdx+8]
    sub     esi, 3F34h
    cmp     esi, 1Fh
    ja      short locret_D788
    push    rbx
    mov     rsi, [rdx+48h]
    mov     rbx, rdi
    mov     rdi, [rdi+50h]
    test    rsi, rsi
    jz      short loc_D7BD
    call    rcx
    mov     rcx, [rbx+48h]
    mov     rdx, [rbx+38h]
    mov     rdi, [rbx+50h]
    
loc_D7BD:
    mov     rsi, rdx
    call    rcx
    mov     qword ptr [rbx+38h], 0
    xor     eax, eax
    pop     rbx
    retn
    align 10h
    
loc_D7D0:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateGetDictionary>:
    
    test    rdi, rdi
    jz      loc_D880
    cmp     qword ptr [rdi+40h], 0
    jz      loc_D880
    cmp     qword ptr [rdi+48h], 0
    jz      loc_D880
    push    rbp
    push    rbx
    mov     eax, 0FFFFFFFEh
    sub     rsp, 8
    mov     rbx, [rdi+38h]
    test    rbx, rbx
    jz      short loc_D818
    cmp     rdi, [rbx]
    jz      short loc_D820
    
loc_D818:
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 20h
    
loc_D820:
    mov     ecx, [rbx+8]
    sub     ecx, 3F34h
    cmp     ecx, 1Fh
    ja      short loc_D818
    test    rsi, rsi
    mov     rbp, rdx
    mov     rcx, rsi
    mov     edx, [rbx+40h]
    jz      short loc_D866
    test    edx, edx
    jz      short loc_D866
    mov     esi, [rbx+44h]
    mov     rdi, rcx
    sub     edx, esi
    add     rsi, [rbx+48h]
    call    _memcpy
    mov     edx, [rbx+44h]
    mov     edi, [rbx+40h]
    mov     rsi, [rbx+48h]
    sub     rdi, rdx
    add     rdi, rax
    call    _memcpy
    
loc_D866:
    xor     eax, eax
    test    rbp, rbp
    jz      short loc_D818
    mov     edx, [rbx+40h]
    mov     [rbp+0], edx
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 20h
    
loc_D880:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateSetDictionary>:
    
    var_40= qword ptr -40h
    
    
    test    rdi, rdi
    jz      loc_DABA
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbp, rdi
    sub     rsp, 18h
    cmp     qword ptr [rdi+40h], 0
    jz      loc_DAA0
    cmp     qword ptr [rdi+48h], 0
    jz      loc_DAA0
    mov     r14, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    r14, r14
    jz      short loc_D8D3
    cmp     rdi, [r14]
    jz      short loc_D8E8
    
loc_D8D3:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_D8E8:
    mov     r15d, edx
    mov     edx, [r14+8]
    lea     ecx, [rdx-3F34h]
    cmp     ecx, 1Fh
    ja      short loc_D8D3
    mov     ecx, [r14+10h]
    mov     r12, rsi
    test    ecx, ecx
    jz      loc_D9F0
    cmp     edx, 3F3Eh
    jnz     short loc_D8D3
    
loc_D911:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    call    _adler32
    mov     edx, r15d
    mov     rsi, r12
    mov     rdi, rax
    call    _adler32
    cmp     [r14+20h], rax
    jnz     loc_DAB0
    mov     rbx, [rbp+38h]
    
loc_D938:
    mov     r13d, r15d
    lea     rax, [r12+r13]
    mov     [rsp+48h+var_40], rax
    mov     rax, [rbx+48h]
    test    rax, rax
    jnz     short loc_D970
    mov     ecx, [rbx+38h]
    mov     esi, 1
    mov     rdi, [rbp+50h]
    mov     edx, 1
    shl     esi, cl
    call    qword ptr [rbp+40h]
    test    rax, rax
    mov     [rbx+48h], rax
    jz      loc_DA80
    
loc_D970:
    mov     edx, [rbx+3Ch]
    test    edx, edx
    jnz     short loc_D98C
    mov     ecx, [rbx+38h]
    mov     edx, 1
    mov     qword ptr [rbx+40h], 0
    shl     edx, cl
    mov     [rbx+3Ch], edx
    
loc_D98C:
    cmp     r15d, edx
    jnb     loc_DA48
    mov     edi, [rbx+44h]
    sub     edx, edi
    add     rdi, rax
    cmp     r15d, edx
    mov     ebp, edx
    jb      short loc_DA08
    mov     edx, edx
    mov     rsi, r12
    call    _memcpy
    sub     r15d, ebp
    jz      loc_DA78
    mov     rsi, [rsp+48h+var_40]
    mov     rdi, [rbx+48h]
    mov     edx, r15d
    sub     rsi, rdx
    call    _memcpy
    mov     eax, [rbx+3Ch]
    mov     [rbx+44h], r15d
    mov     [rbx+40h], eax
    
loc_D9D5:
    mov     dword ptr [r14+14h], 1
    xor     eax, eax
    
loc_D9DF:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_D9F0:
    cmp     edx, 3F3Eh
    jz      loc_D911
    mov     rbx, r14
    jmp     loc_D938
    align 8
    
loc_DA08:
    mov     rdx, r13
    mov     rsi, r12
    call    _memcpy
    
loc_DA13:
    mov     eax, [rbx+44h]
    mov     edx, [rbx+3Ch]
    add     eax, r15d
    cmp     eax, edx
    mov     [rbx+44h], eax
    jnz     short loc_DA2A
    mov     dword ptr [rbx+44h], 0
    
loc_DA2A:
    mov     eax, [rbx+40h]
    cmp     edx, eax
    jbe     short loc_D9D5
    add     r15d, eax
    xor     eax, eax
    mov     [rbx+40h], r15d
    mov     dword ptr [r14+14h], 1
    jmp     short loc_D9DF
    align 8
    
loc_DA48:
    mov     rsi, [rsp+48h+var_40]
    mov     rdi, rax
    sub     rsi, rdx
    call    _memcpy
    mov     eax, [rbx+3Ch]
    mov     dword ptr [rbx+44h], 0
    mov     [rbx+40h], eax
    mov     dword ptr [r14+14h], 1
    xor     eax, eax
    jmp     loc_D9DF
    align 8
    
loc_DA78:
    mov     r15d, ebp
    jmp     short loc_DA13
    align 20h
    
loc_DA80:
    mov     dword ptr [r14+8], 3F52h
    add     rsp, 18h
    mov     eax, 0FFFFFFFCh
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_DAA0:
    mov     eax, 0FFFFFFFEh
    jmp     loc_D8D3
    align 10h
    
loc_DAB0:
    mov     eax, 0FFFFFFFDh
    jmp     loc_D8D3
    
loc_DABA:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateGetHeader>:
    
    test    rdi, rdi
    jz      short loc_DB18
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_DB18
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_DB18
    mov     rdx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rdx, rdx
    jz      short locret_DAE6
    cmp     rdi, [rdx]
    jz      short loc_DAF0
    
locret_DAE6:
    rep retn
    align 10h
    
loc_DAF0:
    mov     ecx, [rdx+8]
    sub     ecx, 3F34h
    cmp     ecx, 1Fh
    ja      short locret_DAE6
    test    byte ptr [rdx+10h], 2
    jz      short locret_DAE6
    mov     [rdx+30h], rsi
    xor     eax, eax
    mov     dword ptr [rsi+48h], 0
    retn
    align 8
    
loc_DB18:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateSync>:
    
    var_34= byte ptr -34h
    var_33= byte ptr -33h
    var_32= byte ptr -32h
    var_31= byte ptr -31h
    var_30= qword ptr -30h
    
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    mov     rax, fs:28h
    mov     [rsp+38h+var_30], rax
    xor     eax, eax
    test    rdi, rdi
    jz      loc_DDAC
    cmp     qword ptr [rdi+40h], 0
    mov     rbx, rdi
    jz      loc_DDAC
    cmp     qword ptr [rdi+48h], 0
    jz      loc_DDAC
    mov     rbp, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rbp, rbp
    jz      short loc_DB70
    cmp     rdi, [rbp+0]
    jz      short loc_DB90
    
loc_DB70:
    mov     rbx, [rsp+38h+var_30]
    xor     rbx, fs:28h
    jnz     loc_DDC0
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_DB90:
    mov     edx, [rbp+8]
    lea     ecx, [rdx-3F34h]
    cmp     ecx, 1Fh
    ja      short loc_DB70
    mov     r9d, [rdi+8]
    test    r9d, r9d
    jnz     short loc_DBB1
    cmp     dword ptr [rbp+58h], 7
    jbe     loc_DDB6
    
loc_DBB1:
    cmp     edx, 3F53h
    jz      loc_DD80
    mov     eax, [rbp+58h]
    mov     rdx, [rbp+50h]
    mov     dword ptr [rbp+8], 3F53h
    mov     ecx, eax
    and     eax, 0FFFFFFF8h
    and     ecx, 7
    mov     [rbp+58h], eax
    shl     rdx, cl
    cmp     eax, 7
    mov     [rbp+50h], rdx
    jbe     loc_DDA0
    lea     r8d, [rax-8]
    mov     rcx, rdx
    mov     [rsp+38h+var_34], dl
    shr     rcx, 8
    cmp     r8d, 7
    jbe     short loc_DC2C
    lea     esi, [rax-10h]
    mov     [rsp+38h+var_33], cl
    mov     rcx, rdx
    shr     rcx, 10h
    cmp     esi, 7
    jbe     short loc_DC2C
    mov     [rsp+38h+var_32], cl
    sub     eax, 18h
    mov     rcx, rdx
    shr     rcx, 18h
    cmp     eax, 7
    jbe     short loc_DC2C
    shr     rdx, 20h
    mov     [rsp+38h+var_31], cl
    mov     rcx, rdx
    
loc_DC2C:
    shr     r8d, 3
    mov     [rbp+50h], rcx
    mov     dword ptr [rbp+58h], 0
    add     r8d, 1
    lea     rsi, [rsp+38h+var_34]
    xor     edx, edx
    xor     ecx, ecx
    mov     r9d, 4
    jmp     short loc_DC78
    
loc_DC50:
    test    dil, dil
    jnz     loc_DD60
    mov     eax, r9d
    sub     eax, edx
    cmp     eax, 3
    mov     edx, eax
    setbe   dil
    
loc_DC67:
    add     ecx, 1
    add     rsi, 1
    cmp     ecx, r8d
    jnb     short loc_DCA0
    
loc_DC73:
    test    dil, dil
    jz      short loc_DCA0
    
loc_DC78:
    movzx   edi, byte ptr [rsi]
    cmp     edx, 2
    sbb     eax, eax
    not     eax
    cmp     dil, al
    jnz     short loc_DC50
    add     edx, 1
    cmp     edx, 3
    setbe   dil
    add     ecx, 1
    add     rsi, 1
    cmp     ecx, r8d
    jb      short loc_DC73
    nop     dword ptr [rax]
    
loc_DCA0:
    mov     [rbp+8Ch], edx
    mov     r9d, [rbx+8]
    
loc_DCAA:
    test    r9d, r9d
    mov     r8, [rbx]
    mov     r10d, 4
    setnz   cl
    xor     eax, eax
    and     dil, cl
    jnz     short loc_DCEA
    jmp     loc_DD98
    align 8
    
loc_DCC8:
    test    sil, sil
    jnz     loc_DD70
    mov     esi, r10d
    sub     esi, edx
    cmp     esi, 3
    mov     edx, esi
    setbe   cl
    
loc_DCDE:
    add     eax, 1
    cmp     r9d, eax
    jbe     short loc_DD10
    
loc_DCE6:
    test    cl, cl
    jz      short loc_DD10
    
loc_DCEA:
    mov     ecx, eax
    cmp     edx, 2
    movzx   esi, byte ptr [r8+rcx]
    sbb     ecx, ecx
    not     ecx
    cmp     sil, cl
    jnz     short loc_DCC8
    add     edx, 1
    cmp     edx, 3
    setbe   cl
    add     eax, 1
    cmp     r9d, eax
    ja      short loc_DCE6
    xchg    ax, ax
    
loc_DD10:
    mov     r12d, eax
    add     r8, r12
    
loc_DD16:
    add     r12, [rbx+10h]
    mov     [rbp+8Ch], edx
    sub     [rbx+8], eax
    cmp     edx, 4
    mov     [rbx], r8
    mov     eax, 0FFFFFFFDh
    mov     [rbx+10h], r12
    jnz     loc_DB70
    mov     r13, [rbx+28h]
    mov     rdi, rbx
    call    _inflateReset
    mov     [rbx+10h], r12
    xor     eax, eax
    mov     [rbx+28h], r13
    mov     dword ptr [rbp+8], 3F3Fh
    jmp     loc_DB70
    align 20h
    
loc_DD60:
    mov     edi, 1
    xor     edx, edx
    jmp     loc_DC67
    align 10h
    
loc_DD70:
    mov     ecx, edi
    xor     edx, edx
    jmp     loc_DCDE
    align 20h
    
loc_DD80:
    mov     edx, [rbp+8Ch]
    cmp     edx, 3
    setbe   dil
    jmp     loc_DCAA
    align 8
    
loc_DD98:
    xor     r12d, r12d
    jmp     loc_DD16
    
loc_DDA0:
    mov     edi, 1
    xor     edx, edx
    jmp     loc_DCA0
    
loc_DDAC:
    mov     eax, 0FFFFFFFEh
    jmp     loc_DB70
    
loc_DDB6:
    mov     eax, 0FFFFFFFBh
    jmp     loc_DB70
    
loc_DDC0:
    call    ___stack_chk_fail
    

<inflateSyncPoint>:
    
    test    rdi, rdi
    jz      short loc_DE28
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_DE28
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_DE28
    mov     rdx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rdx, rdx
    jz      short locret_DDF6
    cmp     rdi, [rdx]
    jz      short loc_DE00
    
locret_DDF6:
    rep retn
    align 20h
    
loc_DE00:
    mov     ecx, [rdx+8]
    lea     esi, [rcx-3F34h]
    cmp     esi, 1Fh
    ja      short locret_DDF6
    xor     eax, eax
    cmp     ecx, 3F41h
    jnz     short locret_DDF6
    mov     edx, [rdx+58h]
    xor     eax, eax
    test    edx, edx
    setz    al
    retn
    align 8
    
loc_DE28:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateCopy>:
    
    test    rsi, rsi
    jz      loc_E018
    mov     rcx, [rsi+40h]
    test    rcx, rcx
    jz      loc_E018
    cmp     qword ptr [rsi+48h], 0
    jz      loc_E018
    push    r13
    push    r12
    mov     eax, 0FFFFFFFEh
    push    rbp
    push    rbx
    sub     rsp, 8
    mov     rbp, [rsi+38h]
    test    rbp, rbp
    jz      short loc_DE6F
    cmp     rsi, [rbp+0]
    jz      short loc_DE80
    
loc_DE6F:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_DE80:
    mov     eax, [rbp+8]
    sub     eax, 3F34h
    cmp     eax, 1Fh
    ja      short loc_DE92
    test    rdi, rdi
    jnz     short loc_DEA8
    
loc_DE92:
    add     rsp, 8
    mov     eax, 0FFFFFFFEh
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 8
    
loc_DEA8:
    mov     rbx, rsi
    mov     r12, rdi
    mov     edx, 1BF8h
    mov     rdi, [rsi+50h]
    mov     esi, 1
    call    rcx
    test    rax, rax
    mov     r13, rax
    jz      loc_E01E
    mov     r8, [rbp+48h]
    test    r8, r8
    jz      short loc_DEF5
    mov     ecx, [rbp+38h]
    mov     esi, 1
    mov     rdi, [rbx+50h]
    mov     edx, 1
    shl     esi, cl
    call    qword ptr [rbx+40h]
    test    rax, rax
    mov     r8, rax
    jz      loc_E000
    
loc_DEF5:
    movdqu  xmm0, xmmword ptr [rbx]
    lea     rdi, [r13+8]
    mov     rcx, r13
    mov     rsi, rbp
    movups  xmmword ptr [r12], xmm0
    and     rdi, 0FFFFFFFFFFFFFFF8h
    sub     rcx, rdi
    sub     rsi, rcx
    add     ecx, 1BF8h
    movdqu  xmm0, xmmword ptr [rbx+10h]
    shr     ecx, 3
    movups  xmmword ptr [r12+10h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+20h]
    movups  xmmword ptr [r12+20h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+30h]
    movups  xmmword ptr [r12+30h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+40h]
    movups  xmmword ptr [r12+40h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+50h]
    movups  xmmword ptr [r12+50h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+60h]
    movups  xmmword ptr [r12+60h], xmm0
    mov     rax, [rbp+0]
    mov     [r13+0], rax
    mov     rax, [rbp+1BF0h]
    mov     [r13+1BF0h], rax
    lea     rax, [r13+558h]
    rep movsq
    lea     rcx, [rbp+558h]
    mov     [r13+0], r12
    mov     rdx, [rbp+68h]
    cmp     rdx, rcx
    jb      short loc_DFB5
    lea     rsi, [rbp+1BE4h]
    cmp     rdx, rsi
    ja      short loc_DFB5
    sub     rdx, rcx
    add     rdx, rax
    mov     [r13+68h], rdx
    mov     rdx, [rbp+70h]
    sub     rdx, rcx
    add     rdx, rax
    mov     [r13+70h], rdx
    
loc_DFB5:
    mov     rdx, [rbp+90h]
    sub     rdx, rcx
    add     rax, rdx
    test    r8, r8
    mov     [r13+90h], rax
    jz      short loc_DFE7
    mov     ecx, [rbp+38h]
    mov     rsi, [rbp+48h]
    mov     edx, 1
    mov     rdi, r8
    shl     edx, cl
    call    _memcpy
    mov     r8, rax
    
loc_DFE7:
    mov     [r13+48h], r8
    mov     [r12+38h], r13
    add     rsp, 8
    pop     rbx
    xor     eax, eax
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_E000:
    mov     rdi, [rbx+50h]
    mov     rsi, r13
    call    qword ptr [rbx+48h]
    mov     eax, 0FFFFFFFCh
    jmp     loc_DE6F
    align 8
    
loc_E018:
    mov     eax, 0FFFFFFFEh
    retn
    
loc_E01E:
    mov     eax, 0FFFFFFFCh
    jmp     loc_DE6F
    

<inflateUndermine>:
    
    test    rdi, rdi
    mov     eax, 0FFFFFFFEh
    jz      short locret_E056
    cmp     qword ptr [rdi+40h], 0
    jz      short locret_E056
    cmp     qword ptr [rdi+48h], 0
    jz      short locret_E056
    mov     rdx, [rdi+38h]
    test    rdx, rdx
    jz      short locret_E056
    cmp     rdi, [rdx]
    jz      short loc_E060
    
locret_E056:
    rep retn
    align 20h
    
loc_E060:
    mov     esi, [rdx+8]
    lea     ecx, [rsi-3F34h]
    cmp     ecx, 1Fh
    ja      short locret_E056
    mov     dword ptr [rdx+1BE8h], 1
    mov     eax, 0FFFFFFFDh
    retn
    

<inflateValidate>:
    
    test    rdi, rdi
    jz      short loc_E0E0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_E0E0
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_E0E0
    mov     rdx, [rdi+38h]
    mov     eax, 0FFFFFFFEh
    test    rdx, rdx
    jz      short locret_E0A6
    cmp     rdi, [rdx]
    jz      short loc_E0B0
    
locret_E0A6:
    rep retn
    align 10h
    
loc_E0B0:
    mov     ecx, [rdx+8]
    sub     ecx, 3F34h
    cmp     ecx, 1Fh
    ja      short locret_E0A6
    test    esi, esi
    mov     eax, [rdx+10h]
    jnz     short loc_E0D0
    and     eax, 0FFFFFFFBh
    mov     [rdx+10h], eax
    xor     eax, eax
    retn
    align 10h
    
loc_E0D0:
    or      eax, 4
    mov     [rdx+10h], eax
    xor     eax, eax
    retn
    align 20h
    
loc_E0E0:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateMark>:
    
    test    rdi, rdi
    jz      short loc_E170
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_E170
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_E170
    mov     rdx, [rdi+38h]
    mov     rax, 0FFFFFFFFFFFF0000h
    test    rdx, rdx
    jz      short locret_E118
    cmp     rdi, [rdx]
    jz      short loc_E120
    
locret_E118:
    rep retn
    align 20h
    
loc_E120:
    mov     ecx, [rdx+8]
    lea     esi, [rcx-3F34h]
    cmp     esi, 1Fh
    ja      short locret_E118
    movsxd  rax, dword ptr [rdx+1BECh]
    shl     rax, 10h
    cmp     ecx, 3F43h
    jz      short loc_E160
    cmp     ecx, 3F4Ch
    jnz     short locret_E118
    mov     ecx, [rdx+1BF0h]
    mov     esi, ecx
    sub     esi, [rdx+5Ch]
    add     rax, rsi
    retn
    align 20h
    
loc_E160:
    mov     edx, [rdx+5Ch]
    add     rax, rdx
    retn
    align 10h
    
loc_E170:
    mov     rax, 0FFFFFFFFFFFF0000h
    retn
    

<inflateCodesUsed>:
    
    test    rdi, rdi
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jz      short locret_E1A8
    cmp     qword ptr [rdi+40h], 0
    jz      short locret_E1A8
    cmp     qword ptr [rdi+48h], 0
    jz      short locret_E1A8
    mov     rdx, [rdi+38h]
    test    rdx, rdx
    jz      short locret_E1A8
    cmp     rdi, [rdx]
    jz      short loc_E1B0
    
locret_E1A8:
    rep retn
    align 10h
    
loc_E1B0:
    mov     esi, [rdx+8]
    lea     ecx, [rsi-3F34h]
    cmp     ecx, 1Fh
    ja      short locret_E1A8
    mov     rax, [rdx+90h]
    lea     rcx, [rdx+558h]
    sub     rax, rcx
    sar     rax, 2
    retn
    

<inflate_table>:
    
    var_D4= dword ptr -0D4h
    var_D0= qword ptr -0D0h
    var_C8= qword ptr -0C8h
    var_C0= dword ptr -0C0h
    var_BC= dword ptr -0BCh
    var_B8= dword ptr -0B8h
    var_B4= dword ptr -0B4h
    var_B0= qword ptr -0B0h
    var_A8= qword ptr -0A8h
    var_A0= qword ptr -0A0h
    var_98= qword ptr -98h
    var_90= dword ptr -90h
    var_8A= byte ptr -8Ah
    var_89= byte ptr -89h
    var_88= xmmword ptr -88h
    var_78= xmmword ptr -78h
    var_68= word ptr -68h
    var_66= word ptr -66h
    var_64= word ptr -64h
    var_62= word ptr -62h
    var_60= word ptr -60h
    var_5E= word ptr -5Eh
    var_5C= word ptr -5Ch
    var_5A= word ptr -5Ah
    var_58= word ptr -58h
    var_56= word ptr -56h
    var_54= word ptr -54h
    var_52= word ptr -52h
    var_50= word ptr -50h
    var_4E= word ptr -4Eh
    var_4C= word ptr -4Ch
    var_4A= word ptr -4Ah
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    pxor    xmm0, xmm0
    sub     rsp, 0A8h
    mov     rax, fs:28h
    mov     [rsp+0D8h+var_40], rax
    xor     eax, eax
    test    edx, edx
    mov     [rsp+0D8h+var_C8], rcx
    mov     [rsp+0D8h+var_D0], r8
    movaps  [rsp+0D8h+var_88], xmm0
    movaps  [rsp+0D8h+var_78], xmm0
    jz      short loc_E242
    lea     ecx, [rdx-1]
    mov     rax, rsi
    lea     r8, [rsi+rcx*2+2]
    nop     dword ptr [rax+rax+00h]
    
loc_E230:
    movzx   ecx, word ptr [rax]
    add     rax, 2
    add     word ptr [rsp+rcx*2+0D8h+var_88], 1
    cmp     r8, rax
    jnz     short loc_E230
    
loc_E242:
    movzx   r8d, word ptr [rsp+0D8h+var_78+0Eh]
    test    r8w, r8w
    jnz     loc_E34C
    cmp     word ptr [rsp+0D8h+var_78+0Ch], 0
    jnz     loc_EB50
    cmp     word ptr [rsp+0D8h+var_78+0Ah], 0
    jnz     loc_EB84
    cmp     word ptr [rsp+0D8h+var_78+8], 0
    jnz     loc_EBA0
    cmp     word ptr [rsp+0D8h+var_78+6], 0
    jnz     loc_EBB8
    cmp     word ptr [rsp+0D8h+var_78+4], 0
    jnz     loc_EBD0
    cmp     word ptr [rsp+0D8h+var_78+2], 0
    jnz     loc_EC0E
    cmp     word ptr [rsp+0D8h+var_78], 0
    jnz     loc_ED2C
    cmp     word ptr [rsp+0D8h+var_88+0Eh], 0
    jnz     loc_EBF2
    cmp     word ptr [rsp+0D8h+var_88+0Ch], 0
    jnz     loc_EDC4
    cmp     word ptr [rsp+0D8h+var_88+0Ah], 0
    jnz     loc_EDDB
    cmp     word ptr [rsp+0D8h+var_88+8], 0
    jnz     loc_EC78
    cmp     word ptr [rsp+0D8h+var_88+6], 0
    jnz     loc_EC9A
    cmp     word ptr [rsp+0D8h+var_88+4], 0
    jnz     loc_ECBE
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    jnz     loc_ECE0
    mov     rbx, [rsp+0D8h+var_C8]
    mov     rax, [rbx]
    lea     rdx, [rax+8]
    mov     dword ptr [rax], 140h
    mov     [rbx], rdx
    mov     dword ptr [rax+4], 140h
    mov     rax, [rsp+0D8h+var_D0]
    mov     dword ptr [rax], 1
    xor     eax, eax
    
loc_E323:
    mov     rbx, [rsp+0D8h+var_40]
    xor     rbx, fs:28h
    jnz     loc_EDBF
    add     rsp, 0A8h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_E34C:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 0Fh
    jnz     loc_EC04
    xchg    ax, ax
    
loc_E360:
    cmp     word ptr [rsp+0D8h+var_88+4], 0
    jnz     loc_ED0E
    cmp     word ptr [rsp+0D8h+var_88+6], 0
    jnz     loc_EB7A
    cmp     r15d, 4
    jz      loc_EBE8
    
loc_E382:
    cmp     word ptr [rsp+0D8h+var_88+8], 0
    jnz     loc_EBE8
    cmp     r15d, 5
    jz      loc_EC28
    cmp     word ptr [rsp+0D8h+var_88+0Ah], 0
    jnz     loc_EC28
    cmp     r15d, 6
    jz      loc_EC6E
    cmp     word ptr [rsp+0D8h+var_88+0Ch], 0
    jnz     loc_EC6E
    cmp     r15d, 7
    jz      loc_EC90
    cmp     word ptr [rsp+0D8h+var_88+0Eh], 0
    jnz     loc_EC90
    cmp     r15d, 8
    jz      loc_ECD6
    cmp     word ptr [rsp+0D8h+var_78], 0
    jnz     loc_ECD6
    cmp     r15d, 9
    jz      loc_ECF0
    cmp     word ptr [rsp+0D8h+var_78+2], 0
    jnz     loc_ECF0
    cmp     r15d, 0Ah
    jz      loc_ECFA
    cmp     word ptr [rsp+0D8h+var_78+4], 0
    jnz     loc_ECFA
    cmp     r15d, 0Bh
    jz      loc_ED04
    cmp     word ptr [rsp+0D8h+var_78+6], 0
    jnz     loc_ED04
    cmp     r15d, 0Ch
    jz      loc_ED18
    cmp     word ptr [rsp+0D8h+var_78+8], 0
    jnz     loc_ED18
    cmp     r15d, 0Dh
    jz      loc_ED22
    cmp     word ptr [rsp+0D8h+var_78+0Ah], 0
    jnz     loc_ED22
    cmp     r15d, 0Fh
    jnz     loc_ED68
    cmp     word ptr [rsp+0D8h+var_78+0Ch], 1
    sbb     ebx, ebx
    not     ebx
    add     ebx, 0Fh
    nop     dword ptr [rax+rax+00h]
    
loc_E470:
    movzx   r10d, word ptr [rsp+0D8h+var_88+2]
    mov     ecx, 2
    mov     eax, 0FFFFFFFFh
    sub     ecx, r10d
    mov     r13d, r10d
    js      loc_E323
    movzx   r11d, word ptr [rsp+0D8h+var_88+4]
    add     ecx, ecx
    sub     ecx, r11d
    mov     r10d, r11d
    js      loc_E323
    movzx   ebp, word ptr [rsp+0D8h+var_88+6]
    add     ecx, ecx
    sub     ecx, ebp
    mov     r11d, ebp
    js      loc_E323
    movzx   r12d, word ptr [rsp+0D8h+var_88+8]
    add     ecx, ecx
    sub     ecx, r12d
    mov     ebp, r12d
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_88+0Ah]
    add     ecx, ecx
    sub     ecx, r14d
    mov     r12d, r14d
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_88+0Ch]
    add     ecx, ecx
    sub     ecx, r14d
    mov     word ptr [rsp+0D8h+var_C0], r14w
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_88+0Eh]
    add     ecx, ecx
    sub     ecx, r14d
    mov     word ptr [rsp+0D8h+var_BC], r14w
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_78]
    add     ecx, ecx
    sub     ecx, r14d
    mov     word ptr [rsp+0D8h+var_B8], r14w
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_78+2]
    add     ecx, ecx
    sub     ecx, r14d
    mov     word ptr [rsp+0D8h+var_B4], r14w
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_78+4]
    add     ecx, ecx
    sub     ecx, r14d
    mov     word ptr [rsp+0D8h+var_90], r14w
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_78+6]
    add     ecx, ecx
    mov     eax, 0FFFFFFFFh
    sub     ecx, r14d
    mov     word ptr [rsp+0D8h+var_B0], r14w
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_78+8]
    add     ecx, ecx
    sub     ecx, r14d
    mov     word ptr [rsp+0D8h+var_A8], r14w
    js      loc_E323
    movzx   r14d, word ptr [rsp+0D8h+var_78+0Ah]
    add     ecx, ecx
    sub     ecx, r14d
    mov     word ptr [rsp+0D8h+var_A0], r14w
    js      loc_E323
    lea     r14d, [rcx+rcx]
    movzx   ecx, word ptr [rsp+0D8h+var_78+0Ch]
    sub     r14d, ecx
    mov     word ptr [rsp+0D8h+var_D4], cx
    mov     ecx, r14d
    js      loc_E323
    add     ecx, ecx
    cmp     ecx, r8d
    js      loc_E323
    jz      short loc_E5D0
    test    edi, edi
    jz      loc_ED78
    cmp     r15d, 1
    jnz     loc_ED78
    
loc_E5D0:
    add     r10d, r13d
    mov     rax, [rsp+0D8h+var_D0]
    xor     ecx, ecx
    mov     [rsp+0D8h+var_62], r10w
    add     r10d, r11d
    mov     [rsp+0D8h+var_66], cx
    mov     [rsp+0D8h+var_60], r10w
    add     r10d, ebp
    mov     [rsp+0D8h+var_64], r13w
    mov     [rsp+0D8h+var_5E], r10w
    add     r10d, r12d
    mov     eax, [rax]
    mov     [rsp+0D8h+var_5C], r10w
    add     r10w, word ptr [rsp+0D8h+var_C0]
    mov     [rsp+0D8h+var_5A], r10w
    add     r10w, word ptr [rsp+0D8h+var_BC]
    mov     [rsp+0D8h+var_58], r10w
    add     r10w, word ptr [rsp+0D8h+var_B8]
    mov     [rsp+0D8h+var_56], r10w
    add     r10w, word ptr [rsp+0D8h+var_B4]
    mov     [rsp+0D8h+var_54], r10w
    add     r10w, word ptr [rsp+0D8h+var_90]
    mov     [rsp+0D8h+var_52], r10w
    add     r10w, word ptr [rsp+0D8h+var_B0]
    mov     [rsp+0D8h+var_50], r10w
    add     r10w, word ptr [rsp+0D8h+var_A8]
    mov     [rsp+0D8h+var_4E], r10w
    add     r10w, word ptr [rsp+0D8h+var_A0]
    mov     [rsp+0D8h+var_4C], r10w
    add     r10w, word ptr [rsp+0D8h+var_D4]
    test    edx, edx
    mov     [rsp+0D8h+var_4A], r10w
    jz      loc_E6C7
    lea     r10d, [rdx-1]
    xor     edx, edx
    add     r10, 1
    xchg    ax, ax
    
loc_E6A0:
    movzx   ecx, word ptr [rsi+rdx*2]
    test    cx, cx
    jz      short loc_E6BE
    movzx   r8d, [rsp+rcx*2+0D8h+var_68]
    lea     r11d, [r8+1]
    mov     [r9+r8*2], dx
    mov     [rsp+rcx*2+0D8h+var_68], r11w
    
loc_E6BE:
    add     rdx, 1
    cmp     rdx, r10
    jnz     short loc_E6A0
    
loc_E6C7:
    cmp     eax, r15d
    cmova   eax, r15d
    cmp     eax, ebx
    cmovb   eax, ebx
    mov     edx, eax
    mov     [rsp+0D8h+var_D4], eax
    mov     eax, 1
    mov     ecx, edx
    shl     eax, cl
    test    edi, edi
    jz      short loc_E704
    cmp     edi, 1
    jnz     loc_EB08
    cmp     eax, 354h
    jbe     loc_ED8D
    
loc_E6FA:
    mov     eax, 1
    jmp     loc_E323
    
loc_E704:
    mov     [rsp+0D8h+var_A8], r9
    mov     [rsp+0D8h+var_A0], r9
    mov     [rsp+0D8h+var_C0], 14h
    mov     [rsp+0D8h+var_8A], 0
    
loc_E71B:
    mov     r14d, [rsp+0D8h+var_D4]
    cmp     edi, 1
    setz    [rsp+0D8h+var_89]
    
loc_E728:
    mov     rdi, [rsp+0D8h+var_C8]
    mov     [rsp+0D8h+var_BC], eax
    sub     eax, 1
    mov     [rsp+0D8h+var_B8], r15d
    mov     [rsp+0D8h+var_B4], 0FFFFFFFFh
    xor     r13d, r13d
    xor     r10d, r10d
    mov     [rsp+0D8h+var_90], eax
    mov     [rsp+0D8h+var_B0], rsi
    mov     rdi, [rdi]
    mov     r15, r9
    mov     [rsp+0D8h+var_98], rdi
    mov     r12, rdi
    xor     edi, edi
    
loc_E760:
    mov     eax, r10d
    mov     ecx, [rsp+0D8h+var_C0]
    mov     r11d, ebx
    movzx   eax, word ptr [r15+rax*2]
    sub     r11d, r13d
    xor     r8d, r8d
    lea     edx, [rax+1]
    mov     esi, eax
    cmp     edx, ecx
    jb      short loc_E79B
    cmp     eax, ecx
    jb      loc_EAF0
    mov     rsi, [rsp+0D8h+var_A8]
    sub     eax, ecx
    movzx   r8d, byte ptr [rsi+rax*2]
    mov     rsi, [rsp+0D8h+var_A0]
    movzx   esi, word ptr [rsi+rax*2]
    
loc_E79B:
    mov     ecx, ebx
    mov     r9d, 1
    mov     ebp, 1
    sub     ecx, r13d
    mov     eax, edi
    shl     r9d, cl
    mov     ecx, r14d
    shl     ebp, cl
    mov     ecx, r13d
    shr     eax, cl
    mov     ecx, eax
    mov     eax, ebp
    xchg    ax, ax
    
loc_E7C0:
    sub     eax, r9d
    lea     edx, [rcx+rax]
    test    eax, eax
    lea     rdx, [r12+rdx*4]
    mov     [rdx], r8b
    mov     [rdx+1], r11b
    mov     [rdx+2], si
    jnz     short loc_E7C0
    lea     ecx, [rbx-1]
    mov     eax, 1
    shl     eax, cl
    test    edi, eax
    jz      short loc_E7F6
    nop     word ptr [rax+rax+00000000h]
    
loc_E7F0:
    shr     eax, 1
    test    edi, eax
    jnz     short loc_E7F0
    
loc_E7F6:
    test    eax, eax
    jz      short loc_E801
    lea     edx, [rax-1]
    and     edi, edx
    add     eax, edi
    
loc_E801:
    mov     ecx, ebx
    add     r10d, 1
    movzx   edi, word ptr [rsp+rcx*2+0D8h+var_88]
    lea     edx, [rdi-1]
    test    dx, dx
    mov     word ptr [rsp+rcx*2+0D8h+var_88], dx
    jnz     short loc_E834
    cmp     ebx, [rsp+0D8h+var_B8]
    jz      loc_EC32
    mov     edx, r10d
    mov     rbx, [rsp+0D8h+var_B0]
    movzx   edx, word ptr [r15+rdx*2]
    movzx   ebx, word ptr [rbx+rdx*2]
    
loc_E834:
    mov     esi, [rsp+0D8h+var_D4]
    cmp     esi, ebx
    jnb     loc_EAE3
    mov     edx, [rsp+0D8h+var_90]
    and     edx, eax
    cmp     edx, [rsp+0D8h+var_B4]
    jz      loc_EAE3
    test    r13d, r13d
    mov     r14d, ebx
    mov     r9d, [rsp+0D8h+var_B8]
    cmovz   r13d, esi
    mov     edi, 1
    lea     r12, [r12+rbp*4]
    sub     r14d, r13d
    mov     ecx, r14d
    shl     edi, cl
    cmp     ebx, r9d
    mov     ecx, edi
    jnb     loc_EA80
    mov     esi, ebx
    movzx   esi, word ptr [rsp+rsi*2+0D8h+var_88]
    sub     ecx, esi
    test    ecx, ecx
    jle     loc_EA80
    lea     edi, [r14+1]
    add     ecx, ecx
    lea     esi, [r13+rdi+0]
    cmp     esi, r9d
    jnb     loc_EA74
    movzx   esi, word ptr [rsp+rsi*2+0D8h+var_88]
    sub     ecx, esi
    test    ecx, ecx
    jle     loc_EA74
    lea     esi, [r14+2]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+3]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+4]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+5]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+6]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+7]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+8]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+9]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+0Ah]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     esi, [r14+0Bh]
    add     ecx, ecx
    lea     edi, [r13+rsi+0]
    cmp     edi, r9d
    jnb     loc_EB00
    movzx   edi, word ptr [rsp+rdi*2+0D8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     loc_EB00
    lea     edi, [r14+0Ch]
    add     ecx, ecx
    lea     esi, [r13+rdi+0]
    cmp     esi, r9d
    jnb     short loc_EA74
    movzx   esi, word ptr [rsp+rsi*2+0D8h+var_88]
    sub     ecx, esi
    test    ecx, ecx
    jle     short loc_EA74
    lea     esi, [r14+0Dh]
    lea     edi, [rcx+rcx]
    lea     ecx, [r13+rsi+0]
    cmp     ecx, r9d
    jnb     loc_EB00
    movzx   ecx, word ptr [rsp+rcx*2+0D8h+var_88]
    sub     edi, ecx
    test    edi, edi
    jle     loc_EB00
    lea     esi, [r14+0Eh]
    lea     edi, [rdi+rdi]
    lea     ecx, [r13+rsi+0]
    cmp     ecx, r9d
    jnb     loc_EB00
    movzx   ecx, word ptr [rsp+rcx*2+0D8h+var_88]
    add     r14d, 0Fh
    sub     edi, ecx
    test    edi, edi
    cmovle  r14d, esi
    jmp     short loc_EA80
    
loc_EA74:
    mov     r14d, edi
    nop     word ptr [rax+rax+00000000h]
    
loc_EA80:
    mov     edi, 1
    mov     ecx, r14d
    shl     edi, cl
    add     [rsp+0D8h+var_BC], edi
    mov     esi, [rsp+0D8h+var_BC]
    cmp     esi, 354h
    jbe     short loc_EAA5
    cmp     [rsp+0D8h+var_89], 0
    jnz     loc_E6FA
    
loc_EAA5:
    cmp     [rsp+0D8h+var_BC], 250h
    jbe     short loc_EABA
    cmp     [rsp+0D8h+var_8A], 0
    jnz     loc_E6FA
    
loc_EABA:
    mov     rdi, [rsp+0D8h+var_98]
    movzx   esi, byte ptr [rsp+0D8h+var_D4]
    mov     ecx, edx
    mov     [rsp+0D8h+var_B4], edx
    lea     rcx, [rdi+rcx*4]
    mov     [rcx+1], sil
    mov     rsi, r12
    mov     [rcx], r14b
    sub     rsi, rdi
    sar     rsi, 2
    mov     [rcx+2], si
    
loc_EAE3:
    mov     edi, eax
    jmp     loc_E760
    align 10h
    
loc_EAF0:
    xor     esi, esi
    mov     r8d, 60h
    jmp     loc_E79B
    align 20h
    
loc_EB00:
    mov     r14d, esi
    jmp     loc_EA80
    
loc_EB08:
    cmp     edi, 2
    setz    [rsp+0D8h+var_8A]
    cmp     eax, 250h
    movzx   edx, [rsp+0D8h+var_8A]
    jbe     short loc_EB24
    test    dl, dl
    jnz     loc_E6FA
    
loc_EB24:
    lea     rdx, dext_3973
    mov     [rsp+0D8h+var_C0], 0
    mov     [rsp+0D8h+var_A8], rdx
    lea     rdx, dbase_3972
    mov     [rsp+0D8h+var_A0], rdx
    jmp     loc_E71B
    align 10h
    
loc_EB50:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    jnz     loc_ED48
    cmp     word ptr [rsp+0D8h+var_88+4], 0
    jnz     loc_ED58
    cmp     word ptr [rsp+0D8h+var_88+6], 0
    mov     r15d, 0Eh
    jz      loc_E382
    
loc_EB7A:
    mov     ebx, 3
    jmp     loc_E470
    
loc_EB84:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 0Dh
    jz      loc_E360
    jmp     short loc_EC04
    align 20h
    
loc_EBA0:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 0Ch
    jz      loc_E360
    jmp     short loc_EC04
    align 8
    
loc_EBB8:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 0Bh
    jz      loc_E360
    jmp     short loc_EC04
    align 10h
    
loc_EBD0:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 0Ah
    jz      loc_E360
    jmp     short loc_EC04
    align 8
    
loc_EBE8:
    mov     ebx, 4
    jmp     loc_E470
    
loc_EBF2:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 7
    jz      loc_E360
    
loc_EC04:
    mov     ebx, 1
    jmp     loc_E470
    
loc_EC0E:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 9
    jz      loc_E360
    jmp     short loc_EC04
    align 8
    
loc_EC28:
    mov     ebx, 5
    jmp     loc_E470
    
loc_EC32:
    test    eax, eax
    jz      short loc_EC47
    lea     rax, [r12+rax*4]
    xor     edx, edx
    mov     byte ptr [rax], 40h
    mov     [rax+1], r11b
    mov     [rax+2], dx
    
loc_EC47:
    mov     eax, [rsp+0D8h+var_BC]
    mov     rbx, [rsp+0D8h+var_98]
    lea     rax, [rbx+rax*4]
    mov     rbx, [rsp+0D8h+var_C8]
    mov     [rbx], rax
    mov     rax, [rsp+0D8h+var_D0]
    mov     ebx, [rsp+0D8h+var_D4]
    mov     [rax], ebx
    xor     eax, eax
    jmp     loc_E323
    
loc_EC6E:
    mov     ebx, 6
    jmp     loc_E470
    
loc_EC78:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 4
    jz      loc_E360
    jmp     loc_EC04
    align 10h
    
loc_EC90:
    mov     ebx, 7
    jmp     loc_E470
    
loc_EC9A:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    jnz     loc_ED82
    cmp     word ptr [rsp+0D8h+var_88+4], 1
    mov     r15d, 3
    sbb     ebx, ebx
    not     ebx
    add     ebx, 3
    jmp     loc_E470
    
loc_ECBE:
    cmp     word ptr [rsp+0D8h+var_88+2], 1
    mov     r15d, 2
    sbb     ebx, ebx
    not     ebx
    add     ebx, 2
    jmp     loc_E470
    
loc_ECD6:
    mov     ebx, 8
    jmp     loc_E470
    
loc_ECE0:
    mov     r15d, 1
    mov     ebx, 1
    jmp     loc_E470
    
loc_ECF0:
    mov     ebx, 9
    jmp     loc_E470
    
loc_ECFA:
    mov     ebx, 0Ah
    jmp     loc_E470
    
loc_ED04:
    mov     ebx, 0Bh
    jmp     loc_E470
    
loc_ED0E:
    mov     ebx, 2
    jmp     loc_E470
    
loc_ED18:
    mov     ebx, 0Ch
    jmp     loc_E470
    
loc_ED22:
    mov     ebx, 0Dh
    jmp     loc_E470
    
loc_ED2C:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 8
    jz      loc_E360
    jmp     loc_EC04
    align 8
    
loc_ED48:
    mov     r15d, 0Eh
    mov     ebx, 1
    jmp     loc_E470
    
loc_ED58:
    mov     r15d, 0Eh
    mov     ebx, 2
    jmp     loc_E470
    
loc_ED68:
    mov     r15d, 0Eh
    mov     ebx, 0Eh
    jmp     loc_E470
    
loc_ED78:
    mov     eax, 0FFFFFFFFh
    jmp     loc_E323
    
loc_ED82:
    mov     r15d, 3
    jmp     loc_EC04
    
loc_ED8D:
    lea     rdi, lext_3971
    mov     [rsp+0D8h+var_C0], 101h
    mov     [rsp+0D8h+var_89], 1
    mov     [rsp+0D8h+var_8A], 0
    mov     r14d, edx
    mov     [rsp+0D8h+var_A8], rdi
    lea     rdi, lbase_3970
    mov     [rsp+0D8h+var_A0], rdi
    jmp     loc_E728
    
loc_EDBF:
    call    ___stack_chk_fail
    
loc_EDC4:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 6
    jz      loc_E360
    jmp     loc_EC04
    
loc_EDDB:
    cmp     word ptr [rsp+0D8h+var_88+2], 0
    mov     r15d, 5
    jz      loc_E360
    jmp     loc_EC04
    

<send_tree>:
    
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    movzx   r8d, word ptr [rsi+2]
    cmp     r8d, 1
    sbb     ebx, ebx
    add     ebx, 4
    cmp     r8d, 1
    sbb     ecx, ecx
    and     ecx, 83h
    add     ecx, 7
    test    edx, edx
    js      loc_F167
    movsxd  rdx, edx
    lea     r9, [rsi+6]
    mov     ebp, 0FFFFFFFFh
    lea     r11, [rsi+rdx*4+0Ah]
    mov     r10d, 10h
    xor     edx, edx
    jmp     loc_EF98
    align 10h
    
loc_EE50:
    cmp     esi, r8d
    jz      loc_F3E0
    cmp     eax, ebx
    mov     ecx, [rdi+1734h]
    movzx   r13d, word ptr [rdi+1730h]
    jge     loc_EFB5
    movsxd  rax, r8d
    lea     rbp, [rdi+rax*4]
    movzx   ebx, word ptr [rbp+0ABCh]
    movzx   eax, word ptr [rbp+0ABEh]
    mov     r12d, ebx
    shl     r12d, cl
    or      r12d, r13d
    mov     r13d, r10d
    sub     r13d, eax
    mov     [rdi+1730h], r12w
    cmp     r13d, ecx
    jl      loc_F238
    add     ecx, eax
    mov     [rdi+1734h], ecx
    
loc_EEAC:
    test    edx, edx
    jz      loc_EF68
    movzx   r13d, word ptr [rbp+0ABCh]
    movzx   ebx, word ptr [rbp+0ABEh]
    mov     eax, r13d
    shl     eax, cl
    or      eax, r12d
    mov     r12d, r10d
    sub     r12d, ebx
    mov     [rdi+1730h], ax
    cmp     r12d, ecx
    jl      loc_F370
    add     ecx, ebx
    mov     [rdi+1734h], ecx
    
loc_EEE9:
    cmp     edx, 1
    jz      short loc_EF68
    movzx   ebx, word ptr [rbp+0ABCh]
    movzx   edx, word ptr [rbp+0ABEh]
    mov     ebp, ebx
    shl     ebp, cl
    or      eax, ebp
    mov     ebp, r10d
    sub     ebp, edx
    mov     [rdi+1730h], ax
    cmp     ebp, ecx
    jge     loc_F3D0
    mov     rcx, [rdi+28h]
    mov     rbp, [rdi+10h]
    lea     r12, [rcx+1]
    mov     [rdi+28h], r12
    mov     [rbp+rcx+0], al
    mov     rax, [rdi+28h]
    movzx   ebp, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r12, [rax+1]
    mov     [rdi+28h], r12
    mov     [rcx+rax], bpl
    mov     ecx, r10d
    mov     ebp, [rdi+1734h]
    mov     eax, ebx
    sub     ecx, ebp
    sar     eax, cl
    mov     [rdi+1730h], ax
    lea     eax, [rbp+rdx-10h]
    mov     [rdi+1734h], eax
    nop     dword ptr [rax]
    
loc_EF68:
    test    esi, esi
    jz      loc_F148
    
loc_EF70:
    cmp     esi, r8d
    jz      loc_F220
    mov     ebp, r8d
    mov     ebx, 4
    mov     ecx, 7
    xor     edx, edx
    
loc_EF88:
    add     r9, 4
    mov     r8d, esi
    cmp     r11, r9
    jz      loc_F167
    
loc_EF98:
    lea     eax, [rdx+1]
    movzx   esi, word ptr [r9]
    cmp     eax, ecx
    jl      loc_EE50
    movzx   r13d, word ptr [rdi+1730h]
    mov     ecx, [rdi+1734h]
    
loc_EFB5:
    test    r8d, r8d
    mov     ebx, r13d
    jz      loc_F170
    cmp     r8d, ebp
    jz      loc_F053
    movsxd  rax, r8d
    lea     rax, [rdi+rax*4]
    movzx   ebp, word ptr [rax+0ABEh]
    movzx   eax, word ptr [rax+0ABCh]
    mov     r12d, eax
    shl     r12d, cl
    or      ebx, r12d
    mov     r12d, r10d
    sub     r12d, ebp
    mov     [rdi+1730h], bx
    cmp     r12d, ecx
    jge     loc_F3F0
    mov     rcx, [rdi+28h]
    mov     r12, [rdi+10h]
    lea     r13, [rcx+1]
    mov     [rdi+28h], r13
    mov     [r12+rcx], bl
    mov     rcx, [rdi+28h]
    movzx   r12d, byte ptr [rdi+1731h]
    mov     rbx, [rdi+10h]
    lea     r13, [rcx+1]
    mov     [rdi+28h], r13
    mov     [rbx+rcx], r12b
    mov     ecx, r10d
    mov     r12d, [rdi+1734h]
    sub     ecx, r12d
    sar     eax, cl
    lea     ecx, [r12+rbp-10h]
    mov     ebx, eax
    mov     [rdi+1730h], ax
    mov     eax, edx
    mov     [rdi+1734h], ecx
    
loc_F053:
    movzx   ebp, word ptr [rdi+0AFCh]
    movzx   edx, word ptr [rdi+0AFEh]
    mov     r12d, ebp
    shl     r12d, cl
    or      ebx, r12d
    mov     r12d, r10d
    sub     r12d, edx
    mov     [rdi+1730h], bx
    cmp     r12d, ecx
    jge     loc_F360
    mov     rcx, [rdi+28h]
    mov     r12, [rdi+10h]
    lea     r13, [rcx+1]
    mov     [rdi+28h], r13
    mov     [r12+rcx], bl
    mov     rcx, [rdi+28h]
    movzx   r12d, byte ptr [rdi+1731h]
    mov     rbx, [rdi+10h]
    lea     r13, [rcx+1]
    mov     [rdi+28h], r13
    mov     [rbx+rcx], r12b
    mov     ecx, r10d
    mov     r12d, [rdi+1734h]
    sub     ecx, r12d
    sar     ebp, cl
    lea     ecx, [r12+rdx-10h]
    mov     ebx, ebp
    mov     [rdi+1730h], bp
    mov     [rdi+1734h], ecx
    
loc_F0D3:
    sub     eax, 3
    cmp     ecx, 0Eh
    movzx   eax, ax
    jle     loc_F340
    mov     edx, eax
    shl     edx, cl
    mov     rcx, [rdi+10h]
    or      ebx, edx
    mov     rdx, [rdi+28h]
    mov     [rdi+1730h], bx
    lea     rbp, [rdx+1]
    mov     [rdi+28h], rbp
    mov     [rcx+rdx], bl
    mov     rdx, [rdi+28h]
    movzx   ebx, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     rbp, [rdx+1]
    mov     [rdi+28h], rbp
    mov     [rcx+rdx], bl
    mov     ecx, r10d
    mov     edx, [rdi+1734h]
    sub     ecx, edx
    sub     edx, 0Eh
    sar     eax, cl
    test    esi, esi
    mov     [rdi+1734h], edx
    mov     [rdi+1730h], ax
    jnz     loc_EF70
    nop     dword ptr [rax+00000000h]
    
loc_F148:
    add     r9, 4
    xor     edx, edx
    mov     ebp, r8d
    cmp     r11, r9
    mov     ebx, 3
    mov     ecx, 8Ah
    mov     r8d, esi
    jnz     loc_EF98
    
loc_F167:
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    
loc_F170:
    cmp     eax, 0Ah
    jg      loc_F298
    movzx   ebp, word ptr [rdi+0B00h]
    movzx   ebx, word ptr [rdi+0B02h]
    mov     r12d, ebp
    shl     r12d, cl
    or      r12d, r13d
    mov     r13d, r10d
    sub     r13d, ebx
    mov     [rdi+1730h], r12w
    cmp     r13d, ecx
    jl      loc_F488
    add     ecx, ebx
    cmp     ecx, 0Dh
    mov     [rdi+1734h], ecx
    jle     loc_F4E6
    
loc_F1B8:
    sub     edx, 2
    mov     rax, [rdi+28h]
    movzx   edx, dx
    mov     r13d, edx
    shl     r13d, cl
    mov     rcx, [rdi+10h]
    lea     rbx, [rax+1]
    or      r12d, r13d
    mov     [rdi+28h], rbx
    mov     [rdi+1730h], r12w
    mov     [rcx+rax], r12b
    mov     rax, [rdi+28h]
    movzx   ebx, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     rbp, [rax+1]
    mov     [rdi+28h], rbp
    mov     [rcx+rax], bl
    mov     ecx, r10d
    mov     eax, [rdi+1734h]
    sub     ecx, eax
    sub     eax, 0Dh
    sar     edx, cl
    mov     [rdi+1734h], eax
    mov     [rdi+1730h], dx
    jmp     loc_EF68
    align 20h
    
loc_F220:
    mov     ebp, esi
    mov     ebx, 3
    mov     ecx, 6
    xor     edx, edx
    jmp     loc_EF88
    align 8
    
loc_F238:
    mov     rcx, [rdi+28h]
    mov     r13, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r13+rcx+0], r12b
    mov     rcx, [rdi+28h]
    movzx   r13d, byte ptr [rdi+1731h]
    mov     r12, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r12+rcx], r13b
    mov     ecx, r10d
    mov     r13d, [rdi+1734h]
    sub     ecx, r13d
    sar     ebx, cl
    lea     ecx, [r13+rax-10h]
    mov     r12d, ebx
    mov     [rdi+1730h], bx
    mov     [rdi+1734h], ecx
    jmp     loc_EEAC
    align 8
    
loc_F298:
    movzx   ebp, word ptr [rdi+0B04h]
    movzx   ebx, word ptr [rdi+0B06h]
    mov     r12d, ebp
    shl     r12d, cl
    or      r12d, r13d
    mov     r13d, r10d
    sub     r13d, ebx
    mov     [rdi+1730h], r12w
    cmp     r13d, ecx
    jl      loc_F400
    add     ecx, ebx
    cmp     ecx, 9
    mov     [rdi+1734h], ecx
    jle     loc_F45E
    
loc_F2D7:
    sub     edx, 0Ah
    mov     rax, [rdi+28h]
    movzx   edx, dx
    mov     r13d, edx
    shl     r13d, cl
    mov     rcx, [rdi+10h]
    lea     rbx, [rax+1]
    or      r12d, r13d
    mov     [rdi+28h], rbx
    mov     [rdi+1730h], r12w
    mov     [rcx+rax], r12b
    mov     rax, [rdi+28h]
    movzx   ebx, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     rbp, [rax+1]
    mov     [rdi+28h], rbp
    mov     [rcx+rax], bl
    mov     ecx, r10d
    mov     eax, [rdi+1734h]
    sub     ecx, eax
    sub     eax, 9
    sar     edx, cl
    mov     [rdi+1734h], eax
    mov     [rdi+1730h], dx
    jmp     loc_EF68
    align 20h
    
loc_F340:
    shl     eax, cl
    add     ecx, 2
    or      ebx, eax
    mov     [rdi+1734h], ecx
    mov     [rdi+1730h], bx
    jmp     loc_EF68
    align 20h
    
loc_F360:
    add     ecx, edx
    mov     [rdi+1734h], ecx
    jmp     loc_F0D3
    align 10h
    
loc_F370:
    mov     rcx, [rdi+28h]
    mov     r12, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r12+rcx], al
    mov     rax, [rdi+28h]
    movzx   r12d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r14, [rax+1]
    mov     [rdi+28h], r14
    mov     [rcx+rax], r12b
    mov     ecx, r10d
    mov     r12d, [rdi+1734h]
    sub     ecx, r12d
    sar     r13d, cl
    lea     ecx, [r12+rbx-10h]
    mov     eax, r13d
    mov     [rdi+1730h], r13w
    mov     [rdi+1734h], ecx
    jmp     loc_EEE9
    align 10h
    
loc_F3D0:
    add     ecx, edx
    mov     [rdi+1734h], ecx
    jmp     loc_EF68
    align 20h
    
loc_F3E0:
    mov     edx, eax
    jmp     loc_EF88
    align 10h
    
loc_F3F0:
    add     ecx, ebp
    mov     eax, edx
    mov     [rdi+1734h], ecx
    jmp     loc_F053
    align 20h
    
loc_F400:
    mov     rcx, [rdi+28h]
    mov     r13, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r13+rcx+0], r12b
    mov     rcx, [rdi+28h]
    movzx   r13d, byte ptr [rdi+1731h]
    mov     r12, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r12+rcx], r13b
    mov     ecx, r10d
    mov     r13d, [rdi+1734h]
    sub     ecx, r13d
    sar     ebp, cl
    lea     ecx, [r13+rbx-10h]
    mov     r12d, ebp
    mov     [rdi+1730h], bp
    cmp     ecx, 9
    mov     [rdi+1734h], ecx
    jg      loc_F2D7
    
loc_F45E:
    sub     eax, 0Bh
    movzx   r13d, ax
    shl     r13d, cl
    add     ecx, 7
    or      r12d, r13d
    mov     [rdi+1734h], ecx
    mov     [rdi+1730h], r12w
    jmp     loc_EF68
    align 8
    
loc_F488:
    mov     rcx, [rdi+28h]
    mov     r13, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r13+rcx+0], r12b
    mov     rcx, [rdi+28h]
    movzx   r13d, byte ptr [rdi+1731h]
    mov     r12, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r12+rcx], r13b
    mov     ecx, r10d
    mov     r13d, [rdi+1734h]
    sub     ecx, r13d
    sar     ebp, cl
    lea     ecx, [r13+rbx-10h]
    mov     r12d, ebp
    mov     [rdi+1730h], bp
    cmp     ecx, 0Dh
    mov     [rdi+1734h], ecx
    jg      loc_F1B8
    
loc_F4E6:
    sub     eax, 3
    movzx   r13d, ax
    shl     r13d, cl
    add     ecx, 3
    or      r12d, r13d
    mov     [rdi+1734h], ecx
    mov     [rdi+1730h], r12w
    jmp     loc_EF68
    

<compress_block>:
    
    mov     r8d, [rdi+170Ch]
    push    r15
    mov     ecx, [rdi+1734h]
    push    r14
    movzx   eax, word ptr [rdi+1730h]
    push    r13
    test    r8d, r8d
    push    r12
    push    rbp
    push    rbx
    jz      loc_F860
    xor     r11d, r11d
    lea     r13, _length_code
    mov     ebx, 10h
    jmp     loc_F5E1
    align 10h
    
loc_F550:
    lea     r8, [rsi+r9*4]
    mov     ebp, ebx
    movzx   r9d, word ptr [r8]
    movzx   r10d, word ptr [r8+2]
    mov     r8d, r9d
    sub     ebp, r10d
    shl     r8d, cl
    or      r8d, eax
    cmp     ebp, ecx
    mov     eax, r8d
    mov     [rdi+1730h], r8w
    jge     loc_F8B0
    mov     rcx, [rdi+28h]
    mov     r8, [rdi+10h]
    lea     rbp, [rcx+1]
    mov     [rdi+28h], rbp
    mov     [r8+rcx], al
    mov     rax, [rdi+28h]
    movzx   r8d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     rbp, [rax+1]
    mov     [rdi+28h], rbp
    mov     [rcx+rax], r8b
    mov     ecx, ebx
    mov     ebp, [rdi+1734h]
    sub     ecx, ebp
    
loc_F5B8:
    sar     r9d, cl
    lea     ecx, [r10+rbp-10h]
    mov     r8d, r9d
    mov     eax, r9d
    mov     [rdi+1730h], r9w
    mov     [rdi+1734h], ecx
    
loc_F5D4:
    cmp     [rdi+170Ch], r11d
    jbe     loc_F863
    
loc_F5E1:
    mov     r8, [rdi+1710h]
    mov     r9d, r11d
    mov     r10, [rdi+1700h]
    add     r11d, 1
    movzx   r8d, word ptr [r8+r9*2]
    movzx   r9d, byte ptr [r10+r9]
    test    r8d, r8d
    jz      loc_F550
    movsxd  r10, r9d
    movzx   r10d, byte ptr [r13+r10+0]
    lea     ebp, [r10+101h]
    lea     r12, [rsi+rbp*4]
    movzx   ebp, word ptr [r12+2]
    movzx   r12d, word ptr [r12]
    mov     r14d, r12d
    shl     r14d, cl
    or      eax, r14d
    mov     r14d, ebx
    sub     r14d, ebp
    mov     [rdi+1730h], ax
    cmp     r14d, ecx
    jge     loc_F8C0
    mov     rcx, [rdi+28h]
    mov     r14, [rdi+10h]
    lea     r15, [rcx+1]
    mov     [rdi+28h], r15
    mov     [r14+rcx], al
    mov     rax, [rdi+28h]
    movzx   r14d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r15, [rax+1]
    mov     [rdi+28h], r15
    mov     [rcx+rax], r14b
    mov     ecx, ebx
    mov     r14d, [rdi+1734h]
    sub     ecx, r14d
    sar     r12d, cl
    lea     ecx, [r14+rbp-10h]
    mov     eax, r12d
    mov     [rdi+1730h], r12w
    mov     [rdi+1734h], ecx
    
loc_F69C:
    lea     r15, extra_lbits
    mov     ebp, [r15+r10*4]
    test    ebp, ebp
    jz      loc_F730
    lea     r15, base_length
    sub     r9d, [r15+r10*4]
    movzx   r9d, r9w
    mov     r10d, r9d
    shl     r10d, cl
    or      eax, r10d
    mov     r10d, ebx
    sub     r10d, ebp
    mov     [rdi+1730h], ax
    cmp     r10d, ecx
    jge     loc_F910
    mov     rcx, [rdi+28h]
    mov     r10, [rdi+10h]
    lea     r12, [rcx+1]
    mov     [rdi+28h], r12
    mov     [r10+rcx], al
    mov     rax, [rdi+28h]
    movzx   r10d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r12, [rax+1]
    mov     [rdi+28h], r12
    mov     [rcx+rax], r10b
    mov     ecx, ebx
    mov     r10d, [rdi+1734h]
    mov     eax, r9d
    sub     ecx, r10d
    sar     eax, cl
    lea     ecx, [r10+rbp-10h]
    mov     [rdi+1730h], ax
    mov     [rdi+1734h], ecx
    
loc_F730:
    lea     r9d, [r8-1]
    cmp     r9d, 0FFh
    ja      loc_F8E0
    lea     r15, _dist_code
    mov     r8d, r9d
    movzx   r10d, byte ptr [r15+r8]
    
loc_F750:
    lea     r8, [rdx+r10*4]
    movzx   ebp, word ptr [r8+2]
    movzx   r8d, word ptr [r8]
    mov     r12d, r8d
    shl     r12d, cl
    or      eax, r12d
    mov     r12d, ebx
    sub     r12d, ebp
    mov     [rdi+1730h], ax
    cmp     r12d, ecx
    jge     loc_F8D0
    mov     rcx, [rdi+28h]
    mov     r12, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r12+rcx], al
    mov     rax, [rdi+28h]
    movzx   r12d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r14, [rax+1]
    mov     [rdi+28h], r14
    mov     [rcx+rax], r12b
    mov     ecx, ebx
    mov     r12d, [rdi+1734h]
    sub     ecx, r12d
    sar     r8d, cl
    lea     ecx, [r12+rbp-10h]
    mov     eax, r8d
    mov     [rdi+1730h], r8w
    mov     [rdi+1734h], ecx
    
loc_F7D1:
    lea     r15, extra_dbits
    mov     r8d, eax
    mov     ebp, [r15+r10*4]
    test    ebp, ebp
    jz      loc_F5D4
    lea     r15, base_dist
    sub     r9d, [r15+r10*4]
    mov     r10d, ebx
    sub     r10d, ebp
    movzx   r9d, r9w
    mov     r8d, r9d
    shl     r8d, cl
    or      r8d, eax
    cmp     r10d, ecx
    mov     eax, r8d
    mov     [rdi+1730h], r8w
    jge     loc_F900
    mov     rcx, [rdi+28h]
    mov     r8, [rdi+10h]
    lea     r10, [rcx+1]
    mov     [rdi+28h], r10
    mov     [r8+rcx], al
    mov     rax, [rdi+28h]
    movzx   r8d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r10, [rax+1]
    mov     [rdi+28h], r10
    mov     [rcx+rax], r8b
    mov     ecx, ebx
    mov     r10d, [rdi+1734h]
    sub     ecx, r10d
    jmp     loc_F5B8
    align 20h
    
loc_F860:
    mov     r8d, eax
    
loc_F863:
    movzx   eax, word ptr [rsi+400h]
    movzx   r10d, word ptr [rsi+402h]
    mov     edx, 10h
    mov     esi, edx
    mov     r9d, eax
    sub     esi, r10d
    shl     r9d, cl
    or      r8d, r9d
    cmp     esi, ecx
    mov     [rdi+1730h], r8w
    jl      loc_F920
    add     ecx, r10d
    pop     rbx
    mov     [rdi+1734h], ecx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_F8B0:
    add     ecx, r10d
    mov     [rdi+1734h], ecx
    jmp     loc_F5D4
    align 20h
    
loc_F8C0:
    add     ecx, ebp
    mov     [rdi+1734h], ecx
    jmp     loc_F69C
    align 10h
    
loc_F8D0:
    add     ecx, ebp
    mov     [rdi+1734h], ecx
    jmp     loc_F7D1
    align 20h
    
loc_F8E0:
    mov     r8d, r9d
    lea     r15, _dist_code
    shr     r8d, 7
    add     r8d, 100h
    movzx   r10d, byte ptr [r15+r8]
    jmp     loc_F750
    align 20h
    
loc_F900:
    add     ecx, ebp
    mov     [rdi+1734h], ecx
    jmp     loc_F5D4
    align 10h
    
loc_F910:
    add     ecx, ebp
    mov     [rdi+1734h], ecx
    jmp     loc_F730
    align 20h
    
loc_F920:
    mov     rcx, [rdi+28h]
    mov     rsi, [rdi+10h]
    lea     r9, [rcx+1]
    mov     [rdi+28h], r9
    mov     [rsi+rcx], r8b
    mov     rcx, [rdi+28h]
    movzx   r8d, byte ptr [rdi+1731h]
    mov     rsi, [rdi+10h]
    lea     r9, [rcx+1]
    mov     [rdi+28h], r9
    mov     [rsi+rcx], r8b
    mov     esi, [rdi+1734h]
    pop     rbx
    pop     rbp
    sub     edx, esi
    mov     ecx, edx
    sar     eax, cl
    mov     [rdi+1730h], ax
    lea     eax, [rsi+r10-10h]
    pop     r12
    mov     [rdi+1734h], eax
    pop     r13
    pop     r14
    pop     r15
    retn
    

<build_tree>:
    
    var_B0= qword ptr -0B0h
    var_A8= qword ptr -0A8h
    var_A0= qword ptr -0A0h
    var_94= dword ptr -94h
    var_90= qword ptr -90h
    var_88= qword ptr -88h
    var_80= qword ptr -80h
    var_78= dword ptr -78h
    var_74= dword ptr -74h
    var_70= qword ptr -70h
    var_68= word ptr -68h
    var_66= word ptr -66h
    var_64= word ptr -64h
    var_62= word ptr -62h
    var_60= word ptr -60h
    var_5E= word ptr -5Eh
    var_5C= word ptr -5Ch
    var_5A= word ptr -5Ah
    var_58= word ptr -58h
    var_56= word ptr -56h
    var_54= word ptr -54h
    var_52= word ptr -52h
    var_50= word ptr -50h
    var_4E= word ptr -4Eh
    var_4C= word ptr -4Ch
    var_4A= word ptr -4Ah
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 88h
    mov     rax, [rsi+10h]
    mov     r15, [rsi]
    mov     [rsp+0B8h+var_70], rsi
    mov     rbx, fs:28h
    mov     [rsp+0B8h+var_40], rbx
    xor     ebx, ebx
    mov     rsi, [rax]
    mov     eax, [rax+14h]
    mov     rbx, 23D00000000h
    mov     [rdi+14B4h], rbx
    test    eax, eax
    mov     dword ptr [rsp+0B8h+var_A8], eax
    jle     loc_104E5
    lea     edx, [rax-1]
    xor     ecx, ecx
    xor     eax, eax
    mov     r8d, 0FFFFFFFFh
    add     rdx, 1
    jmp     short loc_FA10
    align 8
    
loc_F9E8:
    add     ecx, 1
    movsxd  r8, ecx
    mov     [rdi+14B4h], ecx
    mov     [rdi+r8*4+0BC0h], eax
    mov     byte ptr [rdi+rax+14BCh], 0
    mov     r8d, eax
    add     rax, 1
    cmp     rax, rdx
    jz      short loc_FA29
    
loc_FA10:
    cmp     word ptr [r15+rax*4], 0
    jnz     short loc_F9E8
    xor     ebx, ebx
    mov     [r15+rax*4+2], bx
    add     rax, 1
    cmp     rax, rdx
    jnz     short loc_FA10
    
loc_FA29:
    mov     [rsp+0B8h+var_74], r8d
    
loc_FA2E:
    lea     eax, [rcx+1]
    movsxd  rdx, ecx
    cdqe
    sub     rax, rdx
    test    rsi, rsi
    jz      loc_103E0
    lea     r9, [rdi+rax*4]
    mov     r8d, [rsp+0B8h+var_74]
    jmp     short loc_FA94
    align 10h
    
loc_FA50:
    mov     r11, r15
    xor     ecx, ecx
    xor     eax, eax
    
loc_FA57:
    lea     r10d, [rdx+1]
    mov     [rdi+14B4h], r10d
    mov     r10d, 1
    mov     [r9+rdx*4+0BC0h], eax
    mov     [r11], r10w
    mov     byte ptr [rdi+rax+14BCh], 0
    add     rdx, 1
    movzx   eax, word ptr [rsi+rcx+2]
    sub     qword ptr [rdi+1718h], 1
    sub     [rdi+1720h], rax
    
loc_FA94:
    cmp     edx, 1
    mov     eax, edx
    jg      short loc_FAB8
    cmp     r8d, 1
    jg      short loc_FA50
    add     r8d, 1
    movsxd  rcx, r8d
    movsxd  rax, r8d
    shl     rcx, 2
    lea     r11, [r15+rcx]
    jmp     short loc_FA57
    align 8
    
loc_FAB8:
    mov     [rsp+0B8h+var_74], r8d
    mov     esi, r8d
    
loc_FAC0:
    mov     rbx, [rsp+0B8h+var_70]
    mov     edx, eax
    sar     edx, 1
    movsxd  r14, edx
    mov     [rbx+8], esi
    lea     ebx, [rdx+rdx]
    mov     dword ptr [rsp+0B8h+var_B0], ebx
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_FAE0:
    mov     ebx, dword ptr [rsp+0B8h+var_B0]
    mov     edx, [rdi+r14*4+0BC0h]
    movsxd  rsi, r14d
    cmp     ebx, eax
    mov     dword ptr [rsp+0B8h+var_A0], edx
    mov     ecx, ebx
    jg      loc_FB80
    movsxd  r13, edx
    movzx   ebp, word ptr [r15+r13*4]
    jmp     short loc_FB22
    align 10h
    
loc_FB10:
    lea     ecx, [rdx+rdx]
    mov     [rdi+rsi*4+0BC0h], r11d
    movsxd  rsi, edx
    cmp     ecx, eax
    jg      short loc_FB80
    
loc_FB22:
    movsxd  rdx, ecx
    cmp     ecx, eax
    lea     r9, [rdi+rdx*4]
    mov     edx, ecx
    movsxd  r10, dword ptr [r9+0BC0h]
    mov     r11, r10
    movzx   r8d, word ptr [r15+r10*4]
    jge     short loc_FB60
    movsxd  r12, dword ptr [r9+0BC4h]
    add     edx, 1
    movzx   ebx, word ptr [r15+r12*4]
    cmp     bx, r8w
    jb      loc_FE20
    jz      loc_FE70
    mov     edx, ecx
    nop
    
loc_FB60:
    cmp     bp, r8w
    jb      short loc_FB80
    jnz     short loc_FB10
    movsxd  rcx, r11d
    movzx   ebx, byte ptr [rdi+rcx+14BCh]
    cmp     [rdi+r13+14BCh], bl
    ja      short loc_FB10
    nop     dword ptr [rax]
    
loc_FB80:
    sub     r14, 1
    sub     dword ptr [rsp+0B8h+var_B0], 2
    mov     ebx, dword ptr [rsp+0B8h+var_A0]
    mov     [rdi+rsi*4+0BC0h], ebx
    jnz     loc_FAE0
    mov     edx, [rdi+14B8h]
    movsxd  rsi, eax
    shl     rsi, 2
    lea     ecx, [rdx-2]
    sub     edx, 1
    movsxd  rdx, edx
    movsxd  r14, ecx
    movsxd  rcx, dword ptr [rsp+0B8h+var_A8]
    shl     rdx, 2
    lea     rbx, ds:0[rcx*4]
    mov     [rsp+0B8h+var_A0], rbx
    lea     rbx, [rdi+rcx+14BCh]
    mov     rcx, r14
    neg     rcx
    lea     rsi, [rsi+rcx*2]
    mov     [rsp+0B8h+var_B0], rbx
    lea     rdx, [rdx+rcx*4]
    lea     rbx, [rdi+rsi]
    mov     [rsp+0B8h+var_88], rbx
    lea     rbx, [rdi+rdx]
    mov     [rsp+0B8h+var_80], rbx
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_FC00:
    lea     ebx, [r14+2]
    sub     eax, 1
    cmp     eax, 1
    mov     [rsp+0B8h+var_78], ebx
    mov     ebx, [rdi+0BC4h]
    mov     dword ptr [rsp+0B8h+var_90], ebx
    mov     rbx, [rsp+0B8h+var_88]
    mov     ebx, [rbx+r14*2+0BC0h]
    mov     [rsp+0B8h+var_94], ebx
    mov     [rdi+0BC4h], ebx
    jz      loc_103D6
    movsxd  r13, ebx
    mov     esi, 1
    mov     ecx, 2
    movzx   ebp, word ptr [r15+r13*4]
    jmp     short loc_FC62
    align 10h
    
loc_FC50:
    lea     ecx, [rdx+rdx]
    mov     [rdi+rsi*4+0BC0h], r11d
    movsxd  rsi, edx
    cmp     eax, ecx
    jl      short loc_FCC0
    
loc_FC62:
    movsxd  rdx, ecx
    cmp     eax, ecx
    lea     r9, [rdi+rdx*4]
    mov     edx, ecx
    movsxd  r10, dword ptr [r9+0BC0h]
    mov     r11, r10
    movzx   r8d, word ptr [r15+r10*4]
    jle     short loc_FCA0
    movsxd  r12, dword ptr [r9+0BC4h]
    add     edx, 1
    movzx   ebx, word ptr [r15+r12*4]
    cmp     bx, r8w
    jb      loc_FE10
    jz      loc_FE30
    mov     edx, ecx
    nop
    
loc_FCA0:
    cmp     bp, r8w
    jb      short loc_FCC0
    jnz     short loc_FC50
    movsxd  rcx, r11d
    movzx   ebx, byte ptr [rdi+rcx+14BCh]
    cmp     [rdi+r13+14BCh], bl
    ja      short loc_FC50
    nop     dword ptr [rax]
    
loc_FCC0:
    mov     ebx, [rsp+0B8h+var_94]
    movsxd  rdx, dword ptr [rsp+0B8h+var_90]
    movsxd  r8, r14d
    mov     rbp, [rsp+0B8h+var_A0]
    mov     [rdi+rsi*4+0BC0h], ebx
    movsxd  r9, dword ptr [rdi+0BC4h]
    mov     rsi, [rsp+0B8h+var_80]
    lea     rcx, [r15+rdx*4]
    mov     rbx, [rsp+0B8h+var_B0]
    mov     [rsi+r14*4+0BC0h], edx
    lea     rsi, [r15+r9*4]
    mov     [rdi+14B8h], r14d
    mov     [rdi+r14*4+0BC0h], r9d
    movzx   r10d, word ptr [rsi]
    add     r10w, [rcx]
    mov     [r15+rbp], r10w
    movzx   r10d, byte ptr [rdi+rdx+14BCh]
    movzx   r9d, byte ptr [rdi+r9+14BCh]
    lea     r11d, [r10+1]
    lea     edx, [r9+1]
    cmp     r10b, r9b
    cmovnb  edx, r11d
    cmp     eax, 1
    mov     [rbx], dl
    mov     ebx, dword ptr [rsp+0B8h+var_A8]
    mov     [rsi+2], bx
    lea     r13d, [rbx+1]
    mov     [rcx+2], bx
    mov     [rdi+0BC4h], ebx
    jz      loc_FE8D
    movzx   ebp, word ptr [r15+rbp]
    mov     esi, 1
    mov     ecx, 2
    jmp     short loc_FD82
    align 10h
    
loc_FD70:
    lea     ecx, [rdx+rdx]
    mov     [rdi+rsi*4+0BC0h], r8d
    movsxd  rsi, edx
    cmp     eax, ecx
    jl      short loc_FDE0
    
loc_FD82:
    movsxd  rdx, ecx
    cmp     eax, ecx
    lea     r11, [rdi+rdx*4]
    mov     edx, ecx
    movsxd  r10, dword ptr [r11+0BC0h]
    mov     r8, r10
    movzx   r9d, word ptr [r15+r10*4]
    jle     short loc_FDC0
    movsxd  r12, dword ptr [r11+0BC4h]
    add     edx, 1
    movzx   ebx, word ptr [r15+r12*4]
    cmp     bx, r9w
    jb      short loc_FE08
    jz      loc_FE50
    mov     edx, ecx
    nop     dword ptr [rax+rax+00h]
    
loc_FDC0:
    cmp     bp, r9w
    jb      short loc_FDE0
    jnz     short loc_FD70
    mov     rbx, [rsp+0B8h+var_B0]
    movsxd  rcx, r8d
    movzx   ecx, byte ptr [rdi+rcx+14BCh]
    cmp     [rbx], cl
    ja      short loc_FD70
    nop     dword ptr [rax+00h]
    
loc_FDE0:
    mov     ebx, dword ptr [rsp+0B8h+var_A8]
    sub     r14, 2
    add     [rsp+0B8h+var_A0], 4
    add     [rsp+0B8h+var_B0], 1
    mov     dword ptr [rsp+0B8h+var_A8], r13d
    mov     [rdi+rsi*4+0BC0h], ebx
    jmp     loc_FC00
    align 8
    
loc_FE08:
    mov     r9d, ebx
    mov     r8d, r12d
    jmp     short loc_FDC0
    
loc_FE10:
    mov     r8d, ebx
    mov     r11d, r12d
    jmp     loc_FCA0
    align 20h
    
loc_FE20:
    mov     r8d, ebx
    mov     r11d, r12d
    jmp     loc_FB60
    align 10h
    
loc_FE30:
    movzx   ebx, byte ptr [rdi+r12+14BCh]
    cmp     bl, [rdi+r10+14BCh]
    cmova   edx, ecx
    cmovbe  r11d, r12d
    jmp     loc_FCA0
    align 10h
    
loc_FE50:
    movzx   ebx, byte ptr [rdi+r12+14BCh]
    cmp     bl, [rdi+r10+14BCh]
    cmova   edx, ecx
    cmovbe  r8d, r12d
    jmp     loc_FDC0
    align 10h
    
loc_FE70:
    movzx   ebx, byte ptr [rdi+r12+14BCh]
    cmp     bl, [rdi+r10+14BCh]
    cmova   edx, ecx
    cmovbe  r11d, r12d
    jmp     loc_FB60
    
loc_FE8D:
    mov     eax, [rsp+0B8h+var_78]
    mov     dword ptr [rdi+14B4h], 1
    xor     r9d, r9d
    pxor    xmm0, xmm0
    sub     eax, 3
    cmp     r8d, 23Ch
    mov     [rdi+14B8h], eax
    cdqe
    mov     [rdi+rax*4+0BC0h], ebx
    mov     rax, [rsp+0B8h+var_70]
    mov     rcx, [rax]
    mov     esi, [rax+8]
    mov     rax, [rax+10h]
    mov     rbx, [rax+8]
    mov     rbp, [rax]
    mov     edx, [rax+18h]
    mov     [rsp+0B8h+var_A8], rbx
    mov     ebx, [rax+10h]
    mov     rax, [rsp+0B8h+var_A0]
    movups  xmmword ptr [rdi+0BA0h], xmm0
    movups  xmmword ptr [rdi+0BB0h], xmm0
    mov     [rcx+rax+2], r9w
    jg      loc_101D0
    test    rbp, rbp
    jz      loc_1044A
    mov     eax, 23Ch
    lea     r10, [rdi+r8*4]
    xor     r12d, r12d
    sub     eax, r14d
    add     rax, r8
    lea     r14, [rdi+rax*4+4]
    nop     dword ptr [rax+rax+00h]
    
loc_FF20:
    movsxd  r9, dword ptr [r10+0BC0h]
    mov     r8, r9
    shl     r9, 2
    lea     r11, [rcx+r9]
    movzx   eax, word ptr [r11+2]
    movzx   eax, word ptr [rcx+rax*4+2]
    add     eax, 1
    cmp     edx, eax
    jge     short loc_FF49
    add     r12d, 1
    mov     eax, edx
    
loc_FF49:
    cmp     esi, r8d
    mov     [r11+2], ax
    jl      short loc_FFBA
    movsxd  r13, eax
    add     word ptr [rdi+r13*2+0BA0h], 1
    xor     r13d, r13d
    cmp     ebx, r8d
    jg      short loc_FF7B
    mov     r13, [rsp+0B8h+var_A8]
    sub     r8d, ebx
    movsxd  r8, r8d
    mov     r13d, [r13+r8*4+0]
    add     eax, r13d
    
loc_FF7B:
    movzx   r8d, word ptr [r11]
    mov     eax, eax
    movdqu  xmm1, xmmword ptr [rdi+1718h]
    imul    rax, r8
    mov     [rsp+0B8h+var_B0], rax
    movzx   eax, word ptr [rbp+r9+2]
    movq    xmm0, [rsp+0B8h+var_B0]
    add     eax, r13d
    imul    r8, rax
    mov     [rsp+0B8h+var_B0], r8
    movhps  xmm0, [rsp+0B8h+var_B0]
    paddq   xmm0, xmm1
    movups  xmmword ptr [rdi+1718h], xmm0
    
loc_FFBA:
    add     r10, 4
    cmp     r14, r10
    jnz     loc_FF20
    
loc_FFC7:
    test    r12d, r12d
    jz      loc_101D0
    lea     ebx, [rdx-3]
    lea     r13d, [r12-2]
    sub     r12d, 1
    and     r12d, 0FFFFFFFEh
    lea     ebp, [rdx-1]
    lea     r14d, [rdx-2]
    mov     dword ptr [rsp+0B8h+var_B0], ebx
    lea     ebx, [rdx-4]
    mov     eax, r13d
    sub     eax, r12d
    mov     [rsp+0B8h+var_90], rcx
    movsxd  r12, edx
    mov     dword ptr [rsp+0B8h+var_A8], ebx
    lea     ebx, [rdx-5]
    mov     ecx, eax
    mov     dword ptr [rsp+0B8h+var_A0], ebx
    lea     ebx, [rdx-6]
    mov     [rsp+0B8h+var_94], ebx
    
loc_10010:
    lea     r8, [rdi+r12*2]
    mov     rbx, r12
    movzx   eax, word ptr [r8+0B9Eh]
    test    ax, ax
    jnz     loc_10343
    movzx   eax, word ptr [r8+0B9Ch]
    mov     r9d, r14d
    mov     r10d, ebp
    test    ax, ax
    jnz     loc_10188
    movzx   eax, word ptr [r8+0B9Ah]
    mov     r9d, dword ptr [rsp+0B8h+var_B0]
    mov     r10d, r14d
    test    ax, ax
    jnz     loc_10188
    movzx   eax, word ptr [r8+0B98h]
    mov     r9d, dword ptr [rsp+0B8h+var_A8]
    mov     r10d, dword ptr [rsp+0B8h+var_B0]
    test    ax, ax
    jnz     loc_10188
    movzx   eax, word ptr [r8+0B96h]
    mov     r9d, dword ptr [rsp+0B8h+var_A0]
    mov     r10d, dword ptr [rsp+0B8h+var_A8]
    test    ax, ax
    jnz     loc_10188
    movzx   eax, word ptr [r8+0B94h]
    mov     r9d, [rsp+0B8h+var_94]
    mov     r10d, dword ptr [rsp+0B8h+var_A0]
    test    ax, ax
    jnz     loc_10188
    movzx   eax, word ptr [r8+0B92h]
    lea     r10d, [rdx-7]
    mov     r9d, r10d
    test    ax, ax
    jnz     loc_104DB
    movzx   eax, word ptr [r8+0B90h]
    lea     r11d, [rdx-8]
    mov     r9d, r11d
    test    ax, ax
    jnz     loc_10188
    movzx   eax, word ptr [r8+0B8Eh]
    lea     r10d, [rdx-9]
    mov     r9d, r10d
    test    ax, ax
    jnz     loc_103C8
    movzx   eax, word ptr [r8+0B8Ch]
    lea     r11d, [rdx-0Ah]
    mov     r9d, r11d
    test    ax, ax
    jnz     loc_10188
    movzx   eax, word ptr [r8+0B8Ah]
    lea     r10d, [rdx-0Bh]
    mov     r9d, r10d
    test    ax, ax
    jnz     loc_103C8
    movzx   eax, word ptr [r8+0B88h]
    lea     r11d, [rdx-0Ch]
    mov     r9d, r11d
    test    ax, ax
    jnz     short loc_10188
    movzx   eax, word ptr [r8+0B86h]
    lea     r10d, [rdx-0Dh]
    mov     r9d, r10d
    test    ax, ax
    jnz     loc_103C8
    movzx   eax, word ptr [r8+0B84h]
    lea     r11d, [rdx-0Eh]
    mov     r9d, r11d
    test    ax, ax
    jnz     short loc_10188
    movzx   eax, word ptr [r8+0B82h]
    lea     r10d, [rdx-0Fh]
    mov     r9d, r10d
    test    ax, ax
    jnz     loc_103C8
    movzx   eax, word ptr [r8+0B80h]
    lea     r9d, [rdx-10h]
    nop     dword ptr [rax]
    
loc_10188:
    sub     eax, 1
    movsxd  r9, r9d
    movsxd  r10, r10d
    mov     [rdi+r9*2+0BA0h], ax
    add     word ptr [rdi+r10*2+0BA0h], 2
    sub     word ptr [r8+0BA0h], 1
    cmp     ecx, r13d
    jz      short loc_101BB
    sub     r13d, 2
    jmp     loc_10010
    
loc_101BB:
    test    edx, edx
    mov     rcx, [rsp+0B8h+var_90]
    jnz     loc_1034E
    nop     dword ptr [rax+rax+00000000h]
    
loc_101D0:
    movzx   eax, word ptr [rdi+0BA0h]
    lea     edx, [rax+rax]
    movzx   eax, word ptr [rdi+0BA2h]
    mov     [rsp+0B8h+var_66], dx
    add     eax, edx
    movzx   edx, word ptr [rdi+0BA4h]
    add     eax, eax
    mov     [rsp+0B8h+var_64], ax
    add     edx, eax
    lea     eax, [rdx+rdx]
    movzx   edx, word ptr [rdi+0BA6h]
    mov     [rsp+0B8h+var_62], ax
    add     edx, eax
    movzx   eax, word ptr [rdi+0BA8h]
    add     edx, edx
    mov     [rsp+0B8h+var_60], dx
    add     eax, edx
    lea     edx, [rax+rax]
    movzx   eax, word ptr [rdi+0BAAh]
    mov     [rsp+0B8h+var_5E], dx
    add     eax, edx
    movzx   edx, word ptr [rdi+0BACh]
    add     eax, eax
    mov     [rsp+0B8h+var_5C], ax
    add     edx, eax
    lea     eax, [rdx+rdx]
    movzx   edx, word ptr [rdi+0BAEh]
    mov     [rsp+0B8h+var_5A], ax
    add     edx, eax
    movzx   eax, word ptr [rdi+0BB0h]
    add     edx, edx
    mov     [rsp+0B8h+var_58], dx
    add     eax, edx
    lea     edx, [rax+rax]
    movzx   eax, word ptr [rdi+0BB2h]
    mov     [rsp+0B8h+var_56], dx
    add     eax, edx
    movzx   edx, word ptr [rdi+0BB4h]
    add     eax, eax
    mov     [rsp+0B8h+var_54], ax
    add     edx, eax
    lea     eax, [rdx+rdx]
    movzx   edx, word ptr [rdi+0BB6h]
    mov     [rsp+0B8h+var_52], ax
    add     edx, eax
    movzx   eax, word ptr [rdi+0BB8h]
    add     edx, edx
    mov     [rsp+0B8h+var_50], dx
    add     eax, edx
    lea     edx, [rax+rax]
    movzx   eax, word ptr [rdi+0BBAh]
    mov     [rsp+0B8h+var_4E], dx
    add     eax, edx
    movzx   edx, word ptr [rdi+0BBCh]
    add     eax, eax
    mov     [rsp+0B8h+var_4C], ax
    add     eax, edx
    add     eax, eax
    mov     [rsp+0B8h+var_4A], ax
    movsxd  rax, [rsp+0B8h+var_74]
    cmp     eax, 0FFFFFFFFh
    jz      loc_1031D
    lea     r8, [r15+rax*4+4]
    mov     rdi, r15
    nop     dword ptr [rax+rax+00h]
    
loc_102E0:
    movzx   edx, word ptr [rdi+2]
    test    edx, edx
    jz      short loc_10314
    movsxd  rax, edx
    movzx   ecx, [rsp+rax*2+0B8h+var_68]
    lea     esi, [rcx+1]
    mov     [rsp+rax*2+0B8h+var_68], si
    xor     esi, esi
    nop     word ptr [rax+rax+00h]
    
loc_10300:
    mov     eax, ecx
    shr     ecx, 1
    and     eax, 1
    or      eax, esi
    sub     edx, 1
    lea     esi, [rax+rax]
    jnz     short loc_10300
    mov     [rdi], ax
    
loc_10314:
    add     rdi, 4
    cmp     r8, rdi
    jnz     short loc_102E0
    
loc_1031D:
    mov     rax, [rsp+0B8h+var_40]
    xor     rax, fs:28h
    jnz     loc_104F4
    add     rsp, 88h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_10343:
    mov     r10d, edx
    mov     r9d, ebp
    jmp     loc_10188
    
loc_1034E:
    mov     r9d, 23Dh
    nop     dword ptr [rax+00h]
    
loc_10358:
    movzx   r10d, word ptr [rdi+rbx*2+0BA0h]
    test    r10d, r10d
    jz      short loc_103B5
    lea     eax, [r9-1]
    cdqe
    nop     dword ptr [rax+00h]
    
loc_10370:
    movsxd  r8, dword ptr [rdi+rax*4+0BC0h]
    mov     r9d, eax
    cmp     esi, r8d
    jl      short loc_103D0
    lea     r11, [rcx+r8*4]
    movzx   r12d, word ptr [r11+2]
    cmp     r12d, edx
    jz      short loc_103AB
    mov     r14, rbx
    sub     r14, r12
    movzx   r12d, word ptr [r11]
    mov     r8, r14
    imul    r8, r12
    add     [rdi+1718h], r8
    mov     [r11+2], dx
    
loc_103AB:
    sub     rax, 1
    sub     r10d, 1
    jnz     short loc_10370
    
loc_103B5:
    sub     rbx, 1
    test    ebp, ebp
    mov     edx, ebp
    jz      loc_101D0
    sub     ebp, 1
    jmp     short loc_10358
    
loc_103C8:
    mov     r10d, r11d
    jmp     loc_10188
    
loc_103D0:
    sub     rax, 1
    jmp     short loc_10370
    
loc_103D6:
    mov     esi, 1
    jmp     loc_FCC0
    
loc_103E0:
    lea     r8, [rdi+rax*4]
    mov     ecx, [rsp+0B8h+var_74]
    jmp     short loc_10438
    align 10h
    
loc_103F0:
    xor     eax, eax
    cmp     ecx, 1
    mov     rsi, r15
    jg      short loc_10407
    add     ecx, 1
    movsxd  rax, ecx
    lea     rsi, [r15+rax*4]
    movsxd  rax, ecx
    
loc_10407:
    lea     r9d, [rdx+1]
    mov     r11d, 1
    mov     [rdi+14B4h], r9d
    mov     [r8+rdx*4+0BC0h], eax
    add     rdx, 1
    mov     [rsi], r11w
    mov     byte ptr [rdi+rax+14BCh], 0
    sub     qword ptr [rdi+1718h], 1
    
loc_10438:
    cmp     edx, 1
    mov     eax, edx
    jle     short loc_103F0
    mov     [rsp+0B8h+var_74], ecx
    mov     esi, ecx
    jmp     loc_FAC0
    
loc_1044A:
    mov     eax, 23Ch
    mov     rbp, [rsp+0B8h+var_A8]
    lea     r9, [rdi+r8*4]
    sub     eax, r14d
    xor     r12d, r12d
    add     rax, r8
    lea     r11, [rdi+rax*4+4]
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_10470:
    movsxd  rax, dword ptr [r9+0BC0h]
    lea     r10, [rcx+rax*4]
    mov     r8, rax
    movzx   eax, word ptr [r10+2]
    movzx   eax, word ptr [rcx+rax*4+2]
    add     eax, 1
    cmp     edx, eax
    jge     short loc_10495
    add     r12d, 1
    mov     eax, edx
    
loc_10495:
    cmp     esi, r8d
    mov     [r10+2], ax
    jl      short loc_104CD
    movsxd  r13, eax
    add     word ptr [rdi+r13*2+0BA0h], 1
    cmp     ebx, r8d
    jg      short loc_104BC
    sub     r8d, ebx
    movsxd  r8, r8d
    add     eax, [rbp+r8*4+0]
    
loc_104BC:
    movzx   r8d, word ptr [r10]
    mov     eax, eax
    imul    rax, r8
    add     [rdi+1718h], rax
    
loc_104CD:
    add     r9, 4
    cmp     r9, r11
    jnz     short loc_10470
    jmp     loc_FFC7
    
loc_104DB:
    mov     r10d, [rsp+0B8h+var_94]
    jmp     loc_10188
    
loc_104E5:
    xor     ecx, ecx
    mov     [rsp+0B8h+var_74], 0FFFFFFFFh
    jmp     loc_FA2E
    
loc_104F4:
    call    ___stack_chk_fail
    

<_tr_init>:
    
    lea     rsi, static_l_desc
    lea     rcx, static_bl_desc
    lea     rax, [rdi+0D4h]
    lea     rdx, [rdi+9C8h]
    xor     r10d, r10d
    mov     dword ptr [rdi+1734h], 0
    mov     [rdi+0B68h], rsi
    lea     rsi, static_d_desc
    mov     [rdi+0B98h], rcx
    lea     rcx, [rdi+54Ch]
    mov     [rdi+0B58h], rax
    mov     [rdi+0B70h], rdx
    mov     [rdi+0B80h], rsi
    lea     rsi, [rdi+0ABCh]
    mov     [rdi+1730h], r10w
    mov     [rdi+0B88h], rsi
    
loc_10570:
    xor     r9d, r9d
    add     rax, 4
    mov     [rax-4], r9w
    cmp     rax, rcx
    jnz     short loc_10570
    mov     rax, rdx
    lea     rdx, [rdi+0A40h]
    nop     dword ptr [rax+rax+00h]
    
loc_10590:
    xor     r8d, r8d
    add     rax, 4
    mov     [rax-4], r8w
    cmp     rax, rdx
    jnz     short loc_10590
    lea     rdx, [rdi+0B08h]
    mov     rax, rsi
    nop     dword ptr [rax+rax+00h]
    
loc_105B0:
    xor     ecx, ecx
    add     rax, 4
    mov     [rax-4], cx
    cmp     rdx, rax
    jnz     short loc_105B0
    mov     eax, 1
    mov     qword ptr [rdi+1720h], 0
    mov     qword ptr [rdi+1718h], 0
    mov     [rdi+4D4h], ax
    mov     dword ptr [rdi+1728h], 0
    mov     dword ptr [rdi+170Ch], 0
    retn
    

<_tr_stored_block>:
    
    push    rbp
    push    rbx
    mov     rbp, rdx
    mov     rbx, rdi
    sub     rsp, 8
    mov     rax, [rdi+28h]
    mov     edx, [rdi+1734h]
    lea     r9, [rax+1]
    add     rax, [rdi+10h]
    movzx   edi, cx
    mov     r8d, edi
    mov     ecx, edx
    shl     r8d, cl
    or      r8w, [rbx+1730h]
    cmp     edx, 0Dh
    mov     [rbx+1730h], r8w
    jg      loc_10728
    lea     ecx, [rdx+3]
    mov     [rbx+1734h], ecx
    
loc_1064B:
    cmp     ecx, 8
    jg      loc_106F0
    test    ecx, ecx
    jle     short loc_1066B
    mov     [rbx+28h], r9
    mov     [rax], r8b
    mov     rax, [rbx+28h]
    lea     r9, [rax+1]
    add     rax, [rbx+10h]
    
loc_1066B:
    xor     edx, edx
    mov     [rbx+28h], r9
    mov     dword ptr [rbx+1734h], 0
    mov     [rbx+1730h], dx
    mov     [rax], bpl
    mov     rax, [rbx+28h]
    mov     rdx, [rbx+10h]
    lea     rcx, [rax+1]
    mov     [rbx+28h], rcx
    mov     ecx, ebp
    shr     cx, 8
    mov     [rdx+rax], cl
    mov     rax, [rbx+28h]
    mov     rdx, [rbx+10h]
    lea     rcx, [rax+1]
    mov     [rbx+28h], rcx
    mov     ecx, ebp
    not     ecx
    mov     [rdx+rax], cl
    mov     rdx, [rbx+28h]
    mov     rcx, [rbx+10h]
    lea     rax, [rdx+1]
    mov     [rbx+28h], rax
    mov     eax, ebp
    not     eax
    shr     ax, 8
    mov     [rcx+rdx], al
    mov     rdi, [rbx+28h]
    mov     rdx, rbp
    add     rdi, [rbx+10h]
    call    _memcpy
    add     [rbx+28h], rbp
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 10h
    
loc_106F0:
    mov     [rbx+28h], r9
    mov     [rax], r8b
    mov     rax, [rbx+28h]
    movzx   ecx, byte ptr [rbx+1731h]
    mov     rdx, [rbx+10h]
    lea     rdi, [rax+1]
    mov     [rbx+28h], rdi
    mov     [rdx+rax], cl
    mov     rax, [rbx+28h]
    lea     r9, [rax+1]
    add     rax, [rbx+10h]
    jmp     loc_1066B
    align 8
    
loc_10728:
    mov     [rbx+28h], r9
    mov     [rax], r8b
    mov     rax, [rbx+28h]
    movzx   ecx, byte ptr [rbx+1731h]
    mov     rdx, [rbx+10h]
    lea     r8, [rax+1]
    mov     [rbx+28h], r8
    mov     [rdx+rax], cl
    mov     ecx, 10h
    mov     eax, [rbx+1734h]
    sub     ecx, eax
    sar     edi, cl
    lea     ecx, [rax-0Dh]
    mov     rax, [rbx+28h]
    mov     r8d, edi
    mov     [rbx+1730h], di
    mov     [rbx+1734h], ecx
    lea     r9, [rax+1]
    add     rax, [rbx+10h]
    jmp     loc_1064B
    

<_tr_flush_bits>:
    
    mov     eax, [rdi+1734h]
    cmp     eax, 10h
    jz      short loc_107C0
    cmp     eax, 7
    jle     short locret_107B9
    mov     rax, [rdi+28h]
    movzx   ecx, word ptr [rdi+1730h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    shr     word ptr [rdi+1730h], 8
    sub     dword ptr [rdi+1734h], 8
    
locret_107B9:
    rep retn
    align 20h
    
loc_107C0:
    mov     rax, [rdi+28h]
    movzx   ecx, word ptr [rdi+1730h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [rdi+28h]
    movzx   ecx, byte ptr [rdi+1731h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    xor     eax, eax
    mov     [rdi+1730h], ax
    mov     dword ptr [rdi+1734h], 0
    retn
    

<_tr_align>:
    
    mov     ecx, [rdi+1734h]
    mov     esi, 2
    mov     edx, esi
    shl     edx, cl
    or      dx, [rdi+1730h]
    cmp     ecx, 0Dh
    mov     [rdi+1730h], dx
    jle     loc_108C8
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     r8, [rax+1]
    mov     [rdi+28h], r8
    mov     [rcx+rax], dl
    mov     rax, [rdi+28h]
    movzx   ecx, byte ptr [rdi+1731h]
    mov     rdx, [rdi+10h]
    lea     r8, [rax+1]
    mov     [rdi+28h], r8
    mov     [rdx+rax], cl
    mov     ecx, 10h
    mov     eax, [rdi+1734h]
    sub     ecx, eax
    sar     esi, cl
    lea     ecx, [rax-0Dh]
    mov     edx, esi
    mov     [rdi+1730h], si
    cmp     ecx, 9
    mov     [rdi+1734h], ecx
    jg      short loc_108D6
    
loc_10889:
    add     ecx, 7
    cmp     ecx, 10h
    mov     [rdi+1734h], ecx
    jz      loc_10926
    
loc_1089B:
    cmp     ecx, 7
    jle     short locret_108C2
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    shr     word ptr [rdi+1730h], 8
    sub     dword ptr [rdi+1734h], 8
    
locret_108C2:
    rep retn
    align 8
    
loc_108C8:
    add     ecx, 3
    cmp     ecx, 9
    mov     [rdi+1734h], ecx
    jle     short loc_10889
    
loc_108D6:
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [rdi+28h]
    movzx   ecx, byte ptr [rdi+1731h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    xor     edx, edx
    mov     eax, [rdi+1734h]
    mov     [rdi+1730h], dx
    xor     edx, edx
    lea     ecx, [rax-9]
    cmp     ecx, 10h
    mov     [rdi+1734h], ecx
    jnz     loc_1089B
    
loc_10926:
    mov     rax, [rdi+28h]
    mov     rcx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [rdi+28h]
    movzx   ecx, byte ptr [rdi+1731h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    xor     eax, eax
    mov     [rdi+1730h], ax
    mov     dword ptr [rdi+1734h], 0
    retn
    

<_tr_flush_block>:
    
    var_41= byte ptr -41h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    lea     r15, [rdx+4]
    push    r13
    push    r12
    mov     r14, rsi
    push    rbp
    push    rbx
    mov     r12, rdi
    mov     r13d, ecx
    sub     rsp, 18h
    mov     eax, [rdi+0C4h]
    test    rsi, rsi
    setnz   [rsp+48h+var_41]
    test    eax, eax
    jle     loc_11095
    mov     rdi, [rdi]
    lea     rbx, [r12+0D4h]
    cmp     dword ptr [rdi+58h], 2
    jz      loc_11055
    
loc_109B6:
    lea     rsi, [r12+0B58h]
    mov     rdi, r12
    mov     [rsp+48h+var_40], rdx
    mov     ebp, 0FFFFFFFFh
    call    build_tree
    lea     rsi, [r12+0B70h]
    mov     rdi, r12
    call    build_tree
    movzx   ecx, word ptr [r12+0D6h]
    movsxd  rdi, dword ptr [r12+0B60h]
    mov     rdx, [rsp+48h+var_40]
    cmp     ecx, 1
    mov     [rbx+rdi*4+6], bp
    sbb     r11d, r11d
    add     r11d, 4
    cmp     ecx, 1
    sbb     r8d, r8d
    and     r8d, 83h
    add     r8d, 7
    test    edi, edi
    js      loc_10AC4
    lea     rsi, [r12+0DAh]
    lea     r10, [rbx+rdi*4+0Ah]
    mov     r9d, 0FFFFFFFFh
    xor     eax, eax
    jmp     short loc_10A75
    align 8
    
loc_10A38:
    cmp     edi, ecx
    jz      short loc_10A6A
    cmp     eax, r11d
    jge     short loc_10A80
    movsxd  r8, ecx
    add     [r12+r8*4+0ABCh], ax
    
loc_10A4D:
    test    edi, edi
    jz      short loc_10AA8
    
loc_10A51:
    cmp     edi, ecx
    jz      loc_11021
    mov     r9d, ecx
    mov     r11d, 4
    mov     r8d, 7
    xor     eax, eax
    
loc_10A6A:
    add     rsi, 4
    mov     ecx, edi
    cmp     r10, rsi
    jz      short loc_10AC4
    
loc_10A75:
    add     eax, 1
    movzx   edi, word ptr [rsi]
    cmp     eax, r8d
    jl      short loc_10A38
    
loc_10A80:
    test    ecx, ecx
    jz      loc_10FE3
    cmp     ecx, r9d
    jz      short loc_10A9A
    movsxd  rax, ecx
    add     word ptr [r12+rax*4+0ABCh], 1
    
loc_10A9A:
    add     word ptr [r12+0AFCh], 1
    test    edi, edi
    jnz     short loc_10A51
    
loc_10AA8:
    add     rsi, 4
    xor     eax, eax
    mov     r9d, ecx
    cmp     r10, rsi
    mov     r11d, 3
    mov     r8d, 8Ah
    mov     ecx, edi
    jnz     short loc_10A75
    
loc_10AC4:
    movzx   ecx, word ptr [r12+9CAh]
    movsxd  rdi, dword ptr [r12+0B78h]
    lea     rbp, [r12+9C8h]
    mov     r10d, 0FFFFFFFFh
    cmp     ecx, 1
    mov     [rbp+rdi*4+6], r10w
    sbb     r9d, r9d
    add     r9d, 4
    cmp     ecx, 1
    sbb     r8d, r8d
    and     r8d, 83h
    add     r8d, 7
    test    edi, edi
    js      loc_10BBC
    lea     rsi, [r12+9CEh]
    lea     r11, [r12+rdi*4+9D2h]
    mov     r10d, 0FFFFFFFFh
    xor     eax, eax
    jmp     short loc_10B6D
    align 10h
    
loc_10B30:
    cmp     edi, ecx
    jz      short loc_10B62
    cmp     eax, r9d
    jge     short loc_10B78
    movsxd  r8, ecx
    add     [r12+r8*4+0ABCh], ax
    
loc_10B45:
    test    edi, edi
    jz      short loc_10BA0
    
loc_10B49:
    cmp     edi, ecx
    jz      loc_1100B
    mov     r10d, ecx
    mov     r9d, 4
    mov     r8d, 7
    xor     eax, eax
    
loc_10B62:
    add     rsi, 4
    mov     ecx, edi
    cmp     rsi, r11
    jz      short loc_10BBC
    
loc_10B6D:
    add     eax, 1
    movzx   edi, word ptr [rsi]
    cmp     eax, r8d
    jl      short loc_10B30
    
loc_10B78:
    test    ecx, ecx
    jz      loc_10FF7
    cmp     ecx, r10d
    jz      short loc_10B92
    movsxd  rax, ecx
    add     word ptr [r12+rax*4+0ABCh], 1
    
loc_10B92:
    add     word ptr [r12+0AFCh], 1
    test    edi, edi
    jnz     short loc_10B49
    
loc_10BA0:
    add     rsi, 4
    xor     eax, eax
    mov     r10d, ecx
    cmp     rsi, r11
    mov     r9d, 3
    mov     r8d, 8Ah
    mov     ecx, edi
    jnz     short loc_10B6D
    
loc_10BBC:
    lea     rsi, [r12+0B88h]
    mov     rdi, r12
    mov     [rsp+48h+var_40], rdx
    call    build_tree
    cmp     word ptr [r12+0AFAh], 0
    mov     rdx, [rsp+48h+var_40]
    jnz     loc_11405
    cmp     word ptr [r12+0AC2h], 0
    jnz     loc_11425
    cmp     word ptr [r12+0AF6h], 0
    jnz     loc_11433
    cmp     word ptr [r12+0AC6h], 0
    jnz     loc_11417
    cmp     word ptr [r12+0AF2h], 0
    jnz     loc_1142C
    cmp     word ptr [r12+0ACAh], 0
    jnz     loc_1143A
    cmp     word ptr [r12+0AEEh], 0
    jnz     loc_1144F
    cmp     word ptr [r12+0ACEh], 0
    jnz     loc_11441
    cmp     word ptr [r12+0AEAh], 0
    jnz     loc_11448
    cmp     word ptr [r12+0AD2h], 0
    jnz     loc_11479
    cmp     word ptr [r12+0AE6h], 0
    jnz     loc_11464
    cmp     word ptr [r12+0AD6h], 0
    jnz     loc_11456
    cmp     word ptr [r12+0AE2h], 0
    jnz     loc_1145D
    cmp     word ptr [r12+0ADAh], 0
    jnz     loc_11472
    cmp     word ptr [r12+0ADEh], 0
    jnz     loc_1146B
    cmp     word ptr [r12+0ABEh], 0
    mov     ecx, 9
    mov     esi, 2
    jnz     loc_1141E
    
loc_10CE0:
    mov     rax, [r12+1718h]
    mov     rdi, [r12+1720h]
    lea     rax, [rcx+rax+0Eh]
    add     rdi, 0Ah
    shr     rdi, 3
    mov     [r12+1718h], rax
    add     rax, 0Ah
    mov     rcx, rdi
    shr     rax, 3
    cmp     rax, rdi
    cmovbe  rcx, rax
    cmp     rcx, r15
    jb      short loc_10D27
    cmp     [rsp+48h+var_41], 0
    jnz     loc_1126B
    
loc_10D27:
    cmp     dword ptr [r12+0C8h], 4
    mov     ecx, [r12+1734h]
    movzx   r8d, word ptr [r12+1730h]
    jz      loc_110D8
    cmp     rax, rdi
    jnb     loc_110D8
    cmp     ecx, 0Dh
    jg      loc_112A3
    lea     eax, [r13+4]
    movzx   eax, ax
    shl     eax, cl
    add     ecx, 3
    or      eax, r8d
    mov     [r12+1734h], ecx
    mov     [r12+1730h], ax
    
loc_10D79:
    mov     edx, [r12+0B60h]
    cmp     ecx, 0Bh
    lea     r8d, [rsi+1]
    mov     r14d, [r12+0B78h]
    lea     edi, [rdx-100h]
    movzx   edi, di
    jle     loc_1138E
    mov     r15d, edi
    mov     r9, [r12+10h]
    shl     r15d, cl
    mov     rcx, [r12+28h]
    or      eax, r15d
    mov     [r12+1730h], ax
    lea     r10, [rcx+1]
    mov     [r12+28h], r10
    mov     [r9+rcx], al
    mov     rax, [r12+28h]
    movzx   r9d, byte ptr [r12+1731h]
    mov     rcx, [r12+10h]
    lea     r10, [rax+1]
    mov     [r12+28h], r10
    mov     [rcx+rax], r9b
    mov     ecx, 10h
    mov     eax, [r12+1734h]
    sub     ecx, eax
    sar     edi, cl
    lea     ecx, [rax-0Bh]
    mov     [r12+1730h], di
    mov     [r12+1734h], ecx
    
loc_10E0D:
    cmp     ecx, 0Bh
    movzx   eax, r14w
    jle     loc_11349
    mov     r15d, eax
    mov     r9, [r12+10h]
    shl     r15d, cl
    mov     rcx, [r12+28h]
    or      edi, r15d
    mov     [r12+1730h], di
    lea     r10, [rcx+1]
    mov     [r12+28h], r10
    mov     [r9+rcx], dil
    mov     rcx, [r12+28h]
    movzx   r9d, byte ptr [r12+1731h]
    mov     rdi, [r12+10h]
    lea     r10, [rcx+1]
    mov     [r12+28h], r10
    mov     [rdi+rcx], r9b
    mov     ecx, 10h
    mov     edi, [r12+1734h]
    sub     ecx, edi
    sar     eax, cl
    lea     ecx, [rdi-0Bh]
    mov     [r12+1730h], ax
    cmp     ecx, 0Ch
    mov     [r12+1734h], ecx
    jle     loc_1136A
    
loc_10E91:
    sub     esi, 3
    movzx   esi, si
    mov     edi, esi
    shl     edi, cl
    mov     rcx, [r12+28h]
    or      eax, edi
    mov     rdi, [r12+10h]
    mov     [r12+1730h], ax
    lea     r9, [rcx+1]
    mov     [r12+28h], r9
    mov     [rdi+rcx], al
    mov     rax, [r12+28h]
    movzx   edi, byte ptr [r12+1731h]
    mov     rcx, [r12+10h]
    lea     r9, [rax+1]
    mov     [r12+28h], r9
    mov     [rcx+rax], dil
    mov     ecx, 10h
    mov     edi, [r12+1734h]
    sub     ecx, edi
    sar     esi, cl
    lea     ecx, [rdi-0Ch]
    mov     eax, esi
    mov     [r12+1730h], si
    mov     [r12+1734h], ecx
    
loc_10F03:
    xor     edi, edi
    mov     esi, 10h
    mov     r10d, 10h
    lea     r9, bl_order
    jmp     short loc_10F85
    
loc_10F19:
    mov     rcx, [r12+28h]
    mov     r11, [r12+10h]
    add     rdi, 1
    lea     r15, [rcx+1]
    mov     [r12+28h], r15
    mov     [r11+rcx], al
    mov     rax, [r12+28h]
    movzx   r11d, byte ptr [r12+1731h]
    mov     rcx, [r12+10h]
    lea     r15, [rax+1]
    mov     [r12+28h], r15
    mov     [rcx+rax], r11b
    mov     ecx, r10d
    mov     r11d, [r12+1734h]
    sub     ecx, r11d
    sar     esi, cl
    lea     ecx, [r11-0Dh]
    cmp     r8d, edi
    mov     eax, esi
    mov     [r12+1730h], si
    mov     [r12+1734h], ecx
    jle     short loc_10FBD
    
loc_10F80:
    movzx   esi, byte ptr [r9+rdi]
    
loc_10F85:
    movzx   esi, word ptr [r12+rsi*4+0ABEh]
    mov     r11d, esi
    shl     r11d, cl
    or      eax, r11d
    cmp     ecx, 0Dh
    mov     [r12+1730h], ax
    jg      loc_10F19
    add     rdi, 1
    add     ecx, 3
    cmp     r8d, edi
    mov     [r12+1734h], ecx
    jg      short loc_10F80
    
loc_10FBD:
    mov     rsi, rbx
    mov     rdi, r12
    call    send_tree
    mov     edx, r14d
    mov     rsi, rbp
    call    send_tree
    mov     rdx, rbp
    mov     rsi, rbx
    call    compress_block
    jmp     loc_11169
    
loc_10FE3:
    cmp     eax, 0Ah
    jg      short loc_11046
    add     word ptr [r12+0B00h], 1
    jmp     loc_10A4D
    
loc_10FF7:
    cmp     eax, 0Ah
    jg      short loc_11037
    add     word ptr [r12+0B00h], 1
    jmp     loc_10B45
    
loc_1100B:
    mov     r10d, edi
    mov     r9d, 3
    mov     r8d, 6
    xor     eax, eax
    jmp     loc_10B62
    
loc_11021:
    mov     r9d, edi
    mov     r11d, 3
    mov     r8d, 6
    xor     eax, eax
    jmp     loc_10A6A
    
loc_11037:
    add     word ptr [r12+0B04h], 1
    jmp     loc_10B45
    
loc_11046:
    add     word ptr [r12+0B04h], 1
    jmp     loc_10A4D
    
loc_11055:
    mov     rax, rbx
    lea     rsi, [r12+154h]
    mov     ecx, 0F3FFC07Fh
    jmp     short loc_11080
    align 10h
    
loc_11070:
    add     rax, 4
    shr     rcx, 1
    cmp     rax, rsi
    jz      loc_113AB
    
loc_11080:
    test    cl, 1
    jz      short loc_11070
    cmp     word ptr [rax], 0
    jz      short loc_11070
    
loc_1108B:
    xor     ecx, ecx
    
loc_1108D:
    mov     [rdi+58h], ecx
    jmp     loc_109B6
    
loc_11095:
    lea     rax, [rdx+5]
    cmp     rax, r15
    jb      short loc_110B7
    cmp     [rsp+48h+var_41], 0
    lea     rbx, [rdi+0D4h]
    lea     rbp, [rdi+9C8h]
    jnz     loc_1126B
    
loc_110B7:
    movzx   r8d, word ptr [r12+1730h]
    mov     ecx, [r12+1734h]
    lea     rbx, [r12+0D4h]
    lea     rbp, [r12+9C8h]
    
loc_110D8:
    cmp     ecx, 0Dh
    jle     loc_1127E
    lea     edx, [r13+2]
    mov     rsi, [r12+10h]
    movzx   edx, dx
    mov     eax, edx
    shl     eax, cl
    mov     rcx, [r12+28h]
    or      eax, r8d
    mov     [r12+1730h], ax
    lea     rdi, [rcx+1]
    mov     [r12+28h], rdi
    mov     [rsi+rcx], al
    mov     rax, [r12+28h]
    movzx   esi, byte ptr [r12+1731h]
    mov     rcx, [r12+10h]
    lea     rdi, [rax+1]
    mov     [r12+28h], rdi
    mov     [rcx+rax], sil
    mov     ecx, 10h
    mov     eax, [r12+1734h]
    sub     ecx, eax
    sub     eax, 0Dh
    sar     edx, cl
    mov     [r12+1734h], eax
    mov     [r12+1730h], dx
    
loc_11153:
    lea     rdx, static_dtree
    lea     rsi, static_ltree
    mov     rdi, r12
    call    compress_block
    
loc_11169:
    lea     rax, [r12+54Ch]
    nop     dword ptr [rax+00000000h]
    
loc_11178:
    xor     edi, edi
    add     rbx, 4
    mov     [rbx-4], di
    cmp     rbx, rax
    jnz     short loc_11178
    lea     rax, [r12+0A40h]
    nop
    
loc_11190:
    xor     esi, esi
    add     rbp, 4
    mov     [rbp-4], si
    cmp     rbp, rax
    jnz     short loc_11190
    lea     rax, [r12+0ABCh]
    lea     rdx, [r12+0B08h]
    nop
    
loc_111B0:
    xor     ecx, ecx
    add     rax, 4
    mov     [rax-4], cx
    cmp     rdx, rax
    jnz     short loc_111B0
    mov     edx, 1
    test    r13d, r13d
    mov     qword ptr [r12+1720h], 0
    mov     [r12+4D4h], dx
    mov     qword ptr [r12+1718h], 0
    mov     dword ptr [r12+1728h], 0
    mov     dword ptr [r12+170Ch], 0
    jnz     short loc_11211
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_11211:
    mov     eax, [r12+1734h]
    cmp     eax, 8
    jg      loc_1131C
    test    eax, eax
    jle     short loc_11245
    movzx   ecx, word ptr [r12+1730h]
    
loc_1122F:
    mov     rax, [r12+28h]
    mov     rdx, [r12+10h]
    lea     rsi, [rax+1]
    mov     [r12+28h], rsi
    mov     [rdx+rax], cl
    
loc_11245:
    xor     eax, eax
    mov     dword ptr [r12+1734h], 0
    mov     [r12+1730h], ax
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_1126B:
    mov     ecx, r13d
    mov     rsi, r14
    mov     rdi, r12
    call    _tr_stored_block
    jmp     loc_11169
    
loc_1127E:
    lea     eax, [r13+2]
    movzx   eax, ax
    shl     eax, cl
    add     ecx, 3
    or      eax, r8d
    mov     [r12+1734h], ecx
    mov     [r12+1730h], ax
    jmp     loc_11153
    
loc_112A3:
    lea     edx, [r13+4]
    mov     rdi, [r12+10h]
    movzx   edx, dx
    mov     eax, edx
    shl     eax, cl
    mov     rcx, [r12+28h]
    or      eax, r8d
    mov     [r12+1730h], ax
    lea     r8, [rcx+1]
    mov     [r12+28h], r8
    mov     [rdi+rcx], al
    mov     rax, [r12+28h]
    movzx   edi, byte ptr [r12+1731h]
    mov     rcx, [r12+10h]
    lea     r8, [rax+1]
    mov     [r12+28h], r8
    mov     [rcx+rax], dil
    mov     ecx, 10h
    mov     edi, [r12+1734h]
    sub     ecx, edi
    sar     edx, cl
    lea     ecx, [rdi-0Dh]
    mov     eax, edx
    mov     [r12+1730h], dx
    mov     [r12+1734h], ecx
    jmp     loc_10D79
    
loc_1131C:
    mov     rax, [r12+28h]
    movzx   ecx, word ptr [r12+1730h]
    mov     rdx, [r12+10h]
    lea     rsi, [rax+1]
    mov     [r12+28h], rsi
    mov     [rdx+rax], cl
    movzx   ecx, byte ptr [r12+1731h]
    jmp     loc_1122F
    
loc_11349:
    shl     eax, cl
    add     ecx, 5
    or      eax, edi
    cmp     ecx, 0Ch
    mov     [r12+1734h], ecx
    mov     [r12+1730h], ax
    jg      loc_10E91
    
loc_1136A:
    lea     esi, [r8-4]
    movzx   esi, si
    shl     esi, cl
    add     ecx, 4
    or      eax, esi
    mov     [r12+1734h], ecx
    mov     [r12+1730h], ax
    jmp     loc_10F03
    
loc_1138E:
    shl     edi, cl
    add     ecx, 5
    or      edi, eax
    mov     [r12+1734h], ecx
    mov     [r12+1730h], di
    jmp     loc_10E0D
    
loc_113AB:
    mov     rsi, 0FFFF0000FFFFh
    test    [r12+0F8h], rsi
    mov     ecx, 1
    jnz     loc_1108D
    cmp     word ptr [r12+108h], 0
    jnz     loc_1108D
    lea     rcx, [r12+4D4h]
    jmp     short loc_113F5
    align 8
    
loc_113E8:
    add     rax, 4
    cmp     rax, rcx
    jz      loc_1108B
    
loc_113F5:
    cmp     word ptr [rax], 0
    jz      short loc_113E8
    mov     ecx, 1
    jmp     loc_1108D
    
loc_11405:
    mov     esi, 12h
    
loc_1140A:
    movsxd  rax, esi
    lea     rcx, [rax+rax*2+3]
    jmp     loc_10CE0
    
loc_11417:
    mov     esi, 0Fh
    jmp     short loc_1140A
    
loc_1141E:
    mov     esi, 3
    jmp     short loc_1140A
    
loc_11425:
    mov     esi, 11h
    jmp     short loc_1140A
    
loc_1142C:
    mov     esi, 0Eh
    jmp     short loc_1140A
    
loc_11433:
    mov     esi, 10h
    jmp     short loc_1140A
    
loc_1143A:
    mov     esi, 0Dh
    jmp     short loc_1140A
    
loc_11441:
    mov     esi, 0Bh
    jmp     short loc_1140A
    
loc_11448:
    mov     esi, 0Ah
    jmp     short loc_1140A
    
loc_1144F:
    mov     esi, 0Ch
    jmp     short loc_1140A
    
loc_11456:
    mov     esi, 7
    jmp     short loc_1140A
    
loc_1145D:
    mov     esi, 6
    jmp     short loc_1140A
    
loc_11464:
    mov     esi, 8
    jmp     short loc_1140A
    
loc_1146B:
    mov     esi, 4
    jmp     short loc_1140A
    
loc_11472:
    mov     esi, 5
    jmp     short loc_1140A
    
loc_11479:
    mov     esi, 9
    jmp     short loc_1140A
    

<_tr_tally>:
    
    mov     ecx, [rdi+170Ch]
    mov     r8, [rdi+1710h]
    mov     [r8+rcx*2], si
    mov     r8, [rdi+1700h]
    mov     rax, rcx
    add     eax, 1
    test    esi, esi
    mov     [rdi+170Ch], eax
    mov     [r8+rcx], dl
    jz      short loc_11510
    lea     rax, _length_code
    mov     edx, edx
    add     dword ptr [rdi+1728h], 1
    sub     esi, 1
    movzx   eax, byte ptr [rax+rdx]
    add     word ptr [rdi+rax*4+4D8h], 1
    cmp     esi, 0FFh
    ja      short loc_11500
    
loc_114D5:
    lea     rax, _dist_code
    movzx   eax, byte ptr [rax+rsi]
    add     word ptr [rdi+rax*4+9C8h], 1
    
loc_114E9:
    mov     eax, [rdi+1708h]
    sub     eax, 1
    cmp     eax, [rdi+170Ch]
    setz    al
    movzx   eax, al
    retn
    align 20h
    
loc_11500:
    shr     esi, 7
    add     esi, 100h
    jmp     short loc_114D5
    align 10h
    
loc_11510:
    mov     edx, edx
    add     word ptr [rdi+rdx*4+0D4h], 1
    jmp     short loc_114E9
    

<zlibVersion>:
    
    lea     rax, a1211
    retn
    

<zlibCompileFlags>:
    
    mov     eax, 0A9h
    retn
    

<zError>:
    
    lea     rdx, z_errmsg
    mov     eax, 2
    sub     eax, edi
    cdqe
    mov     rax, [rdx+rax*8]
    retn
    

<zcalloc>:
    
    mov     edi, esi
    imul    edi, edx
    jmp     _malloc
    

<zcfree>:
    
    mov     rdi, rsi
    jmp     _free
    

<compress2>:
    
    var_C0= qword ptr -0C0h
    var_B8= qword ptr -0B8h
    var_B0= dword ptr -0B0h
    var_A0= qword ptr -0A0h
    var_98= dword ptr -98h
    var_90= qword ptr -90h
    var_78= xmmword ptr -78h
    var_68= qword ptr -68h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    mov     r14, rdx
    push    r13
    push    r12
    lea     rdx, a1211
    push    rbp
    push    rbx
    mov     r15, rdi
    pxor    xmm0, xmm0
    mov     r13, rcx
    sub     rsp, 98h
    mov     rbx, [rsi]
    mov     qword ptr [rsi], 0
    lea     rbp, [rsp+0C8h+var_B8]
    mov     [rsp+0C8h+var_C0], rsi
    mov     esi, r8d
    mov     rcx, fs:28h
    mov     [rsp+0C8h+var_40], rcx
    xor     ecx, ecx
    mov     rdi, rbp
    mov     ecx, 70h
    mov     [rsp+0C8h+var_68], 0
    movaps  [rsp+0C8h+var_78], xmm0
    call    _deflateInit_
    test    eax, eax
    mov     r12d, eax
    jnz     loc_1168A
    mov     [rsp+0C8h+var_B8], r14
    mov     [rsp+0C8h+var_A0], r15
    xor     edx, edx
    mov     [rsp+0C8h+var_98], 0
    mov     [rsp+0C8h+var_B0], 0
    xor     eax, eax
    mov     r14d, 0FFFFFFFFh
    jmp     short loc_11628
    align 20h
    
loc_11620:
    mov     eax, [rsp+0C8h+var_98]
    mov     edx, [rsp+0C8h+var_B0]
    
loc_11628:
    test    eax, eax
    jnz     short loc_1163D
    cmp     rbx, r14
    mov     rax, r14
    cmovbe  rax, rbx
    mov     [rsp+0C8h+var_98], eax
    sub     rbx, rax
    
loc_1163D:
    test    edx, edx
    jnz     short loc_11652
    cmp     r13, r14
    mov     rax, r14
    cmovbe  rax, r13
    mov     [rsp+0C8h+var_B0], eax
    sub     r13, rax
    
loc_11652:
    xor     esi, esi
    test    r13, r13
    jnz     short loc_1165E
    mov     esi, 4
    
loc_1165E:
    mov     rdi, rbp
    call    _deflate
    test    eax, eax
    mov     r15d, eax
    jz      short loc_11620
    mov     rax, [rsp+0C8h+var_90]
    mov     rcx, [rsp+0C8h+var_C0]
    mov     rdi, rbp
    mov     [rcx], rax
    call    _deflateEnd
    cmp     r15d, 1
    cmovnz  r12d, r15d
    
loc_1168A:
    mov     rcx, [rsp+0C8h+var_40]
    xor     rcx, fs:28h
    mov     eax, r12d
    jnz     short loc_116B2
    add     rsp, 98h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_116B2:
    call    ___stack_chk_fail
    

<compress>:
    
    mov     r8d, 0FFFFFFFFh
    jmp     _compress2
    

<compressBound>:
    
    mov     rax, rdi
    mov     rdx, rdi
    shr     rax, 0Ch
    shr     rdx, 0Eh
    lea     rax, [rdi+rax+0Dh]
    shr     rdi, 19h
    add     rax, rdx
    add     rax, rdi
    retn
    

<uncompress2>:
    
    var_C8= qword ptr -0C8h
    var_C0= qword ptr -0C0h
    var_B8= qword ptr -0B8h
    var_B0= dword ptr -0B0h
    var_A0= qword ptr -0A0h
    var_98= dword ptr -98h
    var_90= qword ptr -90h
    var_78= xmmword ptr -78h
    var_68= qword ptr -68h
    var_41= byte ptr -41h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    mov     r15, rcx
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 98h
    mov     rbx, [rsi]
    mov     rbp, [r15]
    mov     rcx, fs:28h
    mov     [rsp+0C8h+var_40], rcx
    xor     ecx, ecx
    mov     [rsp+0C8h+var_C8], rdi
    mov     [rsp+0C8h+var_C0], rsi
    test    rbx, rbx
    jz      loc_11858
    mov     qword ptr [rsi], 0
    
loc_11736:
    pxor    xmm0, xmm0
    lea     r13, [rsp+0C8h+var_B8]
    lea     rsi, a1211
    mov     [rsp+0C8h+var_B8], rdx
    mov     edx, 70h
    mov     [rsp+0C8h+var_B0], 0
    mov     rdi, r13
    mov     [rsp+0C8h+var_68], 0
    movaps  [rsp+0C8h+var_78], xmm0
    call    _inflateInit_
    test    eax, eax
    mov     r14d, eax
    jnz     loc_1182C
    mov     rax, [rsp+0C8h+var_C8]
    mov     [rsp+0C8h+var_98], 0
    mov     r12d, 0FFFFFFFFh
    mov     [rsp+0C8h+var_A0], rax
    xor     eax, eax
    jmp     short loc_1179C
    align 8
    
loc_11798:
    mov     eax, [rsp+0C8h+var_98]
    
loc_1179C:
    test    eax, eax
    jnz     short loc_117B1
    cmp     rbx, r12
    mov     rax, r12
    cmovbe  rax, rbx
    mov     [rsp+0C8h+var_98], eax
    sub     rbx, rax
    
loc_117B1:
    mov     eax, [rsp+0C8h+var_B0]
    test    eax, eax
    jnz     short loc_117CA
    cmp     rbp, r12
    mov     rax, r12
    cmovbe  rax, rbp
    mov     [rsp+0C8h+var_B0], eax
    sub     rbp, rax
    
loc_117CA:
    xor     esi, esi
    mov     rdi, r13
    call    _inflate
    test    eax, eax
    mov     edx, eax
    jz      short loc_11798
    mov     eax, [rsp+0C8h+var_B0]
    mov     rcx, [r15]
    sub     rcx, rax
    mov     rax, rcx
    lea     rcx, [rsp+0C8h+var_41]
    sub     rax, rbp
    cmp     [rsp+0C8h+var_C8], rcx
    mov     [r15], rax
    mov     rax, [rsp+0C8h+var_90]
    jz      short loc_11870
    mov     rcx, [rsp+0C8h+var_C0]
    mov     [rcx], rax
    
loc_11808:
    mov     rdi, r13
    mov     dword ptr [rsp+0C8h+var_C8], edx
    call    _inflateEnd
    mov     edx, dword ptr [rsp+0C8h+var_C8]
    cmp     edx, 1
    jz      short loc_1182C
    cmp     edx, 2
    jz      loc_118A2
    
loc_11824:
    cmp     edx, 0FFFFFFFBh
    mov     r14d, edx
    jz      short loc_11890
    
loc_1182C:
    mov     rcx, [rsp+0C8h+var_40]
    xor     rcx, fs:28h
    mov     eax, r14d
    jnz     short loc_118AA
    add     rsp, 98h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_11858:
    lea     rax, [rsp+0C8h+var_41]
    mov     ebx, 1
    mov     [rsp+0C8h+var_C8], rax
    jmp     loc_11736
    align 10h
    
loc_11870:
    test    rax, rax
    jz      short loc_11808
    cmp     edx, 0FFFFFFFBh
    jnz     short loc_11808
    mov     rdi, r13
    mov     dword ptr [rsp+0C8h+var_C8], edx
    mov     ebx, 1
    call    _inflateEnd
    mov     edx, dword ptr [rsp+0C8h+var_C8]
    jmp     short loc_11824
    align 10h
    
loc_11890:
    mov     eax, [rsp+0C8h+var_98]
    add     rax, rbx
    mov     eax, 0FFFFFFFDh
    cmovnz  r14d, eax
    jmp     short loc_1182C
    
loc_118A2:
    mov     r14d, 0FFFFFFFDh
    jmp     short loc_1182C
    
loc_118AA:
    call    ___stack_chk_fail
    

<uncompress>:
    
    var_10= qword ptr -10h
    
    
    sub     rsp, 18h
    mov     [rsp+18h+var_10], rcx
    lea     rcx, [rsp+18h+var_10]
    call    _uncompress2
    add     rsp, 18h
    retn
    

<gzclose>:
    
    test    rdi, rdi
    jz      short loc_118ED
    cmp     dword ptr [rdi+18h], 1C4Fh
    jz      short loc_118E8
    jmp     _gzclose_w
    align 8
    
loc_118E8:
    jmp     _gzclose_r
    
loc_118ED:
    mov     eax, 0FFFFFFFEh
    retn
    

<gzopen>:
    
    test    rdi, rdi
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    jz      loc_119B8
    mov     rbx, rdi
    mov     edi, 0E8h
    mov     r12, rsi
    call    _malloc
    test    rax, rax
    mov     r13, rax
    jz      loc_119B8
    mov     rax, 200000000000h
    xor     ebp, ebp
    xor     r14d, r14d
    mov     [r13+28h], rax
    mov     eax, 0FFFFFFFFh
    mov     qword ptr [r13+70h], 0
    mov     [r13+58h], rax
    movsx   eax, byte ptr [r12]
    lea     rcx, jpt_119A5
    mov     dword ptr [r13+18h], 0
    mov     dword ptr [r13+40h], 0
    test    al, al
    jnz     short loc_1198C
    jmp     short loc_119B0
    align 8
    
loc_11978:
    sub     eax, 30h
    mov     [r13+58h], eax
    
def_119A5:
    add     r12, 1
    movsx   eax, byte ptr [r12]
    test    al, al
    jz      short loc_119D0
    
loc_1198C:
    lea     edx, [rax-30h]
    cmp     dl, 9
    jbe     short loc_11978
    sub     eax, 2Bh
    cmp     al, 4Dh
    ja      short def_119A5
    movzx   eax, al
    movsxd  rax, ds:(jpt_119A5 - 19B64h)[rcx+rax*4]
    add     rax, rcx
    jmp     rax
    
loc_119A7:
    mov     rdi, [r13+20h]
    call    _free
    
loc_119B0:
    mov     rdi, r13
    call    _free
    
loc_119B8:
    xor     r13d, r13d
    pop     rbx
    mov     rax, r13
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 10h
    
loc_119D0:
    mov     eax, [r13+18h]
    test    eax, eax
    jz      short loc_119B0
    cmp     eax, 1C4Fh
    jnz     short loc_119EF
    mov     eax, [r13+40h]
    test    eax, eax
    jnz     short loc_119B0
    mov     dword ptr [r13+40h], 1
    
loc_119EF:
    mov     rdi, rbx
    call    _strlen
    lea     r12, [rax+1]
    mov     rdi, r12
    call    _malloc
    test    rax, rax
    mov     [r13+20h], rax
    jz      short loc_119B0
    lea     rdx, aSSS+4
    mov     rcx, rbx
    mov     rdi, rax
    mov     rsi, r12
    xor     eax, eax
    call    _snprintf
    mov     ecx, [r13+18h]
    test    r14d, r14d
    mov     eax, 80000h
    cmovnz  r14d, eax
    cmp     ecx, 1C4Fh
    jz      short loc_11A62
    cmp     ebp, 1
    sbb     edx, edx
    and     edx, 0FFFFFF80h
    add     edx, 2C1h
    cmp     ebp, 1
    sbb     eax, eax
    and     eax, 0FFFFFF80h
    add     eax, 4C1h
    cmp     ecx, 79B1h
    cmovz   eax, edx
    or      r14d, eax
    
loc_11A62:
    xor     eax, eax
    mov     edx, 1B6h
    mov     esi, r14d
    mov     rdi, rbx
    call    _open
    cmp     eax, 0FFFFFFFFh
    mov     [r13+1Ch], eax
    jz      loc_119A7
    mov     edx, [r13+18h]
    cmp     edx, 1
    jz      loc_11BA0
    cmp     edx, 1C4Fh
    jz      loc_11BC8
    mov     dword ptr [r13+0], 0
    
loc_11AA2:
    mov     rdi, [r13+70h]
    mov     dword ptr [r13+68h], 0
    test    rdi, rdi
    jz      short loc_11AC6
    cmp     dword ptr [r13+6Ch], 0FFFFFFFCh
    jnz     loc_11B90
    
loc_11ABE:
    mov     qword ptr [r13+70h], 0
    
loc_11AC6:
    mov     dword ptr [r13+6Ch], 0
    mov     qword ptr [r13+10h], 0
    mov     rax, r13
    mov     dword ptr [r13+80h], 0
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 10h
    
loc_11AF0:
    mov     r14d, 1
    jmp     def_119A5
    align 20h
    
loc_11B00:
    mov     dword ptr [r13+40h], 1
    jmp     def_119A5
    align 10h
    
loc_11B10:
    mov     dword ptr [r13+5Ch], 3
    jmp     def_119A5
    align 20h
    
loc_11B20:
    mov     dword ptr [r13+5Ch], 4
    jmp     def_119A5
    align 10h
    
loc_11B30:
    mov     dword ptr [r13+5Ch], 1
    jmp     def_119A5
    align 20h
    
loc_11B40:
    mov     ebp, 1
    jmp     def_119A5
    align 10h
    
loc_11B50:
    mov     dword ptr [r13+18h], 1
    jmp     def_119A5
    align 20h
    
loc_11B60:
    mov     dword ptr [r13+18h], 79B1h
    jmp     def_119A5
    align 10h
    
loc_11B70:
    mov     dword ptr [r13+18h], 1C4Fh
    jmp     def_119A5
    align 20h
    
loc_11B80:
    mov     dword ptr [r13+5Ch], 2
    jmp     def_119A5
    align 10h
    
loc_11B90:
    call    _free
    jmp     loc_11ABE
    align 20h
    
loc_11BA0:
    mov     edx, 2
    xor     esi, esi
    mov     edi, eax
    call    _lseek64
    mov     dword ptr [r13+18h], 79B1h
    mov     dword ptr [r13+0], 0
    jmp     loc_11AA2
    align 8
    
loc_11BC8:
    xor     esi, esi
    mov     edx, 1
    mov     edi, eax
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    mov     [r13+48h], rax
    jnz     short loc_11BE8
    mov     qword ptr [r13+48h], 0
    
loc_11BE8:
    mov     eax, [r13+18h]
    mov     dword ptr [r13+0], 0
    cmp     eax, 1C4Fh
    jnz     loc_11AA2
    mov     qword ptr [r13+50h], 0
    mov     dword ptr [r13+44h], 0
    jmp     loc_11AA2
    

<gzopen64>:
    
    test    rdi, rdi
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    jz      loc_11CD8
    mov     rbx, rdi
    mov     edi, 0E8h
    mov     r12, rsi
    call    _malloc
    test    rax, rax
    mov     r13, rax
    jz      loc_11CD8
    mov     rax, 200000000000h
    xor     ebp, ebp
    xor     r14d, r14d
    mov     [r13+28h], rax
    mov     eax, 0FFFFFFFFh
    mov     qword ptr [r13+70h], 0
    mov     [r13+58h], rax
    movsx   eax, byte ptr [r12]
    lea     rcx, jpt_11CC5
    mov     dword ptr [r13+18h], 0
    mov     dword ptr [r13+40h], 0
    test    al, al
    jnz     short loc_11CAC
    jmp     short loc_11CD0
    align 8
    
loc_11C98:
    sub     eax, 30h
    mov     [r13+58h], eax
    
def_11CC5:
    add     r12, 1
    movsx   eax, byte ptr [r12]
    test    al, al
    jz      short loc_11CF0
    
loc_11CAC:
    lea     edx, [rax-30h]
    cmp     dl, 9
    jbe     short loc_11C98
    sub     eax, 2Bh
    cmp     al, 4Dh
    ja      short def_11CC5
    movzx   eax, al
    movsxd  rax, ds:(jpt_11CC5 - 19C9Ch)[rcx+rax*4]
    add     rax, rcx
    jmp     rax
    
loc_11CC7:
    mov     rdi, [r13+20h]
    call    _free
    
loc_11CD0:
    mov     rdi, r13
    call    _free
    
loc_11CD8:
    xor     r13d, r13d
    pop     rbx
    mov     rax, r13
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 10h
    
loc_11CF0:
    mov     eax, [r13+18h]
    test    eax, eax
    jz      short loc_11CD0
    cmp     eax, 1C4Fh
    jnz     short loc_11D0F
    mov     eax, [r13+40h]
    test    eax, eax
    jnz     short loc_11CD0
    mov     dword ptr [r13+40h], 1
    
loc_11D0F:
    mov     rdi, rbx
    call    _strlen
    lea     r12, [rax+1]
    mov     rdi, r12
    call    _malloc
    test    rax, rax
    mov     [r13+20h], rax
    jz      short loc_11CD0
    lea     rdx, aSSS+4
    mov     rcx, rbx
    mov     rdi, rax
    mov     rsi, r12
    xor     eax, eax
    call    _snprintf
    mov     ecx, [r13+18h]
    test    r14d, r14d
    mov     eax, 80000h
    cmovnz  r14d, eax
    cmp     ecx, 1C4Fh
    jz      short loc_11D82
    cmp     ebp, 1
    sbb     edx, edx
    and     edx, 0FFFFFF80h
    add     edx, 2C1h
    cmp     ebp, 1
    sbb     eax, eax
    and     eax, 0FFFFFF80h
    add     eax, 4C1h
    cmp     ecx, 79B1h
    cmovz   eax, edx
    or      r14d, eax
    
loc_11D82:
    xor     eax, eax
    mov     edx, 1B6h
    mov     esi, r14d
    mov     rdi, rbx
    call    _open
    cmp     eax, 0FFFFFFFFh
    mov     [r13+1Ch], eax
    jz      loc_11CC7
    mov     edx, [r13+18h]
    cmp     edx, 1
    jz      loc_11EC0
    cmp     edx, 1C4Fh
    jz      loc_11EE8
    mov     dword ptr [r13+0], 0
    
loc_11DC2:
    mov     rdi, [r13+70h]
    mov     dword ptr [r13+68h], 0
    test    rdi, rdi
    jz      short loc_11DE6
    cmp     dword ptr [r13+6Ch], 0FFFFFFFCh
    jnz     loc_11EB0
    
loc_11DDE:
    mov     qword ptr [r13+70h], 0
    
loc_11DE6:
    mov     dword ptr [r13+6Ch], 0
    mov     qword ptr [r13+10h], 0
    mov     rax, r13
    mov     dword ptr [r13+80h], 0
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 10h
    
loc_11E10:
    mov     r14d, 1
    jmp     def_11CC5
    align 20h
    
loc_11E20:
    mov     dword ptr [r13+40h], 1
    jmp     def_11CC5
    align 10h
    
loc_11E30:
    mov     dword ptr [r13+5Ch], 3
    jmp     def_11CC5
    align 20h
    
loc_11E40:
    mov     dword ptr [r13+5Ch], 4
    jmp     def_11CC5
    align 10h
    
loc_11E50:
    mov     dword ptr [r13+5Ch], 1
    jmp     def_11CC5
    align 20h
    
loc_11E60:
    mov     ebp, 1
    jmp     def_11CC5
    align 10h
    
loc_11E70:
    mov     dword ptr [r13+18h], 1
    jmp     def_11CC5
    align 20h
    
loc_11E80:
    mov     dword ptr [r13+18h], 79B1h
    jmp     def_11CC5
    align 10h
    
loc_11E90:
    mov     dword ptr [r13+18h], 1C4Fh
    jmp     def_11CC5
    align 20h
    
loc_11EA0:
    mov     dword ptr [r13+5Ch], 2
    jmp     def_11CC5
    align 10h
    
loc_11EB0:
    call    _free
    jmp     loc_11DDE
    align 20h
    
loc_11EC0:
    mov     edx, 2
    xor     esi, esi
    mov     edi, eax
    call    _lseek64
    mov     dword ptr [r13+18h], 79B1h
    mov     dword ptr [r13+0], 0
    jmp     loc_11DC2
    align 8
    
loc_11EE8:
    xor     esi, esi
    mov     edx, 1
    mov     edi, eax
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    mov     [r13+48h], rax
    jnz     short loc_11F08
    mov     qword ptr [r13+48h], 0
    
loc_11F08:
    mov     eax, [r13+18h]
    mov     dword ptr [r13+0], 0
    cmp     eax, 1C4Fh
    jnz     loc_11DC2
    mov     qword ptr [r13+50h], 0
    mov     dword ptr [r13+44h], 0
    jmp     loc_11DC2
    

<gzdopen>:
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 8
    cmp     edi, 0FFFFFFFFh
    jz      loc_12240
    mov     ebp, edi
    mov     edi, 13h
    mov     r12, rsi
    call    _malloc
    test    rax, rax
    mov     rbx, rax
    jz      loc_12240
    lea     r8, aFdD
    mov     rdi, rax
    mov     r9d, ebp
    mov     ecx, 13h
    mov     edx, 1
    mov     esi, 13h
    xor     eax, eax
    call    ___snprintf_chk
    mov     edi, 0E8h
    call    _malloc
    test    rax, rax
    mov     r13, rax
    jz      loc_1216C
    mov     rax, 200000000000h
    xor     r15d, r15d
    xor     r14d, r14d
    mov     [r13+28h], rax
    mov     eax, 0FFFFFFFFh
    mov     qword ptr [r13+70h], 0
    mov     [r13+58h], rax
    movsx   eax, byte ptr [r12]
    lea     rcx, jpt_12025
    mov     dword ptr [r13+18h], 0
    mov     dword ptr [r13+40h], 0
    test    al, al
    jnz     short loc_1200C
    jmp     loc_12190
    align 8
    
loc_11FF8:
    sub     eax, 30h
    mov     [r13+58h], eax
    
def_12025:
    add     r12, 1
    movsx   eax, byte ptr [r12]
    test    al, al
    jz      short loc_12030
    
loc_1200C:
    lea     edx, [rax-30h]
    cmp     dl, 9
    jbe     short loc_11FF8
    sub     eax, 2Bh
    cmp     al, 4Dh
    ja      short def_12025
    movzx   eax, al
    movsxd  rax, ds:(jpt_12025 - 19DD4h)[rcx+rax*4]
    add     rax, rcx
    jmp     rax
    align 10h
    
loc_12030:
    mov     eax, [r13+18h]
    test    eax, eax
    jz      loc_12190
    cmp     eax, 1C4Fh
    jnz     short loc_12057
    mov     eax, [r13+40h]
    test    eax, eax
    jnz     loc_12190
    mov     dword ptr [r13+40h], 1
    
loc_12057:
    mov     rsi, rbx
    
loc_1205A:
    mov     edx, [rsi]
    add     rsi, 4
    lea     eax, [rdx-1010101h]
    not     edx
    and     eax, edx
    and     eax, 80808080h
    jz      short loc_1205A
    mov     edx, eax
    shr     edx, 10h
    test    eax, 8080h
    cmovz   eax, edx
    lea     rdx, [rsi+2]
    mov     edi, eax
    cmovz   rsi, rdx
    add     dil, al
    sbb     rsi, 3
    sub     rsi, rbx
    lea     r12, [rsi+1]
    mov     rdi, r12
    call    _malloc
    test    rax, rax
    mov     rdi, rax
    mov     [r13+20h], rax
    jz      loc_12190
    lea     rdx, aSSS+4
    xor     eax, eax
    mov     rcx, rbx
    mov     rsi, r12
    call    _snprintf
    mov     edx, [r13+18h]
    test    r14d, r14d
    mov     eax, 80000h
    cmovnz  r14d, eax
    cmp     edx, 1C4Fh
    jz      short loc_12103
    cmp     r15d, 1
    sbb     eax, eax
    and     eax, 0FFFFFF80h
    add     eax, 2C1h
    cmp     r15d, 1
    sbb     ecx, ecx
    and     ecx, 0FFFFFF80h
    add     ecx, 4C1h
    cmp     edx, 79B1h
    cmovnz  eax, ecx
    or      r14d, eax
    
loc_12103:
    test    ebp, ebp
    js      loc_12250
    mov     [r13+1Ch], ebp
    
loc_1210F:
    cmp     edx, 1
    jz      loc_122D0
    cmp     edx, 1C4Fh
    jz      loc_12280
    mov     dword ptr [r13+0], 0
    
loc_1212C:
    mov     rdi, [r13+70h]
    mov     dword ptr [r13+68h], 0
    test    rdi, rdi
    jz      short loc_12151
    cmp     dword ptr [r13+6Ch], 0FFFFFFFCh
    jz      short loc_12149
    call    _free
    
loc_12149:
    mov     qword ptr [r13+70h], 0
    
loc_12151:
    mov     dword ptr [r13+6Ch], 0
    mov     qword ptr [r13+10h], 0
    mov     dword ptr [r13+80h], 0
    
loc_1216C:
    mov     rdi, rbx
    call    _free
    
loc_12174:
    add     rsp, 8
    mov     rax, r13
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_12186:
    mov     rdi, [r13+20h]
    call    _free
    nop
    
loc_12190:
    mov     rdi, r13
    xor     r13d, r13d
    call    _free
    jmp     short loc_1216C
    align 20h
    
loc_121A0:
    mov     r14d, 1
    jmp     def_12025
    align 10h
    
loc_121B0:
    mov     dword ptr [r13+5Ch], 1
    jmp     def_12025
    align 20h
    
loc_121C0:
    mov     r15d, 1
    jmp     def_12025
    align 10h
    
loc_121D0:
    mov     dword ptr [r13+18h], 1
    jmp     def_12025
    align 20h
    
loc_121E0:
    mov     dword ptr [r13+18h], 79B1h
    jmp     def_12025
    align 10h
    
loc_121F0:
    mov     dword ptr [r13+18h], 1C4Fh
    jmp     def_12025
    align 20h
    
loc_12200:
    mov     dword ptr [r13+5Ch], 2
    jmp     def_12025
    align 10h
    
loc_12210:
    mov     dword ptr [r13+40h], 1
    jmp     def_12025
    align 20h
    
loc_12220:
    mov     dword ptr [r13+5Ch], 3
    jmp     def_12025
    align 10h
    
loc_12230:
    mov     dword ptr [r13+5Ch], 4
    jmp     def_12025
    align 20h
    
loc_12240:
    xor     r13d, r13d
    jmp     loc_12174
    align 10h
    
loc_12250:
    xor     eax, eax
    mov     edx, 1B6h
    mov     esi, r14d
    mov     rdi, rbx
    call    _open
    cmp     eax, 0FFFFFFFFh
    mov     ebp, eax
    mov     [r13+1Ch], eax
    jz      loc_12186
    mov     edx, [r13+18h]
    jmp     loc_1210F
    align 20h
    
loc_12280:
    xor     esi, esi
    mov     edx, 1
    mov     edi, ebp
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    mov     [r13+48h], rax
    jnz     short loc_122A0
    mov     qword ptr [r13+48h], 0
    
loc_122A0:
    mov     eax, [r13+18h]
    mov     dword ptr [r13+0], 0
    cmp     eax, 1C4Fh
    jnz     loc_1212C
    mov     qword ptr [r13+50h], 0
    mov     dword ptr [r13+44h], 0
    jmp     loc_1212C
    align 10h
    
loc_122D0:
    mov     edx, 2
    xor     esi, esi
    mov     edi, ebp
    call    _lseek64
    mov     dword ptr [r13+18h], 79B1h
    mov     dword ptr [r13+0], 0
    jmp     loc_1212C
    

<gzbuffer>:
    
    test    rdi, rdi
    jz      short loc_12338
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_12316
    cmp     eax, 79B1h
    jnz     short loc_12338
    
loc_12316:
    mov     eax, [rdi+28h]
    test    eax, eax
    jnz     short loc_12338
    lea     eax, [rsi+rsi]
    cmp     eax, esi
    jb      short loc_12338
    cmp     esi, 2
    mov     eax, 2
    cmovb   esi, eax
    xor     eax, eax
    mov     [rdi+2Ch], esi
    retn
    align 8
    
loc_12338:
    mov     eax, 0FFFFFFFFh
    retn
    

<gzrewind>:
    
    test    rdi, rdi
    jz      loc_12400
    cmp     dword ptr [rdi+18h], 1C4Fh
    jnz     loc_12400
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jz      short loc_12366
    cmp     eax, 0FFFFFFFBh
    jnz     loc_12400
    
loc_12366:
    push    rbx
    mov     rbx, rdi
    mov     rsi, [rdi+48h]
    mov     edi, [rdi+1Ch]
    xor     edx, edx
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    jz      short loc_123F0
    cmp     dword ptr [rbx+18h], 1C4Fh
    mov     dword ptr [rbx], 0
    jnz     short loc_1239C
    mov     qword ptr [rbx+50h], 0
    mov     dword ptr [rbx+44h], 0
    
loc_1239C:
    mov     rdi, [rbx+70h]
    mov     dword ptr [rbx+68h], 0
    test    rdi, rdi
    jz      short loc_123BA
    cmp     dword ptr [rbx+6Ch], 0FFFFFFFCh
    jnz     short loc_123E0
    
loc_123B2:
    mov     qword ptr [rbx+70h], 0
    
loc_123BA:
    mov     dword ptr [rbx+6Ch], 0
    mov     qword ptr [rbx+10h], 0
    xor     eax, eax
    mov     dword ptr [rbx+80h], 0
    pop     rbx
    retn
    align 20h
    
loc_123E0:
    call    _free
    jmp     short loc_123B2
    align 10h
    
loc_123F0:
    mov     eax, 0FFFFFFFFh
    pop     rbx
    retn
    align 20h
    
loc_12400:
    mov     eax, 0FFFFFFFFh
    retn
    

<gzseek64>:
    
    test    rdi, rdi
    jz      loc_1259D
    push    rbp
    push    rbx
    mov     rbp, rsi
    mov     rbx, rdi
    sub     rsp, 8
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_1243A
    cmp     eax, 79B1h
    jnz     loc_1251D
    
loc_1243A:
    mov     ecx, [rbx+6Ch]
    test    ecx, ecx
    jz      short loc_1244A
    cmp     ecx, 0FFFFFFFBh
    jnz     loc_1251D
    
loc_1244A:
    cmp     edx, 1
    ja      loc_1251D
    test    edx, edx
    jz      short loc_124A0
    mov     edx, [rbx+68h]
    test    edx, edx
    jz      short loc_12462
    add     rbp, [rbx+60h]
    
loc_12462:
    cmp     eax, 1C4Fh
    mov     dword ptr [rbx+68h], 0
    jz      short loc_124B2
    
loc_12470:
    test    rbp, rbp
    js      loc_1251D
    mov     rax, [rbx+10h]
    
loc_1247D:
    test    rbp, rbp
    jz      short loc_1248D
    mov     dword ptr [rbx+68h], 1
    mov     [rbx+60h], rbp
    
loc_1248D:
    add     rax, rbp
    
loc_12490:
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 20h
    
loc_124A0:
    sub     rbp, [rbx+10h]
    cmp     eax, 1C4Fh
    mov     dword ptr [rbx+68h], 0
    jnz     short loc_12470
    
loc_124B2:
    cmp     dword ptr [rbx+44h], 1
    mov     rax, [rbx+10h]
    jz      short loc_12510
    test    rbp, rbp
    jns     short loc_124E0
    add     rbp, rax
    js      short loc_1251D
    mov     rdi, rbx
    call    _gzrewind
    cmp     eax, 0FFFFFFFFh
    jz      short loc_1251D
    cmp     dword ptr [rbx+18h], 1C4Fh
    mov     rax, [rbx+10h]
    jnz     short loc_1247D
    
loc_124E0:
    mov     edx, [rbx]
    xor     esi, esi
    cmp     rdx, rbp
    mov     rcx, rdx
    jle     short loc_124F5
    mov     esi, edx
    mov     rcx, rbp
    mov     edx, ebp
    sub     esi, ebp
    
loc_124F5:
    add     rax, rcx
    mov     [rbx], esi
    add     [rbx+8], rdx
    mov     [rbx+10h], rax
    sub     rbp, rcx
    jmp     loc_1247D
    align 10h
    
loc_12510:
    mov     rdi, rbp
    add     rdi, rax
    jns     short loc_12530
    test    rbp, rbp
    jns     short loc_124E0
    
loc_1251D:
    add     rsp, 8
    mov     rax, 0FFFFFFFFFFFFFFFFh
    pop     rbx
    pop     rbp
    retn
    align 10h
    
loc_12530:
    mov     eax, [rbx]
    mov     edi, [rbx+1Ch]
    mov     rsi, rbp
    mov     edx, 1
    sub     rsi, rax
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    jz      short loc_1251D
    mov     rdi, [rbx+70h]
    mov     dword ptr [rbx], 0
    mov     qword ptr [rbx+50h], 0
    mov     dword ptr [rbx+68h], 0
    test    rdi, rdi
    jz      short loc_1257C
    cmp     dword ptr [rbx+6Ch], 0FFFFFFFCh
    jz      short loc_12574
    call    _free
    
loc_12574:
    mov     qword ptr [rbx+70h], 0
    
loc_1257C:
    mov     rax, [rbx+10h]
    mov     dword ptr [rbx+6Ch], 0
    mov     dword ptr [rbx+80h], 0
    add     rax, rbp
    mov     [rbx+10h], rax
    jmp     loc_12490
    
loc_1259D:
    or      rax, 0FFFFFFFFFFFFFFFFh
    retn
    

<gzseek>:
    
    jmp     _gzseek64
    

<gztell64>:
    
    test    rdi, rdi
    jz      short loc_125F0
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_125D6
    cmp     eax, 79B1h
    jnz     short loc_125F0
    
loc_125D6:
    mov     edx, [rdi+68h]
    mov     rax, [rdi+10h]
    test    edx, edx
    jz      short locret_125F7
    add     rax, [rdi+60h]
    retn
    align 10h
    
loc_125F0:
    mov     rax, 0FFFFFFFFFFFFFFFFh
    
locret_125F7:
    rep retn
    

<gztell>:
    
    jmp     _gztell64
    

<gzoffset64>:
    
    test    rdi, rdi
    jz      short loc_12660
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_12626
    cmp     eax, 79B1h
    jnz     short loc_12660
    
loc_12626:
    push    rbx
    mov     rbx, rdi
    mov     edi, [rdi+1Ch]
    xor     esi, esi
    mov     edx, 1
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    jz      short loc_12668
    cmp     dword ptr [rbx+18h], 1C4Fh
    jz      short loc_12650
    pop     rbx
    retn
    align 10h
    
loc_12650:
    mov     edx, [rbx+80h]
    pop     rbx
    sub     rax, rdx
    retn
    align 20h
    
loc_12660:
    mov     rax, 0FFFFFFFFFFFFFFFFh
    retn
    
loc_12668:
    mov     rax, 0FFFFFFFFFFFFFFFFh
    pop     rbx
    retn
    

<gzoffset>:
    
    jmp     _gzoffset64
    

<gzeof>:
    
    xor     eax, eax
    test    rdi, rdi
    jz      short locret_126A0
    cmp     dword ptr [rdi+18h], 1C4Fh
    jz      short loc_126A8
    
locret_126A0:
    rep retn
    align 8
    
loc_126A8:
    mov     eax, [rdi+54h]
    retn
    

<gzerror>:
    
    test    rdi, rdi
    jz      short loc_126F8
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_126C6
    cmp     eax, 79B1h
    jnz     short loc_126F8
    
loc_126C6:
    test    rsi, rsi
    mov     edx, [rdi+6Ch]
    jz      short loc_126D3
    mov     [rsi], edx
    mov     edx, [rdi+6Ch]
    
loc_126D3:
    cmp     edx, 0FFFFFFFCh
    lea     rax, aOutOfMemory
    jz      short locret_126FA
    mov     rax, [rdi+70h]
    lea     rdx, asc_19B61+2
    test    rax, rax
    cmovz   rax, rdx
    retn
    align 8
    
loc_126F8:
    xor     eax, eax
    
locret_126FA:
    rep retn
    

<gzclearerr>:
    
    test    rdi, rdi
    jz      short locret_12716
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_12720
    cmp     eax, 79B1h
    jz      short loc_12720
    
locret_12716:
    rep retn
    align 20h
    
loc_12720:
    cmp     eax, 1C4Fh
    push    rbx
    jnz     short loc_12730
    mov     qword ptr [rdi+50h], 0
    
loc_12730:
    mov     rbx, rdi
    mov     rdi, [rdi+70h]
    test    rdi, rdi
    jz      short loc_1274A
    cmp     dword ptr [rbx+6Ch], 0FFFFFFFCh
    jnz     short loc_12758
    
loc_12742:
    mov     qword ptr [rbx+70h], 0
    
loc_1274A:
    mov     dword ptr [rbx+6Ch], 0
    pop     rbx
    retn
    align 8
    
loc_12758:
    call    _free
    jmp     short loc_12742
    

<gz_error>:
    
    var_2C= dword ptr -2Ch
    
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    mov     rbp, rdx
    sub     rsp, 18h
    mov     rdi, [rdi+70h]
    test    rdi, rdi
    jz      short loc_1278B
    cmp     dword ptr [rbx+6Ch], 0FFFFFFFCh
    jnz     loc_12828
    
loc_12783:
    mov     qword ptr [rbx+70h], 0
    
loc_1278B:
    test    esi, esi
    jz      short loc_1279A
    cmp     esi, 0FFFFFFFBh
    jz      short loc_1279A
    mov     dword ptr [rbx], 0
    
loc_1279A:
    cmp     esi, 0FFFFFFFCh
    mov     [rbx+6Ch], esi
    jz      short loc_12817
    test    rbp, rbp
    jz      short loc_12817
    mov     r13, [rbx+20h]
    mov     rdi, r13
    call    _strlen
    mov     rdi, rbp
    mov     r12, rax
    call    _strlen
    lea     rdi, [r12+rax+3]
    call    _malloc
    test    rax, rax
    mov     r12, rax
    mov     [rbx+70h], rax
    jz      short loc_12840
    mov     rdi, r13
    call    _strlen
    mov     rdi, rbp
    mov     rbx, rax
    call    _strlen
    lea     rsi, [rbx+rax+3]
    lea     rax, asc_19B61
    push    rbp
    lea     r8, aSSS
    mov     edx, 1
    mov     r9, r13
    push    rax
    mov     rcx, 0FFFFFFFFFFFFFFFFh
    mov     rdi, r12
    xor     eax, eax
    call    ___snprintf_chk
    pop     rax
    pop     rdx
    
loc_12817:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 8
    
loc_12828:
    mov     [rsp+38h+var_2C], esi
    call    _free
    mov     esi, [rsp+38h+var_2C]
    jmp     loc_12783
    align 20h
    
loc_12840:
    mov     dword ptr [rbx+6Ch], 0FFFFFFFCh
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    

<gz_load>:
    
    push    r14
    mov     dword ptr [rcx], 0
    mov     r14, rcx
    push    r13
    xor     eax, eax
    push    r12
    mov     r13, rdi
    push    rbp
    mov     r12d, edx
    push    rbx
    mov     rbp, rsi
    mov     ebx, 40000000h
    jmp     short loc_12893
    align 8
    
loc_12888:
    add     eax, [r14]
    cmp     eax, r12d
    mov     [r14], eax
    jnb     short loc_128D0
    
loc_12893:
    mov     edx, r12d
    mov     edi, [r13+1Ch]
    lea     rsi, [rbp+rax+0]
    sub     edx, eax
    cmp     edx, 40000000h
    cmova   rdx, rbx
    call    _read
    test    eax, eax
    mov     edx, eax
    jg      short loc_12888
    test    eax, eax
    jnz     short loc_128DD
    mov     dword ptr [r13+50h], 1
    
loc_128C2:
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 10h
    
loc_128D0:
    xor     edx, edx
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    
loc_128DD:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r13
    call    gz_error
    mov     edx, 0FFFFFFFFh
    jmp     short loc_128C2
    

<gz_look>:
    
    var_34= dword ptr -34h
    var_30= qword ptr -30h
    
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    lea     rbp, [rdi+78h]
    mov     rbx, rdi
    sub     rsp, 18h
    mov     edi, [rdi+28h]
    mov     rax, fs:28h
    mov     [rsp+38h+var_30], rax
    xor     eax, eax
    test    edi, edi
    jz      short loc_12990
    
loc_12928:
    mov     eax, [rbx+80h]
    cmp     eax, 1
    jbe     loc_12A50
    
loc_12937:
    mov     rsi, [rbx+78h]
    cmp     byte ptr [rsi], 1Fh
    jz      loc_12B10
    
loc_12944:
    mov     edx, [rbx+40h]
    test    edx, edx
    jnz     loc_12B50
    
loc_1294F:
    mov     dword ptr [rbx+80h], 0
    mov     dword ptr [rbx+50h], 1
    xor     eax, eax
    mov     dword ptr [rbx], 0
    
loc_12968:
    mov     rcx, [rsp+38h+var_30]
    xor     rcx, fs:28h
    jnz     loc_12B6F
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_12990:
    mov     edi, [rbx+2Ch]
    mov     r12, rdi
    call    _malloc
    lea     edi, [r12+r12]
    mov     r13, rax
    mov     [rbx+30h], rax
    call    _malloc
    test    r13, r13
    mov     [rbx+38h], rax
    jz      loc_12B5A
    test    rax, rax
    jz      loc_12B5A
    lea     rdx, a1211
    mov     [rbx+28h], r12d
    mov     qword ptr [rbx+0B8h], 0
    mov     qword ptr [rbx+0C0h], 0
    mov     qword ptr [rbx+0C8h], 0
    mov     ecx, 70h
    mov     dword ptr [rbx+80h], 0
    mov     qword ptr [rbx+78h], 0
    mov     esi, 1Fh
    mov     rdi, rbp
    call    _inflateInit2_
    test    eax, eax
    jz      loc_12928
    mov     rdi, [rbx+38h]
    call    _free
    mov     rdi, [rbx+30h]
    call    _free
    mov     dword ptr [rbx+28h], 0
    
loc_12A32:
    lea     rdx, aOutOfMemory
    mov     esi, 0FFFFFFFCh
    mov     rdi, rbx
    call    gz_error
    
loc_12A46:
    mov     eax, 0FFFFFFFFh
    jmp     loc_12968
    
loc_12A50:
    mov     edx, [rbx+6Ch]
    test    edx, edx
    jz      short loc_12A5C
    cmp     edx, 0FFFFFFFBh
    jnz     short loc_12A46
    
loc_12A5C:
    mov     esi, [rbx+50h]
    test    esi, esi
    jnz     loc_12B40
    test    eax, eax
    mov     rsi, [rbx+30h]
    jz      short loc_12A82
    mov     rax, [rbx+78h]
    movzx   eax, byte ptr [rax]
    mov     [rsi], al
    mov     eax, [rbx+80h]
    mov     rsi, [rbx+30h]
    
loc_12A82:
    mov     edx, [rbx+28h]
    lea     rcx, [rsp+38h+var_34]
    add     rsi, rax
    mov     rdi, rbx
    sub     edx, eax
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jz      loc_12968
    mov     eax, [rsp+38h+var_34]
    add     eax, [rbx+80h]
    mov     rdx, [rbx+30h]
    test    eax, eax
    mov     [rbx+80h], eax
    mov     [rbx+78h], rdx
    jz      short loc_12B08
    cmp     eax, 1
    jnz     loc_12937
    
loc_12AC5:
    mov     ecx, [rbx+40h]
    test    ecx, ecx
    jz      loc_1294F
    mov     rdi, [rbx+38h]
    mov     rsi, [rbx+78h]
    mov     eax, 1
    mov     [rbx+8], rdi
    
loc_12AE1:
    mov     edx, eax
    call    _memcpy
    mov     eax, [rbx+80h]
    mov     dword ptr [rbx+80h], 0
    mov     [rbx], eax
    mov     rax, 100000001h
    mov     [rbx+40h], rax
    
loc_12B08:
    xor     eax, eax
    jmp     loc_12968
    align 10h
    
loc_12B10:
    cmp     byte ptr [rsi+1], 8Bh
    jnz     loc_12944
    mov     rdi, rbp
    call    _inflateReset
    mov     rax, 200000000h
    mov     [rbx+40h], rax
    xor     eax, eax
    jmp     loc_12968
    align 20h
    
loc_12B40:
    test    eax, eax
    jnz     short loc_12AC5
    xor     eax, eax
    jmp     loc_12968
    align 10h
    
loc_12B50:
    mov     rdi, [rbx+38h]
    mov     [rbx+8], rdi
    jmp     short loc_12AE1
    
loc_12B5A:
    mov     rdi, rax
    call    _free
    mov     rdi, r13
    call    _free
    jmp     loc_12A32
    
loc_12B6F:
    call    ___stack_chk_fail
    

<gz_decomp>:
    
    var_34= dword ptr -34h
    var_30= qword ptr -30h
    
    
    push    r13
    push    r12
    lea     r12, [rdi+78h]
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    mov     ebp, [rdi+98h]
    mov     rax, fs:28h
    mov     [rsp+38h+var_30], rax
    xor     eax, eax
    lea     r13, [rsp+38h+var_34]
    jmp     short loc_12BEF
    align 10h
    
loc_12BB0:
    xor     esi, esi
    mov     rdi, r12
    call    _inflate
    lea     edx, [rax+2]
    and     edx, 0FFFFFFFBh
    jz      loc_12CA0
    cmp     eax, 0FFFFFFFCh
    jz      loc_12CC0
    cmp     eax, 0FFFFFFFDh
    jz      loc_12CE0
    mov     edx, [rbx+98h]
    test    edx, edx
    jz      loc_12D10
    cmp     eax, 1
    jz      loc_12D40
    
loc_12BEF:
    mov     edx, [rbx+80h]
    test    edx, edx
    jnz     short loc_12BB0
    mov     eax, [rbx+6Ch]
    test    eax, eax
    jz      short loc_12C09
    cmp     eax, 0FFFFFFFBh
    jnz     loc_12D60
    
loc_12C09:
    mov     eax, [rbx+50h]
    test    eax, eax
    jnz     short loc_12C50
    mov     edx, [rbx+28h]
    mov     rsi, [rbx+30h]
    mov     rcx, r13
    mov     rdi, rbx
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    mov     edx, eax
    jz      short loc_12C7C
    mov     eax, [rsp+38h+var_34]
    add     eax, [rbx+80h]
    mov     rdx, [rbx+30h]
    test    eax, eax
    mov     [rbx+80h], eax
    mov     [rbx+78h], rdx
    jnz     loc_12BB0
    nop     dword ptr [rax+00000000h]
    
loc_12C50:
    lea     rdx, aUnexpectedEndO
    mov     esi, 0FFFFFFFBh
    mov     rdi, rbx
    call    gz_error
    sub     ebp, [rbx+98h]
    mov     rax, [rbx+90h]
    xor     edx, edx
    sub     rax, rbp
    mov     [rbx], ebp
    mov     [rbx+8], rax
    
loc_12C7C:
    mov     rcx, [rsp+38h+var_30]
    xor     rcx, fs:28h
    mov     eax, edx
    jnz     loc_12D6A
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_12CA0:
    lea     rdx, aInternalErrorI
    mov     esi, 0FFFFFFFEh
    mov     rdi, rbx
    call    gz_error
    mov     edx, 0FFFFFFFFh
    jmp     short loc_12C7C
    align 20h
    
loc_12CC0:
    lea     rdx, aOutOfMemory
    mov     esi, eax
    mov     rdi, rbx
    call    gz_error
    mov     edx, 0FFFFFFFFh
    jmp     short loc_12C7C
    align 20h
    
loc_12CE0:
    mov     rdx, [rbx+0A8h]
    lea     rcx, aCompressedData
    mov     esi, eax
    mov     rdi, rbx
    test    rdx, rdx
    cmovz   rdx, rcx
    call    gz_error
    mov     edx, 0FFFFFFFFh
    jmp     loc_12C7C
    align 10h
    
loc_12D10:
    mov     rdx, [rbx+90h]
    mov     [rbx], ebp
    sub     rdx, rbp
    mov     [rbx+8], rdx
    xor     edx, edx
    cmp     eax, 1
    jnz     loc_12C7C
    mov     dword ptr [rbx+44h], 0
    xor     edx, edx
    jmp     loc_12C7C
    align 20h
    
loc_12D40:
    mov     rax, [rbx+90h]
    sub     ebp, edx
    mov     dword ptr [rbx+44h], 0
    mov     [rbx], ebp
    xor     edx, edx
    sub     rax, rbp
    mov     [rbx+8], rax
    jmp     loc_12C7C
    
loc_12D60:
    mov     edx, 0FFFFFFFFh
    jmp     loc_12C7C
    
loc_12D6A:
    call    ___stack_chk_fail
    

<gz_skip>:
    
    test    rsi, rsi
    jz      loc_12F01
    push    r15
    push    r14
    mov     r15, rdi
    push    r13
    push    r12
    mov     r13, rsi
    push    rbp
    push    rbx
    mov     r14d, 40000000h
    sub     rsp, 8
    mov     eax, [rdi]
    nop     dword ptr [rax]
    
loc_12D98:
    test    eax, eax
    mov     ebx, eax
    jz      short loc_12DD1
    
loc_12D9E:
    mov     ecx, eax
    xor     esi, esi
    cmp     rcx, r13
    mov     rdx, rcx
    jle     short loc_12DB5
    sub     eax, r13d
    mov     edx, r13d
    mov     ecx, r13d
    mov     esi, eax
    
loc_12DB5:
    add     [r15+8], rcx
    add     [r15+10h], rdx
    sub     r13, rdx
    mov     [r15], esi
    jz      loc_12EF0
    mov     eax, esi
    test    eax, eax
    mov     ebx, eax
    jnz     short loc_12D9E
    
loc_12DD1:
    mov     r8d, [r15+50h]
    test    r8d, r8d
    jz      short loc_12DE9
    mov     edi, [r15+80h]
    test    edi, edi
    jz      loc_12EF0
    
loc_12DE9:
    mov     edx, [r15+44h]
    cmp     edx, 1
    jz      short loc_12E1F
    
loc_12DF2:
    cmp     edx, 2
    jz      loc_12EB0
    test    edx, edx
    jz      loc_12E88
    
loc_12E03:
    mov     ecx, [r15+50h]
    test    ecx, ecx
    jz      short loc_12DE9
    mov     edx, [r15+80h]
    test    edx, edx
    jz      short loc_12D98
    mov     edx, [r15+44h]
    cmp     edx, 1
    jnz     short loc_12DF2
    
loc_12E1F:
    mov     eax, [r15+28h]
    mov     r12, [r15+38h]
    mov     dword ptr [r15], 0
    lea     ebp, [rax+rax]
    jmp     short loc_12E44
    align 8
    
loc_12E38:
    mov     ebx, [r15]
    add     ebx, eax
    cmp     ebp, ebx
    mov     [r15], ebx
    jbe     short loc_12E74
    
loc_12E44:
    mov     edx, ebp
    mov     edi, [r15+1Ch]
    mov     esi, ebx
    sub     edx, ebx
    cmp     edx, 40000000h
    cmova   rdx, r14
    add     rsi, r12
    call    _read
    test    eax, eax
    jg      short loc_12E38
    test    eax, eax
    jnz     loc_12F04
    mov     dword ptr [r15+50h], 1
    
loc_12E74:
    mov     rax, [r15+38h]
    mov     [r15+8], rax
    
loc_12E7C:
    mov     eax, [r15]
    jmp     loc_12D98
    align 8
    
loc_12E88:
    mov     rdi, r15
    call    gz_look
    cmp     eax, 0FFFFFFFFh
    jz      short loc_12ED5
    mov     esi, [r15+44h]
    test    esi, esi
    jz      short loc_12E7C
    
loc_12E9D:
    mov     eax, [r15]
    test    eax, eax
    jz      loc_12E03
    jmp     loc_12D98
    align 10h
    
loc_12EB0:
    mov     eax, [r15+28h]
    mov     rdi, r15
    add     eax, eax
    mov     [r15+98h], eax
    mov     rax, [r15+38h]
    mov     [r15+90h], rax
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_12E9D
    
loc_12ED5:
    add     rsp, 8
    mov     eax, 0FFFFFFFFh
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_12EF0:
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_12F01:
    xor     eax, eax
    retn
    
loc_12F04:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r15
    call    gz_error
    jmp     short loc_12ED5
    

<gz_fetch>:
    
    push    r13
    push    r12
    mov     r13, rdi
    push    rbp
    push    rbx
    sub     rsp, 8
    
loc_12F3D:
    mov     eax, [r13+44h]
    cmp     eax, 1
    jz      loc_12FD0
    cmp     eax, 2
    jz      short loc_12FA0
    test    eax, eax
    jz      short loc_12F80
    
loc_12F53:
    mov     ecx, [r13+0]
    test    ecx, ecx
    jnz     short loc_12F70
    mov     edx, [r13+50h]
    test    edx, edx
    jz      short loc_12F3D
    mov     eax, [r13+80h]
    test    eax, eax
    jnz     short loc_12F3D
    xchg    ax, ax
    
loc_12F70:
    xor     eax, eax
    
loc_12F72:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_12F80:
    mov     rdi, r13
    call    gz_look
    cmp     eax, 0FFFFFFFFh
    jz      short loc_12FC5
    mov     esi, [r13+44h]
    test    esi, esi
    jnz     short loc_12F53
    jmp     short loc_12F70
    align 20h
    
loc_12FA0:
    mov     eax, [r13+28h]
    mov     rdi, r13
    add     eax, eax
    mov     [r13+98h], eax
    mov     rax, [r13+38h]
    mov     [r13+90h], rax
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_12F53
    
loc_12FC5:
    mov     eax, 0FFFFFFFFh
    jmp     short loc_12F72
    align 10h
    
loc_12FD0:
    mov     eax, [r13+28h]
    mov     r12, [r13+38h]
    mov     ebp, 40000000h
    mov     dword ptr [r13+0], 0
    lea     ebx, [rax+rax]
    xor     eax, eax
    jmp     short loc_12FFC
    align 10h
    
loc_12FF0:
    add     eax, [r13+0]
    cmp     ebx, eax
    mov     [r13+0], eax
    jbe     short loc_13027
    
loc_12FFC:
    mov     edx, ebx
    mov     edi, [r13+1Ch]
    lea     rsi, [r12+rax]
    sub     edx, eax
    cmp     edx, 40000000h
    cmova   rdx, rbp
    call    _read
    test    eax, eax
    jg      short loc_12FF0
    test    eax, eax
    jnz     short loc_13034
    mov     dword ptr [r13+50h], 1
    
loc_13027:
    mov     rax, [r13+38h]
    mov     [r13+8], rax
    jmp     loc_12F70
    
loc_13034:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r13
    call    gz_error
    jmp     loc_12FC5
    

<gzread>:
    
    var_50= qword ptr -50h
    var_44= dword ptr -44h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 28h
    mov     rax, fs:28h
    mov     [rsp+58h+var_40], rax
    xor     eax, eax
    test    rdi, rdi
    jz      loc_13200
    cmp     dword ptr [rdi+18h], 1C4Fh
    mov     rbx, rdi
    jnz     loc_13200
    mov     eax, [rdi+6Ch]
    mov     r12, rsi
    mov     r15d, edx
    test    eax, eax
    jz      short loc_130AD
    cmp     eax, 0FFFFFFFBh
    jnz     loc_13200
    
loc_130AD:
    test    r15d, r15d
    js      loc_132C4
    mov     eax, 0
    jz      loc_131B8
    mov     r8d, [rbx+68h]
    test    r8d, r8d
    jnz     loc_13210
    mov     ecx, [rbx]
    
loc_130D0:
    lea     rax, [rsp+58h+var_44]
    xor     ebp, ebp
    mov     [rsp+58h+var_50], rax
    mov     eax, 0FFFFFFFEh
    cmp     r15, rax
    jbe     short loc_13142
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_130F0:
    test    ecx, ecx
    mov     [rsp+58h+var_44], 0FFFFFFFFh
    mov     r13d, 0FFFFFFFFh
    jz      short loc_1314E
    
loc_13102:
    cmp     ecx, r13d
    jnb     short loc_1310E
    mov     [rsp+58h+var_44], ecx
    mov     r13d, ecx
    
loc_1310E:
    mov     rsi, [rbx+8]
    mov     r14d, r13d
    mov     rdi, r12
    mov     rdx, r14
    call    _memcpy
    add     [rbx+8], r14
    sub     [rbx], r13d
    
loc_13127:
    add     r12, r14
    add     rbp, r14
    add     [rbx+10h], r14
    sub     r15, r14
    jz      short loc_131B0
    
loc_13136:
    mov     eax, 0FFFFFFFEh
    cmp     r15, rax
    mov     ecx, [rbx]
    ja      short loc_130F0
    
loc_13142:
    test    ecx, ecx
    mov     r13d, r15d
    mov     [rsp+58h+var_44], r15d
    jnz     short loc_13102
    
loc_1314E:
    mov     edx, [rbx+50h]
    test    edx, edx
    jz      short loc_13163
    mov     eax, [rbx+80h]
    test    eax, eax
    jz      loc_132B6
    
loc_13163:
    mov     edx, [rbx+44h]
    test    edx, edx
    jz      short loc_131E0
    mov     eax, [rbx+28h]
    add     eax, eax
    cmp     eax, r13d
    ja      short loc_131E0
    cmp     edx, 1
    jz      loc_13290
    mov     [rbx+98h], r13d
    mov     [rbx+90h], r12
    mov     rdi, rbx
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jz      short loc_131F1
    mov     r14d, [rbx]
    mov     dword ptr [rbx], 0
    mov     [rsp+58h+var_44], r14d
    jmp     loc_13127
    align 10h
    
loc_131B0:
    mov     eax, ebp
    
loc_131B2:
    test    eax, eax
    jz      short loc_131F3
    
loc_131B6:
    mov     eax, ebp
    
loc_131B8:
    mov     rdi, [rsp+58h+var_40]
    xor     rdi, fs:28h
    jnz     loc_132DD
    add     rsp, 28h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_131E0:
    mov     rdi, rbx
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jnz     loc_13136
    
loc_131F1:
    xor     ebp, ebp
    
loc_131F3:
    mov     eax, [rbx+6Ch]
    test    eax, eax
    jz      short loc_131B6
    cmp     eax, 0FFFFFFFBh
    jz      short loc_131B6
    nop
    
loc_13200:
    mov     eax, 0FFFFFFFFh
    jmp     short loc_131B8
    align 10h
    
loc_13210:
    mov     rbp, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     ecx, [rbx]
    test    rbp, rbp
    jz      loc_130D0
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_13230:
    test    ecx, ecx
    jz      short loc_13258
    
loc_13234:
    mov     eax, ecx
    cmp     rax, rbp
    jle     short loc_13288
    mov     esi, ebp
    sub     ecx, ebp
    mov     eax, ebp
    
loc_13241:
    add     [rbx+8], rsi
    add     [rbx+10h], rax
    sub     rbp, rax
    mov     [rbx], ecx
    jz      loc_130D0
    test    ecx, ecx
    jnz     short loc_13234
    
loc_13258:
    mov     edi, [rbx+50h]
    test    edi, edi
    jz      short loc_1326D
    mov     esi, [rbx+80h]
    test    esi, esi
    jz      loc_130D0
    
loc_1326D:
    mov     rdi, rbx
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jz      loc_131F1
    mov     ecx, [rbx]
    jmp     short loc_13230
    align 8
    
loc_13288:
    mov     esi, ecx
    xor     ecx, ecx
    jmp     short loc_13241
    align 10h
    
loc_13290:
    mov     rcx, [rsp+58h+var_50]
    mov     edx, r13d
    mov     rsi, r12
    mov     rdi, rbx
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jz      loc_131F1
    mov     r14d, [rsp+58h+var_44]
    jmp     loc_13127
    
loc_132B6:
    mov     dword ptr [rbx+54h], 1
    mov     eax, ebp
    jmp     loc_131B2
    
loc_132C4:
    lea     rdx, aRequestDoesNot
    mov     esi, 0FFFFFFFEh
    mov     rdi, rbx
    call    gz_error
    jmp     loc_13200
    
loc_132DD:
    call    ___stack_chk_fail
    

<gzfread>:
    
    var_54= dword ptr -54h
    var_50= qword ptr -50h
    var_44= dword ptr -44h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    xor     ebp, ebp
    sub     rsp, 28h
    mov     rax, fs:28h
    mov     [rsp+58h+var_40], rax
    xor     eax, eax
    test    rcx, rcx
    jz      short loc_13321
    cmp     dword ptr [rcx+18h], 1C4Fh
    mov     rbx, rcx
    jz      short loc_13350
    
loc_13321:
    mov     rcx, [rsp+58h+var_40]
    xor     rcx, fs:28h
    mov     rax, rbp
    jnz     loc_13626
    add     rsp, 28h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_13350:
    mov     eax, [rcx+6Ch]
    mov     r12, rsi
    mov     r15, rdi
    mov     rsi, rdx
    test    eax, eax
    jz      short loc_13365
    cmp     eax, 0FFFFFFFBh
    jnz     short loc_13321
    
loc_13365:
    xor     ebp, ebp
    test    r12, r12
    jz      short loc_13321
    mov     rbp, rsi
    xor     edx, edx
    imul    rbp, r12
    mov     rax, rbp
    div     r12
    cmp     rax, rsi
    jnz     loc_13410
    test    rbp, rbp
    jz      short loc_13321
    mov     r10d, [rbx+68h]
    test    r10d, r10d
    jnz     loc_134C8
    mov     eax, [rbx]
    
loc_13398:
    lea     rdi, [rsp+58h+var_44]
    xor     r13d, r13d
    mov     [rsp+58h+var_50], rdi
    nop     dword ptr [rax]
    
loc_133A8:
    mov     edi, 0FFFFFFFEh
    cmp     rbp, rdi
    jbe     loc_134A0
    mov     [rsp+58h+var_44], 0FFFFFFFFh
    mov     r9d, 0FFFFFFFFh
    
loc_133C4:
    test    eax, eax
    jz      short loc_13440
    cmp     r9d, eax
    jbe     short loc_133D4
    mov     [rsp+58h+var_44], eax
    mov     r9d, eax
    
loc_133D4:
    mov     rsi, [rbx+8]
    mov     r14d, r9d
    mov     rdi, r15
    mov     rdx, r14
    mov     [rsp+58h+var_54], r9d
    call    _memcpy
    mov     r9d, [rsp+58h+var_54]
    add     [rbx+8], r14
    sub     [rbx], r9d
    
loc_133F7:
    add     r15, r14
    add     r13, r14
    add     [rbx+10h], r14
    sub     rbp, r14
    jz      short loc_1342B
    
loc_13406:
    mov     eax, [rbx]
    jmp     short loc_133A8
    align 10h
    
loc_13410:
    lea     rdx, aRequestDoesNot_0
    mov     esi, 0FFFFFFFEh
    mov     rdi, rbx
    xor     ebp, ebp
    call    gz_error
    jmp     loc_13321
    
loc_1342B:
    mov     rax, r13
    xor     edx, edx
    div     r12
    mov     rbp, rax
    jmp     loc_13321
    align 20h
    
loc_13440:
    mov     edx, [rbx+50h]
    test    edx, edx
    jz      short loc_13455
    mov     eax, [rbx+80h]
    test    eax, eax
    jz      loc_1360F
    
loc_13455:
    mov     edx, [rbx+44h]
    test    edx, edx
    jz      short loc_134B0
    mov     eax, [rbx+28h]
    add     eax, eax
    cmp     eax, r9d
    ja      short loc_134B0
    cmp     edx, 1
    jz      loc_135E9
    mov     [rbx+98h], r9d
    mov     [rbx+90h], r15
    mov     rdi, rbx
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jz      short loc_134C1
    mov     r14d, [rbx]
    mov     dword ptr [rbx], 0
    mov     [rsp+58h+var_44], r14d
    jmp     loc_133F7
    align 20h
    
loc_134A0:
    mov     r9d, ebp
    mov     [rsp+58h+var_44], ebp
    jmp     loc_133C4
    align 10h
    
loc_134B0:
    mov     rdi, rbx
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jnz     loc_13406
    
loc_134C1:
    xor     ebp, ebp
    jmp     loc_13321
    
loc_134C8:
    mov     r13, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     eax, [rbx]
    test    r13, r13
    jz      loc_13398
    xchg    ax, ax
    
loc_134E0:
    test    eax, eax
    jz      short loc_13510
    mov     edx, eax
    cmp     rdx, r13
    jle     loc_135E0
    mov     ecx, r13d
    sub     eax, r13d
    mov     edx, r13d
    
loc_134F8:
    add     [rbx+8], rcx
    add     [rbx+10h], rdx
    sub     r13, rdx
    mov     [rbx], eax
    jnz     short loc_134E0
    jmp     loc_13398
    
loc_1350C:
    xor     eax, eax
    xchg    ax, ax
    
loc_13510:
    mov     r9d, [rbx+50h]
    test    r9d, r9d
    jz      short loc_13530
    mov     r8d, [rbx+80h]
    test    r8d, r8d
    jz      loc_13398
    nop     dword ptr [rax+00000000h]
    
loc_13530:
    mov     eax, [rbx+44h]
    cmp     eax, 1
    jz      short loc_135B0
    cmp     eax, 2
    jz      short loc_13580
    test    eax, eax
    jz      short loc_13558
    
loc_13541:
    mov     esi, [rbx+50h]
    test    esi, esi
    jz      short loc_13530
    mov     ecx, [rbx+80h]
    test    ecx, ecx
    jnz     short loc_13530
    jmp     short loc_1350C
    align 8
    
loc_13558:
    mov     rdi, rbx
    call    gz_look
    cmp     eax, 0FFFFFFFFh
    jz      loc_134C1
    mov     edi, [rbx+44h]
    mov     eax, [rbx]
    test    edi, edi
    jz      loc_134E0
    
loc_13576:
    test    eax, eax
    jz      short loc_13541
    jmp     loc_134E0
    align 20h
    
loc_13580:
    mov     eax, [rbx+28h]
    mov     rdi, rbx
    add     eax, eax
    mov     [rbx+98h], eax
    mov     rax, [rbx+38h]
    mov     [rbx+90h], rax
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jz      loc_134C1
    mov     eax, [rbx]
    jmp     short loc_13576
    align 10h
    
loc_135B0:
    mov     eax, [rbx+28h]
    mov     rsi, [rbx+38h]
    mov     rcx, rbx
    mov     rdi, rbx
    lea     edx, [rax+rax]
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jz      loc_134C1
    mov     rax, [rbx+38h]
    mov     [rbx+8], rax
    mov     eax, [rbx]
    jmp     loc_134E0
    align 20h
    
loc_135E0:
    mov     ecx, eax
    xor     eax, eax
    jmp     loc_134F8
    
loc_135E9:
    mov     rcx, [rsp+58h+var_50]
    mov     edx, r9d
    mov     rsi, r15
    mov     rdi, rbx
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jz      loc_134C1
    mov     r14d, [rsp+58h+var_44]
    jmp     loc_133F7
    
loc_1360F:
    mov     rax, r13
    xor     edx, edx
    mov     dword ptr [rbx+54h], 1
    div     r12
    mov     rbp, rax
    jmp     loc_13321
    
loc_13626:
    call    ___stack_chk_fail
    

<gzgetc>:
    
    var_54= dword ptr -54h
    var_50= qword ptr -50h
    var_48= dword ptr -48h
    dest= byte ptr -41h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 28h
    mov     rax, fs:28h
    mov     [rsp+58h+var_40], rax
    xor     eax, eax
    test    rdi, rdi
    jz      short loc_136C1
    cmp     dword ptr [rdi+18h], 1C4Fh
    mov     rbx, rdi
    jnz     short loc_136C1
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jz      short loc_1366B
    cmp     eax, 0FFFFFFFBh
    jnz     short loc_136C1
    
loc_1366B:
    mov     eax, [rbx]
    test    eax, eax
    jz      short loc_136D0
    sub     eax, 1
    add     qword ptr [rbx+10h], 1
    mov     [rbx], eax
    mov     rax, [rbx+8]
    lea     rdx, [rax+1]
    mov     [rbx+8], rdx
    movzx   eax, byte ptr [rax]
    
loc_1368A:
    mov     rcx, [rsp+58h+var_40]
    xor     rcx, fs:28h
    jnz     loc_13853
    add     rsp, 28h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_136B0:
    mov     rdi, rbx
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jnz     loc_13756
    
loc_136C1:
    mov     eax, 0FFFFFFFFh
    jmp     short loc_1368A
    align 10h
    
loc_136D0:
    mov     esi, [rbx+68h]
    xor     eax, eax
    test    esi, esi
    jnz     loc_13830
    
loc_136DD:
    mov     r15d, 1
    lea     rdi, [rsp+58h+var_48]
    mov     esi, 0FFFFFFFEh
    xor     r12d, r12d
    cmp     r15, rsi
    lea     rbp, [rsp+58h+dest]
    mov     [rsp+58h+var_50], rdi
    jbe     short loc_13762
    nop
    
loc_13700:
    test    eax, eax
    mov     [rsp+58h+var_48], 0FFFFFFFFh
    mov     edx, 0FFFFFFFFh
    jz      short loc_1376E
    
loc_13711:
    cmp     eax, edx
    jb      loc_137D8
    sub     eax, edx
    mov     [rsp+58h+var_54], eax
    
loc_1371F:
    mov     r13, [rbx+8]
    mov     r14d, edx
    mov     rdi, rbp
    mov     rdx, r14
    mov     rsi, r13
    call    _memcpy
    mov     eax, [rsp+58h+var_54]
    lea     r9, [r13+r14+0]
    mov     [rbx+8], r9
    mov     [rbx], eax
    
loc_13743:
    add     rbp, r14
    add     r12, r14
    add     [rbx+10h], r14
    sub     r15, r14
    jz      loc_1381A
    
loc_13756:
    mov     esi, 0FFFFFFFEh
    mov     eax, [rbx]
    cmp     r15, rsi
    ja      short loc_13700
    
loc_13762:
    test    eax, eax
    mov     edx, r15d
    mov     [rsp+58h+var_48], r15d
    jnz     short loc_13711
    
loc_1376E:
    mov     ecx, [rbx+50h]
    test    ecx, ecx
    jz      short loc_13783
    mov     eax, [rbx+80h]
    test    eax, eax
    jz      loc_13813
    
loc_13783:
    mov     ecx, [rbx+44h]
    test    ecx, ecx
    jz      loc_136B0
    mov     eax, [rbx+28h]
    add     eax, eax
    cmp     eax, edx
    ja      loc_136B0
    cmp     ecx, 1
    jz      short loc_137F0
    mov     [rbx+98h], edx
    mov     [rbx+90h], rbp
    mov     rdi, rbx
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jz      loc_136C1
    mov     r14d, [rbx]
    mov     dword ptr [rbx], 0
    mov     [rsp+58h+var_48], r14d
    jmp     loc_13743
    align 8
    
loc_137D8:
    mov     [rsp+58h+var_48], eax
    mov     [rsp+58h+var_54], 0
    mov     edx, eax
    jmp     loc_1371F
    align 10h
    
loc_137F0:
    mov     rcx, [rsp+58h+var_50]
    mov     rsi, rbp
    mov     rdi, rbx
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jz      loc_136C1
    mov     r14d, [rsp+58h+var_48]
    jmp     loc_13743
    
loc_13813:
    mov     dword ptr [rbx+54h], 1
    
loc_1381A:
    test    r12d, r12d
    jle     loc_136C1
    movzx   eax, [rsp+58h+dest]
    jmp     loc_1368A
    align 10h
    
loc_13830:
    mov     rsi, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     rdi, rbx
    call    gz_skip
    cmp     eax, 0FFFFFFFFh
    jz      loc_136C1
    mov     eax, [rbx]
    jmp     loc_136DD
    
loc_13853:
    call    ___stack_chk_fail
    

<gzgetc_>:
    
    jmp     _gzgetc
    

<gzungetc>:
    
    var_3C= dword ptr -3Ch
    
    
    test    rsi, rsi
    jz      loc_13ACF
    cmp     dword ptr [rsi+18h], 1C4Fh
    jnz     loc_13ACF
    mov     edx, [rsi+6Ch]
    test    edx, edx
    jz      short loc_13896
    cmp     edx, 0FFFFFFFBh
    jnz     loc_13ACF
    
loc_13896:
    push    r15
    push    r14
    mov     r15, rsi
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    mov     r10d, [rsi+68h]
    mov     [rsp+48h+var_3C], edi
    test    r10d, r10d
    jnz     loc_13968
    
loc_138B8:
    mov     edx, [rsp+48h+var_3C]
    test    edx, edx
    js      loc_13AC5
    mov     edx, [r15]
    mov     eax, [r15+28h]
    add     eax, eax
    test    edx, edx
    jz      short loc_1392A
    cmp     edx, eax
    jz      loc_13B34
    mov     rdi, [r15+8]
    cmp     rdi, [r15+38h]
    jz      loc_13AD8
    
loc_138E7:
    lea     rax, [rdi-1]
    add     edx, 1
    mov     [r15], edx
    mov     [r15+8], rax
    mov     eax, [rsp+48h+var_3C]
    mov     [rdi-1], al
    sub     qword ptr [r15+10h], 1
    mov     dword ptr [r15+54h], 0
    
loc_13909:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_13918:
    mov     eax, [rsp+48h+var_3C]
    test    eax, eax
    js      loc_13AC5
    mov     eax, [r15+28h]
    add     eax, eax
    
loc_1392A:
    mov     rdx, [r15+38h]
    mov     ecx, [rsp+48h+var_3C]
    mov     dword ptr [r15], 1
    lea     rax, [rdx+rax-1]
    mov     [r15+8], rax
    mov     [rax], cl
    mov     eax, ecx
    sub     qword ptr [r15+10h], 1
    mov     dword ptr [r15+54h], 0
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_13968:
    mov     r13, [rsi+60h]
    mov     dword ptr [rsi+68h], 0
    test    r13, r13
    jz      loc_138B8
    mov     eax, [rsi]
    mov     r14d, 40000000h
    nop     dword ptr [rax+00h]
    
loc_13988:
    test    eax, eax
    mov     ebx, eax
    jz      short loc_139C1
    
loc_1398E:
    mov     esi, eax
    xor     edi, edi
    cmp     rsi, r13
    mov     rdx, rsi
    jle     short loc_139A5
    sub     eax, r13d
    mov     edx, r13d
    mov     esi, r13d
    mov     edi, eax
    
loc_139A5:
    add     [r15+8], rsi
    add     [r15+10h], rdx
    sub     r13, rdx
    mov     [r15], edi
    jz      loc_138B8
    mov     eax, edi
    test    eax, eax
    mov     ebx, eax
    jnz     short loc_1398E
    
loc_139C1:
    mov     r9d, [r15+50h]
    test    r9d, r9d
    jz      short loc_139DA
    mov     r8d, [r15+80h]
    test    r8d, r8d
    jz      loc_13918
    
loc_139DA:
    mov     edx, [r15+44h]
    cmp     edx, 1
    jz      short loc_13A10
    
loc_139E3:
    cmp     edx, 2
    jz      loc_13AA0
    test    edx, edx
    jz      loc_13A78
    
loc_139F4:
    mov     esi, [r15+50h]
    test    esi, esi
    jz      short loc_139DA
    mov     ecx, [r15+80h]
    test    ecx, ecx
    jz      short loc_13988
    mov     edx, [r15+44h]
    cmp     edx, 1
    jnz     short loc_139E3
    
loc_13A10:
    mov     eax, [r15+28h]
    mov     r12, [r15+38h]
    mov     dword ptr [r15], 0
    lea     ebp, [rax+rax]
    jmp     short loc_13A34
    align 8
    
loc_13A28:
    mov     ebx, [r15]
    add     ebx, eax
    cmp     ebp, ebx
    mov     [r15], ebx
    jbe     short loc_13A64
    
loc_13A34:
    mov     edx, ebp
    mov     edi, [r15+1Ch]
    mov     esi, ebx
    sub     edx, ebx
    cmp     edx, 40000000h
    cmova   rdx, r14
    add     rsi, r12
    call    _read
    test    eax, eax
    jg      short loc_13A28
    test    eax, eax
    jnz     loc_13B0E
    mov     dword ptr [r15+50h], 1
    
loc_13A64:
    mov     rax, [r15+38h]
    mov     [r15+8], rax
    
loc_13A6C:
    mov     eax, [r15]
    jmp     loc_13988
    align 8
    
loc_13A78:
    mov     rdi, r15
    call    gz_look
    cmp     eax, 0FFFFFFFFh
    jz      short loc_13AC5
    mov     edi, [r15+44h]
    test    edi, edi
    jz      short loc_13A6C
    
loc_13A8D:
    mov     eax, [r15]
    test    eax, eax
    jz      loc_139F4
    jmp     loc_13988
    align 20h
    
loc_13AA0:
    mov     eax, [r15+28h]
    mov     rdi, r15
    add     eax, eax
    mov     [r15+98h], eax
    mov     rax, [r15+38h]
    mov     [r15+90h], rax
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_13A8D
    
loc_13AC5:
    mov     eax, 0FFFFFFFFh
    jmp     loc_13909
    
loc_13ACF:
    mov     eax, 0FFFFFFFFh
    retn
    align 8
    
loc_13AD8:
    mov     esi, edx
    add     rax, rdi
    add     rsi, rdi
    cmp     rdi, rsi
    jnb     short loc_13B06
    nop     dword ptr [rax]
    
loc_13AE8:
    sub     rsi, 1
    movzx   edx, byte ptr [rsi]
    sub     rax, 1
    mov     [rax], dl
    cmp     [r15+38h], rsi
    jb      short loc_13AE8
    mov     edx, [r15]
    mov     rdi, rax
    jmp     loc_138E7
    
loc_13B06:
    mov     rdi, rax
    jmp     loc_138E7
    
loc_13B0E:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r15
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     loc_13909
    
loc_13B34:
    lea     rdx, aOutOfRoomToPus
    mov     esi, 0FFFFFFFDh
    mov     rdi, r15
    call    gz_error
    jmp     loc_13AC5
    

<gzgets>:
    
    src= qword ptr -48h
    dest= qword ptr -40h
    
    
    test    rsi, rsi
    setz    cl
    test    edx, edx
    setle   al
    or      cl, al
    jnz     loc_13C98
    test    rdi, rdi
    jz      loc_13C98
    cmp     dword ptr [rdi+18h], 1C4Fh
    jnz     loc_13C98
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jz      short loc_13B89
    cmp     eax, 0FFFFFFFBh
    jnz     loc_13C98
    
loc_13B89:
    push    r15
    push    r14
    push    r13
    push    r12
    mov     r12d, edx
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    mov     eax, [rdi+68h]
    mov     [rsp+48h+dest], rsi
    test    eax, eax
    jnz     loc_13C68
    
loc_13BAD:
    sub     r12d, 1
    jz      loc_13C81
    mov     edx, [rbx]
    mov     r13, [rsp+48h+dest]
    jmp     short loc_13C27
    
loc_13BC0:
    mov     rcx, [rbx+8]
    cmp     r12d, edx
    mov     esi, 0Ah
    cmovbe  edx, r12d
    mov     r15d, edx
    mov     rdi, rcx
    mov     rdx, r15
    mov     [rsp+48h+src], rcx
    call    _memchr
    test    rax, rax
    mov     rbp, r15
    mov     r14, rax
    mov     rcx, [rsp+48h+src]
    jz      short loc_13BFE
    mov     rbp, rax
    sub     rbp, rcx
    lea     r15d, [rbp+1]
    mov     rbp, r15
    
loc_13BFE:
    mov     rdx, r15
    mov     rdi, r13
    mov     rsi, rcx
    call    _memcpy
    mov     edx, [rbx]
    add     [rbx+8], r15
    add     r13, r15
    add     [rbx+10h], r15
    sub     edx, ebp
    sub     r12d, ebp
    mov     [rbx], edx
    jz      short loc_13C45
    test    r14, r14
    jnz     short loc_13C45
    
loc_13C27:
    test    edx, edx
    jnz     short loc_13BC0
    mov     rdi, rbx
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jz      short loc_13C81
    mov     edx, [rbx]
    test    edx, edx
    jnz     short loc_13BC0
    mov     dword ptr [rbx+54h], 1
    
loc_13C45:
    mov     rax, [rsp+48h+dest]
    cmp     r13, rax
    jz      short loc_13C81
    mov     byte ptr [r13+0], 0
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_13C68:
    mov     rsi, [rdi+60h]
    mov     dword ptr [rdi+68h], 0
    call    gz_skip
    cmp     eax, 0FFFFFFFFh
    jnz     loc_13BAD
    
loc_13C81:
    add     rsp, 18h
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_13C98:
    xor     eax, eax
    retn
    

<gzdirect>:
    
    test    rdi, rdi
    jz      short loc_13CD8
    cmp     dword ptr [rdi+18h], 1C4Fh
    push    rbx
    mov     rbx, rdi
    jz      short loc_13CC0
    
loc_13CB2:
    mov     eax, [rbx+40h]
    pop     rbx
    retn
    align 20h
    
loc_13CC0:
    mov     edx, [rdi+44h]
    test    edx, edx
    jnz     short loc_13CB2
    mov     eax, [rdi]
    test    eax, eax
    jnz     short loc_13CB2
    call    gz_look
    jmp     short loc_13CB2
    align 8
    
loc_13CD8:
    xor     eax, eax
    retn
    

<gzclose_r>:
    
    test    rdi, rdi
    push    r12
    push    rbp
    push    rbx
    jz      short loc_13D68
    cmp     dword ptr [rdi+18h], 1C4Fh
    jnz     short loc_13D68
    mov     eax, [rdi+28h]
    mov     rbx, rdi
    test    eax, eax
    jnz     short loc_13D48
    
loc_13CFC:
    mov     ebp, [rbx+6Ch]
    mov     eax, 0
    mov     rdi, rbx
    cmp     ebp, 0FFFFFFFBh
    cmovnz  ebp, eax
    xor     edx, edx
    xor     esi, esi
    call    gz_error
    mov     rdi, [rbx+20h]
    call    _free
    mov     edi, [rbx+1Ch]
    call    _close
    mov     rdi, rbx
    mov     r12d, eax
    call    _free
    test    r12d, r12d
    mov     eax, 0FFFFFFFFh
    cmovnz  ebp, eax
    
loc_13D3D:
    mov     eax, ebp
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_13D48:
    lea     rdi, [rdi+78h]
    call    _inflateEnd
    mov     rdi, [rbx+38h]
    call    _free
    mov     rdi, [rbx+30h]
    call    _free
    jmp     short loc_13CFC
    align 8
    
loc_13D68:
    mov     ebp, 0FFFFFFFEh
    jmp     short loc_13D3D
    

<gz_init>:
    
    push    r12
    push    rbp
    push    rbx
    mov     ebp, [rdi+2Ch]
    mov     rbx, rdi
    lea     edi, [rbp+rbp+0]
    call    _malloc
    test    rax, rax
    mov     [rbx+30h], rax
    jz      loc_13E55
    mov     esi, [rbx+40h]
    test    esi, esi
    jz      short loc_13DA8
    mov     [rbx+28h], ebp
    
loc_13D9A:
    xor     eax, eax
    
loc_13D9C:
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_13DA8:
    mov     edi, ebp
    mov     r12, rax
    call    _malloc
    test    rax, rax
    mov     [rbx+38h], rax
    jz      loc_13E73
    lea     rax, a1211
    mov     esi, [rbx+58h]
    mov     r9d, [rbx+5Ch]
    push    70h
    lea     rdi, [rbx+78h]
    mov     ecx, 1Fh
    push    rax
    mov     edx, 8
    mov     qword ptr [rbx+0B8h], 0
    mov     qword ptr [rbx+0C0h], 0
    mov     qword ptr [rbx+0C8h], 0
    mov     r8d, 8
    call    _deflateInit2_
    test    eax, eax
    pop     rdx
    pop     rcx
    jnz     short loc_13E43
    mov     eax, [rbx+40h]
    mov     edx, [rbx+2Ch]
    mov     qword ptr [rbx+78h], 0
    test    eax, eax
    mov     [rbx+28h], edx
    jnz     loc_13D9A
    mov     [rbx+98h], edx
    mov     rdx, [rbx+38h]
    mov     [rbx+90h], rdx
    mov     [rbx+8], rdx
    pop     rbx
    pop     rbp
    pop     r12
    retn
    
loc_13E43:
    mov     rdi, [rbx+38h]
    call    _free
    mov     rdi, [rbx+30h]
    
loc_13E50:
    call    _free
    
loc_13E55:
    lea     rdx, aOutOfMemory
    mov     esi, 0FFFFFFFCh
    mov     rdi, rbx
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     loc_13D9C
    
loc_13E73:
    mov     rdi, r12
    jmp     short loc_13E50
    

<gz_comp_constprop_1>:
    
    push    r12
    push    rbp
    mov     rbp, rdi
    push    rbx
    mov     edx, [rdi+28h]
    test    edx, edx
    jz      loc_13FD0
    
loc_13E92:
    mov     eax, [rbp+40h]
    test    eax, eax
    jz      short loc_13F18
    mov     edx, [rbp+80h]
    test    edx, edx
    jz      loc_13F49
    mov     rsi, [rbp+78h]
    mov     ebx, 40000000h
    jmp     short loc_13ED7
    align 8
    
loc_13EB8:
    mov     edx, [rbp+80h]
    sub     edx, eax
    cdqe
    add     rax, [rbp+78h]
    test    edx, edx
    mov     [rbp+80h], edx
    mov     rsi, rax
    mov     [rbp+78h], rax
    jz      short loc_13F49
    
loc_13ED7:
    mov     edi, [rbp+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, rbx
    call    _write
    test    eax, eax
    jns     short loc_13EB8
    
loc_13EED:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, rbp
    call    gz_error
    mov     eax, 0FFFFFFFFh
    
loc_13F0E:
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_13F18:
    mov     eax, [rbp+98h]
    mov     ebx, 40000000h
    
loc_13F23:
    test    eax, eax
    mov     r12d, eax
    jz      short loc_13F50
    
loc_13F2A:
    lea     rdi, [rbp+78h]
    xor     esi, esi
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_13FE8
    mov     eax, [rbp+98h]
    cmp     eax, r12d
    jnz     short loc_13F23
    
loc_13F49:
    pop     rbx
    xor     eax, eax
    pop     rbp
    pop     r12
    retn
    
loc_13F50:
    mov     rdx, [rbp+90h]
    mov     rsi, [rbp+8]
    cmp     rdx, rsi
    ja      short loc_13F7F
    jmp     short loc_13FB0
    align 8
    
loc_13F68:
    movsxd  rsi, eax
    add     rsi, [rbp+8]
    mov     rdx, [rbp+90h]
    cmp     rdx, rsi
    mov     [rbp+8], rsi
    jbe     short loc_13FA0
    
loc_13F7F:
    sub     rdx, rsi
    mov     edi, [rbp+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, rbx
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_13F68
    jmp     loc_13EED
    
loc_13FA0:
    mov     r12d, [rbp+98h]
    test    r12d, r12d
    jnz     loc_13F2A
    
loc_13FB0:
    mov     rax, [rbp+38h]
    mov     r12d, [rbp+28h]
    mov     [rbp+90h], rax
    mov     [rbp+98h], r12d
    mov     [rbp+8], rax
    jmp     loc_13F2A
    align 10h
    
loc_13FD0:
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_13E92
    jmp     loc_13F0E
    align 8
    
loc_13FE8:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, rbp
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     loc_13F0E
    

<gz_zero>:
    
    push    r15
    push    r14
    push    r13
    push    r12
    mov     r12, rsi
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 8
    mov     edx, [rdi+80h]
    test    edx, edx
    jnz     loc_14250
    
loc_14032:
    test    r12, r12
    lea     r14, [rbx+78h]
    mov     edx, 1
    mov     r13d, 40000000h
    jz      loc_1414E
    nop     word ptr [rax+rax+00h]
    
loc_14050:
    mov     ebp, [rbx+28h]
    cmp     rbp, r12
    mov     rax, rbp
    mov     r15d, ebp
    jle     short loc_14064
    mov     r15d, r12d
    mov     ebp, r12d
    
loc_14064:
    test    edx, edx
    mov     rdi, [rbx+30h]
    jnz     loc_141B0
    
loc_14070:
    add     [rbx+10h], rbp
    test    eax, eax
    mov     [rbx+80h], r15d
    mov     [rbx+78h], rdi
    jz      loc_141D0
    
loc_14087:
    mov     eax, [rbx+40h]
    test    eax, eax
    jz      loc_14118
    mov     edx, [rbx+80h]
    test    edx, edx
    jz      loc_14143
    mov     rsi, [rbx+78h]
    mov     r15d, 40000000h
    jmp     short loc_140CF
    align 10h
    
loc_140B0:
    mov     edx, [rbx+80h]
    sub     edx, eax
    cdqe
    add     rax, [rbx+78h]
    test    edx, edx
    mov     [rbx+80h], edx
    mov     rsi, rax
    mov     [rbx+78h], rax
    jz      short loc_14143
    
loc_140CF:
    mov     edi, [rbx+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, r15
    call    _write
    test    eax, eax
    jns     short loc_140B0
    
loc_140E5:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     rdi, rbx
    mov     rdx, rax
    mov     esi, 0FFFFFFFFh
    call    gz_error
    add     rsp, 8
    mov     eax, 0FFFFFFFFh
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_14118:
    mov     eax, [rbx+98h]
    
loc_1411E:
    test    eax, eax
    mov     r15d, eax
    jz      short loc_14160
    
loc_14125:
    xor     esi, esi
    mov     rdi, r14
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_14238
    
loc_14138:
    mov     eax, [rbx+98h]
    cmp     eax, r15d
    jnz     short loc_1411E
    
loc_14143:
    xor     edx, edx
    sub     r12, rbp
    jnz     loc_14050
    
loc_1414E:
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_14160:
    mov     rdx, [rbx+90h]
    mov     rsi, [rbx+8]
    cmp     rsi, rdx
    jb      short loc_1418F
    jmp     loc_14208
    align 8
    
loc_14178:
    movsxd  rsi, eax
    add     rsi, [rbx+8]
    mov     rdx, [rbx+90h]
    cmp     rdx, rsi
    mov     [rbx+8], rsi
    jbe     short loc_141F8
    
loc_1418F:
    sub     rdx, rsi
    mov     edi, [rbx+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, r13
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_14178
    jmp     loc_140E5
    
loc_141B0:
    mov     edx, r15d
    xor     esi, esi
    call    _memset
    mov     rdi, [rbx+30h]
    mov     eax, [rbx+28h]
    jmp     loc_14070
    align 10h
    
loc_141D0:
    mov     rdi, rbx
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_14087
    
loc_141E1:
    mov     eax, 0FFFFFFFFh
    
loc_141E6:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_141F8:
    mov     r15d, [rbx+98h]
    test    r15d, r15d
    jnz     loc_14125
    
loc_14208:
    mov     rax, [rbx+38h]
    mov     r15d, [rbx+28h]
    xor     esi, esi
    mov     rdi, r14
    mov     [rbx+98h], r15d
    mov     [rbx+90h], rax
    mov     [rbx+8], rax
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jnz     loc_14138
    nop     dword ptr [rax]
    
loc_14238:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, rbx
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     short loc_141E6
    
loc_14250:
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jnz     loc_14032
    jmp     short loc_141E1
    

<gz_write>:
    
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    test    rdx, rdx
    mov     [rsp+48h+var_40], rdx
    jz      loc_14360
    mov     ecx, [rdi+28h]
    mov     r12, rdi
    mov     rbx, rsi
    test    ecx, ecx
    jz      loc_14460
    
loc_1428D:
    mov     edx, [r12+68h]
    test    edx, edx
    jnz     loc_14340
    
loc_1429A:
    mov     eax, [r12+28h]
    mov     edx, [r12+80h]
    cmp     [rsp+48h+var_40], rax
    mov     rsi, rax
    jnb     loc_14380
    test    edx, edx
    mov     rbp, [rsp+48h+var_40]
    mov     rdi, [r12+30h]
    jz      short loc_1432F
    
loc_142C3:
    mov     rax, [r12+78h]
    
loc_142C8:
    add     rax, rdx
    sub     rax, rdi
    sub     esi, eax
    mov     r14d, esi
    cmp     r14, rbp
    mov     r15, r14
    mov     r13, r14
    jbe     short loc_142E7
    mov     r14d, ebp
    mov     r13, rbp
    mov     r15, r14
    
loc_142E7:
    mov     eax, eax
    mov     rdx, r13
    mov     rsi, rbx
    add     rdi, rax
    call    _memcpy
    add     [r12+80h], r15d
    add     [r12+10h], r14
    sub     rbp, r13
    jz      short loc_14369
    mov     rdi, r12
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jz      short loc_14360
    mov     edx, [r12+80h]
    add     rbx, r13
    mov     esi, [r12+28h]
    mov     rdi, [r12+30h]
    test    edx, edx
    jnz     short loc_142C3
    
loc_1432F:
    mov     [r12+78h], rdi
    mov     rax, rdi
    jmp     short loc_142C8
    align 20h
    
loc_14340:
    mov     rsi, [r12+60h]
    mov     dword ptr [r12+68h], 0
    mov     rdi, r12
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     loc_1429A
    nop
    
loc_14360:
    mov     [rsp+48h+var_40], 0
    
loc_14369:
    mov     rax, [rsp+48h+var_40]
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_14380:
    test    edx, edx
    jnz     loc_14478
    
loc_14388:
    mov     [r12+78h], rbx
    mov     rbx, [rsp+48h+var_40]
    mov     eax, 0FFFFFFFEh
    lea     r14, [r12+78h]
    cmp     rbx, rax
    ja      loc_144E8
    nop     dword ptr [rax]
    
loc_143A8:
    mov     edx, ebx
    mov     rax, rbx
    mov     r13, rbx
    
loc_143B0:
    add     [r12+10h], rax
    test    esi, esi
    mov     [r12+80h], edx
    jz      loc_14558
    
loc_143C5:
    mov     eax, [r12+40h]
    test    eax, eax
    jz      loc_14498
    mov     edx, [r12+80h]
    test    edx, edx
    jz      loc_144CC
    mov     rsi, [r12+78h]
    mov     ebp, 40000000h
    jmp     short loc_14419
    align 10h
    
loc_143F0:
    mov     edx, [r12+80h]
    sub     edx, eax
    cdqe
    add     rax, [r12+78h]
    test    edx, edx
    mov     [r12+80h], edx
    mov     rsi, rax
    mov     [r12+78h], rax
    jz      loc_144CC
    
loc_14419:
    mov     edi, [r12+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, rbp
    call    _write
    test    eax, eax
    jns     short loc_143F0
    
loc_14431:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r12
    call    gz_error
    mov     [rsp+48h+var_40], 0
    jmp     loc_14369
    align 20h
    
loc_14460:
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_1428D
    jmp     loc_14360
    align 8
    
loc_14478:
    mov     rdi, r12
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jz      loc_14360
    mov     esi, [r12+28h]
    jmp     loc_14388
    align 8
    
loc_14498:
    mov     eax, [r12+98h]
    mov     ebp, 40000000h
    
loc_144A5:
    test    eax, eax
    mov     r15d, eax
    jz      short loc_14500
    
loc_144AC:
    xor     esi, esi
    mov     rdi, r14
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_145B8
    
loc_144BF:
    mov     eax, [r12+98h]
    cmp     eax, r15d
    jnz     short loc_144A5
    
loc_144CC:
    sub     rbx, r13
    jz      loc_14369
    mov     eax, 0FFFFFFFEh
    mov     esi, [r12+28h]
    cmp     rbx, rax
    jbe     loc_143A8
    
loc_144E8:
    mov     r13d, 0FFFFFFFFh
    mov     edx, 0FFFFFFFFh
    mov     rax, r13
    jmp     loc_143B0
    align 20h
    
loc_14500:
    mov     rdx, [r12+90h]
    mov     rsi, [r12+8]
    cmp     rsi, rdx
    jb      short loc_14532
    jmp     short loc_14581
    align 8
    
loc_14518:
    movsxd  rsi, eax
    add     rsi, [r12+8]
    mov     rdx, [r12+90h]
    cmp     rdx, rsi
    mov     [r12+8], rsi
    jbe     short loc_14570
    
loc_14532:
    sub     rdx, rsi
    mov     edi, [r12+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, rbp
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_14518
    jmp     loc_14431
    align 8
    
loc_14558:
    mov     rdi, r12
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_143C5
    jmp     loc_14360
    align 10h
    
loc_14570:
    mov     r15d, [r12+98h]
    test    r15d, r15d
    jnz     loc_144AC
    
loc_14581:
    mov     rax, [r12+38h]
    mov     r15d, [r12+28h]
    xor     esi, esi
    mov     rdi, r14
    mov     [r12+98h], r15d
    mov     [r12+90h], rax
    mov     [r12+8], rax
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jnz     loc_144BF
    nop     dword ptr [rax+rax+00h]
    
loc_145B8:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, r12
    call    gz_error
    mov     [rsp+48h+var_40], 0
    jmp     loc_14369
    

<gzwrite>:
    
    var_C= dword ptr -0Ch
    
    
    xor     eax, eax
    test    rdi, rdi
    jz      short locret_145F0
    cmp     dword ptr [rdi+18h], 79B1h
    jz      short loc_145F8
    
locret_145F0:
    rep retn
    align 8
    
loc_145F8:
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jnz     short loc_14618
    sub     rsp, 18h
    test    edx, edx
    js      short loc_14620
    mov     edx, edx
    call    gz_write
    
loc_1460E:
    add     rsp, 18h
    retn
    align 8
    
loc_14618:
    xor     eax, eax
    retn
    align 20h
    
loc_14620:
    lea     rdx, aRequestedLengt
    mov     esi, 0FFFFFFFDh
    mov     [rsp+18h+var_C], eax
    call    gz_error
    mov     eax, [rsp+18h+var_C]
    jmp     short loc_1460E
    

<gzfwrite>:
    
    xor     r8d, r8d
    test    rcx, rcx
    jz      short loc_14651
    cmp     dword ptr [rcx+18h], 79B1h
    jz      short loc_14658
    
loc_14651:
    mov     rax, r8
    retn
    align 8
    
loc_14658:
    mov     eax, [rcx+6Ch]
    test    eax, eax
    jnz     short loc_14651
    test    rsi, rsi
    jz      short loc_14651
    mov     r8, rdx
    mov     r9, rdx
    xor     edx, edx
    imul    r8, rsi
    push    rbx
    mov     rbx, rsi
    mov     rax, r8
    div     rsi
    cmp     rax, r9
    jnz     short loc_146A0
    test    r8, r8
    jz      short loc_1469A
    mov     rdx, r8
    mov     rsi, rdi
    mov     rdi, rcx
    call    gz_write
    xor     edx, edx
    div     rbx
    mov     r8, rax
    
loc_1469A:
    mov     rax, r8
    pop     rbx
    retn
    align 20h
    
loc_146A0:
    lea     rdx, aRequestDoesNot_0
    mov     esi, 0FFFFFFFEh
    mov     rdi, rcx
    call    gz_error
    xor     r8d, r8d
    jmp     short loc_1469A
    

<gzputc>:
    
    var_31= byte ptr -31h
    var_30= qword ptr -30h
    
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    mov     rax, fs:28h
    mov     [rsp+38h+var_30], rax
    xor     eax, eax
    test    rdi, rdi
    jz      loc_14861
    cmp     dword ptr [rdi+18h], 79B1h
    mov     rbx, rdi
    jnz     loc_14861
    mov     edi, [rdi+6Ch]
    test    edi, edi
    jnz     loc_14861
    mov     ecx, [rbx+68h]
    mov     ebp, esi
    test    ecx, ecx
    jnz     loc_14870
    mov     ecx, [rbx+28h]
    test    ecx, ecx
    jz      loc_14893
    
loc_14716:
    mov     edx, [rbx+80h]
    mov     rsi, [rbx+30h]
    test    edx, edx
    jz      loc_147F0
    mov     rax, [rbx+78h]
    add     rax, rdx
    sub     rax, rsi
    cmp     ecx, eax
    ja      loc_14805
    
loc_1473A:
    mov     edx, [rbx+68h]
    mov     [rsp+38h+var_31], bpl
    test    edx, edx
    jnz     loc_148B0
    
loc_1474A:
    mov     edx, [rbx+28h]
    mov     esi, [rbx+80h]
    cmp     edx, 1
    jbe     loc_148DA
    
loc_1475C:
    lea     r12, [rsp+38h+var_31]
    
loc_14761:
    test    esi, esi
    mov     rcx, [rbx+30h]
    jz      loc_14820
    mov     rax, [rbx+78h]
    
loc_14771:
    add     rax, rsi
    sub     rax, rcx
    sub     edx, eax
    mov     esi, edx
    cmp     edx, 1
    mov     r13, rsi
    jbe     short loc_14793
    mov     r13d, 1
    mov     edx, 1
    mov     esi, 1
    
loc_14793:
    mov     eax, eax
    mov     r8d, r13d
    add     rax, rcx
    test    r13d, r13d
    jz      short loc_147B5
    xor     ecx, ecx
    
loc_147A2:
    mov     edi, ecx
    add     ecx, 1
    movzx   r9d, byte ptr [r12+rdi]
    cmp     ecx, r8d
    mov     [rax+rdi], r9b
    jb      short loc_147A2
    
loc_147B5:
    add     [rbx+80h], edx
    add     [rbx+10h], rsi
    cmp     r13, 1
    jnz     short loc_14830
    
loc_147C5:
    movzx   eax, bpl
    
loc_147C9:
    mov     rcx, [rsp+38h+var_30]
    xor     rcx, fs:28h
    jnz     loc_14A89
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_147F0:
    mov     rax, rsi
    mov     [rbx+78h], rsi
    add     rax, rdx
    sub     rax, rsi
    cmp     ecx, eax
    jbe     loc_1473A
    
loc_14805:
    mov     eax, eax
    mov     [rsi+rax], bpl
    movzx   eax, bpl
    add     dword ptr [rbx+80h], 1
    add     qword ptr [rbx+10h], 1
    jmp     short loc_147C9
    align 20h
    
loc_14820:
    mov     [rbx+78h], rcx
    mov     rax, rcx
    jmp     loc_14771
    align 10h
    
loc_14830:
    mov     rdi, rbx
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jz      short loc_14861
    add     r12, r13
    mov     esi, [rbx+80h]
    mov     edx, [rbx+28h]
    jmp     loc_14761
    align 10h
    
loc_14850:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, rbx
    call    gz_error
    
loc_14861:
    mov     eax, 0FFFFFFFFh
    jmp     loc_147C9
    align 10h
    
loc_14870:
    mov     rsi, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     rdi, rbx
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jz      short loc_14861
    mov     ecx, [rbx+28h]
    test    ecx, ecx
    jnz     loc_14716
    
loc_14893:
    mov     rdi, rbx
    mov     [rsp+38h+var_31], bpl
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jz      short loc_14861
    mov     edx, [rbx+68h]
    test    edx, edx
    jz      loc_1474A
    
loc_148B0:
    mov     rsi, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     rdi, rbx
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jz      short loc_14861
    mov     edx, [rbx+28h]
    mov     esi, [rbx+80h]
    cmp     edx, 1
    ja      loc_1475C
    
loc_148DA:
    test    esi, esi
    jnz     loc_14A70
    
loc_148E2:
    lea     rax, [rsp+38h+var_31]
    add     qword ptr [rbx+10h], 1
    test    edx, edx
    mov     dword ptr [rbx+80h], 1
    mov     [rbx+78h], rax
    jz      loc_14A20
    
loc_14902:
    mov     eax, [rbx+40h]
    test    eax, eax
    jz      loc_14990
    mov     edx, [rbx+80h]
    test    edx, edx
    jz      loc_147C5
    mov     rsi, [rbx+78h]
    mov     r12d, 40000000h
    jmp     short loc_14953
    align 10h
    
loc_14930:
    mov     edx, [rbx+80h]
    sub     edx, eax
    cdqe
    add     rax, [rbx+78h]
    test    edx, edx
    mov     [rbx+80h], edx
    mov     rsi, rax
    mov     [rbx+78h], rax
    jz      loc_147C5
    
loc_14953:
    mov     edi, [rbx+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, r12
    call    _write
    test    eax, eax
    jns     short loc_14930
    
loc_14969:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, rbx
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     loc_147C9
    align 10h
    
loc_14990:
    mov     eax, [rbx+98h]
    mov     r12d, 40000000h
    test    eax, eax
    mov     r13d, eax
    jz      short loc_149D2
    nop     dword ptr [rax+rax+00h]
    
loc_149A8:
    lea     rdi, [rbx+78h]
    xor     esi, esi
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_14850
    mov     eax, [rbx+98h]
    cmp     eax, r13d
    jz      loc_147C5
    test    eax, eax
    mov     r13d, eax
    jnz     short loc_149A8
    
loc_149D2:
    mov     rdx, [rbx+90h]
    mov     rsi, [rbx+8]
    cmp     rdx, rsi
    ja      short loc_149FF
    jmp     short loc_14A50
    align 8
    
loc_149E8:
    movsxd  rsi, eax
    add     rsi, [rbx+8]
    mov     rdx, [rbx+90h]
    cmp     rdx, rsi
    mov     [rbx+8], rsi
    jbe     short loc_14A40
    
loc_149FF:
    sub     rdx, rsi
    mov     edi, [rbx+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, r12
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_149E8
    jmp     loc_14969
    
loc_14A20:
    mov     rdi, rbx
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_14902
    jmp     loc_14861
    align 20h
    
loc_14A40:
    mov     r13d, [rbx+98h]
    test    r13d, r13d
    jnz     loc_149A8
    
loc_14A50:
    mov     rax, [rbx+38h]
    mov     r13d, [rbx+28h]
    mov     [rbx+90h], rax
    mov     [rbx+98h], r13d
    mov     [rbx+8], rax
    jmp     loc_149A8
    align 10h
    
loc_14A70:
    mov     rdi, rbx
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jz      loc_14861
    mov     edx, [rbx+28h]
    jmp     loc_148E2
    
loc_14A89:
    call    ___stack_chk_fail
    

<gzputs>:
    
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    test    rdi, rdi
    jz      loc_14BE0
    cmp     dword ptr [rdi+18h], 79B1h
    mov     r12, rdi
    jnz     loc_14BE0
    mov     ebp, [rdi+6Ch]
    test    ebp, ebp
    jnz     loc_14BE0
    mov     rdi, rsi
    mov     rbx, rsi
    call    _strlen
    test    rax, rax
    mov     [rsp+48h+var_40], rax
    jz      loc_14B6F
    mov     ecx, [r12+28h]
    test    ecx, ecx
    jz      loc_14E38
    
loc_14AE8:
    mov     edx, [r12+68h]
    test    edx, edx
    jnz     loc_14BB8
    
loc_14AF5:
    mov     eax, [r12+28h]
    mov     edx, [r12+80h]
    cmp     [rsp+48h+var_40], rax
    mov     rsi, rax
    jnb     loc_14BF0
    mov     rbp, [rsp+48h+var_40]
    
loc_14B15:
    test    edx, edx
    mov     rdi, [r12+30h]
    jz      short loc_14B80
    mov     rax, [r12+78h]
    
loc_14B23:
    add     rax, rdx
    sub     rax, rdi
    sub     esi, eax
    mov     r14d, esi
    cmp     r14, rbp
    mov     r15, r14
    mov     r13, r14
    jbe     short loc_14B42
    mov     r14d, ebp
    mov     r13, rbp
    mov     r15, r14
    
loc_14B42:
    mov     eax, eax
    mov     rdx, r13
    mov     rsi, rbx
    add     rdi, rax
    call    _memcpy
    add     [r12+80h], r15d
    add     [r12+10h], r14
    sub     rbp, r13
    jnz     short loc_14B90
    
loc_14B64:
    mov     rax, [rsp+48h+var_40]
    test    eax, eax
    mov     ebp, eax
    jz      short loc_14BE0
    
loc_14B6F:
    add     rsp, 18h
    mov     eax, ebp
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_14B80:
    mov     [r12+78h], rdi
    mov     rax, rdi
    jmp     short loc_14B23
    align 10h
    
loc_14B90:
    mov     rdi, r12
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jz      short loc_14BE0
    add     rbx, r13
    mov     edx, [r12+80h]
    mov     esi, [r12+28h]
    jmp     loc_14B15
    align 8
    
loc_14BB8:
    mov     rsi, [r12+60h]
    mov     dword ptr [r12+68h], 0
    mov     rdi, r12
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     loc_14AF5
    nop     word ptr [rax+rax+00000000h]
    
loc_14BE0:
    mov     ebp, 0FFFFFFFFh
    jmp     short loc_14B6F
    align 10h
    
loc_14BF0:
    test    edx, edx
    jnz     loc_14CD0
    
loc_14BF8:
    mov     [r12+78h], rbx
    mov     rbx, [rsp+48h+var_40]
    mov     eax, 0FFFFFFFEh
    lea     r14, [r12+78h]
    cmp     rbx, rax
    ja      loc_14D40
    nop     dword ptr [rax]
    
loc_14C18:
    mov     edx, ebx
    mov     rax, rbx
    mov     r13, rbx
    
loc_14C20:
    add     [r12+10h], rax
    test    esi, esi
    mov     [r12+80h], edx
    jz      loc_14DB0
    
loc_14C35:
    mov     eax, [r12+40h]
    test    eax, eax
    jz      loc_14CF0
    mov     edx, [r12+80h]
    test    edx, edx
    jz      loc_14D24
    mov     rsi, [r12+78h]
    mov     ebp, 40000000h
    jmp     short loc_14C89
    align 20h
    
loc_14C60:
    mov     edx, [r12+80h]
    sub     edx, eax
    cdqe
    add     rax, [r12+78h]
    test    edx, edx
    mov     [r12+80h], edx
    mov     rsi, rax
    mov     [r12+78h], rax
    jz      loc_14D24
    
loc_14C89:
    mov     edi, [r12+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, rbp
    call    _write
    test    eax, eax
    jns     short loc_14C60
    
loc_14CA1:
    call    ___errno_location
    mov     edi, [rax]
    mov     ebp, 0FFFFFFFFh
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r12
    call    gz_error
    jmp     loc_14B6F
    align 10h
    
loc_14CD0:
    mov     rdi, r12
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jz      loc_14BE0
    mov     esi, [r12+28h]
    jmp     loc_14BF8
    align 10h
    
loc_14CF0:
    mov     eax, [r12+98h]
    mov     ebp, 40000000h
    
loc_14CFD:
    test    eax, eax
    mov     r15d, eax
    jz      short loc_14D58
    
loc_14D04:
    xor     esi, esi
    mov     rdi, r14
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_14E18
    
loc_14D17:
    mov     eax, [r12+98h]
    cmp     eax, r15d
    jnz     short loc_14CFD
    
loc_14D24:
    sub     rbx, r13
    jz      loc_14B64
    mov     eax, 0FFFFFFFEh
    mov     esi, [r12+28h]
    cmp     rbx, rax
    jbe     loc_14C18
    
loc_14D40:
    mov     eax, 0FFFFFFFFh
    mov     edx, 0FFFFFFFFh
    mov     r13, rax
    jmp     loc_14C20
    align 8
    
loc_14D58:
    mov     rdx, [r12+90h]
    mov     rsi, [r12+8]
    cmp     rdx, rsi
    ja      short loc_14D8A
    jmp     short loc_14DE1
    align 10h
    
loc_14D70:
    movsxd  rsi, eax
    add     rsi, [r12+8]
    mov     rdx, [r12+90h]
    cmp     rdx, rsi
    mov     [r12+8], rsi
    jbe     short loc_14DD0
    
loc_14D8A:
    sub     rdx, rsi
    mov     edi, [r12+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, rbp
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_14D70
    jmp     loc_14CA1
    align 10h
    
loc_14DB0:
    mov     rdi, r12
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_14C35
    jmp     loc_14BE0
    align 10h
    
loc_14DD0:
    mov     r15d, [r12+98h]
    test    r15d, r15d
    jnz     loc_14D04
    
loc_14DE1:
    mov     rax, [r12+38h]
    mov     r15d, [r12+28h]
    xor     esi, esi
    mov     rdi, r14
    mov     [r12+98h], r15d
    mov     [r12+90h], rax
    mov     [r12+8], rax
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jnz     loc_14D17
    nop     dword ptr [rax+rax+00h]
    
loc_14E18:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, r12
    mov     ebp, 0FFFFFFFFh
    call    gz_error
    jmp     loc_14B6F
    align 8
    
loc_14E38:
    mov     rdi, r12
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_14AE8
    jmp     loc_14BE0
    

<gzvprintf>:
    
    test    rdi, rdi
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    jz      loc_150B0
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     loc_150B0
    mov     r8d, [rdi+6Ch]
    test    r8d, r8d
    jnz     loc_150B0
    mov     r14d, [rdi+28h]
    mov     r12, rdx
    mov     rbp, rsi
    mov     rbx, rdi
    test    r14d, r14d
    jz      loc_14F80
    
loc_14E91:
    mov     eax, [rbx+68h]
    test    eax, eax
    jnz     loc_14FAF
    
loc_14E9C:
    mov     eax, [rbx+80h]
    mov     r13, [rbx+30h]
    test    eax, eax
    jz      loc_14F60
    mov     rdx, [rbx+78h]
    sub     rdx, r13
    
loc_14EB5:
    add     rax, rdx
    mov     r8, rbp
    mov     r9, r12
    add     r13, rax
    lea     eax, [r14-1]
    mov     rcx, 0FFFFFFFFFFFFFFFFh
    mov     edx, 1
    mov     rdi, r13
    mov     byte ptr [r13+rax+0], 0
    mov     esi, [rbx+28h]
    call    ___vsnprintf_chk
    test    eax, eax
    mov     ebp, eax
    jz      loc_14F72
    mov     r12d, [rbx+28h]
    cmp     r12d, eax
    jbe     short loc_14F70
    lea     eax, [r12-1]
    cmp     byte ptr [r13+rax+0], 0
    jnz     short loc_14F70
    mov     r13d, [rbx+80h]
    movsxd  rax, ebp
    add     [rbx+10h], rax
    add     r13d, ebp
    cmp     r12d, r13d
    mov     [rbx+80h], r13d
    ja      short loc_14F72
    mov     [rbx+80h], r12d
    mov     rdi, rbx
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jz      loc_14FF6
    mov     esi, [rbx+28h]
    mov     rdi, [rbx+30h]
    sub     r13d, r12d
    mov     edx, r13d
    add     rsi, rdi
    call    _memcpy
    mov     rax, [rbx+30h]
    mov     [rbx+80h], r13d
    mov     [rbx+78h], rax
    jmp     short loc_14F72
    align 20h
    
loc_14F60:
    mov     [rbx+78h], r13
    xor     edx, edx
    jmp     loc_14EB5
    align 10h
    
loc_14F70:
    xor     ebp, ebp
    
loc_14F72:
    pop     rbx
    mov     eax, ebp
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 20h
    
loc_14F80:
    mov     r14d, [rdi+2Ch]
    lea     edi, [r14+r14]
    call    _malloc
    test    rax, rax
    mov     r13, rax
    mov     [rbx+30h], rax
    jz      short loc_14FE2
    mov     esi, [rbx+40h]
    test    esi, esi
    jz      short loc_15008
    mov     eax, [rbx+68h]
    mov     [rbx+28h], r14d
    test    eax, eax
    jz      loc_14E9C
    
loc_14FAF:
    mov     rsi, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     rdi, rbx
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jz      short loc_14FF6
    mov     r14d, [rbx+28h]
    jmp     loc_14E9C
    
loc_14FD0:
    mov     rdi, [rbx+38h]
    call    _free
    mov     rdi, [rbx+30h]
    
loc_14FDD:
    call    _free
    
loc_14FE2:
    lea     rdx, aOutOfMemory
    mov     esi, 0FFFFFFFCh
    mov     rdi, rbx
    call    gz_error
    
loc_14FF6:
    mov     ebp, [rbx+6Ch]
    pop     rbx
    mov     eax, ebp
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 8
    
loc_15008:
    mov     edi, r14d
    call    _malloc
    test    rax, rax
    mov     [rbx+38h], rax
    jz      loc_150BA
    lea     rax, a1211
    mov     qword ptr [rbx+0B8h], 0
    mov     qword ptr [rbx+0C0h], 0
    mov     qword ptr [rbx+0C8h], 0
    mov     esi, [rbx+58h]
    lea     rdi, [rbx+78h]
    push    70h
    mov     r9d, [rbx+5Ch]
    mov     ecx, 1Fh
    push    rax
    mov     edx, 8
    mov     r8d, 8
    call    _deflateInit2_
    test    eax, eax
    pop     rdx
    pop     rcx
    jnz     loc_14FD0
    mov     eax, [rbx+40h]
    mov     r14d, [rbx+2Ch]
    mov     qword ptr [rbx+78h], 0
    test    eax, eax
    mov     [rbx+28h], r14d
    jnz     loc_14E91
    mov     rax, [rbx+38h]
    mov     [rbx+98h], r14d
    mov     [rbx+90h], rax
    mov     [rbx+8], rax
    jmp     loc_14E91
    align 10h
    
loc_150B0:
    mov     ebp, 0FFFFFFFEh
    jmp     loc_14F72
    
loc_150BA:
    mov     rdi, r13
    jmp     loc_14FDD
    

<gzprintf>:
    
    var_D8= dword ptr -0D8h
    var_D4= dword ptr -0D4h
    var_D0= qword ptr -0D0h
    var_C8= qword ptr -0C8h
    var_C0= qword ptr -0C0h
    var_B8= byte ptr -0B8h
    var_A8= qword ptr -0A8h
    var_A0= qword ptr -0A0h
    var_98= qword ptr -98h
    var_90= qword ptr -90h
    var_88= xmmword ptr -88h
    var_78= xmmword ptr -78h
    var_68= xmmword ptr -68h
    var_58= xmmword ptr -58h
    var_48= xmmword ptr -48h
    var_38= xmmword ptr -38h
    var_28= xmmword ptr -28h
    var_18= xmmword ptr -18h
    arg_0= byte ptr  8
    
    
    sub     rsp, 0D8h
    test    al, al
    mov     [rsp+0D8h+var_A8], rdx
    mov     [rsp+0D8h+var_A0], rcx
    mov     [rsp+0D8h+var_98], r8
    mov     [rsp+0D8h+var_90], r9
    jz      short loc_15126
    movaps  [rsp+0D8h+var_88], xmm0
    movaps  [rsp+0D8h+var_78], xmm1
    movaps  [rsp+0D8h+var_68], xmm2
    movaps  [rsp+0D8h+var_58], xmm3
    movaps  [rsp+0D8h+var_48], xmm4
    movaps  [rsp+0D8h+var_38], xmm5
    movaps  [rsp+0D8h+var_28], xmm6
    movaps  [rsp+0D8h+var_18], xmm7
    
loc_15126:
    mov     rax, fs:28h
    mov     [rsp+0D8h+var_C0], rax
    xor     eax, eax
    lea     rax, [rsp+0D8h+arg_0]
    mov     rdx, rsp
    mov     [rsp+0D8h+var_D0], rax
    lea     rax, [rsp+0D8h+var_B8]
    mov     [rsp+0D8h+var_D8], 10h
    mov     [rsp+0D8h+var_D4], 30h
    mov     [rsp+0D8h+var_C8], rax
    call    _gzvprintf
    mov     rcx, [rsp+0D8h+var_C0]
    xor     rcx, fs:28h
    jnz     short loc_1517C
    add     rsp, 0D8h
    retn
    
loc_1517C:
    call    ___stack_chk_fail
    

<gzflush>:
    
    var_3C= dword ptr -3Ch
    
    
    test    rdi, rdi
    jz      loc_155E4
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     loc_155E4
    mov     r8d, [rdi+6Ch]
    test    r8d, r8d
    jnz     loc_155E4
    cmp     esi, 4
    ja      loc_155E4
    push    r15
    push    r14
    mov     r14, rdi
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    mov     [rsp+48h+var_3C], esi
    mov     esi, [rdi+68h]
    test    esi, esi
    jz      loc_1531C
    mov     ecx, [rdi+80h]
    mov     dword ptr [rdi+68h], 0
    mov     rbp, [rdi+60h]
    test    ecx, ecx
    jnz     loc_155B0
    
loc_151F5:
    test    rbp, rbp
    lea     r15, [r14+78h]
    mov     edx, 1
    mov     r12d, 40000000h
    jz      loc_1531C
    nop     dword ptr [rax]
    
loc_15210:
    mov     ebx, [r14+28h]
    cmp     rbx, rbp
    mov     rax, rbx
    mov     r13d, ebx
    jle     short loc_15224
    mov     r13d, ebp
    mov     ebx, ebp
    
loc_15224:
    test    edx, edx
    mov     rdi, [r14+30h]
    jnz     loc_15480
    
loc_15230:
    add     [r14+10h], rbx
    test    eax, eax
    mov     [r14+80h], r13d
    mov     [r14+78h], rdi
    jz      loc_15460
    
loc_15247:
    mov     edx, [r14+40h]
    test    edx, edx
    jz      loc_152E0
    mov     edx, [r14+80h]
    test    edx, edx
    jz      loc_15311
    mov     rsi, [r14+78h]
    mov     r13d, 40000000h
    jmp     short loc_15295
    align 10h
    
loc_15270:
    mov     edx, [r14+80h]
    sub     edx, eax
    cdqe
    add     rax, [r14+78h]
    test    edx, edx
    mov     [r14+80h], edx
    mov     rsi, rax
    mov     [r14+78h], rax
    jz      loc_15311
    
loc_15295:
    mov     edi, [r14+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, r13
    call    _write
    test    eax, eax
    jns     short loc_15270
    
loc_152AC:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r14
    call    gz_error
    
loc_152C8:
    mov     eax, [r14+6Ch]
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_152E0:
    mov     eax, [r14+98h]
    
loc_152E7:
    test    eax, eax
    mov     r13d, eax
    jz      loc_15408
    
loc_152F2:
    xor     esi, esi
    mov     rdi, r15
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_154E0
    
loc_15305:
    mov     eax, [r14+98h]
    cmp     eax, r13d
    jnz     short loc_152E7
    
loc_15311:
    xor     edx, edx
    sub     rbp, rbx
    jnz     loc_15210
    
loc_1531C:
    mov     eax, [r14+28h]
    test    eax, eax
    jz      loc_15590
    
loc_15328:
    mov     eax, [r14+40h]
    test    eax, eax
    jnz     short loc_153A0
    mov     edi, [r14+98h]
    lea     rbp, [r14+78h]
    mov     ebx, 40000000h
    
loc_15340:
    test    edi, edi
    jz      loc_15500
    mov     ecx, [rsp+48h+var_3C]
    test    ecx, ecx
    jz      short loc_15362
    cmp     ecx, 4
    jnz     loc_155C8
    cmp     eax, 1
    jz      loc_155C8
    
loc_15362:
    mov     r12d, edi
    
loc_15365:
    mov     esi, [rsp+48h+var_3C]
    mov     rdi, rbp
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_154E0
    mov     edi, [r14+98h]
    cmp     edi, r12d
    jnz     short loc_15340
    cmp     [rsp+48h+var_3C], 4
    jnz     loc_152C8
    mov     rdi, rbp
    call    _deflateReset
    jmp     loc_152C8
    align 20h
    
loc_153A0:
    mov     edx, [r14+80h]
    test    edx, edx
    jz      loc_152C8
    mov     rsi, [r14+78h]
    mov     ebx, 40000000h
    jmp     short loc_153E5
    align 20h
    
loc_153C0:
    mov     edx, [r14+80h]
    sub     edx, eax
    cdqe
    add     rax, [r14+78h]
    test    edx, edx
    mov     [r14+80h], edx
    mov     rsi, rax
    mov     [r14+78h], rax
    jz      loc_152C8
    
loc_153E5:
    mov     edi, [r14+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, rbx
    call    _write
    test    eax, eax
    jns     short loc_153C0
    jmp     loc_152AC
    align 8
    
loc_15408:
    mov     rdx, [r14+90h]
    mov     rsi, [r14+8]
    cmp     rsi, rdx
    jb      short loc_15437
    jmp     loc_154B0
    align 20h
    
loc_15420:
    movsxd  rsi, eax
    add     rsi, [r14+8]
    mov     rdx, [r14+90h]
    cmp     rdx, rsi
    mov     [r14+8], rsi
    jbe     short loc_154A0
    
loc_15437:
    sub     rdx, rsi
    mov     edi, [r14+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, r12
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_15420
    jmp     loc_152AC
    align 20h
    
loc_15460:
    mov     rdi, r14
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_15247
    jmp     loc_152C8
    align 20h
    
loc_15480:
    mov     edx, r13d
    xor     esi, esi
    call    _memset
    mov     rdi, [r14+30h]
    mov     eax, [r14+28h]
    jmp     loc_15230
    align 20h
    
loc_154A0:
    mov     r13d, [r14+98h]
    test    r13d, r13d
    jnz     loc_152F2
    
loc_154B0:
    mov     rax, [r14+38h]
    mov     r13d, [r14+28h]
    xor     esi, esi
    mov     rdi, r15
    mov     [r14+98h], r13d
    mov     [r14+90h], rax
    mov     [r14+8], rax
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jnz     loc_15305
    nop     dword ptr [rax]
    
loc_154E0:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, r14
    call    gz_error
    jmp     loc_152C8
    align 20h
    
loc_15500:
    mov     rdx, [r14+90h]
    mov     rsi, [r14+8]
    cmp     rsi, rdx
    jb      short loc_1552F
    jmp     short loc_15568
    align 8
    
loc_15518:
    movsxd  rsi, eax
    add     rsi, [r14+8]
    mov     rdx, [r14+90h]
    cmp     rdx, rsi
    mov     [r14+8], rsi
    jbe     short loc_15558
    
loc_1552F:
    sub     rdx, rsi
    mov     edi, [r14+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, rbx
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_15518
    jmp     loc_152AC
    align 8
    
loc_15558:
    mov     r12d, [r14+98h]
    
loc_1555F:
    test    r12d, r12d
    jnz     loc_15365
    
loc_15568:
    mov     rax, [r14+38h]
    mov     r12d, [r14+28h]
    mov     [r14+90h], rax
    mov     [r14+98h], r12d
    mov     [r14+8], rax
    jmp     loc_15365
    align 10h
    
loc_15590:
    mov     rdi, r14
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_15328
    jmp     loc_152C8
    align 10h
    
loc_155B0:
    call    gz_comp_constprop_1
    cmp     eax, 0FFFFFFFFh
    jnz     loc_151F5
    jmp     loc_152C8
    align 8
    
loc_155C8:
    mov     rdx, [r14+90h]
    mov     rsi, [r14+8]
    cmp     rsi, rdx
    jb      loc_1552F
    mov     r12d, edi
    jmp     loc_1555F
    
loc_155E4:
    mov     eax, 0FFFFFFFEh
    retn
    

<gzsetparams>:
    
    var_3C= dword ptr -3Ch
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    test    rdi, rdi
    jz      loc_157F0
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     loc_157F0
    mov     r13d, [rdi+6Ch]
    test    r13d, r13d
    jnz     loc_157F0
    cmp     [rdi+58h], esi
    jz      loc_15758
    mov     ecx, [rdi+68h]
    mov     r12d, edx
    mov     ebp, esi
    mov     rbx, rdi
    test    ecx, ecx
    jnz     loc_15774
    
loc_1563D:
    mov     edx, [rbx+28h]
    test    edx, edx
    jnz     short loc_15660
    
loc_15644:
    mov     [rbx+58h], ebp
    mov     [rbx+5Ch], r12d
    
loc_1564B:
    add     rsp, 18h
    mov     eax, r13d
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_15660:
    mov     edx, [rbx+80h]
    lea     r15, [rbx+78h]
    test    edx, edx
    jz      loc_15740
    mov     eax, [rbx+40h]
    mov     r14d, 40000000h
    test    eax, eax
    jz      loc_15798
    mov     rsi, [rbx+78h]
    mov     r14d, 40000000h
    jmp     short loc_156B3
    align 10h
    
loc_15690:
    mov     edx, [rbx+80h]
    sub     edx, eax
    cdqe
    add     rax, [rbx+78h]
    test    edx, edx
    mov     [rbx+80h], edx
    mov     rsi, rax
    mov     [rbx+78h], rax
    jz      loc_15740
    
loc_156B3:
    mov     edi, [rbx+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, r14
    call    _write
    test    eax, eax
    jns     short loc_15690
    
loc_156C9:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, rbx
    call    gz_error
    
loc_156E5:
    mov     r13d, [rbx+6Ch]
    jmp     loc_1564B
    align 10h
    
loc_156F0:
    mov     edx, [rbx+98h]
    test    edx, edx
    jnz     short loc_15712
    mov     rax, [rbx+38h]
    mov     edx, [rbx+28h]
    mov     [rbx+90h], rax
    mov     [rbx+98h], edx
    mov     [rbx+8], rax
    
loc_15712:
    mov     esi, 5
    mov     rdi, r15
    mov     [rsp+48h+var_3C], edx
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    mov     edx, [rsp+48h+var_3C]
    jz      loc_157FB
    cmp     [rbx+98h], edx
    jnz     short loc_15798
    nop     dword ptr [rax+rax+00000000h]
    
loc_15740:
    mov     edx, r12d
    mov     esi, ebp
    mov     rdi, r15
    call    _deflateParams
    jmp     loc_15644
    align 8
    
loc_15758:
    cmp     [rdi+5Ch], edx
    jz      loc_1564B
    mov     ecx, [rdi+68h]
    mov     r12d, edx
    mov     ebp, esi
    mov     rbx, rdi
    test    ecx, ecx
    jz      loc_1563D
    
loc_15774:
    mov     rsi, [rdi+60h]
    mov     dword ptr [rdi+68h], 0
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     loc_1563D
    jmp     loc_156E5
    align 8
    
loc_15798:
    mov     rdx, [rbx+90h]
    mov     rsi, [rbx+8]
    cmp     rsi, rdx
    jb      short loc_157CB
    jmp     loc_156F0
    align 10h
    
loc_157B0:
    movsxd  rsi, eax
    add     rsi, [rbx+8]
    mov     rdx, [rbx+90h]
    cmp     rdx, rsi
    mov     [rbx+8], rsi
    jbe     loc_156F0
    
loc_157CB:
    sub     rdx, rsi
    mov     edi, [rbx+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, r14
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_157B0
    jmp     loc_156C9
    align 10h
    
loc_157F0:
    mov     r13d, 0FFFFFFFEh
    jmp     loc_1564B
    
loc_157FB:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, rbx
    call    gz_error
    jmp     loc_156E5
    

<gzclose_w>:
    
    test    rdi, rdi
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    jz      loc_15A76
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     loc_15A76
    mov     rbx, rdi
    mov     edi, [rdi+68h]
    test    edi, edi
    jnz     loc_15A30
    
loc_1584C:
    xor     r12d, r12d
    
loc_1584F:
    mov     esi, [rbx+28h]
    lea     r13, [rbx+78h]
    test    esi, esi
    jz      loc_15A10
    
loc_1585E:
    mov     eax, [rbx+40h]
    test    eax, eax
    jnz     short loc_158B0
    mov     ecx, [rbx+98h]
    mov     ebp, 40000000h
    
loc_15870:
    test    ecx, ecx
    jz      loc_15990
    cmp     eax, 1
    mov     r14d, ecx
    jz      loc_15990
    
loc_15884:
    mov     esi, 4
    mov     rdi, r13
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_15A60
    mov     ecx, [rbx+98h]
    cmp     ecx, r14d
    jnz     short loc_15870
    mov     rdi, r13
    call    _deflateReset
    jmp     short loc_15925
    align 10h
    
loc_158B0:
    mov     edx, [rbx+80h]
    test    edx, edx
    jz      loc_15A80
    mov     rsi, [rbx+78h]
    mov     ebp, 40000000h
    jmp     short loc_158EF
    align 10h
    
loc_158D0:
    mov     edx, [rbx+80h]
    sub     edx, eax
    cdqe
    add     rax, [rbx+78h]
    test    edx, edx
    mov     [rbx+80h], edx
    mov     rsi, rax
    mov     [rbx+78h], rax
    jz      short loc_15925
    
loc_158EF:
    mov     edi, [rbx+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, rbp
    call    _write
    test    eax, eax
    jns     short loc_158D0
    
loc_15905:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, rbx
    call    gz_error
    
loc_15921:
    mov     r12d, [rbx+6Ch]
    
loc_15925:
    mov     ecx, [rbx+28h]
    test    ecx, ecx
    jz      short loc_1594D
    mov     edx, [rbx+40h]
    test    edx, edx
    jnz     short loc_15944
    mov     rdi, r13
    call    _deflateEnd
    mov     rdi, [rbx+38h]
    call    _free
    
loc_15944:
    mov     rdi, [rbx+30h]
    call    _free
    
loc_1594D:
    xor     edx, edx
    xor     esi, esi
    mov     rdi, rbx
    call    gz_error
    mov     rdi, [rbx+20h]
    call    _free
    mov     edi, [rbx+1Ch]
    call    _close
    mov     rdi, rbx
    mov     ebp, eax
    cmp     eax, 0FFFFFFFFh
    cmovnz  ebp, r12d
    call    _free
    
loc_1597B:
    pop     rbx
    mov     eax, ebp
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 10h
    
loc_15990:
    mov     rdx, [rbx+90h]
    mov     rsi, [rbx+8]
    cmp     rdx, rsi
    ja      short loc_159BF
    jmp     loc_15A58
    align 8
    
loc_159A8:
    movsxd  rsi, eax
    add     rsi, [rbx+8]
    mov     rdx, [rbx+90h]
    cmp     rdx, rsi
    mov     [rbx+8], rsi
    jbe     short loc_159E0
    
loc_159BF:
    sub     rdx, rsi
    mov     edi, [rbx+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, rbp
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_159A8
    jmp     loc_15905
    
loc_159E0:
    mov     r14d, [rbx+98h]
    
loc_159E7:
    test    r14d, r14d
    jnz     loc_15884
    mov     rax, [rbx+38h]
    mov     r14d, [rbx+28h]
    mov     [rbx+90h], rax
    mov     [rbx+98h], r14d
    mov     [rbx+8], rax
    jmp     loc_15884
    align 10h
    
loc_15A10:
    mov     rdi, rbx
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_1585E
    jmp     loc_15921
    align 10h
    
loc_15A30:
    mov     rsi, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     rdi, rbx
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     loc_1584C
    mov     r12d, [rbx+6Ch]
    jmp     loc_1584F
    align 8
    
loc_15A58:
    mov     r14d, ecx
    jmp     short loc_159E7
    align 20h
    
loc_15A60:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, rbx
    call    gz_error
    jmp     loc_15921
    
loc_15A76:
    mov     ebp, 0FFFFFFFEh
    jmp     loc_1597B
    
loc_15A80:
    mov     eax, [rbx+28h]
    test    eax, eax
    jnz     loc_15944
    jmp     loc_1594D
    

<_term_proc>:
    sub     rsp, 8
    add     rsp, 8
    retn

