<_init_proc>:
    sub     rsp, 8
    mov     rax, cs:__gmon_start___ptr
    test    rax, rax
    jz      short loc_20D2
    call    rax
    
loc_20D2:
    add     rsp, 8
    retn

<sub_20E0>:
    
    push    cs:qword_216008
    jmp     cs:qword_216010

<deregister_tm_clones>:
    lea     rdi, completed_7697
    push    rbp
    lea     rax, completed_7697
    cmp     rax, rdi
    mov     rbp, rsp
    jz      short loc_2400
    mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
    test    rax, rax
    jz      short loc_2400
    pop     rbp
    jmp     rax
    align 20h
    
loc_2400:
    pop     rbp
    retn

<register_tm_clones>:
    lea     rdi, completed_7697
    lea     rsi, completed_7697
    push    rbp
    sub     rsi, rdi
    mov     rbp, rsp
    sar     rsi, 3
    mov     rax, rsi
    shr     rax, 3Fh
    add     rsi, rax
    sar     rsi, 1
    jz      short loc_2450
    mov     rax, cs:_ITM_registerTMCloneTable_ptr
    test    rax, rax
    jz      short loc_2450
    pop     rbp
    jmp     rax
    align 10h
    
loc_2450:
    pop     rbp
    retn

<__do_global_dtors_aux>:
    cmp     cs:completed_7697, 0
    jnz     short locret_2498
    cmp     cs:__cxa_finalize_ptr, 0
    push    rbp
    mov     rbp, rsp
    jz      short loc_2483
    mov     rdi, cs:__dso_handle
    call    __cxa_finalize
    
loc_2483:
    call    deregister_tm_clones
    mov     cs:completed_7697, 1
    pop     rbp
    retn
    align 8
    
locret_2498:
    rep retn

<frame_dummy>:
    push    rbp
    mov     rbp, rsp
    pop     rbp
    jmp     register_tm_clones

<adler32_combine_>:
    
    test    rdx, rdx
    mov     r8, rdx
    mov     eax, 0FFFFFFFFh
    js      locret_2592
    mov     rax, r8
    mov     rdx, 800780708697E2E7h
    movzx   ecx, di
    imul    rdx
    shr     rdi, 10h
    lea     rax, [rdx+r8]
    mov     rdx, r8
    sar     rdx, 3Fh
    sar     rax, 0Fh
    sub     rax, rdx
    movzx   edx, di
    imul    rax, 0FFF1h
    sub     r8, rax
    mov     r9, r8
    mov     rax, r8
    movzx   r8d, si
    imul    r9, rcx
    shr     rsi, 10h
    movzx   edi, si
    add     rdx, rdi
    mov     rdi, rdx
    mov     rdx, 0F00E10D2FC5CDh
    sub     rdi, rax
    mov     rax, r9
    mul     rdx
    mov     rax, r9
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    mov     eax, 0FFF0h
    shr     rdx, 0Fh
    imul    rdx, 0FFF1h
    sub     r9, rdx
    add     rcx, r8
    lea     rdx, [rdi+r9]
    lea     rsi, [rdx+0FFF1h]
    jz      short loc_2567
    lea     rax, [rcx-1]
    cmp     rax, 0FFF0h
    jbe     short loc_2567
    lea     rax, [rcx-0FFF2h]
    
loc_2567:
    sub     rdx, 0FFF1h
    cmp     rsi, 1FFE1h
    cmova   rsi, rdx
    lea     rdx, [rsi-0FFF1h]
    cmp     rsi, 0FFF0h
    cmova   rsi, rdx
    shl     rsi, 10h
    or      rax, rsi
    
locret_2592:
    rep retn
    

<adler32_z>:
    
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_40= qword ptr -40h
    var_38= qword ptr -38h
    
    
    mov     rax, rdi
    push    r15
    push    r14
    shr     rax, 10h
    push    r13
    push    r12
    push    rbp
    push    rbx
    movzx   eax, ax
    cmp     rdx, 1
    mov     r9, rsi
    movzx   r15d, di
    mov     [rsp+30h+var_38], rdx
    mov     [rsp+30h+var_50], rax
    jz      loc_27F1
    test    rsi, rsi
    mov     eax, 1
    jz      loc_27E6
    mov     rax, [rsp+30h+var_38]
    cmp     rax, 0Fh
    jbe     loc_276B
    cmp     rax, 15AFh
    jbe     loc_29E3
    
loc_25F8:
    mov     rax, [rsp+30h+var_38]
    mov     r10, r9
    sub     rax, 15B0h
    mov     [rsp+30h+var_40], rax
    lea     rax, [r9+15B0h]
    mov     [rsp+30h+var_48], rax
    nop     word ptr [rax+rax+00000000h]
    
loc_2620:
    movzx   eax, byte ptr [r10]
    movzx   r14d, byte ptr [r10+1]
    add     r10, 10h
    movzx   r13d, byte ptr [r10-0Eh]
    movzx   r12d, byte ptr [r10-0Dh]
    movzx   ebp, byte ptr [r10-0Ch]
    movzx   ebx, byte ptr [r10-0Bh]
    movzx   r11d, byte ptr [r10-0Ah]
    movzx   r9d, byte ptr [r10-9]
    add     rax, r15
    movzx   r8d, byte ptr [r10-6]
    movzx   ecx, byte ptr [r10-3]
    add     r14, rax
    movzx   edx, byte ptr [r10-2]
    movzx   r15d, byte ptr [r10-1]
    add     r13, r14
    add     rax, r14
    add     r12, r13
    add     rax, r13
    add     rbp, r12
    add     rax, r12
    add     rbx, rbp
    add     rax, rbp
    add     r11, rbx
    add     rbx, rax
    lea     rdi, [r9+r11]
    movzx   r9d, byte ptr [r10-8]
    add     r11, rbx
    mov     [rsp+30h+var_60], rdi
    add     r11, [rsp+30h+var_60]
    add     r9, rdi
    movzx   edi, byte ptr [r10-5]
    mov     rsi, r9
    movzx   r9d, byte ptr [r10-7]
    mov     [rsp+30h+var_58], rsi
    add     r11, [rsp+30h+var_58]
    add     r9, rsi
    movzx   esi, byte ptr [r10-4]
    add     r8, r9
    add     r9, r11
    add     rdi, r8
    add     r8, r9
    add     rsi, rdi
    add     rdi, r8
    add     rcx, rsi
    add     rsi, rdi
    add     rdx, rcx
    add     rcx, rsi
    add     r15, rdx
    add     rdx, rcx
    add     rdx, r15
    add     [rsp+30h+var_50], rdx
    cmp     r10, [rsp+30h+var_48]
    jnz     loc_2620
    mov     rax, 0F00E10D2FC5CDh
    mov     rcx, [rsp+30h+var_50]
    mov     r9, r10
    mul     r15
    mov     rax, r15
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    shr     rdx, 0Fh
    imul    rax, rdx, 0FFF1h
    sub     r15, rax
    mov     rax, 0F00E10D2FC5CDh
    mul     rcx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    shr     rdx, 0Fh
    imul    rax, rdx, 0FFF1h
    sub     rcx, rax
    cmp     [rsp+30h+var_40], 15AFh
    mov     rax, [rsp+30h+var_40]
    mov     [rsp+30h+var_50], rcx
    jbe     loc_2834
    mov     [rsp+30h+var_38], rax
    jmp     loc_25F8
    
loc_276B:
    mov     rax, [rsp+30h+var_38]
    test    rax, rax
    jz      short loc_2799
    add     rax, rsi
    mov     rdx, rax
    mov     rax, [rsp+30h+var_50]
    
loc_2780:
    add     r9, 1
    movzx   ecx, byte ptr [r9-1]
    add     r15, rcx
    add     rax, r15
    cmp     r9, rdx
    jnz     short loc_2780
    mov     [rsp+30h+var_50], rax
    
loc_2799:
    lea     rax, [r15-0FFF1h]
    cmp     r15, 0FFF0h
    mov     rdx, 0F00E10D2FC5CDh
    mov     rcx, [rsp+30h+var_50]
    cmova   r15, rax
    mov     rax, [rsp+30h+var_50]
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     rax, rcx
    shl     rax, 10h
    or      rax, r15
    
loc_27E6:
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_27F1:
    movzx   eax, byte ptr [rsi]
    add     r15, rax
    lea     rax, [r15-0FFF1h]
    cmp     r15, 0FFF0h
    cmova   r15, rax
    mov     rax, [rsp+30h+var_50]
    pop     rbx
    pop     rbp
    add     rax, r15
    lea     rdx, [rax-0FFF1h]
    cmp     rax, 0FFF0h
    pop     r12
    cmova   rax, rdx
    shl     rax, 10h
    or      rax, r15
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_2834:
    test    rax, rax
    jz      loc_29CC
    cmp     rax, 0Fh
    jbe     loc_29ED
    
loc_2847:
    mov     rax, [rsp+30h+var_40]
    sub     rax, 10h
    shr     rax, 4
    mov     [rsp+30h+var_38], rax
    add     rax, 1
    shl     rax, 4
    add     rax, r9
    mov     [rsp+30h+var_48], rax
    
loc_2869:
    movzx   eax, byte ptr [r9]
    movzx   r14d, byte ptr [r9+1]
    add     r9, 10h
    movzx   r13d, byte ptr [r9-0Eh]
    movzx   r12d, byte ptr [r9-0Dh]
    movzx   ebp, byte ptr [r9-0Ch]
    movzx   ebx, byte ptr [r9-0Bh]
    movzx   r11d, byte ptr [r9-0Ah]
    movzx   r10d, byte ptr [r9-9]
    add     rax, r15
    movzx   r8d, byte ptr [r9-8]
    movzx   edi, byte ptr [r9-7]
    add     r14, rax
    movzx   esi, byte ptr [r9-6]
    movzx   edx, byte ptr [r9-5]
    add     r13, r14
    add     rax, r14
    movzx   r15d, byte ptr [r9-1]
    add     r12, r13
    add     rax, r13
    add     rbp, r12
    add     rax, r12
    add     rbx, rbp
    add     rax, rbp
    add     r11, rbx
    add     rax, rbx
    add     r10, r11
    add     rax, r11
    add     r8, r10
    add     rax, r10
    add     rdi, r8
    add     rax, r8
    add     rsi, rdi
    add     rax, rdi
    lea     rcx, [rdx+rsi]
    movzx   edx, byte ptr [r9-4]
    add     rax, rsi
    mov     [rsp+30h+var_60], rcx
    add     rax, [rsp+30h+var_60]
    add     rdx, rcx
    movzx   ecx, byte ptr [r9-3]
    mov     [rsp+30h+var_58], rdx
    add     rax, [rsp+30h+var_58]
    add     rcx, rdx
    movzx   edx, byte ptr [r9-2]
    add     rax, rcx
    add     rdx, rcx
    add     r15, rdx
    add     rax, rdx
    add     rax, r15
    add     [rsp+30h+var_50], rax
    cmp     r9, [rsp+30h+var_48]
    jnz     loc_2869
    mov     rax, [rsp+30h+var_38]
    mov     rcx, [rsp+30h+var_40]
    neg     rax
    shl     rax, 4
    lea     rax, [rcx+rax-11h]
    and     ecx, 0Fh
    jz      short loc_2976
    
loc_2953:
    lea     rdx, [r9+rax+1]
    mov     rax, [rsp+30h+var_50]
    
loc_295D:
    add     r9, 1
    movzx   ecx, byte ptr [r9-1]
    add     r15, rcx
    add     rax, r15
    cmp     r9, rdx
    jnz     short loc_295D
    mov     [rsp+30h+var_50], rax
    
loc_2976:
    mov     rcx, 0F00E10D2FC5CDh
    mov     rax, r15
    mul     rcx
    mov     rax, r15
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     r15, rax
    mov     rax, [rsp+30h+var_50]
    mul     rcx
    mov     rcx, [rsp+30h+var_50]
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     [rsp+30h+var_50], rcx
    
loc_29CC:
    mov     rax, [rsp+30h+var_50]
    pop     rbx
    pop     rbp
    shl     rax, 10h
    pop     r12
    or      rax, r15
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_29E3:
    mov     [rsp+30h+var_40], rax
    jmp     loc_2847
    
loc_29ED:
    mov     rax, [rsp+30h+var_38]
    sub     rax, 15B1h
    jmp     loc_2953
    

<adler32>:
    
    mov     edx, edx
    jmp     _adler32_z
    

<adler32_combine>:
    
    jmp     adler32_combine_
    

<adler32_combine64>:
    
    jmp     adler32_combine_
    

<crc32_combine_>:
    
    var_118= qword ptr -118h
    var_10= qword ptr -10h
    
    
    push    rbx
    sub     rsp, 210h
    mov     rax, fs:28h
    mov     [rsp+218h+var_10], rax
    xor     eax, eax
    test    rdx, rdx
    mov     rax, rdi
    jle     loc_2BB9
    lea     r10, [rsp+218h+var_118]
    mov     eax, 0EDB88320h
    mov     ecx, 1
    mov     [rsp+218h+var_118], rax
    lea     r8, [r10+100h]
    lea     rax, [r10+8]
    nop     dword ptr [rax+00h]
    
loc_2A80:
    mov     [rax], rcx
    add     rax, 8
    add     rcx, rcx
    cmp     r8, rax
    jnz     short loc_2A80
    xor     r9d, r9d
    mov     r11, rsp
    nop     dword ptr [rax]
    
loc_2A98:
    mov     rax, [r10+r9]
    xor     r8d, r8d
    test    rax, rax
    jz      short loc_2AC0
    mov     rcx, r10
    nop     word ptr [rax+rax+00000000h]
    
loc_2AB0:
    test    al, 1
    jz      short loc_2AB7
    xor     r8, [rcx]
    
loc_2AB7:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2AB0
    
loc_2AC0:
    mov     [r11+r9], r8
    add     r9, 8
    cmp     r9, 100h
    jnz     short loc_2A98
    xor     r9d, r9d
    nop     dword ptr [rax+00h]
    
loc_2AD8:
    mov     rax, [r11+r9]
    xor     r8d, r8d
    test    rax, rax
    jz      short loc_2B00
    mov     rcx, r11
    nop     word ptr [rax+rax+00000000h]
    
loc_2AF0:
    test    al, 1
    jz      short loc_2AF7
    xor     r8, [rcx]
    
loc_2AF7:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2AF0
    
loc_2B00:
    mov     [r10+r9], r8
    add     r9, 8
    cmp     r9, 100h
    jnz     short loc_2AD8
    
loc_2B11:
    xor     r9d, r9d
    nop     dword ptr [rax+00h]
    
loc_2B18:
    mov     rax, [r10+r9]
    xor     r8d, r8d
    test    rax, rax
    jz      short loc_2B40
    mov     rcx, r10
    nop     word ptr [rax+rax+00000000h]
    
loc_2B30:
    test    al, 1
    jz      short loc_2B37
    xor     r8, [rcx]
    
loc_2B37:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2B30
    
loc_2B40:
    mov     [r11+r9], r8
    add     r9, 8
    cmp     r9, 100h
    jnz     short loc_2B18
    test    dl, 1
    jnz     short loc_2BD5
    
loc_2B56:
    mov     rbx, rdx
    sar     rbx, 1
    jz      short loc_2BB3
    xor     r9d, r9d
    nop     dword ptr [rax+00000000h]
    
loc_2B68:
    mov     rax, [r11+r9]
    xor     r8d, r8d
    test    rax, rax
    jz      short loc_2B90
    mov     rcx, r11
    nop     word ptr [rax+rax+00000000h]
    
loc_2B80:
    test    al, 1
    jz      short loc_2B87
    xor     r8, [rcx]
    
loc_2B87:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2B80
    
loc_2B90:
    mov     [r10+r9], r8
    add     r9, 8
    cmp     r9, 100h
    jnz     short loc_2B68
    and     ebx, 1
    jnz     short loc_2C05
    
loc_2BA6:
    sar     rdx, 2
    test    rdx, rdx
    jnz     loc_2B11
    
loc_2BB3:
    mov     rax, rdi
    xor     rax, rsi
    
loc_2BB9:
    mov     rsi, [rsp+218h+var_10]
    xor     rsi, fs:28h
    jnz     short loc_2C24
    add     rsp, 210h
    pop     rbx
    retn
    
loc_2BD5:
    test    rdi, rdi
    jz      loc_2B56
    mov     rax, rdi
    mov     rcx, r11
    xor     edi, edi
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_2BF0:
    test    al, 1
    jz      short loc_2BF7
    xor     rdi, [rcx]
    
loc_2BF7:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2BF0
    jmp     loc_2B56
    
loc_2C05:
    test    rdi, rdi
    jz      short loc_2BA6
    mov     rax, rdi
    mov     rcx, r10
    xor     edi, edi
    
loc_2C12:
    test    al, 1
    jz      short loc_2C19
    xor     rdi, [rcx]
    
loc_2C19:
    add     rcx, 8
    shr     rax, 1
    jnz     short loc_2C12
    jmp     short loc_2BA6
    
loc_2C24:
    call    ___stack_chk_fail
    

<get_crc_table>:
    
    lea     rax, crc_table
    retn
    

<crc32_z>:
    
    test    rsi, rsi
    jz      loc_2EF0
    test    rdx, rdx
    not     edi
    jz      short loc_2C7F
    test    sil, 3
    jz      short loc_2C88
    lea     rcx, crc_table
    jmp     short loc_2C66
    align 20h
    
loc_2C60:
    test    sil, 3
    jz      short loc_2C88
    
loc_2C66:
    add     rsi, 1
    movzx   eax, byte ptr [rsi-1]
    xor     eax, edi
    shr     edi, 8
    movzx   eax, al
    xor     edi, [rcx+rax*4]
    sub     rdx, 1
    jnz     short loc_2C60
    
loc_2C7F:
    mov     eax, edi
    not     eax
    retn
    align 8
    
loc_2C88:
    cmp     rdx, 1Fh
    push    rbx
    jbe     loc_2E62
    lea     rax, [rdx-20h]
    lea     rcx, crc_table
    and     rax, 0FFFFFFFFFFFFFFE0h
    lea     r8, [rsi+rax+20h]
    nop     word ptr [rax+rax+00000000h]
    
loc_2CB0:
    mov     eax, [rsi]
    xor     eax, edi
    mov     edi, eax
    movzx   r9d, al
    mov     r10d, eax
    shr     edi, 18h
    mov     r9d, [rcx+r9*4+0C00h]
    shr     r10d, 10h
    xor     r9d, [rcx+rdi*4]
    movzx   eax, ah
    movzx   r10d, r10b
    xor     r9d, [rsi+4]
    xor     r9d, [rcx+rax*4+800h]
    mov     eax, [rcx+r10*4+400h]
    xor     eax, r9d
    mov     r9d, eax
    movzx   r10d, al
    mov     edi, eax
    shr     r9d, 18h
    mov     ebx, [rcx+r10*4+0C00h]
    shr     edi, 10h
    xor     ebx, [rcx+r9*4]
    movzx   eax, ah
    movzx   edi, dil
    xor     ebx, [rsi+8]
    xor     ebx, [rcx+rax*4+800h]
    xor     ebx, [rcx+rdi*4+400h]
    mov     r9d, ebx
    movzx   eax, bl
    mov     edi, ebx
    shr     r9d, 18h
    mov     eax, [rcx+rax*4+0C00h]
    shr     edi, 10h
    xor     eax, [rcx+r9*4]
    movzx   ebx, bh
    movzx   edi, dil
    xor     eax, [rsi+0Ch]
    xor     eax, [rcx+rbx*4+800h]
    xor     eax, [rcx+rdi*4+400h]
    mov     r9d, eax
    movzx   r10d, al
    mov     edi, eax
    shr     r9d, 18h
    mov     ebx, [rcx+r10*4+0C00h]
    shr     edi, 10h
    xor     ebx, [rcx+r9*4]
    movzx   eax, ah
    movzx   edi, dil
    xor     ebx, [rsi+10h]
    xor     ebx, [rcx+rax*4+800h]
    xor     ebx, [rcx+rdi*4+400h]
    mov     r9d, ebx
    movzx   eax, bl
    mov     edi, ebx
    shr     r9d, 18h
    mov     eax, [rcx+rax*4+0C00h]
    shr     edi, 10h
    xor     eax, [rcx+r9*4]
    movzx   ebx, bh
    movzx   edi, dil
    xor     eax, [rsi+14h]
    xor     eax, [rcx+rbx*4+800h]
    xor     eax, [rcx+rdi*4+400h]
    mov     edi, eax
    mov     r9d, eax
    movzx   r10d, al
    shr     edi, 10h
    shr     r9d, 18h
    mov     ebx, [rcx+r10*4+0C00h]
    xor     ebx, [rcx+r9*4]
    movzx   eax, ah
    movzx   edi, dil
    xor     ebx, [rsi+18h]
    add     rsi, 20h
    xor     ebx, [rcx+rax*4+800h]
    xor     ebx, [rcx+rdi*4+400h]
    mov     r9d, ebx
    movzx   eax, bl
    mov     edi, ebx
    shr     r9d, 18h
    mov     eax, [rcx+rax*4+0C00h]
    shr     edi, 10h
    xor     eax, [rcx+r9*4]
    movzx   ebx, bh
    movzx   edi, dil
    xor     eax, [rsi-4]
    xor     eax, [rcx+rbx*4+800h]
    xor     eax, [rcx+rdi*4+400h]
    mov     r10d, eax
    mov     r9d, eax
    movzx   edi, al
    shr     r10d, 18h
    shr     r9d, 10h
    mov     edi, [rcx+rdi*4+0C00h]
    movzx   eax, ah
    xor     edi, [rcx+r10*4]
    movzx   r9d, r9b
    xor     edi, [rcx+rax*4+800h]
    xor     edi, [rcx+r9*4+400h]
    cmp     rsi, r8
    jnz     loc_2CB0
    and     edx, 1Fh
    
loc_2E62:
    cmp     rdx, 3
    jbe     short loc_2EC3
    lea     rax, [rdx-4]
    lea     rcx, crc_table
    shr     rax, 2
    lea     r10, [rsi+rax*4+4]
    nop     dword ptr [rax+00h]
    
loc_2E80:
    add     rsi, 4
    mov     eax, [rsi-4]
    xor     eax, edi
    mov     r9d, eax
    mov     r8d, eax
    movzx   edi, al
    shr     r9d, 18h
    shr     r8d, 10h
    mov     edi, [rcx+rdi*4+0C00h]
    movzx   eax, ah
    xor     edi, [rcx+r9*4]
    movzx   r8d, r8b
    xor     edi, [rcx+rax*4+800h]
    xor     edi, [rcx+r8*4+400h]
    cmp     rsi, r10
    jnz     short loc_2E80
    and     edx, 3
    
loc_2EC3:
    test    rdx, rdx
    jz      short loc_2EEA
    lea     rcx, crc_table
    add     rdx, rsi
    
loc_2ED2:
    add     rsi, 1
    movzx   eax, byte ptr [rsi-1]
    xor     eax, edi
    shr     edi, 8
    movzx   eax, al
    xor     edi, [rcx+rax*4]
    cmp     rsi, rdx
    jnz     short loc_2ED2
    
loc_2EEA:
    mov     eax, edi
    not     eax
    pop     rbx
    retn
    
loc_2EF0:
    xor     eax, eax
    retn
    

<crc32>:
    
    mov     edx, edx
    jmp     _crc32_z
    

<crc32_combine>:
    
    jmp     crc32_combine_
    

<crc32_combine64>:
    
    jmp     crc32_combine_
    

<slide_hash>:
    
    mov     esi, [rdi+84h]
    mov     rax, [rdi+78h]
    xor     r8d, r8d
    mov     edx, [rdi+50h]
    mov     rcx, rsi
    lea     rax, [rax+rsi*2]
    sub     ecx, 1
    not     rcx
    lea     r9, [rax+rcx*2]
    nop     dword ptr [rax+00000000h]
    
loc_2F58:
    sub     rax, 2
    movzx   esi, word ptr [rax]
    mov     ecx, esi
    sub     ecx, edx
    cmp     edx, esi
    cmova   ecx, r8d
    cmp     rax, r9
    mov     [rax], cx
    jnz     short loc_2F58
    mov     rcx, [rdi+70h]
    mov     eax, edx
    xor     edi, edi
    lea     rax, [rcx+rax*2]
    lea     ecx, [rdx-1]
    not     rcx
    lea     r8, [rax+rcx*2]
    nop     word ptr [rax+rax+00000000h]
    
loc_2F90:
    sub     rax, 2
    movzx   esi, word ptr [rax]
    mov     ecx, esi
    sub     ecx, edx
    cmp     edx, esi
    cmova   ecx, edi
    cmp     rax, r8
    mov     [rax], cx
    jnz     short loc_2F90
    rep retn
    

<longest_match>:
    
    var_48= qword ptr -48h
    var_3C= dword ptr -3Ch
    var_38= qword ptr -38h
    
    
    push    r15
    push    r14
    mov     edx, 0
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     r8d, [rdi+0ACh]
    mov     r11d, [rdi+50h]
    mov     r10, [rdi+60h]
    mov     eax, [rdi+0B8h]
    mov     ecx, [rdi+0BCh]
    mov     r15d, [rdi+0D0h]
    lea     ebx, [r11-106h]
    mov     ebp, [rdi+58h]
    lea     r9d, [r8+106h]
    lea     r12, [r10+r8]
    sub     r9d, r11d
    cmp     r8d, ebx
    mov     rbx, [rdi+70h]
    cmovbe  r9d, edx
    cmp     eax, [rdi+0CCh]
    lea     rdx, [r10+r8+102h]
    mov     [rsp+30h+var_48], rdx
    movsxd  rdx, eax
    movzx   r13d, byte ptr [r12+rdx-1]
    movzx   r11d, byte ptr [r12+rdx]
    jb      short loc_302A
    shr     ecx, 2
    
loc_302A:
    mov     r14d, [rdi+0B4h]
    mov     [rsp+30h+var_38], rdi
    cmp     r14d, r15d
    cmovb   r15d, r14d
    mov     [rsp+30h+var_3C], r15d
    jmp     short loc_304D
    align 8
    
loc_3048:
    sub     ecx, 1
    jz      short loc_308B
    
loc_304D:
    mov     edx, esi
    movsxd  rdi, eax
    add     rdx, r10
    cmp     [rdx+rdi], r11b
    jnz     short loc_3080
    cmp     [rdx+rdi-1], r13b
    jnz     short loc_3080
    movzx   edi, byte ptr [r12]
    cmp     [rdx], dil
    jnz     short loc_3080
    movzx   edi, byte ptr [r12+1]
    cmp     [rdx+1], dil
    jz      short loc_30A0
    nop     dword ptr [rax+rax+00000000h]
    
loc_3080:
    and     esi, ebp
    movzx   esi, word ptr [rbx+rsi*2]
    cmp     r9d, esi
    jb      short loc_3048
    
loc_308B:
    cmp     eax, r14d
    pop     rbx
    cmova   eax, r14d
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_30A0:
    lea     rdi, [r12+2]
    add     rdx, 2
    nop     dword ptr [rax+00000000h]
    
loc_30B0:
    movzx   r8d, byte ptr [rdx+1]
    cmp     [rdi+1], r8b
    jnz     loc_317B
    movzx   r15d, byte ptr [rdx+2]
    cmp     [rdi+2], r15b
    jnz     loc_3181
    movzx   r8d, byte ptr [rdx+3]
    cmp     [rdi+3], r8b
    jnz     loc_3187
    movzx   r15d, byte ptr [rdx+4]
    cmp     [rdi+4], r15b
    jnz     loc_318D
    movzx   r8d, byte ptr [rdx+5]
    cmp     [rdi+5], r8b
    jnz     loc_3193
    movzx   r15d, byte ptr [rdx+6]
    cmp     [rdi+6], r15b
    jnz     loc_3199
    movzx   r8d, byte ptr [rdx+7]
    cmp     [rdi+7], r8b
    jnz     loc_319F
    add     rdx, 8
    add     rdi, 8
    movzx   r15d, byte ptr [rdx]
    cmp     [rdi], r15b
    setz    r15b
    cmp     [rsp+30h+var_48], rdi
    setnbe  r8b
    test    r15b, r8b
    jnz     loc_30B0
    
loc_313E:
    mov     rdx, [rsp+30h+var_48]
    sub     rdx, rdi
    mov     edi, 102h
    sub     edi, edx
    cmp     eax, edi
    jge     loc_3080
    cmp     edi, [rsp+30h+var_3C]
    mov     rax, [rsp+30h+var_38]
    mov     [rax+0B0h], esi
    jge     short loc_31A5
    movsxd  rax, edi
    movzx   r13d, byte ptr [r12+rax-1]
    movzx   r11d, byte ptr [r12+rax]
    mov     eax, edi
    jmp     loc_3080
    
loc_317B:
    add     rdi, 1
    jmp     short loc_313E
    
loc_3181:
    add     rdi, 2
    jmp     short loc_313E
    
loc_3187:
    add     rdi, 3
    jmp     short loc_313E
    
loc_318D:
    add     rdi, 4
    jmp     short loc_313E
    
loc_3193:
    add     rdi, 5
    jmp     short loc_313E
    
loc_3199:
    add     rdi, 6
    jmp     short loc_313E
    
loc_319F:
    add     rdi, 7
    jmp     short loc_313E
    
loc_31A5:
    mov     eax, edi
    jmp     loc_308B
    

<read_buf>:
    
    push    r12
    push    rbp
    push    rbx
    mov     eax, [rdi+8]
    mov     ebx, edx
    cmp     eax, edx
    cmovbe  ebx, eax
    test    ebx, ebx
    jnz     short loc_31D0
    mov     eax, ebx
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 10h
    
loc_31D0:
    mov     rcx, rsi
    mov     rsi, [rdi]
    sub     eax, ebx
    mov     r12d, ebx
    mov     rbp, rdi
    mov     [rdi+8], eax
    mov     rdx, r12
    mov     rdi, rcx
    call    _memcpy
    mov     rcx, rax
    mov     rax, [rbp+38h]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jz      short loc_3210
    cmp     eax, 2
    jz      short loc_3228
    
loc_3200:
    add     [rbp+0], r12
    add     [rbp+10h], r12
    mov     eax, ebx
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 10h
    
loc_3210:
    mov     rdi, [rbp+60h]
    mov     edx, ebx
    mov     rsi, rcx
    call    _adler32
    mov     [rbp+60h], rax
    jmp     short loc_3200
    align 8
    
loc_3228:
    mov     rdi, [rbp+60h]
    mov     edx, ebx
    mov     rsi, rcx
    call    _crc32
    mov     [rbp+60h], rax
    jmp     short loc_3200
    

<fill_window>:
    
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     r13d, [rdi+50h]
    mov     rbx, rdi
    mov     eax, [rdi+0B4h]
    mov     rbp, r13
    mov     edx, r13d
    lea     r12d, [r13-106h]
    jmp     short loc_32C7
    align 8
    
loc_3268:
    mov     rdi, [rbx]
    mov     r9d, [rdi+8]
    test    r9d, r9d
    jz      loc_3320
    
loc_3278:
    mov     esi, [rbx+0ACh]
    mov     eax, [rbx+0B4h]
    mov     edx, r14d
    add     rsi, rax
    add     rsi, [rbx+60h]
    call    read_buf
    add     eax, [rbx+0B4h]
    mov     esi, [rbx+172Ch]
    lea     edx, [rax+rsi]
    mov     [rbx+0B4h], eax
    cmp     edx, 2
    ja      loc_33A0
    
loc_32B1:
    cmp     eax, 105h
    ja      short loc_3320
    mov     rdx, [rbx]
    mov     r8d, [rdx+8]
    test    r8d, r8d
    jz      short loc_3320
    mov     edx, [rbx+50h]
    
loc_32C7:
    mov     r14d, [rbx+68h]
    mov     ecx, [rbx+0ACh]
    sub     r14d, eax
    lea     eax, [r12+rdx]
    sub     r14d, ecx
    cmp     ecx, eax
    jb      short loc_3268
    mov     rdi, [rbx+60h]
    mov     edx, ebp
    sub     edx, r14d
    add     r14d, ebp
    lea     rsi, [rdi+r13]
    call    _memcpy
    sub     [rbx+0B0h], ebp
    sub     [rbx+0ACh], ebp
    mov     rdi, rbx
    sub     [rbx+98h], r13
    call    slide_hash
    mov     rdi, [rbx]
    mov     r9d, [rdi+8]
    test    r9d, r9d
    jnz     loc_3278
    nop
    
loc_3320:
    mov     rcx, [rbx+1738h]
    mov     rax, [rbx+68h]
    cmp     rcx, rax
    jnb     short loc_338D
    mov     esi, [rbx+0ACh]
    mov     edx, [rbx+0B4h]
    add     rsi, rdx
    cmp     rcx, rsi
    jnb     loc_3440
    sub     rax, rsi
    mov     edx, 102h
    cmp     rax, 102h
    cmovbe  rdx, rax
    mov     rax, [rbx+60h]
    add     rax, rsi
    cmp     edx, 8
    jnb     loc_3484
    test    dl, 4
    jnz     loc_34B1
    test    edx, edx
    jz      short loc_3383
    test    dl, 2
    mov     byte ptr [rax], 0
    jnz     loc_34C6
    
loc_3383:
    add     rdx, rsi
    mov     [rbx+1738h], rdx
    
loc_338D:
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 20h
    
loc_33A0:
    mov     edi, [rbx+0ACh]
    mov     r9, [rbx+60h]
    mov     ecx, [rbx+90h]
    mov     r10d, [rbx+8Ch]
    sub     edi, esi
    mov     edx, edi
    movzx   r8d, byte ptr [r9+rdx]
    lea     edx, [rdi+1]
    mov     [rbx+80h], r8d
    movzx   edx, byte ptr [r9+rdx]
    shl     r8d, cl
    xor     edx, r8d
    and     edx, r10d
    mov     [rbx+80h], edx
    jmp     short loc_3435
    
loc_33E0:
    lea     edx, [rdi+2]
    mov     r8d, [rbx+80h]
    mov     r11d, edi
    and     r11d, [rbx+58h]
    sub     esi, 1
    movzx   edx, byte ptr [r9+rdx]
    shl     r8d, cl
    xor     edx, r8d
    mov     r8, [rbx+78h]
    and     edx, r10d
    mov     [rbx+80h], edx
    lea     rdx, [r8+rdx*2]
    mov     r8, [rbx+70h]
    movzx   r14d, word ptr [rdx]
    mov     [r8+r11*2], r14w
    mov     [rdx], di
    lea     edx, [rax+rsi]
    add     edi, 1
    mov     [rbx+172Ch], esi
    cmp     edx, 2
    jbe     loc_32B1
    
loc_3435:
    test    esi, esi
    jnz     short loc_33E0
    jmp     loc_32B1
    align 20h
    
loc_3440:
    lea     rdx, [rsi+102h]
    cmp     rcx, rdx
    jnb     loc_338D
    sub     rsi, rcx
    sub     rax, rcx
    lea     rbp, [rsi+102h]
    cmp     rax, rbp
    cmovbe  rbp, rax
    add     rcx, [rbx+60h]
    xor     esi, esi
    mov     edx, ebp
    mov     rdi, rcx
    call    _memset
    add     [rbx+1738h], rbp
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    
loc_3484:
    lea     rdi, [rax+8]
    mov     ecx, edx
    mov     qword ptr [rax], 0
    mov     qword ptr [rax+rcx-8], 0
    and     rdi, 0FFFFFFFFFFFFFFF8h
    sub     rax, rdi
    lea     ecx, [rdx+rax]
    xor     eax, eax
    shr     ecx, 3
    rep stosq
    jmp     loc_3383
    
loc_34B1:
    mov     ecx, edx
    mov     dword ptr [rax], 0
    mov     dword ptr [rax+rcx-4], 0
    jmp     loc_3383
    
loc_34C6:
    mov     ecx, edx
    xor     edi, edi
    mov     [rax+rcx-2], di
    jmp     loc_3383
    

<flush_pending>:
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 8
    mov     r12, [rdi+38h]
    mov     rdi, r12
    call    _tr_flush_bits
    mov     rax, [r12+28h]
    cmp     [rbx+20h], eax
    mov     ebp, eax
    cmovbe  ebp, [rbx+20h]
    test    ebp, ebp
    jnz     short loc_3520
    
loc_350B:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_3520:
    mov     rdi, [rbx+18h]
    mov     rsi, [r12+20h]
    mov     r13d, ebp
    mov     rdx, r13
    call    _memcpy
    add     [rbx+18h], r13
    add     [r12+20h], r13
    add     [rbx+28h], r13
    sub     [rbx+20h], ebp
    sub     [r12+28h], r13
    jnz     short loc_350B
    mov     rax, [r12+10h]
    mov     [r12+20h], rax
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    

<deflate_slow>:
    
    push    r15
    push    r14
    push    r13
    push    r12
    lea     r13, _length_code
    push    rbp
    push    rbx
    mov     ebp, esi
    mov     rbx, rdi
    sub     rsp, 8
    mov     esi, [rdi+0B4h]
    
loc_3580:
    cmp     esi, 105h
    jbe     loc_36FE
    
loc_358C:
    mov     edx, [rbx+0ACh]
    mov     r8d, [rbx+0A0h]
    mov     edi, [rbx+0B0h]
    
loc_359F:
    mov     rcx, [rbx+60h]
    lea     eax, [rdx+2]
    mov     esi, [rbx+80h]
    mov     r9d, edx
    and     r9d, [rbx+58h]
    movzx   eax, byte ptr [rcx+rax]
    mov     ecx, [rbx+90h]
    shl     esi, cl
    mov     rcx, [rbx+78h]
    xor     eax, esi
    and     eax, [rbx+8Ch]
    mov     [rbx+80h], eax
    lea     rax, [rcx+rax*2]
    mov     rcx, [rbx+70h]
    movzx   esi, word ptr [rax]
    test    esi, esi
    mov     [rcx+r9*2], si
    mov     [rax], dx
    mov     [rbx+0B8h], r8d
    mov     [rbx+0A4h], edi
    mov     dword ptr [rbx+0A0h], 2
    jz      short loc_3620
    cmp     [rbx+0C0h], r8d
    jbe     short loc_3620
    mov     eax, [rbx+50h]
    mov     ecx, edx
    sub     ecx, esi
    sub     eax, 106h
    cmp     ecx, eax
    jbe     loc_39C0
    nop     dword ptr [rax+00h]
    
loc_3620:
    cmp     r8d, 2
    jbe     short loc_3633
    cmp     [rbx+0A0h], r8d
    jbe     loc_37B0
    
loc_3633:
    mov     r11d, [rbx+0A8h]
    test    r11d, r11d
    jz      loc_36D0
    mov     ecx, [rbx+170Ch]
    lea     eax, [rdx-1]
    mov     rdx, [rbx+60h]
    mov     rsi, [rbx+1710h]
    xor     r10d, r10d
    movzx   eax, byte ptr [rdx+rax]
    mov     [rsi+rcx*2], r10w
    mov     rsi, [rbx+1700h]
    mov     rdx, rcx
    add     edx, 1
    mov     [rbx+170Ch], edx
    mov     [rsi+rcx], al
    add     word ptr [rbx+rax*4+0D4h], 1
    mov     eax, [rbx+1708h]
    sub     eax, 1
    cmp     [rbx+170Ch], eax
    jz      loc_3958
    
loc_3697:
    mov     eax, [rbx+0B4h]
    add     dword ptr [rbx+0ACh], 1
    lea     esi, [rax-1]
    mov     rax, [rbx]
    mov     [rbx+0B4h], esi
    mov     r9d, [rax+20h]
    test    r9d, r9d
    jnz     loc_3580
    
loc_36BD:
    xor     eax, eax
    
loc_36BF:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_36D0:
    mov     eax, [rbx+0B4h]
    add     edx, 1
    mov     dword ptr [rbx+0A8h], 1
    mov     [rbx+0ACh], edx
    lea     esi, [rax-1]
    cmp     esi, 105h
    mov     [rbx+0B4h], esi
    ja      loc_358C
    
loc_36FE:
    mov     rdi, rbx
    call    fill_window
    mov     eax, [rbx+0B4h]
    cmp     eax, 105h
    ja      loc_358C
    test    ebp, ebp
    jz      short loc_36BD
    test    eax, eax
    jz      loc_39F0
    cmp     eax, 2
    mov     edx, [rbx+0ACh]
    mov     r8d, [rbx+0A0h]
    mov     edi, [rbx+0B0h]
    ja      loc_359F
    mov     [rbx+0B8h], r8d
    mov     [rbx+0A4h], edi
    mov     dword ptr [rbx+0A0h], 2
    jmp     loc_3620
    align 20h
    
loc_3760:
    cmp     dword ptr [rbx+0C8h], 1
    mov     edx, [rbx+0ACh]
    mov     r8d, [rbx+0B8h]
    jz      short loc_3792
    cmp     eax, 3
    jnz     loc_3620
    mov     eax, edx
    sub     eax, [rbx+0B0h]
    cmp     eax, 1000h
    jbe     loc_3620
    
loc_3792:
    cmp     r8d, 2
    mov     dword ptr [rbx+0A0h], 2
    jbe     loc_3633
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_37B0:
    mov     eax, [rbx+0B4h]
    mov     ecx, [rbx+170Ch]
    sub     r8d, 3
    mov     rsi, [rbx+1710h]
    lea     edi, [rdx+rax-3]
    sub     dx, [rbx+0A4h]
    mov     rax, rcx
    add     eax, 1
    lea     r9d, [rdx-1]
    sub     edx, 2
    mov     [rsi+rcx*2], r9w
    mov     rsi, [rbx+1700h]
    mov     [rbx+170Ch], eax
    mov     [rsi+rcx], r8b
    movzx   r8d, r8b
    movzx   eax, byte ptr [r13+r8+0]
    add     word ptr [rbx+rax*4+4D8h], 1
    cmp     dx, 0FFh
    ja      loc_39A0
    lea     rax, _dist_code
    movzx   edx, dx
    movzx   eax, byte ptr [rax+rdx]
    
loc_3821:
    add     word ptr [rbx+rax*4+9C8h], 1
    mov     eax, [rbx+1708h]
    mov     r10d, [rbx+0B8h]
    mov     r11d, [rbx+0ACh]
    mov     r14d, [rbx+170Ch]
    lea     r9d, [rax-1]
    mov     eax, [rbx+0B4h]
    lea     edx, [r10-2]
    mov     [rbx+0B8h], edx
    lea     esi, [rax+1]
    lea     eax, [r11+1]
    sub     esi, r10d
    mov     [rbx+0B4h], esi
    nop     dword ptr [rax+00000000h]
    
loc_3870:
    cmp     edi, eax
    mov     [rbx+0ACh], eax
    jb      short loc_38C7
    mov     r8, [rbx+60h]
    lea     ecx, [rax+2]
    mov     r15d, [rbx+80h]
    movzx   r8d, byte ptr [r8+rcx]
    mov     ecx, [rbx+90h]
    shl     r15d, cl
    mov     ecx, r15d
    mov     r15d, eax
    and     r15d, [rbx+58h]
    xor     ecx, r8d
    and     ecx, [rbx+8Ch]
    mov     r8, [rbx+78h]
    mov     [rbx+80h], ecx
    lea     rcx, [r8+rcx*2]
    mov     r8, [rbx+70h]
    movzx   r12d, word ptr [rcx]
    mov     [r8+r15*2], r12w
    mov     [rcx], ax
    
loc_38C7:
    sub     edx, 1
    add     eax, 1
    test    edx, edx
    mov     [rbx+0B8h], edx
    jnz     short loc_3870
    lea     eax, [r10+r11-1]
    cmp     r14d, r9d
    mov     dword ptr [rbx+0A8h], 0
    mov     dword ptr [rbx+0A0h], 2
    mov     [rbx+0ACh], eax
    jnz     loc_3580
    mov     rcx, [rbx+98h]
    mov     edx, eax
    xor     esi, esi
    sub     rdx, rcx
    test    rcx, rcx
    js      short loc_391B
    mov     rsi, [rbx+60h]
    mov     ecx, ecx
    add     rsi, rcx
    
loc_391B:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    mov     rax, [rbx]
    mov     r12d, [rax+20h]
    test    r12d, r12d
    jz      loc_36BD
    mov     esi, [rbx+0B4h]
    jmp     loc_3580
    align 8
    
loc_3958:
    mov     edx, [rbx+0ACh]
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_3978
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_3978:
    mov     rdi, rbx
    xor     ecx, ecx
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    jmp     loc_3697
    align 20h
    
loc_39A0:
    shr     dx, 7
    lea     rsi, _dist_code
    lea     rax, [rdx+100h]
    and     eax, 3FFh
    movzx   eax, byte ptr [rsi+rax]
    jmp     loc_3821
    
loc_39C0:
    mov     rdi, rbx
    call    longest_match
    cmp     eax, 5
    mov     [rbx+0A0h], eax
    jbe     loc_3760
    mov     r8d, [rbx+0B8h]
    mov     edx, [rbx+0ACh]
    jmp     loc_3620
    align 10h
    
loc_39F0:
    mov     r8d, [rbx+0A8h]
    mov     edx, [rbx+0ACh]
    test    r8d, r8d
    jnz     loc_3A89
    
loc_3A06:
    cmp     edx, 2
    mov     eax, 2
    cmovbe  eax, edx
    cmp     ebp, 4
    mov     [rbx+172Ch], eax
    jz      loc_3ADB
    mov     ecx, [rbx+170Ch]
    mov     eax, 1
    test    ecx, ecx
    jz      loc_36BF
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_3A4D
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_3A4D:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    mov     rax, [rbx]
    mov     eax, [rax+20h]
    test    eax, eax
    setnz   al
    add     rsp, 8
    pop     rbx
    movzx   eax, al
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_3A89:
    mov     ecx, [rbx+170Ch]
    lea     eax, [rdx-1]
    mov     rdx, [rbx+60h]
    mov     rsi, [rbx+1710h]
    xor     edi, edi
    movzx   eax, byte ptr [rdx+rax]
    mov     [rsi+rcx*2], di
    mov     rsi, [rbx+1700h]
    mov     rdx, rcx
    add     edx, 1
    mov     [rbx+170Ch], edx
    mov     [rsi+rcx], al
    add     word ptr [rbx+rax*4+0D4h], 1
    mov     edx, [rbx+0ACh]
    mov     dword ptr [rbx+0A8h], 0
    jmp     loc_3A06
    
loc_3ADB:
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_3AF5
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_3AF5:
    mov     rdi, rbx
    mov     ecx, 1
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    mov     rax, [rbx]
    mov     esi, [rax+20h]
    xor     eax, eax
    test    esi, esi
    setnz   al
    add     rsp, 8
    pop     rbx
    add     eax, 2
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    

<deflate_fast>:
    
    var_44= dword ptr -44h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    lea     r12, _length_code
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    mov     [rsp+48h+var_44], esi
    jmp     loc_3C42
    align 8
    
loc_3B68:
    sub     dx, [rbx+0B0h]
    sub     eax, 3
    mov     [rdi], dx
    mov     [rbx+170Ch], esi
    sub     edx, 1
    mov     [rcx], al
    movzx   eax, al
    movzx   eax, byte ptr [r12+rax]
    add     word ptr [rbx+rax*4+4D8h], 1
    cmp     dx, 0FFh
    ja      loc_3DD0
    lea     rax, _dist_code
    movzx   edx, dx
    movzx   eax, byte ptr [rax+rdx]
    
loc_3BAA:
    add     word ptr [rbx+rax*4+9C8h], 1
    xor     r9d, r9d
    mov     eax, [rbx+1708h]
    mov     edx, [rbx+0A0h]
    mov     ebp, [rbx+0ACh]
    mov     r10, [rbx+60h]
    mov     ecx, [rbx+90h]
    sub     eax, 1
    cmp     eax, [rbx+170Ch]
    mov     eax, [rbx+0B4h]
    mov     r11d, [rbx+8Ch]
    setz    r9b
    sub     eax, edx
    cmp     edx, [rbx+0C0h]
    mov     [rbx+0B4h], eax
    ja      short loc_3C05
    cmp     eax, 2
    ja      loc_3DF0
    
loc_3C05:
    lea     eax, [rdx+rbp]
    mov     dword ptr [rbx+0A0h], 0
    mov     [rbx+0ACh], eax
    movzx   esi, byte ptr [r10+rax]
    lea     eax, [rax+1]
    mov     [rbx+80h], esi
    movzx   eax, byte ptr [r10+rax]
    shl     esi, cl
    xor     eax, esi
    and     r11d, eax
    mov     [rbx+80h], r11d
    
loc_3C39:
    test    r9d, r9d
    jnz     loc_3D2C
    
loc_3C42:
    cmp     dword ptr [rbx+0B4h], 105h
    jbe     loc_3D90
    
loc_3C52:
    mov     edx, [rbx+0ACh]
    
loc_3C58:
    mov     rcx, [rbx+60h]
    lea     eax, [rdx+2]
    mov     edi, [rbx+80h]
    movzx   eax, byte ptr [rcx+rax]
    mov     ecx, [rbx+90h]
    shl     edi, cl
    mov     rcx, [rbx+78h]
    xor     eax, edi
    and     eax, [rbx+8Ch]
    mov     edi, edx
    and     edi, [rbx+58h]
    mov     [rbx+80h], eax
    lea     rax, [rcx+rax*2]
    mov     rcx, [rbx+70h]
    movzx   esi, word ptr [rax]
    test    esi, esi
    mov     [rcx+rdi*2], si
    mov     [rax], dx
    jz      short loc_3CB2
    mov     eax, [rbx+50h]
    mov     ecx, edx
    sub     ecx, esi
    sub     eax, 106h
    cmp     ecx, eax
    jbe     loc_3E80
    
loc_3CB2:
    mov     eax, [rbx+0A0h]
    
loc_3CB8:
    mov     ecx, [rbx+170Ch]
    mov     rdi, [rbx+1710h]
    mov     rsi, rcx
    lea     rdi, [rdi+rcx*2]
    add     rcx, [rbx+1700h]
    add     esi, 1
    cmp     eax, 2
    ja      loc_3B68
    mov     rax, [rbx+60h]
    xor     r8d, r8d
    xor     r9d, r9d
    movzx   eax, byte ptr [rax+rdx]
    mov     [rdi], r8w
    mov     [rbx+170Ch], esi
    mov     [rcx], al
    add     word ptr [rbx+rax*4+0D4h], 1
    mov     eax, [rbx+1708h]
    sub     eax, 1
    cmp     eax, [rbx+170Ch]
    setz    r9b
    sub     dword ptr [rbx+0B4h], 1
    add     dword ptr [rbx+0ACh], 1
    test    r9d, r9d
    jz      loc_3C42
    
loc_3D2C:
    mov     edx, [rbx+0ACh]
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_3D4C
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_3D4C:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    mov     rax, [rbx]
    mov     edi, [rax+20h]
    test    edi, edi
    jnz     loc_3C42
    
loc_3D79:
    xor     eax, eax
    
loc_3D7B:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_3D90:
    mov     rdi, rbx
    call    fill_window
    mov     eax, [rbx+0B4h]
    cmp     eax, 105h
    ja      loc_3C52
    mov     r9d, [rsp+48h+var_44]
    test    r9d, r9d
    jz      short loc_3D79
    test    eax, eax
    mov     edx, [rbx+0ACh]
    jz      loc_3EA0
    cmp     eax, 2
    jbe     loc_3CB2
    jmp     loc_3C58
    align 10h
    
loc_3DD0:
    shr     dx, 7
    lea     rcx, _dist_code
    lea     rax, [rdx+100h]
    and     eax, 3FFh
    movzx   eax, byte ptr [rcx+rax]
    jmp     loc_3BAA
    
loc_3DF0:
    mov     edi, [rbx+58h]
    lea     r8d, [rdx-1]
    mov     r14, [rbx+78h]
    mov     r13, [rbx+70h]
    mov     eax, [rbx+80h]
    lea     esi, [rbp+1]
    mov     [rsp+48h+var_40], edx
    mov     [rbx+0A0h], r8d
    mov     edx, edi
    mov     [rsp+48h+var_3C], r9d
    nop     word ptr [rax+rax+00h]
    
loc_3E20:
    lea     edi, [rsi+2]
    mov     [rbx+0ACh], esi
    shl     eax, cl
    mov     r15d, edx
    sub     r8d, 1
    movzx   edi, byte ptr [r10+rdi]
    and     r15d, esi
    xor     eax, edi
    and     eax, r11d
    mov     edi, eax
    mov     [rbx+80h], eax
    lea     rdi, [r14+rdi*2]
    movzx   r9d, word ptr [rdi]
    mov     [r13+r15*2+0], r9w
    mov     [rdi], si
    add     esi, 1
    test    r8d, r8d
    mov     [rbx+0A0h], r8d
    jnz     short loc_3E20
    mov     edx, [rsp+48h+var_40]
    mov     r9d, [rsp+48h+var_3C]
    add     edx, ebp
    mov     [rbx+0ACh], edx
    jmp     loc_3C39
    align 20h
    
loc_3E80:
    mov     rdi, rbx
    call    longest_match
    mov     edx, [rbx+0ACh]
    mov     [rbx+0A0h], eax
    jmp     loc_3CB8
    align 20h
    
loc_3EA0:
    cmp     edx, 2
    mov     eax, 2
    cmovbe  eax, edx
    cmp     [rsp+48h+var_44], 4
    mov     [rbx+172Ch], eax
    jz      short loc_3F21
    mov     ecx, [rbx+170Ch]
    mov     eax, 1
    test    ecx, ecx
    jz      loc_3D7B
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_3EE5
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_3EE5:
    xor     ecx, ecx
    mov     rdi, rbx
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    mov     rax, [rbx]
    mov     eax, [rax+20h]
    test    eax, eax
    setnz   al
    add     rsp, 18h
    pop     rbx
    movzx   eax, al
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_3F21:
    mov     rax, [rbx+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_3F3B
    mov     eax, eax
    add     rax, [rbx+60h]
    mov     rsi, rax
    
loc_3F3B:
    mov     rdi, rbx
    mov     ecx, 1
    call    _tr_flush_block
    mov     eax, [rbx+0ACh]
    mov     rdi, [rbx]
    mov     [rbx+98h], rax
    call    flush_pending
    mov     rax, [rbx]
    mov     esi, [rax+20h]
    xor     eax, eax
    test    esi, esi
    setnz   al
    add     rsp, 18h
    pop     rbx
    add     eax, 2
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    

<deflate_stored>:
    
    var_48= qword ptr -48h
    var_3C= dword ptr -3Ch
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    mov     r12d, esi
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    mov     rax, [rdi+18h]
    lea     r13, [rax-5]
    mov     eax, [rdi+50h]
    mov     rdi, [rdi]
    cmp     r13, rax
    cmovbe  rax, r13
    mov     [rsp+48h+var_48], rax
    mov     eax, [rdi+8]
    mov     [rsp+48h+var_3C], eax
    mov     edx, eax
    jmp     short loc_3FD7
    align 20h
    
loc_3FC0:
    test    r15d, r15d
    mov     rdi, [rbx]
    jnz     loc_410A
    
loc_3FCC:
    test    ebp, ebp
    mov     edx, [rdi+8]
    jnz     loc_4133
    
loc_3FD7:
    mov     eax, [rbx+1734h]
    mov     r8d, [rdi+20h]
    add     eax, 2Ah
    sar     eax, 3
    cmp     r8d, eax
    jb      loc_41C0
    sub     r8d, eax
    mov     eax, [rbx+0ACh]
    sub     eax, [rbx+98h]
    mov     esi, edx
    mov     ecx, eax
    mov     r14, rcx
    add     rcx, rsi
    lea     esi, [r14+rdx]
    cmp     rcx, 0FFFFh
    mov     ecx, 0FFFFh
    cmovb   ecx, esi
    cmp     ecx, r8d
    cmovbe  r8d, ecx
    cmp     dword ptr [rsp+48h+var_48], r8d
    mov     r15d, r8d
    jbe     short loc_4055
    test    r8d, r8d
    setz    r9b
    cmp     r12d, 4
    setnz   cl
    test    r9b, cl
    jnz     loc_41C0
    test    r12d, r12d
    jz      loc_41C0
    cmp     esi, r8d
    jnz     loc_41C0
    
loc_4055:
    xor     ebp, ebp
    cmp     r12d, 4
    jnz     short loc_4069
    add     edx, r14d
    xor     ebp, ebp
    cmp     edx, r15d
    setz    bpl
    
loc_4069:
    xor     edx, edx
    xor     esi, esi
    mov     ecx, ebp
    mov     rdi, rbx
    call    _tr_stored_block
    mov     rcx, [rbx+10h]
    mov     rdx, [rbx+28h]
    mov     eax, r15d
    mov     esi, r15d
    not     esi
    mov     [rcx+rdx-4], r15b
    mov     rcx, [rbx+10h]
    mov     rdx, [rbx+28h]
    mov     [rcx+rdx-3], ah
    mov     rcx, [rbx+10h]
    not     eax
    mov     rdx, [rbx+28h]
    mov     [rcx+rdx-2], sil
    mov     rcx, [rbx+10h]
    mov     rdx, [rbx+28h]
    mov     [rcx+rdx-1], ah
    mov     rdi, [rbx]
    call    flush_pending
    test    r14d, r14d
    jz      loc_3FC0
    mov     rax, [rbx]
    cmp     r14d, r15d
    mov     rsi, [rbx+98h]
    cmova   r14d, r15d
    add     rsi, [rbx+60h]
    mov     r13d, r14d
    sub     r15d, r14d
    mov     rdi, [rax+18h]
    mov     rdx, r13
    call    _memcpy
    mov     rdi, [rbx]
    add     [rdi+18h], r13
    sub     [rdi+20h], r14d
    add     [rdi+28h], r13
    add     [rbx+98h], r13
    test    r15d, r15d
    jz      loc_3FCC
    
loc_410A:
    mov     edx, r15d
    mov     rsi, [rdi+18h]
    call    read_buf
    mov     rdi, [rbx]
    mov     eax, r15d
    sub     [rdi+20h], r15d
    add     [rdi+18h], rax
    mov     edx, [rdi+8]
    add     [rdi+28h], rax
    test    ebp, ebp
    jz      loc_3FD7
    
loc_4133:
    mov     r15d, [rsp+48h+var_3C]
    mov     ebp, 1
    sub     r15d, edx
    jz      loc_41D0
    
loc_4146:
    mov     eax, [rbx+50h]
    mov     rcx, [rbx+60h]
    cmp     eax, r15d
    jbe     loc_4398
    mov     r8d, [rbx+0ACh]
    mov     rsi, [rbx+68h]
    mov     r13d, r15d
    sub     rsi, r8
    mov     rdx, r8
    cmp     rsi, r13
    jbe     loc_4420
    
loc_4173:
    mov     rsi, [rdi]
    add     rcx, r8
    mov     rdx, r13
    mov     rdi, rcx
    sub     rsi, r13
    call    _memcpy
    mov     edx, [rbx+0ACh]
    mov     eax, [rbx+50h]
    add     edx, r15d
    mov     [rbx+0ACh], edx
    
loc_4199:
    mov     ecx, [rbx+172Ch]
    mov     edi, edx
    mov     [rbx+98h], rdi
    sub     eax, ecx
    cmp     eax, r15d
    cmova   eax, r15d
    add     eax, ecx
    mov     [rbx+172Ch], eax
    jmp     short loc_41D6
    align 20h
    
loc_41C0:
    mov     r15d, [rsp+48h+var_3C]
    xor     ebp, ebp
    sub     r15d, edx
    jnz     loc_4146
    
loc_41D0:
    mov     edx, [rbx+0ACh]
    
loc_41D6:
    mov     ecx, edx
    cmp     [rbx+1738h], rcx
    mov     rsi, rcx
    jnb     short loc_41EB
    mov     [rbx+1738h], rcx
    
loc_41EB:
    test    ebp, ebp
    mov     eax, 3
    jnz     loc_42AA
    mov     rdi, [rbx]
    test    r12d, 0FFFFFFFBh
    mov     eax, [rdi+8]
    jz      loc_42C0
    test    eax, eax
    jnz     loc_42C0
    cmp     rcx, [rbx+98h]
    mov     eax, 1
    jz      loc_42AA
    
loc_4225:
    cmp     [rbx+1738h], rsi
    jnb     short loc_4235
    
loc_422E:
    mov     [rbx+1738h], rsi
    
loc_4235:
    mov     eax, [rbx+1734h]
    mov     rdi, [rbx+18h]
    mov     ecx, 0FFFFh
    mov     rsi, [rbx+98h]
    add     eax, 2Ah
    sar     eax, 3
    sub     rdi, rax
    cmp     rdi, 0FFFFh
    mov     rax, rdi
    cmova   rax, rcx
    sub     edx, esi
    cmp     [rbx+50h], eax
    mov     ecx, eax
    cmovbe  ecx, [rbx+50h]
    mov     edi, eax
    cmp     ecx, edx
    ja      loc_4320
    cmp     eax, edx
    cmova   eax, edx
    add     rsi, [rbx+60h]
    cmp     r12d, 4
    mov     ebp, eax
    jz      loc_4460
    
loc_428C:
    mov     rdi, rbx
    xor     ecx, ecx
    mov     rdx, rbp
    call    _tr_stored_block
    add     [rbx+98h], rbp
    mov     rdi, [rbx]
    call    flush_pending
    
loc_42A8:
    xor     eax, eax
    
loc_42AA:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_42C0:
    mov     ebp, edx
    not     ebp
    add     ebp, [rbx+68h]
    cmp     ebp, eax
    jnb     short loc_42DE
    mov     ecx, [rbx+50h]
    mov     r8, [rbx+98h]
    cmp     r8, rcx
    jge     loc_43C8
    
loc_42DE:
    cmp     ebp, eax
    cmova   ebp, eax
    test    ebp, ebp
    jz      loc_4225
    
loc_42EB:
    add     rsi, [rbx+60h]
    mov     edx, ebp
    call    read_buf
    mov     edx, [rbx+0ACh]
    add     edx, ebp
    mov     esi, edx
    cmp     [rbx+1738h], rsi
    mov     [rbx+0ACh], edx
    jnb     loc_4235
    jmp     loc_422E
    align 20h
    
loc_4320:
    test    edx, edx
    setnz   cl
    cmp     r12d, 4
    setz    al
    or      cl, al
    jz      loc_42A8
    test    r12d, r12d
    jz      loc_42A8
    mov     rax, [rbx]
    mov     ecx, [rax+8]
    test    ecx, ecx
    jnz     loc_42A8
    cmp     edi, edx
    jb      loc_42A8
    cmp     edi, edx
    cmovbe  edx, edi
    add     rsi, [rbx+60h]
    cmp     r12d, 4
    mov     ebp, edx
    jnz     loc_428C
    
loc_4368:
    mov     ecx, 1
    mov     rdx, rbp
    mov     rdi, rbx
    call    _tr_stored_block
    add     [rbx+98h], rbp
    mov     rdi, [rbx]
    call    flush_pending
    mov     eax, 2
    jmp     loc_42AA
    align 8
    
loc_4398:
    mov     rsi, [rdi]
    mov     edx, eax
    mov     dword ptr [rbx+1728h], 2
    mov     rdi, rcx
    sub     rsi, rdx
    call    _memcpy
    mov     edx, [rbx+50h]
    mov     [rbx+0ACh], edx
    mov     eax, edx
    jmp     loc_4199
    align 8
    
loc_43C8:
    mov     rdi, [rbx+60h]
    sub     r8, rcx
    sub     edx, ecx
    mov     [rbx+98h], r8
    mov     [rbx+0ACh], edx
    lea     rsi, [rdi+rcx]
    call    _memcpy
    mov     eax, [rbx+1728h]
    cmp     eax, 1
    ja      short loc_43FB
    add     eax, 1
    mov     [rbx+1728h], eax
    
loc_43FB:
    mov     rdi, [rbx]
    add     ebp, [rbx+50h]
    mov     esi, [rbx+0ACh]
    mov     eax, [rdi+8]
    mov     rdx, rsi
    cmp     ebp, eax
    cmova   ebp, eax
    test    ebp, ebp
    jz      loc_4225
    jmp     loc_42EB
    align 20h
    
loc_4420:
    sub     edx, eax
    lea     rsi, [rcx+rax]
    mov     rdi, rcx
    mov     [rbx+0ACh], edx
    call    _memcpy
    mov     eax, [rbx+1728h]
    cmp     eax, 1
    ja      short loc_4448
    add     eax, 1
    mov     [rbx+1728h], eax
    
loc_4448:
    mov     rdi, [rbx]
    mov     rcx, [rbx+60h]
    mov     r8d, [rbx+0ACh]
    jmp     loc_4173
    align 20h
    
loc_4460:
    mov     rax, [rbx]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     loc_428C
    cmp     edi, edx
    jb      loc_428C
    jmp     loc_4368
    

<deflateStateCheck_part_0>:
    
    mov     rdx, [rdi+38h]
    mov     eax, 1
    test    rdx, rdx
    jz      short locret_4493
    cmp     rdi, [rdx]
    jz      short loc_4498
    
locret_4493:
    rep retn
    align 8
    
loc_4498:
    mov     esi, [rdx+8]
    mov     edx, 1
    lea     ecx, [rsi-2Ah]
    cmp     ecx, 3Dh
    ja      short loc_44BD
    mov     rax, 2002000088008001h
    shr     rax, cl
    not     rax
    mov     edx, eax
    and     edx, 1
    
loc_44BD:
    cmp     esi, 71h
    setnz   al
    cmp     esi, 29Ah
    setnz   cl
    and     eax, ecx
    and     eax, edx
    movzx   eax, al
    retn
    

<deflateSetDictionary>:
    
    var_48= qword ptr -48h
    var_3C= dword ptr -3Ch
    
    
    test    rdi, rdi
    jz      loc_4728
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    cmp     qword ptr [rdi+40h], 0
    jz      loc_471E
    cmp     qword ptr [rdi+48h], 0
    jz      loc_471E
    mov     r15, rsi
    mov     r14d, edx
    call    deflateStateCheck_part_0
    test    eax, eax
    jnz     loc_471E
    test    r15, r15
    jz      loc_471E
    mov     r13, [rdi+38h]
    mov     ebp, [r13+30h]
    cmp     ebp, 2
    jz      loc_471E
    cmp     ebp, 1
    jz      loc_46DE
    mov     esi, [r13+0B4h]
    test    esi, esi
    jnz     loc_471E
    mov     eax, [r13+50h]
    mov     dword ptr [r13+30h], 0
    cmp     eax, r14d
    jbe     loc_4688
    
loc_456A:
    mov     eax, [rbx+8]
    mov     r12, [rbx]
    mov     [rbx+8], r14d
    mov     [rbx], r15
    mov     [rsp+48h+var_3C], eax
    nop     dword ptr [rax+rax+00h]
    
loc_4580:
    mov     rdi, r13
    call    fill_window
    mov     esi, [r13+0B4h]
    cmp     esi, 2
    jbe     loc_4620
    mov     edx, [r13+0ACh]
    mov     ecx, [r13+90h]
    mov     r15, [r13+60h]
    mov     r14d, [r13+8Ch]
    mov     r11, [r13+78h]
    mov     r10, [r13+70h]
    mov     r9d, [r13+58h]
    mov     eax, [r13+80h]
    lea     r8d, [rsi+rdx-2]
    mov     [rsp+48h+var_48], rbx
    nop     dword ptr [rax]
    
loc_45D0:
    lea     esi, [rdx+2]
    shl     eax, cl
    mov     edi, r9d
    and     edi, edx
    movzx   esi, byte ptr [r15+rsi]
    xor     eax, esi
    and     eax, r14d
    mov     esi, eax
    mov     [r13+80h], eax
    lea     rsi, [r11+rsi*2]
    movzx   ebx, word ptr [rsi]
    mov     [r10+rdi*2], bx
    mov     [rsi], dx
    add     edx, 1
    cmp     edx, r8d
    jnz     short loc_45D0
    mov     rbx, [rsp+48h+var_48]
    mov     [r13+0ACh], edx
    mov     dword ptr [r13+0B4h], 2
    jmp     loc_4580
    align 20h
    
loc_4620:
    mov     eax, esi
    add     eax, [r13+0ACh]
    mov     [r13+172Ch], esi
    mov     dword ptr [r13+0A0h], 2
    mov     dword ptr [r13+0A8h], 0
    mov     [r13+0ACh], eax
    mov     [r13+98h], rax
    mov     rax, 200000000h
    mov     [r13+0B4h], rax
    mov     eax, [rsp+48h+var_3C]
    mov     [rbx], r12
    mov     [rbx+8], eax
    mov     [r13+30h], ebp
    xor     eax, eax
    
loc_4675:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_4688:
    test    ebp, ebp
    jnz     short loc_46D0
    mov     eax, [r13+84h]
    mov     rdi, [r13+78h]
    xor     ecx, ecx
    xor     esi, esi
    sub     eax, 1
    lea     rdx, [rax+rax]
    mov     [rdi+rax*2], cx
    call    _memset
    mov     eax, [r13+50h]
    mov     dword ptr [r13+0ACh], 0
    mov     qword ptr [r13+98h], 0
    mov     dword ptr [r13+172Ch], 0
    
loc_46D0:
    sub     r14d, eax
    add     r15, r14
    mov     r14d, eax
    jmp     loc_456A
    
loc_46DE:
    cmp     dword ptr [r13+8], 2Ah
    jnz     short loc_471E
    mov     edx, [r13+0B4h]
    mov     eax, 0FFFFFFFEh
    test    edx, edx
    jnz     short loc_4675
    mov     rdi, [rbx+60h]
    mov     edx, r14d
    mov     rsi, r15
    call    _adler32
    mov     [rbx+60h], rax
    mov     eax, [r13+50h]
    mov     dword ptr [r13+30h], 0
    cmp     r14d, eax
    jnb     short loc_46D0
    jmp     loc_456A
    
loc_471E:
    mov     eax, 0FFFFFFFEh
    jmp     loc_4675
    
loc_4728:
    mov     eax, 0FFFFFFFEh
    retn
    

<deflateGetDictionary>:
    
    test    rdi, rdi
    push    r12
    push    rbp
    push    rbx
    jz      short loc_47B0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_47B0
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_47B0
    mov     rbx, rdx
    mov     r9, rsi
    call    deflateStateCheck_part_0
    test    eax, eax
    mov     ebp, eax
    jnz     short loc_47B0
    mov     rax, [rdi+38h]
    mov     ecx, [rax+0ACh]
    mov     esi, [rax+0B4h]
    lea     edi, [rcx+rsi]
    cmp     [rax+50h], edi
    cmovbe  edi, [rax+50h]
    test    r9, r9
    mov     r12d, edi
    jz      short loc_477E
    test    edi, edi
    jnz     short loc_4790
    
loc_477E:
    test    rbx, rbx
    jz      short loc_4786
    mov     [rbx], r12d
    
loc_4786:
    mov     eax, ebp
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 10h
    
loc_4790:
    mov     edx, edi
    add     rcx, rsi
    mov     rdi, r9
    sub     rcx, rdx
    add     rcx, [rax+60h]
    mov     rsi, rcx
    call    _memcpy
    jmp     short loc_477E
    align 10h
    
loc_47B0:
    mov     ebp, 0FFFFFFFEh
    jmp     short loc_4786
    

<deflateResetKeep>:
    
    test    rdi, rdi
    push    r12
    push    rbp
    push    rbx
    jz      loc_4898
    cmp     qword ptr [rdi+40h], 0
    jz      loc_4898
    cmp     qword ptr [rdi+48h], 0
    jz      loc_4898
    mov     rbx, rdi
    call    deflateStateCheck_part_0
    test    eax, eax
    mov     r12d, eax
    jnz     loc_4898
    mov     rbp, [rdi+38h]
    mov     qword ptr [rdi+28h], 0
    mov     qword ptr [rdi+10h], 0
    mov     qword ptr [rdi+30h], 0
    mov     dword ptr [rdi+58h], 2
    mov     rax, [rbp+10h]
    mov     qword ptr [rbp+28h], 0
    mov     [rbp+20h], rax
    mov     eax, [rbp+30h]
    test    eax, eax
    js      short loc_4870
    cmp     eax, 2
    jz      short loc_4881
    cmp     eax, 1
    sbb     edx, edx
    and     edx, 47h
    add     edx, 2Ah
    
loc_4840:
    mov     [rbp+8], edx
    xor     esi, esi
    xor     edx, edx
    xor     edi, edi
    call    _adler32
    
loc_484E:
    mov     [rbx+60h], rax
    mov     rdi, rbp
    mov     dword ptr [rbp+4Ch], 0
    call    _tr_init
    
loc_4861:
    mov     eax, r12d
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 10h
    
loc_4870:
    mov     edx, eax
    neg     edx
    cmp     eax, 0FFFFFFFEh
    mov     [rbp+30h], edx
    mov     edx, 2Ah
    jnz     short loc_4840
    
loc_4881:
    mov     dword ptr [rbp+8], 39h
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    call    _crc32
    jmp     short loc_484E
    align 8
    
loc_4898:
    mov     r12d, 0FFFFFFFEh
    jmp     short loc_4861
    

<deflateReset>:
    
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 8
    call    _deflateResetKeep
    test    eax, eax
    mov     ebp, eax
    jnz     loc_4968
    mov     rbx, [rbx+38h]
    xor     ecx, ecx
    xor     esi, esi
    mov     eax, [rbx+50h]
    mov     rdi, [rbx+78h]
    add     rax, rax
    mov     [rbx+68h], rax
    mov     eax, [rbx+84h]
    sub     eax, 1
    lea     rdx, [rax+rax]
    mov     [rdi+rax*2], cx
    call    _memset
    movsxd  rax, dword ptr [rbx+0C4h]
    mov     qword ptr [rbx+98h], 0
    mov     dword ptr [rbx+172Ch], 0
    mov     dword ptr [rbx+0A0h], 2
    mov     qword ptr [rbx+0A8h], 0
    mov     dword ptr [rbx+80h], 0
    shl     rax, 4
    mov     rdx, rax
    lea     rax, configuration_table
    add     rax, rdx
    movzx   edx, word ptr [rax+2]
    mov     [rbx+0C0h], edx
    movzx   edx, word ptr [rax]
    mov     [rbx+0CCh], edx
    movzx   edx, word ptr [rax+4]
    movzx   eax, word ptr [rax+6]
    mov     [rbx+0D0h], edx
    mov     [rbx+0BCh], eax
    mov     rax, 200000000h
    mov     [rbx+0B4h], rax
    
loc_4968:
    add     rsp, 8
    mov     eax, ebp
    pop     rbx
    pop     rbp
    retn
    

<deflateSetHeader>:
    
    test    rdi, rdi
    jz      short loc_49B0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_49B0
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_49B0
    mov     r9, rsi
    call    deflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_49B0
    mov     rdx, [rdi+38h]
    cmp     dword ptr [rdx+30h], 2
    jnz     short loc_49B0
    mov     [rdx+38h], r9
    retn
    align 10h
    
loc_49B0:
    mov     eax, 0FFFFFFFEh
    retn
    

<deflatePending>:
    
    test    rdi, rdi
    jz      short loc_4A10
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_4A10
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_4A10
    mov     r9, rdx
    mov     r10, rsi
    mov     r8, rdi
    call    deflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_4A10
    test    r10, r10
    jz      short loc_49F5
    mov     rdx, [rdi+38h]
    mov     rdx, [rdx+28h]
    mov     [r10], edx
    
loc_49F5:
    test    r9, r9
    jz      short locret_4A15
    mov     rdx, [r8+38h]
    mov     edx, [rdx+1734h]
    mov     [r9], edx
    retn
    align 10h
    
loc_4A10:
    mov     eax, 0FFFFFFFEh
    
locret_4A15:
    rep retn
    

<deflatePrime>:
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 8
    test    rdi, rdi
    jz      loc_4B27
    cmp     qword ptr [rdi+40h], 0
    jz      loc_4B27
    cmp     qword ptr [rdi+48h], 0
    jz      loc_4B27
    mov     r13d, esi
    mov     r14d, edx
    call    deflateStateCheck_part_0
    test    eax, eax
    mov     ebp, eax
    jnz     loc_4B27
    mov     r12, [rdi+38h]
    mov     rax, [r12+20h]
    add     rax, 2
    cmp     [r12+1710h], rax
    jb      loc_4B2E
    mov     ebx, 10h
    
loc_4A82:
    mov     esi, [r12+1734h]
    mov     r15d, ebx
    movzx   r8d, word ptr [r12+1730h]
    mov     edi, 1
    sub     r15d, esi
    cmp     r13d, r15d
    jl      short loc_4AE8
    mov     ecx, r15d
    mov     dword ptr [r12+1734h], 10h
    shl     edi, cl
    mov     ecx, esi
    lea     eax, [rdi-1]
    mov     rdi, r12
    and     eax, r14d
    shl     eax, cl
    or      eax, r8d
    mov     [r12+1730h], ax
    call    _tr_flush_bits
    mov     ecx, r15d
    sar     r14d, cl
    sub     r13d, r15d
    jnz     short loc_4A82
    xor     ebp, ebp
    jmp     short loc_4B16
    align 8
    
loc_4AE8:
    mov     ecx, r13d
    shl     edi, cl
    mov     ecx, esi
    add     esi, r13d
    lea     edx, [rdi-1]
    mov     [r12+1734h], esi
    mov     rdi, r12
    and     edx, r14d
    shl     edx, cl
    or      edx, r8d
    mov     [r12+1730h], dx
    call    _tr_flush_bits
    
loc_4B16:
    add     rsp, 8
    mov     eax, ebp
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_4B27:
    mov     ebp, 0FFFFFFFEh
    jmp     short loc_4B16
    
loc_4B2E:
    mov     ebp, 0FFFFFFFBh
    jmp     short loc_4B16
    

<deflateTune>:
    
    test    rdi, rdi
    jz      short loc_4B90
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_4B90
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_4B90
    push    rbx
    mov     r10d, ecx
    mov     r11d, edx
    mov     ebx, esi
    call    deflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_4BA0
    mov     rdi, [rdi+38h]
    mov     [rdi+0CCh], ebx
    mov     [rdi+0C0h], r11d
    mov     [rdi+0D0h], r10d
    mov     [rdi+0BCh], r8d
    pop     rbx
    retn
    align 10h
    
loc_4B90:
    mov     eax, 0FFFFFFFEh
    retn
    align 20h
    
loc_4BA0:
    mov     eax, 0FFFFFFFEh
    pop     rbx
    retn
    

<deflateBound>:
    
    lea     r11, [rsi+7]
    lea     rax, [rsi+3Fh]
    mov     rdx, r11
    shr     rax, 6
    shr     rdx, 3
    add     rax, rdx
    test    rdi, rdi
    lea     r9, [rax+rsi]
    jz      short loc_4C18
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_4C18
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_4C18
    mov     r10, rsi
    call    deflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_4C18
    mov     rcx, [rdi+38h]
    mov     eax, [rcx+30h]
    cmp     eax, 1
    jz      short loc_4C20
    cmp     eax, 2
    jz      short loc_4C68
    cmp     eax, 1
    sbb     rdx, rdx
    not     rdx
    and     edx, 6
    
loc_4C06:
    cmp     dword ptr [rcx+54h], 0Fh
    jz      short loc_4C38
    
loc_4C0C:
    lea     rax, [r9+rdx+5]
    retn
    align 8
    
loc_4C18:
    lea     rax, [r9+0Bh]
    retn
    align 20h
    
loc_4C20:
    cmp     dword ptr [rcx+0ACh], 1
    sbb     rdx, rdx
    and     rdx, 0FFFFFFFFFFFFFFFCh
    add     rdx, 0Ah
    jmp     short loc_4C06
    align 8
    
loc_4C38:
    cmp     dword ptr [rcx+88h], 0Fh
    jnz     short loc_4C0C
    mov     rax, r10
    mov     rcx, r10
    mov     rsi, r10
    shr     rax, 0Ch
    shr     rcx, 0Eh
    shr     rsi, 19h
    add     rax, r11
    add     rax, rcx
    add     rax, rsi
    add     rax, rdx
    retn
    align 8
    
loc_4C68:
    mov     rdi, [rcx+38h]
    mov     edx, 12h
    test    rdi, rdi
    jz      short loc_4C06
    cmp     qword ptr [rdi+18h], 0
    mov     eax, 12h
    jz      short loc_4C8C
    mov     eax, [rdi+20h]
    add     eax, 2
    add     rax, 12h
    
loc_4C8C:
    mov     rdx, [rdi+28h]
    test    rdx, rdx
    jz      short loc_4CAB
    sub     rdx, rax
    nop     dword ptr [rax+rax+00000000h]
    
loc_4CA0:
    add     rax, 1
    cmp     byte ptr [rdx+rax-1], 0
    jnz     short loc_4CA0
    
loc_4CAB:
    mov     rsi, [rdi+38h]
    mov     rdx, rax
    test    rsi, rsi
    jz      short loc_4CCB
    mov     rax, rsi
    sub     rax, rdx
    nop     dword ptr [rax]
    
loc_4CC0:
    add     rdx, 1
    cmp     byte ptr [rax+rdx-1], 0
    jnz     short loc_4CC0
    
loc_4CCB:
    mov     eax, [rdi+44h]
    test    eax, eax
    jz      loc_4C06
    add     rdx, 2
    jmp     loc_4C06
    

<deflate>:
    
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_3C= dword ptr -3Ch
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 28h
    test    rdi, rdi
    jz      loc_5820
    cmp     qword ptr [rdi+40h], 0
    jz      loc_5820
    cmp     qword ptr [rdi+48h], 0
    jz      loc_5820
    mov     ebp, esi
    mov     [rsp+58h+var_50], rdi
    call    deflateStateCheck_part_0
    test    eax, eax
    mov     r13d, eax
    jnz     loc_5820
    cmp     ebp, 5
    ja      loc_5820
    cmp     qword ptr [rdi+18h], 0
    mov     r14, [rdi+38h]
    jz      loc_5978
    mov     edx, [rdi+8]
    test    edx, edx
    jz      short loc_4D4D
    cmp     qword ptr [rdi], 0
    jz      loc_5978
    
loc_4D4D:
    mov     eax, [r14+8]
    cmp     ebp, 4
    setnz   cl
    cmp     eax, 29Ah
    jnz     short loc_4D66
    test    cl, cl
    jnz     loc_5978
    
loc_4D66:
    mov     rbx, [rsp+58h+var_50]
    mov     r11d, [rbx+20h]
    test    r11d, r11d
    jz      loc_5B08
    cmp     qword ptr [r14+28h], 0
    mov     esi, [r14+4Ch]
    mov     [r14+4Ch], ebp
    jnz     loc_4FD0
    test    edx, edx
    jz      loc_4EF0
    cmp     eax, 29Ah
    jz      loc_59BC
    
loc_4D9E:
    cmp     eax, 2Ah
    jnz     loc_4EB4
    mov     eax, [r14+54h]
    shl     eax, 0Ch
    cmp     dword ptr [r14+0C8h], 1
    lea     ecx, [rax-7800h]
    jle     loc_5290
    
loc_4DC2:
    mov     r8d, [r14+0ACh]
    test    r8d, r8d
    jz      short loc_4DD1
    or      ecx, 20h
    
loc_4DD1:
    mov     eax, ecx
    mov     edx, 8421085h
    mul     edx
    sub     ecx, edx
    shr     ecx, 1
    add     edx, ecx
    mov     rcx, [r14+10h]
    shr     edx, 4
    mov     eax, edx
    shl     eax, 5
    sub     eax, edx
    mov     rdx, [r14+28h]
    add     eax, 1Fh
    lea     rsi, [rdx+1]
    mov     [r14+28h], rsi
    mov     [rcx+rdx], ah
    mov     rdx, [r14+28h]
    mov     rcx, [r14+10h]
    lea     rsi, [rdx+1]
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     edi, [r14+0ACh]
    test    edi, edi
    jz      short loc_4E81
    mov     rbx, [rsp+58h+var_50]
    mov     rdx, [r14+28h]
    mov     rcx, [r14+10h]
    mov     rax, [rbx+60h]
    lea     rsi, [rdx+1]
    mov     [r14+28h], rsi
    shr     rax, 10h
    mov     esi, eax
    shr     esi, 8
    mov     [rcx+rdx], sil
    mov     rdx, [r14+28h]
    mov     rcx, [r14+10h]
    lea     rsi, [rdx+1]
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     rax, [r14+28h]
    movzx   edx, word ptr [rbx+60h]
    mov     rcx, [r14+10h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rcx+rax], dh
    mov     rax, [r14+28h]
    mov     rcx, [r14+10h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rcx+rax], dl
    
loc_4E81:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    call    _adler32
    mov     rbx, [rsp+58h+var_50]
    mov     [rbx+60h], rax
    mov     rdi, rbx
    mov     dword ptr [r14+8], 71h
    call    flush_pending
    cmp     qword ptr [r14+28h], 0
    jnz     loc_4FB0
    mov     eax, [r14+8]
    
loc_4EB4:
    cmp     eax, 39h
    jz      loc_5528
    
loc_4EBD:
    cmp     eax, 45h
    jz      loc_5020
    cmp     eax, 49h
    jz      loc_59E0
    cmp     eax, 5Bh
    jz      loc_5AF8
    cmp     eax, 67h
    jnz     short loc_4F36
    mov     rax, [r14+38h]
    mov     eax, [rax+44h]
    jmp     loc_574F
    align 10h
    
loc_4EF0:
    lea     edi, [rbp+rbp+0]
    cmp     ebp, 5
    mov     edx, 1
    cmovz   edi, edx
    lea     edx, [rsi+rsi]
    cmp     esi, 4
    lea     r9d, [rdx-9]
    cmovg   edx, r9d
    cmp     edi, edx
    jg      short loc_4F19
    test    cl, cl
    jnz     loc_59BC
    
loc_4F19:
    cmp     eax, 29Ah
    jnz     loc_4D9E
    mov     rax, [rsp+58h+var_50]
    mov     r9d, [rax+8]
    test    r9d, r9d
    jnz     loc_59BC
    
loc_4F36:
    mov     rax, [rsp+58h+var_50]
    mov     r10d, [rax+8]
    test    r10d, r10d
    jz      loc_4FF0
    
loc_4F48:
    movsxd  rax, dword ptr [r14+0C4h]
    test    eax, eax
    jz      loc_56F8
    mov     edx, [r14+0C8h]
    cmp     edx, 2
    jz      loc_5152
    cmp     edx, 3
    jz      loc_5B83
    lea     rdx, configuration_table
    shl     rax, 4
    mov     esi, ebp
    mov     rdi, r14
    call    qword ptr [rdx+rax+8]
    
loc_4F84:
    lea     edx, [rax-2]
    cmp     edx, 1
    ja      short loc_4F94
    mov     dword ptr [r14+8], 29Ah
    
loc_4F94:
    test    eax, 0FFFFFFFDh
    jnz     loc_52B8
    
loc_4F9F:
    mov     rax, [rsp+58h+var_50]
    mov     edi, [rax+20h]
    test    edi, edi
    jnz     short loc_4FB8
    nop     dword ptr [rax+rax+00h]
    
loc_4FB0:
    mov     dword ptr [r14+4Ch], 0FFFFFFFFh
    
loc_4FB8:
    add     rsp, 28h
    mov     eax, r13d
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_4FD0:
    mov     rbx, [rsp+58h+var_50]
    mov     rdi, rbx
    call    flush_pending
    mov     r10d, [rbx+20h]
    test    r10d, r10d
    jz      short loc_4FB0
    mov     eax, [r14+8]
    jmp     loc_4F19
    align 10h
    
loc_4FF0:
    mov     r9d, [r14+0B4h]
    test    r9d, r9d
    jnz     loc_4F48
    test    ebp, ebp
    jz      short loc_4FB8
    cmp     dword ptr [r14+8], 29Ah
    jnz     loc_4F48
    jmp     loc_52C1
    align 20h
    
loc_5020:
    mov     rax, [r14+38h]
    
loc_5024:
    mov     rdx, [rax+18h]
    test    rdx, rdx
    jz      loc_53D8
    movzx   eax, word ptr [rax+20h]
    mov     rsi, [r14+40h]
    mov     rcx, [r14+28h]
    mov     r12, [r14+18h]
    sub     eax, esi
    mov     r15d, eax
    mov     ebx, eax
    lea     rax, [rcx+r15]
    cmp     rax, r12
    ja      short loc_509E
    jmp     loc_5378
    align 20h
    
loc_5060:
    add     [r14+40h], r15
    mov     rdi, [rsp+58h+var_50]
    call    flush_pending
    mov     rcx, [r14+28h]
    test    rcx, rcx
    jnz     loc_4FB0
    mov     eax, ebx
    mov     rsi, [r14+40h]
    sub     eax, r12d
    mov     r12, [r14+18h]
    mov     r15d, eax
    mov     ebx, eax
    mov     rax, [r14+38h]
    cmp     r15, r12
    mov     rdx, [rax+18h]
    jbe     loc_5378
    
loc_509E:
    mov     rdi, rcx
    add     rdi, [r14+10h]
    sub     r12d, ecx
    mov     r15d, r12d
    add     rsi, rdx
    mov     [rsp+58h+var_3C], ecx
    mov     rdx, r15
    mov     [rsp+58h+var_48], rcx
    call    _memcpy
    mov     rax, [r14+38h]
    mov     rdx, [r14+18h]
    mov     eax, [rax+44h]
    mov     [r14+28h], rdx
    test    eax, eax
    jz      short loc_5060
    mov     rcx, [rsp+58h+var_48]
    cmp     rdx, rcx
    jbe     short loc_5060
    mov     rax, [rsp+58h+var_50]
    mov     rsi, [r14+10h]
    sub     edx, [rsp+58h+var_3C]
    mov     rdi, [rax+60h]
    add     rsi, rcx
    call    _crc32
    mov     rsi, [rsp+58h+var_50]
    mov     [rsi+60h], rax
    jmp     loc_5060
    align 8
    
loc_5108:
    mov     rax, [r14+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_5122
    mov     eax, eax
    add     rax, [r14+60h]
    mov     rsi, rax
    
loc_5122:
    xor     ecx, ecx
    mov     rdi, r14
    call    _tr_flush_block
    mov     eax, [r14+0ACh]
    mov     rdi, [r14]
    mov     [r14+98h], rax
    call    flush_pending
    mov     rax, [r14]
    mov     r15d, [rax+20h]
    test    r15d, r15d
    jz      loc_4F9F
    
loc_5152:
    mov     eax, [r14+0B4h]
    jmp     loc_51E8
    align 20h
    
loc_5160:
    mov     eax, [r14+0ACh]
    mov     ecx, [r14+170Ch]
    xor     edi, edi
    mov     rdx, [r14+60h]
    mov     rsi, [r14+1710h]
    mov     dword ptr [r14+0A0h], 0
    movzx   eax, byte ptr [rdx+rax]
    mov     [rsi+rcx*2], di
    mov     rdx, rcx
    mov     rsi, [r14+1700h]
    add     edx, 1
    mov     [r14+170Ch], edx
    mov     [rsi+rcx], al
    add     word ptr [r14+rax*4+0D4h], 1
    mov     eax, [r14+1708h]
    mov     ebx, [r14+0ACh]
    lea     ecx, [rax-1]
    mov     eax, [r14+0B4h]
    lea     edx, [rbx+1]
    mov     [r14+0ACh], edx
    sub     eax, 1
    cmp     [r14+170Ch], ecx
    mov     [r14+0B4h], eax
    jz      loc_5108
    
loc_51E8:
    test    eax, eax
    jnz     loc_5160
    mov     rdi, r14
    call    fill_window
    mov     r8d, [r14+0B4h]
    test    r8d, r8d
    jnz     loc_5160
    test    ebp, ebp
    jz      loc_4F9F
    
loc_5210:
    cmp     ebp, 4
    mov     dword ptr [r14+172Ch], 0
    jz      loc_5B22
    mov     r12d, [r14+170Ch]
    test    r12d, r12d
    jz      loc_5830
    mov     edx, [r14+0ACh]
    mov     rax, [r14+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_5255
    mov     eax, eax
    add     rax, [r14+60h]
    mov     rsi, rax
    
loc_5255:
    xor     ecx, ecx
    mov     rdi, r14
    call    _tr_flush_block
    mov     eax, [r14+0ACh]
    mov     rdi, [r14]
    mov     [r14+98h], rax
    call    flush_pending
    mov     rax, [r14]
    mov     r8d, [rax+20h]
    xor     eax, eax
    test    r8d, r8d
    setnz   al
    jmp     loc_4F94
    align 10h
    
loc_5290:
    mov     eax, [r14+0C4h]
    cmp     eax, 1
    jle     loc_4DC2
    cmp     eax, 5
    jg      loc_5890
    or      ecx, 40h
    jmp     loc_4DC2
    align 8
    
loc_52B8:
    cmp     eax, 1
    jz      loc_5830
    
loc_52C1:
    cmp     ebp, 4
    jnz     loc_4FB8
    
loc_52CA:
    mov     ecx, [r14+30h]
    mov     r13d, 1
    test    ecx, ecx
    jle     loc_4FB8
    mov     rax, [rsp+58h+var_50]
    mov     rdx, [rax+60h]
    mov     rax, [r14+28h]
    lea     rsi, [rax+1]
    add     rax, [r14+10h]
    cmp     ecx, 2
    jz      loc_58A8
    shr     rdx, 10h
    mov     [r14+28h], rsi
    mov     ecx, edx
    shr     ecx, 8
    mov     [rax], cl
    mov     rax, [r14+28h]
    mov     rcx, [r14+10h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [rsp+58h+var_50]
    mov     rcx, [r14+10h]
    movzx   edx, word ptr [rax+60h]
    mov     rax, [r14+28h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rcx+rax], dh
    mov     rax, [r14+28h]
    mov     rcx, [r14+10h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rcx+rax], dl
    
loc_534B:
    mov     rdi, [rsp+58h+var_50]
    call    flush_pending
    mov     eax, [r14+30h]
    test    eax, eax
    jle     short loc_5363
    neg     eax
    mov     [r14+30h], eax
    
loc_5363:
    xor     r13d, r13d
    cmp     qword ptr [r14+28h], 0
    setz    r13b
    jmp     loc_4FB8
    align 8
    
loc_5378:
    mov     rdi, rcx
    add     rdi, [r14+10h]
    add     rsi, rdx
    mov     rdx, r15
    mov     [rsp+58h+var_48], rcx
    call    _memcpy
    mov     rdx, [r14+28h]
    mov     rax, [r14+38h]
    add     rdx, r15
    mov     r15d, [rax+44h]
    mov     [r14+28h], rdx
    test    r15d, r15d
    jz      short loc_53D0
    mov     rcx, [rsp+58h+var_48]
    cmp     rdx, rcx
    jbe     short loc_53D0
    mov     rbx, [rsp+58h+var_50]
    mov     rsi, [r14+10h]
    sub     edx, ecx
    mov     rdi, [rbx+60h]
    add     rsi, rcx
    call    _crc32
    mov     [rbx+60h], rax
    mov     rax, [r14+38h]
    
loc_53D0:
    mov     qword ptr [r14+40h], 0
    
loc_53D8:
    mov     dword ptr [r14+8], 49h
    
loc_53E0:
    cmp     qword ptr [rax+28h], 0
    jz      loc_5498
    mov     rsi, [r14+28h]
    mov     rdx, rsi
    jmp     short loc_5427
    align 8
    
loc_53F8:
    mov     rcx, [rax+28h]
    mov     rax, [r14+40h]
    lea     rdi, [rax+1]
    mov     [r14+40h], rdi
    movzx   eax, byte ptr [rcx+rax]
    lea     rdi, [rdx+1]
    mov     rcx, [r14+10h]
    mov     [r14+28h], rdi
    test    al, al
    mov     [rcx+rdx], al
    jz      short loc_5460
    mov     rdx, [r14+28h]
    mov     rax, [r14+38h]
    
loc_5427:
    cmp     [r14+18h], rdx
    jnz     short loc_53F8
    mov     r12d, [rax+44h]
    test    r12d, r12d
    jz      short loc_543F
    cmp     rsi, rdx
    jb      loc_57E0
    
loc_543F:
    mov     rdi, [rsp+58h+var_50]
    call    flush_pending
    mov     rdx, [r14+28h]
    test    rdx, rdx
    jnz     loc_4FB0
    mov     rax, [r14+38h]
    xor     esi, esi
    jmp     short loc_53F8
    align 20h
    
loc_5460:
    mov     rax, [r14+38h]
    mov     ebx, [rax+44h]
    test    ebx, ebx
    jz      short loc_5490
    mov     rdx, [r14+28h]
    cmp     rdx, rsi
    jbe     short loc_5490
    mov     rbx, [rsp+58h+var_50]
    sub     edx, esi
    add     rsi, [r14+10h]
    mov     rdi, [rbx+60h]
    call    _crc32
    mov     [rbx+60h], rax
    mov     rax, [r14+38h]
    
loc_5490:
    mov     qword ptr [r14+40h], 0
    
loc_5498:
    mov     dword ptr [r14+8], 5Bh
    
loc_54A0:
    cmp     qword ptr [rax+38h], 0
    jz      loc_5744
    mov     rsi, [r14+28h]
    mov     rdx, rsi
    jmp     short loc_54EB
    align 8
    
loc_54B8:
    mov     rcx, [rax+38h]
    mov     rax, [r14+40h]
    lea     rdi, [rax+1]
    mov     [r14+40h], rdi
    movzx   eax, byte ptr [rcx+rax]
    lea     rdi, [rdx+1]
    mov     rcx, [r14+10h]
    mov     [r14+28h], rdi
    test    al, al
    mov     [rcx+rdx], al
    jz      loc_5710
    mov     rdx, [r14+28h]
    mov     rax, [r14+38h]
    
loc_54EB:
    cmp     [r14+18h], rdx
    jnz     short loc_54B8
    mov     r11d, [rax+44h]
    test    r11d, r11d
    jz      short loc_5503
    cmp     rsi, rdx
    jb      loc_5800
    
loc_5503:
    mov     rdi, [rsp+58h+var_50]
    call    flush_pending
    mov     rdx, [r14+28h]
    test    rdx, rdx
    jnz     loc_4FB0
    mov     rax, [r14+38h]
    xor     esi, esi
    jmp     short loc_54B8
    align 8
    
loc_5528:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    call    _crc32
    mov     rbx, [rsp+58h+var_50]
    mov     rdx, [r14+10h]
    mov     [rbx+60h], rax
    mov     rax, [r14+28h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 1Fh
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 8Bh
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 8
    mov     rax, [r14+38h]
    test    rax, rax
    jz      loc_59F0
    mov     ecx, [rax]
    mov     esi, [rax+44h]
    test    ecx, ecx
    setnz   dl
    test    esi, esi
    jnz     loc_5880
    
loc_5597:
    cmp     qword ptr [rax+18h], 0
    jz      short loc_55A1
    add     edx, 4
    
loc_55A1:
    cmp     qword ptr [rax+28h], 0
    jz      short loc_55AB
    add     edx, 8
    
loc_55AB:
    cmp     qword ptr [rax+38h], 0
    jz      short loc_55B5
    add     edx, 10h
    
loc_55B5:
    mov     rax, [r14+28h]
    mov     rcx, [r14+10h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [r14+38h]
    mov     rdx, [r14+10h]
    mov     rcx, [rax+8]
    mov     rax, [r14+28h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [r14+38h]
    mov     rdx, [r14+28h]
    mov     rcx, [r14+10h]
    mov     rax, [rax+8]
    lea     rsi, [rdx+1]
    mov     [r14+28h], rsi
    shr     rax, 8
    mov     [rcx+rdx], al
    mov     rax, [r14+38h]
    mov     rdx, [r14+28h]
    mov     rcx, [r14+10h]
    mov     rax, [rax+8]
    lea     rsi, [rdx+1]
    shr     rax, 10h
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     rax, [r14+38h]
    mov     rdx, [r14+28h]
    mov     rcx, [r14+10h]
    mov     rax, [rax+8]
    lea     rsi, [rdx+1]
    shr     rax, 18h
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     eax, [r14+0C4h]
    mov     edx, 2
    cmp     eax, 9
    jz      short loc_5667
    cmp     dword ptr [r14+0C8h], 1
    jg      short loc_5662
    xor     edx, edx
    cmp     eax, 1
    jg      short loc_5667
    
loc_5662:
    mov     edx, 4
    
loc_5667:
    mov     rax, [r14+28h]
    mov     rcx, [r14+10h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [r14+38h]
    mov     rdx, [r14+10h]
    mov     ecx, [rax+14h]
    mov     rax, [r14+28h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [r14+38h]
    cmp     qword ptr [rax+18h], 0
    jz      short loc_56D3
    mov     ecx, [rax+20h]
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [r14+38h]
    mov     rdx, [r14+10h]
    mov     ecx, [rax+20h]
    mov     rax, [r14+28h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rdx+rax], ch
    mov     rax, [r14+38h]
    
loc_56D3:
    mov     edx, [rax+44h]
    test    edx, edx
    jnz     loc_5AD0
    
loc_56DE:
    mov     qword ptr [r14+40h], 0
    mov     dword ptr [r14+8], 45h
    jmp     loc_5024
    align 8
    
loc_56F8:
    mov     esi, ebp
    mov     rdi, r14
    call    deflate_stored
    jmp     loc_4F84
    align 10h
    
loc_5710:
    mov     rax, [r14+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      loc_57BA
    mov     rdx, [r14+28h]
    cmp     rdx, rsi
    jbe     short loc_5747
    mov     rbx, [rsp+58h+var_50]
    sub     edx, esi
    add     rsi, [r14+10h]
    mov     rdi, [rbx+60h]
    call    _crc32
    mov     [rbx+60h], rax
    mov     rax, [r14+38h]
    
loc_5744:
    mov     eax, [rax+44h]
    
loc_5747:
    mov     dword ptr [r14+8], 67h
    
loc_574F:
    test    eax, eax
    jz      short loc_57BA
    mov     rax, [r14+28h]
    lea     rdx, [rax+2]
    cmp     rdx, [r14+18h]
    jbe     short loc_5778
    mov     rdi, [rsp+58h+var_50]
    call    flush_pending
    mov     rax, [r14+28h]
    test    rax, rax
    jnz     loc_4FB0
    
loc_5778:
    mov     rbx, [rsp+58h+var_50]
    mov     rdx, [r14+10h]
    lea     rsi, [rax+1]
    xor     edi, edi
    mov     rcx, [rbx+60h]
    mov     [r14+28h], rsi
    mov     [rdx+rax], cl
    mov     rdx, [r14+28h]
    mov     rax, [rbx+60h]
    mov     rcx, [r14+10h]
    lea     rsi, [rdx+1]
    shr     rax, 8
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    xor     esi, esi
    xor     edx, edx
    call    _crc32
    mov     [rbx+60h], rax
    
loc_57BA:
    mov     rdi, [rsp+58h+var_50]
    mov     dword ptr [r14+8], 71h
    call    flush_pending
    cmp     qword ptr [r14+28h], 0
    jz      loc_4F36
    jmp     loc_4FB0
    align 20h
    
loc_57E0:
    mov     rbx, [rsp+58h+var_50]
    sub     edx, esi
    add     rsi, [r14+10h]
    mov     rdi, [rbx+60h]
    call    _crc32
    mov     [rbx+60h], rax
    jmp     loc_543F
    align 20h
    
loc_5800:
    mov     rbx, [rsp+58h+var_50]
    sub     edx, esi
    add     rsi, [r14+10h]
    mov     rdi, [rbx+60h]
    call    _crc32
    mov     [rbx+60h], rax
    jmp     loc_5503
    align 20h
    
loc_5820:
    mov     r13d, 0FFFFFFFEh
    jmp     loc_4FB8
    align 10h
    
loc_5830:
    cmp     ebp, 1
    jz      loc_5997
    cmp     ebp, 5
    jz      loc_599F
    xor     ecx, ecx
    xor     edx, edx
    xor     esi, esi
    mov     rdi, r14
    call    _tr_stored_block
    cmp     ebp, 3
    jz      loc_5E14
    mov     rbx, [rsp+58h+var_50]
    mov     rdi, rbx
    call    flush_pending
    mov     edx, [rbx+20h]
    test    edx, edx
    jnz     loc_52C1
    jmp     loc_4FB0
    align 20h
    
loc_5880:
    add     edx, 2
    jmp     loc_5597
    align 10h
    
loc_5890:
    mov     edx, ecx
    or      cl, 0C0h
    or      dl, 80h
    cmp     eax, 6
    cmovz   ecx, edx
    jmp     loc_4DC2
    align 8
    
loc_58A8:
    mov     rbx, [rsp+58h+var_50]
    mov     [r14+28h], rsi
    mov     [rax], dl
    mov     rdx, [r14+28h]
    mov     rcx, [r14+10h]
    mov     rax, [rbx+60h]
    lea     rsi, [rdx+1]
    shr     rax, 8
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     rdx, [r14+28h]
    mov     rax, [rbx+60h]
    mov     rcx, [r14+10h]
    lea     rsi, [rdx+1]
    shr     rax, 10h
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     rdx, [r14+28h]
    mov     rax, [rbx+60h]
    mov     rcx, [r14+10h]
    lea     rsi, [rdx+1]
    shr     rax, 18h
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     rax, [r14+28h]
    mov     rcx, [rbx+10h]
    mov     rdx, [r14+10h]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rdx+rax], cl
    mov     rdx, [r14+28h]
    mov     rax, [rbx+10h]
    mov     rcx, [r14+10h]
    lea     rsi, [rdx+1]
    shr     rax, 8
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     rdx, [r14+28h]
    mov     rax, [rbx+10h]
    mov     rcx, [r14+10h]
    lea     rsi, [rdx+1]
    shr     rax, 10h
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    mov     rdx, [r14+28h]
    mov     rax, [rbx+10h]
    mov     rcx, [r14+10h]
    lea     rsi, [rdx+1]
    shr     rax, 18h
    mov     [r14+28h], rsi
    mov     [rcx+rdx], al
    jmp     loc_534B
    align 8
    
loc_5978:
    lea     rax, z_errmsg
    mov     rbx, [rsp+58h+var_50]
    mov     r13d, 0FFFFFFFEh
    mov     rax, [rax+20h]
    mov     [rbx+30h], rax
    jmp     loc_4FB8
    
loc_5997:
    mov     rdi, r14
    call    _tr_align
    
loc_599F:
    mov     rbx, [rsp+58h+var_50]
    mov     rdi, rbx
    call    flush_pending
    mov     eax, [rbx+20h]
    test    eax, eax
    jnz     loc_4FB8
    jmp     loc_4FB0
    
loc_59BC:
    lea     rax, z_errmsg
    mov     rbx, [rsp+58h+var_50]
    mov     r13d, 0FFFFFFFBh
    mov     rax, [rax+38h]
    mov     [rbx+30h], rax
    jmp     loc_4FB8
    align 20h
    
loc_59E0:
    mov     rax, [r14+38h]
    jmp     loc_53E0
    align 10h
    
loc_59F0:
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 0
    mov     edx, 2
    mov     eax, [r14+0C4h]
    cmp     eax, 9
    jz      short loc_5A7B
    cmp     dword ptr [r14+0C8h], 1
    jg      short loc_5A76
    xor     edx, edx
    cmp     eax, 1
    jg      short loc_5A7B
    
loc_5A76:
    mov     edx, 4
    
loc_5A7B:
    mov     rax, [r14+28h]
    mov     rcx, [r14+10h]
    mov     rdi, [rsp+58h+var_50]
    lea     rsi, [rax+1]
    mov     [r14+28h], rsi
    mov     [rcx+rax], dl
    mov     rax, [r14+28h]
    mov     rdx, [r14+10h]
    lea     rcx, [rax+1]
    mov     [r14+28h], rcx
    mov     byte ptr [rdx+rax], 3
    mov     dword ptr [r14+8], 71h
    call    flush_pending
    cmp     qword ptr [r14+28h], 0
    jnz     loc_4FB0
    mov     eax, [r14+8]
    jmp     loc_4EBD
    align 10h
    
loc_5AD0:
    mov     rbx, [rsp+58h+var_50]
    mov     rsi, [r14+10h]
    mov     edx, [r14+28h]
    mov     rdi, [rbx+60h]
    call    _crc32
    mov     [rbx+60h], rax
    mov     rax, [r14+38h]
    jmp     loc_56DE
    align 8
    
loc_5AF8:
    mov     rax, [r14+38h]
    jmp     loc_54A0
    align 8
    
loc_5B08:
    lea     rax, z_errmsg
    mov     r13d, 0FFFFFFFBh
    mov     rax, [rax+38h]
    mov     [rbx+30h], rax
    jmp     loc_4FB8
    
loc_5B22:
    mov     edx, [r14+0ACh]
    mov     rax, [r14+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_5B43
    mov     eax, eax
    add     rax, [r14+60h]
    mov     rsi, rax
    
loc_5B43:
    mov     ecx, 1
    mov     rdi, r14
    call    _tr_flush_block
    mov     eax, [r14+0ACh]
    mov     rdi, [r14]
    mov     [r14+98h], rax
    call    flush_pending
    mov     rax, [r14]
    mov     r9d, [rax+20h]
    mov     dword ptr [r14+8], 29Ah
    test    r9d, r9d
    jnz     loc_52CA
    jmp     loc_4F9F
    
loc_5B83:
    lea     r12, _length_code
    jmp     loc_5C29
    align 10h
    
loc_5B90:
    mov     ecx, [r14+0ACh]
    mov     rsi, [r14+60h]
    mov     dword ptr [r14+0A0h], 0
    mov     rdx, rcx
    
loc_5BA9:
    test    edx, edx
    jz      short loc_5BBF
    lea     rdx, [rsi+rcx-1]
    movzx   edi, byte ptr [rdx]
    cmp     dil, [rdx+1]
    jz      loc_5C90
    
loc_5BBF:
    movzx   eax, byte ptr [rsi+rcx]
    mov     ecx, [r14+170Ch]
    xor     r11d, r11d
    mov     rsi, [r14+1710h]
    mov     [rsi+rcx*2], r11w
    mov     rsi, [r14+1700h]
    mov     rdx, rcx
    add     edx, 1
    mov     [r14+170Ch], edx
    mov     [rsi+rcx], al
    add     word ptr [r14+rax*4+0D4h], 1
    mov     eax, [r14+1708h]
    sub     eax, 1
    cmp     eax, [r14+170Ch]
    setz    al
    sub     dword ptr [r14+0B4h], 1
    add     dword ptr [r14+0ACh], 1
    movzx   eax, al
    
loc_5C21:
    test    eax, eax
    jnz     loc_5DBE
    
loc_5C29:
    mov     eax, [r14+0B4h]
    cmp     eax, 102h
    ja      loc_5B90
    mov     rdi, r14
    call    fill_window
    mov     eax, [r14+0B4h]
    cmp     eax, 102h
    ja      loc_5B90
    test    ebp, ebp
    jz      loc_4F9F
    test    eax, eax
    jz      loc_5210
    mov     ecx, [r14+0ACh]
    cmp     eax, 2
    mov     dword ptr [r14+0A0h], 0
    mov     rsi, [r14+60h]
    mov     rdx, rcx
    jbe     loc_5BBF
    jmp     loc_5BA9
    align 10h
    
loc_5C90:
    cmp     dil, [rdx+2]
    jnz     loc_5BBF
    cmp     dil, [rdx+3]
    jnz     loc_5BBF
    lea     r11, [rsi+rcx+102h]
    add     rdx, 3
    
loc_5CB0:
    cmp     dil, [rdx+1]
    jnz     loc_5E88
    cmp     dil, [rdx+2]
    jnz     loc_5E7F
    cmp     dil, [rdx+3]
    jnz     loc_5EAC
    cmp     dil, [rdx+4]
    jnz     loc_5EA3
    cmp     dil, [rdx+5]
    jnz     loc_5E9A
    cmp     dil, [rdx+6]
    jnz     loc_5E91
    cmp     dil, [rdx+7]
    jnz     loc_5E76
    add     rdx, 8
    cmp     [rdx], dil
    setz    r10b
    cmp     r11, rdx
    setnbe  r9b
    test    r10b, r9b
    jnz     short loc_5CB0
    
loc_5D0D:
    sub     edx, r11d
    add     edx, 102h
    cmp     edx, eax
    mov     [r14+0A0h], edx
    jbe     loc_5E68
    mov     [r14+0A0h], eax
    mov     edx, eax
    
loc_5D2E:
    mov     ecx, [r14+170Ch]
    mov     rsi, [r14+1710h]
    mov     ebx, 1
    lea     eax, [rdx-3]
    mov     [rsi+rcx*2], bx
    mov     rsi, [r14+1700h]
    mov     rdx, rcx
    add     edx, 1
    mov     [r14+170Ch], edx
    mov     [rsi+rcx], al
    movzx   eax, al
    movzx   eax, byte ptr [r12+rax]
    add     word ptr [r14+rax*4+4D8h], 1
    movzx   eax, cs:_dist_code
    add     word ptr [r14+rax*4+9C8h], 1
    mov     eax, [r14+1708h]
    mov     edx, [r14+0A0h]
    mov     dword ptr [r14+0A0h], 0
    sub     eax, 1
    cmp     eax, [r14+170Ch]
    setz    al
    sub     [r14+0B4h], edx
    add     [r14+0ACh], edx
    movzx   eax, al
    jmp     loc_5C21
    
loc_5DBE:
    mov     edx, [r14+0ACh]
    mov     rax, [r14+98h]
    xor     esi, esi
    sub     rdx, rax
    test    rax, rax
    js      short loc_5DDF
    mov     eax, eax
    add     rax, [r14+60h]
    mov     rsi, rax
    
loc_5DDF:
    xor     ecx, ecx
    mov     rdi, r14
    call    _tr_flush_block
    mov     eax, [r14+0ACh]
    mov     rdi, [r14]
    mov     [r14+98h], rax
    call    flush_pending
    mov     rax, [r14]
    mov     r10d, [rax+20h]
    test    r10d, r10d
    jnz     loc_5C29
    jmp     loc_4F9F
    
loc_5E14:
    mov     eax, [r14+84h]
    mov     rdi, [r14+78h]
    xor     ecx, ecx
    xor     esi, esi
    sub     eax, 1
    lea     rdx, [rax+rax]
    mov     [rdi+rax*2], cx
    call    _memset
    mov     esi, [r14+0B4h]
    test    esi, esi
    jnz     loc_599F
    mov     dword ptr [r14+0ACh], 0
    mov     qword ptr [r14+98h], 0
    mov     dword ptr [r14+172Ch], 0
    jmp     loc_599F
    
loc_5E68:
    cmp     edx, 2
    ja      loc_5D2E
    jmp     loc_5BBF
    
loc_5E76:
    add     rdx, 7
    jmp     loc_5D0D
    
loc_5E7F:
    add     rdx, 2
    jmp     loc_5D0D
    
loc_5E88:
    add     rdx, 1
    jmp     loc_5D0D
    
loc_5E91:
    add     rdx, 6
    jmp     loc_5D0D
    
loc_5E9A:
    add     rdx, 5
    jmp     loc_5D0D
    
loc_5EA3:
    add     rdx, 4
    jmp     loc_5D0D
    
loc_5EAC:
    add     rdx, 3
    jmp     loc_5D0D
    

<deflateParams>:
    
    test    rdi, rdi
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    jz      loc_6050
    cmp     qword ptr [rdi+40h], 0
    mov     r12, rdi
    jz      loc_6050
    cmp     qword ptr [rdi+48h], 0
    jz      loc_6050
    movsxd  rbp, esi
    mov     r13d, edx
    call    deflateStateCheck_part_0
    test    eax, eax
    mov     r14d, eax
    jnz     loc_6050
    cmp     ebp, 0FFFFFFFFh
    mov     rbx, [rdi+38h]
    jz      loc_5FE0
    cmp     ebp, 9
    setnbe  al
    
loc_5F13:
    cmp     r13d, 4
    ja      loc_6050
    test    al, al
    jnz     loc_6050
    cmp     [rbx+0C8h], r13d
    mov     eax, [rbx+0C4h]
    jz      loc_5FF0
    cmp     qword ptr [rbx+1738h], 0
    jnz     loc_6023
    
loc_5F46:
    cmp     ebp, eax
    jz      short loc_5F8A
    test    eax, eax
    jz      short loc_5FA0
    
loc_5F4E:
    lea     rax, configuration_table
    mov     [rbx+0C4h], ebp
    shl     rbp, 4
    add     rbp, rax
    movzx   eax, word ptr [rbp+2]
    mov     [rbx+0C0h], eax
    movzx   eax, word ptr [rbp+0]
    mov     [rbx+0CCh], eax
    movzx   eax, word ptr [rbp+4]
    mov     [rbx+0D0h], eax
    movzx   eax, word ptr [rbp+6]
    mov     [rbx+0BCh], eax
    
loc_5F8A:
    mov     [rbx+0C8h], r13d
    
loc_5F91:
    pop     rbx
    mov     eax, r14d
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 20h
    
loc_5FA0:
    mov     eax, [rbx+1728h]
    test    eax, eax
    jz      short loc_5F4E
    cmp     eax, 1
    jz      loc_6068
    mov     eax, [rbx+84h]
    mov     rdi, [rbx+78h]
    xor     ecx, ecx
    sub     eax, 1
    lea     rdx, [rax+rax]
    mov     [rdi+rax*2], cx
    
loc_5FCA:
    xor     esi, esi
    call    _memset
    mov     dword ptr [rbx+1728h], 0
    jmp     loc_5F4E
    
loc_5FE0:
    xor     eax, eax
    mov     ebp, 6
    jmp     loc_5F13
    align 10h
    
loc_5FF0:
    lea     rsi, configuration_table
    movsxd  rcx, ebp
    movsxd  rdx, eax
    shl     rdx, 4
    shl     rcx, 4
    mov     rdx, [rsi+rdx+8]
    cmp     [rsi+rcx+8], rdx
    jz      loc_5F46
    cmp     qword ptr [rbx+1738h], 0
    jz      loc_5F46
    
loc_6023:
    mov     esi, 5
    mov     rdi, r12
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      short loc_6050
    mov     esi, [r12+20h]
    test    esi, esi
    jz      short loc_6085
    mov     eax, [rbx+0C4h]
    jmp     loc_5F46
    align 10h
    
loc_6050:
    mov     r14d, 0FFFFFFFEh
    pop     rbx
    mov     eax, r14d
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 8
    
loc_6068:
    mov     rdi, rbx
    call    slide_hash
    mov     eax, [rbx+84h]
    mov     rdi, [rbx+78h]
    lea     edx, [rax-1]
    add     rdx, rdx
    jmp     loc_5FCA
    
loc_6085:
    mov     r14d, 0FFFFFFFBh
    jmp     loc_5F91
    

<deflateEnd>:
    
    test    rdi, rdi
    push    r12
    push    rbp
    push    rbx
    jz      loc_6158
    cmp     qword ptr [rdi+40h], 0
    jz      loc_6158
    mov     r8, [rdi+48h]
    test    r8, r8
    jz      loc_6158
    mov     rbx, rdi
    call    deflateStateCheck_part_0
    test    eax, eax
    mov     ebp, eax
    jnz     loc_6158
    mov     rax, [rdi+38h]
    mov     rdi, [rdi+50h]
    mov     rsi, [rax+10h]
    mov     r12d, [rax+8]
    test    rsi, rsi
    jz      short loc_60EB
    call    r8
    mov     rax, [rbx+38h]
    mov     r8, [rbx+48h]
    mov     rdi, [rbx+50h]
    
loc_60EB:
    mov     rsi, [rax+78h]
    test    rsi, rsi
    jz      short loc_6103
    call    r8
    mov     rax, [rbx+38h]
    mov     r8, [rbx+48h]
    mov     rdi, [rbx+50h]
    
loc_6103:
    mov     rsi, [rax+70h]
    test    rsi, rsi
    jz      short loc_611B
    call    r8
    mov     rax, [rbx+38h]
    mov     r8, [rbx+48h]
    mov     rdi, [rbx+50h]
    
loc_611B:
    mov     rsi, [rax+60h]
    test    rsi, rsi
    jz      short loc_6133
    call    r8
    mov     r8, [rbx+48h]
    mov     rax, [rbx+38h]
    mov     rdi, [rbx+50h]
    
loc_6133:
    mov     rsi, rax
    call    r8
    cmp     r12d, 71h
    mov     eax, 0FFFFFFFDh
    mov     qword ptr [rbx+38h], 0
    cmovz   ebp, eax
    
loc_614D:
    mov     eax, ebp
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_6158:
    mov     ebp, 0FFFFFFFEh
    jmp     short loc_614D
    

<deflateInit2_>:
    
    var_3C= dword ptr -3Ch
    arg_0= qword ptr  8
    arg_8= dword ptr  10h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    mov     r12d, ecx
    push    rbp
    push    rbx
    sub     rsp, 18h
    mov     rax, [rsp+48h+arg_0]
    mov     ecx, [rsp+48h+arg_8]
    test    rax, rax
    jz      loc_6428
    cmp     byte ptr [rax], 31h
    jnz     loc_6428
    cmp     ecx, 70h
    jnz     loc_6428
    test    rdi, rdi
    mov     rbp, rdi
    jz      loc_6410
    cmp     qword ptr [rdi+40h], 0
    mov     r15d, esi
    mov     r13d, r8d
    mov     qword ptr [rdi+30h], 0
    jz      loc_63F0
    
loc_61BA:
    cmp     qword ptr [rbp+48h], 0
    jz      loc_63E0
    
loc_61C5:
    cmp     r15d, 0FFFFFFFFh
    mov     eax, 6
    cmovz   r15d, eax
    test    r12d, r12d
    js      loc_63D0
    cmp     r12d, 0Fh
    mov     r14d, 1
    jg      loc_63B8
    
loc_61EB:
    lea     eax, [r13-1]
    cmp     eax, 8
    ja      loc_6410
    lea     eax, [r12-8]
    cmp     eax, 7
    ja      loc_6410
    cmp     edx, 8
    jnz     loc_6410
    cmp     r9d, 4
    ja      loc_6410
    cmp     r15d, 9
    ja      loc_6410
    cmp     r12d, 8
    jnz     short loc_6233
    cmp     r14d, 1
    jnz     loc_6410
    
loc_6233:
    cmp     r12d, 8
    mov     eax, 9
    mov     [rsp+48h+var_3C], r9d
    cmovz   r12d, eax
    mov     rdi, [rbp+50h]
    mov     edx, 1740h
    mov     esi, 1
    call    qword ptr [rbp+40h]
    test    rax, rax
    mov     rbx, rax
    jz      loc_6455
    mov     [rbp+38h], rax
    mov     [rax+30h], r14d
    mov     r14d, 1
    mov     ecx, r12d
    mov     esi, r14d
    mov     [rax], rbp
    shl     esi, cl
    mov     dword ptr [rax+8], 2Ah
    mov     qword ptr [rax+38h], 0
    mov     [rax+50h], esi
    mov     [rax+54h], r12d
    lea     eax, [rsi-1]
    lea     ecx, [r13+7]
    lea     edx, [r13+9]
    mov     rdi, [rbp+50h]
    mov     [rbx+58h], eax
    mov     eax, r14d
    shl     eax, cl
    mov     [rbx+88h], ecx
    mov     ecx, 0AAAAAAABh
    mov     [rbx+84h], eax
    sub     eax, 1
    mov     [rbx+8Ch], eax
    mov     eax, edx
    mul     ecx
    shr     edx, 1
    mov     [rbx+90h], edx
    mov     edx, 2
    call    qword ptr [rbp+40h]
    mov     esi, [rbx+50h]
    mov     rdi, [rbp+50h]
    mov     edx, 2
    mov     [rbx+60h], rax
    call    qword ptr [rbp+40h]
    mov     esi, [rbx+84h]
    mov     rdi, [rbp+50h]
    mov     edx, 2
    mov     [rbx+70h], rax
    call    qword ptr [rbp+40h]
    lea     ecx, [r13+6]
    mov     esi, r14d
    mov     edx, 4
    mov     [rbx+78h], rax
    mov     qword ptr [rbx+1738h], 0
    shl     esi, cl
    mov     rdi, [rbp+50h]
    mov     [rbx+1708h], esi
    call    qword ptr [rbp+40h]
    mov     ecx, [rbx+1708h]
    cmp     qword ptr [rbx+60h], 0
    mov     [rbx+10h], rax
    lea     rsi, ds:0[rcx*4]
    mov     rdx, rcx
    mov     [rbx+18h], rsi
    jz      loc_6430
    cmp     qword ptr [rbx+70h], 0
    jz      loc_6430
    cmp     qword ptr [rbx+78h], 0
    jz      loc_6430
    test    rax, rax
    mov     r9d, [rsp+48h+var_3C]
    jz      loc_6430
    shr     edx, 1
    mov     [rbx+0C4h], r15d
    mov     [rbx+0C8h], r9d
    lea     rdx, [rax+rdx*2]
    mov     byte ptr [rbx+48h], 8
    mov     rdi, rbp
    mov     [rbx+1710h], rdx
    lea     rdx, [rcx+rcx*2]
    add     rax, rdx
    mov     [rbx+1700h], rax
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    jmp     _deflateReset
    align 8
    
loc_63B8:
    sub     r12d, 10h
    mov     r14d, 2
    jmp     loc_61EB
    align 10h
    
loc_63D0:
    neg     r12d
    xor     r14d, r14d
    jmp     loc_61EB
    align 20h
    
loc_63E0:
    lea     rax, zcfree
    mov     [rbp+48h], rax
    jmp     loc_61C5
    
loc_63F0:
    lea     rax, zcalloc
    mov     qword ptr [rdi+50h], 0
    mov     [rdi+40h], rax
    jmp     loc_61BA
    align 10h
    
loc_6410:
    mov     eax, 0FFFFFFFEh
    
loc_6415:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_6428:
    mov     eax, 0FFFFFFFAh
    jmp     short loc_6415
    align 10h
    
loc_6430:
    lea     rax, z_errmsg
    mov     dword ptr [rbx+8], 29Ah
    mov     rdi, rbp
    mov     rax, [rax+30h]
    mov     [rbp+30h], rax
    call    _deflateEnd
    mov     eax, 0FFFFFFFCh
    jmp     short loc_6415
    
loc_6455:
    mov     eax, 0FFFFFFFCh
    jmp     short loc_6415
    

<deflateInit_>:
    
    sub     rsp, 8
    xor     r9d, r9d
    mov     r8d, 8
    push    rcx
    push    rdx
    mov     ecx, 0Fh
    mov     edx, 8
    call    _deflateInit2_
    add     rsp, 18h
    retn
    

<deflateCopy>:
    
    test    rsi, rsi
    jz      loc_66E0
    mov     r9, [rsi+40h]
    test    r9, r9
    jz      loc_66E0
    cmp     qword ptr [rsi+48h], 0
    jz      loc_66E0
    push    r13
    push    r12
    mov     r8, rsi
    push    rbp
    push    rbx
    mov     rbp, rdi
    mov     rdi, rsi
    sub     rsp, 8
    call    deflateStateCheck_part_0
    test    rbp, rbp
    jz      loc_66C0
    test    eax, eax
    jnz     loc_66C0
    movdqu  xmm0, xmmword ptr [r8]
    mov     edx, 1740h
    mov     esi, 1
    mov     r12, [r8+38h]
    movups  xmmword ptr [rbp+0], xmm0
    movdqu  xmm0, xmmword ptr [r8+10h]
    movups  xmmword ptr [rbp+10h], xmm0
    movdqu  xmm0, xmmword ptr [r8+20h]
    movups  xmmword ptr [rbp+20h], xmm0
    movdqu  xmm0, xmmword ptr [r8+30h]
    movups  xmmword ptr [rbp+30h], xmm0
    movdqu  xmm0, xmmword ptr [r8+40h]
    movups  xmmword ptr [rbp+40h], xmm0
    movdqu  xmm0, xmmword ptr [r8+50h]
    movups  xmmword ptr [rbp+50h], xmm0
    mov     rdi, [rbp+50h]
    movdqu  xmm0, xmmword ptr [r8+60h]
    movups  xmmword ptr [rbp+60h], xmm0
    call    r9
    test    rax, rax
    mov     rbx, rax
    jz      loc_66F0
    mov     [rbp+38h], rax
    mov     rax, [r12]
    lea     rdi, [rbx+8]
    mov     rcx, rbx
    mov     rsi, r12
    mov     edx, 2
    and     rdi, 0FFFFFFFFFFFFFFF8h
    mov     [rbx], rax
    mov     rax, [r12+1738h]
    sub     rcx, rdi
    sub     rsi, rcx
    add     ecx, 1740h
    shr     ecx, 3
    mov     [rbx+1738h], rax
    rep movsq
    mov     [rbx], rbp
    mov     esi, [rbx+50h]
    mov     rdi, [rbp+50h]
    call    qword ptr [rbp+40h]
    mov     esi, [rbx+50h]
    mov     rdi, [rbp+50h]
    mov     edx, 2
    mov     [rbx+60h], rax
    call    qword ptr [rbp+40h]
    mov     esi, [rbx+84h]
    mov     rdi, [rbp+50h]
    mov     edx, 2
    mov     [rbx+70h], rax
    call    qword ptr [rbp+40h]
    mov     rdi, [rbp+50h]
    mov     [rbx+78h], rax
    mov     edx, 4
    mov     esi, [rbx+1708h]
    call    qword ptr [rbp+40h]
    mov     rdi, [rbx+60h]
    mov     r13, rax
    mov     [rbx+10h], rax
    test    rdi, rdi
    jz      loc_66D0
    cmp     qword ptr [rbx+70h], 0
    jz      loc_66D0
    cmp     qword ptr [rbx+78h], 0
    jz      loc_66D0
    test    rax, rax
    jz      loc_66D0
    mov     eax, [rbx+50h]
    mov     rsi, [r12+60h]
    lea     edx, [rax+rax]
    call    _memcpy
    mov     edx, [rbx+50h]
    mov     rdi, [rbx+70h]
    mov     rsi, [r12+70h]
    add     rdx, rdx
    call    _memcpy
    mov     edx, [rbx+84h]
    mov     rdi, [rbx+78h]
    mov     rsi, [r12+78h]
    add     rdx, rdx
    call    _memcpy
    mov     edx, [rbx+18h]
    mov     rdi, [rbx+10h]
    mov     rsi, [r12+10h]
    call    _memcpy
    mov     rax, [r12+20h]
    mov     rdx, [rbx+10h]
    add     rax, rdx
    sub     rax, [r12+10h]
    mov     [rbx+20h], rax
    mov     eax, [rbx+1708h]
    mov     ecx, eax
    lea     rax, [rax+rax*2]
    shr     ecx, 1
    add     rdx, rax
    lea     rax, [rbx+0D4h]
    lea     rcx, [r13+rcx*2+0]
    mov     [rbx+1700h], rdx
    mov     [rbx+0B58h], rax
    lea     rax, [rbx+9C8h]
    mov     [rbx+1710h], rcx
    mov     [rbx+0B70h], rax
    lea     rax, [rbx+0ABCh]
    mov     [rbx+0B88h], rax
    xor     eax, eax
    
loc_66AF:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_66C0:
    mov     eax, 0FFFFFFFEh
    jmp     short loc_66AF
    align 10h
    
loc_66D0:
    mov     rdi, rbp
    call    _deflateEnd
    mov     eax, 0FFFFFFFCh
    jmp     short loc_66AF
    align 20h
    
loc_66E0:
    mov     eax, 0FFFFFFFEh
    retn
    align 10h
    
loc_66F0:
    mov     eax, 0FFFFFFFCh
    jmp     short loc_66AF
    

<inflateBackInit_>:
    
    test    rcx, rcx
    jz      loc_67D0
    cmp     byte ptr [rcx], 31h
    jnz     loc_67D0
    cmp     r8d, 70h
    jnz     loc_67D0
    test    rdi, rdi
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    jz      loc_67E0
    test    rdx, rdx
    jz      loc_67E0
    lea     ecx, [rsi-8]
    cmp     ecx, 7
    ja      loc_67E0
    mov     rcx, [rdi+40h]
    mov     qword ptr [rdi+30h], 0
    test    rcx, rcx
    jz      short loc_67A0
    cmp     qword ptr [rbx+48h], 0
    mov     rdi, [rdi+50h]
    jz      short loc_67BC
    
loc_675D:
    mov     r12, rdx
    mov     ebp, esi
    mov     edx, 1BF8h
    mov     esi, 1
    call    rcx
    test    rax, rax
    jz      short loc_67E7
    mov     edx, 1
    mov     ecx, ebp
    mov     [rbx+38h], rax
    shl     edx, cl
    mov     dword ptr [rax+1Ch], 8000h
    mov     [rax+38h], ebp
    mov     [rax+3Ch], edx
    mov     [rax+48h], r12
    mov     qword ptr [rax+40h], 0
    xor     eax, eax
    
loc_679B:
    pop     rbx
    pop     rbp
    pop     r12
    retn
    
loc_67A0:
    lea     rcx, zcalloc
    mov     qword ptr [rdi+50h], 0
    mov     [rdi+40h], rcx
    xor     edi, edi
    cmp     qword ptr [rbx+48h], 0
    jnz     short loc_675D
    
loc_67BC:
    lea     rax, zcfree
    mov     [rbx+48h], rax
    jmp     short loc_675D
    align 10h
    
loc_67D0:
    mov     eax, 0FFFFFFFAh
    retn
    align 20h
    
loc_67E0:
    mov     eax, 0FFFFFFFEh
    jmp     short loc_679B
    
loc_67E7:
    mov     eax, 0FFFFFFFCh
    jmp     short loc_679B
    

<inflateBack>:
    
    var_A8= qword ptr -0A8h
    var_A0= qword ptr -0A0h
    var_98= qword ptr -98h
    var_90= qword ptr -90h
    var_88= qword ptr -88h
    dest= qword ptr -80h
    var_78= qword ptr -78h
    var_70= qword ptr -70h
    var_68= qword ptr -68h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    src= qword ptr -48h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 78h
    mov     rax, fs:28h
    mov     [rsp+0A8h+var_40], rax
    xor     eax, eax
    test    rdi, rdi
    mov     [rsp+0A8h+var_A8], rdx
    mov     [rsp+0A8h+var_90], rcx
    mov     [rsp+0A8h+var_88], r8
    jz      loc_7150
    mov     r14, [rdi+38h]
    mov     r13, rdi
    test    r14, r14
    jz      loc_7150
    mov     rax, [rdi]
    xor     ebx, ebx
    mov     qword ptr [rdi+30h], 0
    mov     r15, rsi
    mov     dword ptr [r14+8], 3F3Fh
    mov     dword ptr [r14+0Ch], 0
    mov     dword ptr [r14+40h], 0
    test    rax, rax
    mov     [rsp+0A8h+src], rax
    jz      short loc_686A
    mov     ebx, [rdi+8]
    
loc_686A:
    mov     rax, [r14+48h]
    lea     rsi, [rsp+0A8h+src]
    xor     ebp, ebp
    xor     r12d, r12d
    mov     [rsp+0A8h+var_A0], rsi
    mov     esi, ebp
    mov     rbp, r12
    mov     [rsp+0A8h+dest], rax
    mov     eax, [r14+3Ch]
    mov     r12d, esi
    mov     dword ptr [rsp+0A8h+var_98], eax
    mov     eax, 3F3Fh
    
loc_6897:
    sub     eax, 3F3Fh
    cmp     eax, 12h
    ja      def_68B3
    lea     rdi, jpt_68B3
    movsxd  rax, ds:(jpt_68B3 - 113E0h)[rdi+rax*4]
    add     rax, rdi
    jmp     rax
    align 8
    
loc_68B8:
    shr     rbp, cl
    sub     r12d, r8d
    mov     [r14+5Ch], r9d
    
loc_68C2:
    mov     edx, dword ptr [rsp+0A8h+var_98]
    test    edx, edx
    jnz     loc_7508
    mov     eax, [r14+3Ch]
    mov     rcx, [r14+48h]
    mov     rdi, [rsp+0A8h+var_88]
    mov     dword ptr [rsp+0A8h+var_98], eax
    mov     [r14+40h], eax
    mov     edx, eax
    mov     rsi, rcx
    mov     [rsp+0A8h+dest], rcx
    mov     rax, [rsp+0A8h+var_90]
    call    rax
    test    eax, eax
    mov     rcx, [rsp+0A8h+dest]
    jnz     loc_6EF0
    
loc_6901:
    lea     rax, [rcx+1]
    sub     dword ptr [rsp+0A8h+var_98], 1
    mov     [rsp+0A8h+dest], rax
    mov     eax, [r14+5Ch]
    mov     [rcx], al
    mov     dword ptr [r14+8], 3F48h
    nop     dword ptr [rax]
    
loc_6920:
    cmp     ebx, 5
    ja      loc_6E70
    
loc_6929:
    mov     esi, [r14+78h]
    mov     eax, 0FFFFFFFFh
    mov     rdx, [r14+68h]
    mov     ecx, esi
    shl     eax, cl
    not     eax
    and     eax, ebp
    lea     rax, [rdx+rax*4]
    movzx   r8d, byte ptr [rax+1]
    cmp     r12d, r8d
    mov     ecx, r8d
    jnb     loc_72D0
    mov     eax, ebx
    mov     [rsp+0A8h+var_78], r13
    mov     rbx, [rsp+0A8h+var_A8]
    mov     r13, r14
    mov     r14, rbp
    mov     rbp, [rsp+0A8h+var_A0]
    nop     dword ptr [rax+00000000h]
    
loc_6970:
    test    eax, eax
    jnz     short loc_698D
    mov     rsi, rbp
    mov     rdi, rbx
    call    r15
    test    eax, eax
    jz      loc_6FC8
    mov     esi, [r13+78h]
    mov     rdx, [r13+68h]
    
loc_698D:
    mov     rcx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rdi, [rcx+1]
    mov     [rsp+0A8h+src], rdi
    movzx   edi, byte ptr [rcx]
    mov     ecx, r12d
    add     r12d, 8
    shl     rdi, cl
    mov     ecx, esi
    add     r14, rdi
    mov     edi, 0FFFFFFFFh
    shl     edi, cl
    mov     ecx, edi
    not     ecx
    and     ecx, r14d
    lea     rdi, [rdx+rcx*4]
    movzx   r8d, byte ptr [rdi+1]
    cmp     r8d, r12d
    mov     ecx, r8d
    ja      short loc_6970
    movzx   esi, byte ptr [rdi]
    movzx   r9d, word ptr [rdi+2]
    mov     rbp, r14
    mov     r14, r13
    mov     r13, [rsp+0A8h+var_78]
    mov     ebx, eax
    
loc_69E4:
    test    sil, sil
    jz      loc_68B8
    test    sil, 0F0h
    jz      loc_71EE
    mov     ecx, r8d
    sub     r12d, r8d
    mov     [r14+5Ch], r9d
    shr     rbp, cl
    
loc_6A04:
    test    sil, 20h
    jz      loc_7164
    mov     dword ptr [r14+8], 3F3Fh
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_6A20:
    mov     r8d, [r14+0Ch]
    test    r8d, r8d
    jnz     loc_6D60
    cmp     r12d, 2
    ja      short loc_6A6E
    
loc_6A33:
    test    ebx, ebx
    jnz     short loc_6A4D
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r15
    test    eax, eax
    mov     ebx, eax
    jz      loc_6E58
    
loc_6A4D:
    mov     rax, [rsp+0A8h+src]
    mov     ecx, r12d
    sub     ebx, 1
    add     r12d, 8
    lea     rdx, [rax+1]
    mov     [rsp+0A8h+src], rdx
    movzx   eax, byte ptr [rax]
    shl     rax, cl
    add     rbp, rax
    
loc_6A6E:
    mov     eax, ebp
    and     eax, 1
    mov     [r14+0Ch], eax
    mov     rax, rbp
    shr     rax, 1
    and     eax, 3
    cmp     eax, 2
    jnz     loc_6B80
    mov     dword ptr [r14+8], 3F44h
    shr     rbp, 3
    sub     r12d, 3
    nop     dword ptr [rax+00000000h]
    
loc_6AA0:
    cmp     r12d, 0Dh
    ja      short loc_6B06
    mov     [rsp+0A8h+var_78], r14
    mov     eax, ebx
    mov     r14d, r12d
    mov     rbx, [rsp+0A8h+var_A8]
    mov     r12, [rsp+0A8h+var_A0]
    nop     dword ptr [rax+00000000h]
    
loc_6AC0:
    test    eax, eax
    jnz     short loc_6AD5
    mov     rsi, r12
    mov     rdi, rbx
    call    r15
    test    eax, eax
    jz      loc_6E58
    
loc_6AD5:
    mov     rdx, [rsp+0A8h+src]
    mov     ecx, r14d
    add     r14d, 8
    sub     eax, 1
    lea     rsi, [rdx+1]
    mov     [rsp+0A8h+src], rsi
    movzx   edx, byte ptr [rdx]
    shl     rdx, cl
    add     rbp, rdx
    cmp     r14d, 0Dh
    jbe     short loc_6AC0
    mov     r12d, r14d
    mov     r14, [rsp+0A8h+var_78]
    mov     ebx, eax
    
loc_6B06:
    mov     ecx, ebp
    mov     rax, rbp
    mov     rdx, rbp
    and     ecx, 1Fh
    shr     rax, 5
    shr     rdx, 0Ah
    add     ecx, 101h
    and     eax, 1Fh
    and     edx, 0Fh
    add     eax, 1
    add     edx, 4
    shr     rbp, 0Eh
    sub     r12d, 0Eh
    cmp     ecx, 11Eh
    mov     [r14+84h], ecx
    mov     [r14+88h], eax
    mov     [r14+80h], edx
    ja      short loc_6B59
    cmp     eax, 1Eh
    jbe     loc_6FF0
    
loc_6B59:
    lea     rax, aTooManyLengthO
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    
loc_6B6C:
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 0FFFFFFFDh
    jmp     loc_6C4A
    align 20h
    
loc_6B80:
    cmp     eax, 3
    jz      loc_71BF
    cmp     eax, 1
    jz      loc_7186
    mov     dword ptr [r14+8], 3F41h
    shr     rbp, 3
    sub     r12d, 3
    nop     word ptr [rax+rax+00h]
    
loc_6BA8:
    mov     ecx, r12d
    and     r12d, 0FFFFFFF8h
    and     ecx, 7
    shr     rbp, cl
    cmp     r12d, 1Fh
    ja      short loc_6C13
    mov     [rsp+0A8h+var_78], r14
    mov     eax, ebx
    mov     r14d, r12d
    mov     rbx, [rsp+0A8h+var_A0]
    mov     r12, [rsp+0A8h+var_A8]
    xchg    ax, ax
    
loc_6BD0:
    test    eax, eax
    jnz     short loc_6BE5
    mov     rsi, rbx
    mov     rdi, r12
    call    r15
    test    eax, eax
    jz      loc_6E58
    
loc_6BE5:
    mov     rdx, [rsp+0A8h+src]
    mov     ecx, r14d
    add     r14d, 8
    sub     eax, 1
    lea     rsi, [rdx+1]
    mov     [rsp+0A8h+src], rsi
    movzx   edx, byte ptr [rdx]
    shl     rdx, cl
    add     rbp, rdx
    cmp     r14d, 1Fh
    jbe     short loc_6BD0
    mov     r14, [rsp+0A8h+var_78]
    mov     ebx, eax
    
loc_6C13:
    mov     rax, rbp
    movzx   edx, bp
    shr     rax, 10h
    xor     rax, 0FFFFh
    cmp     rdx, rax
    jz      short loc_6C78
    lea     rax, aInvalidStoredB
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
def_68B3:
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 0FFFFFFFEh
    
loc_6C4A:
    mov     [r13+0], rdx
    mov     [r13+8], ebx
    
loc_6C52:
    mov     rbx, [rsp+0A8h+var_40]
    xor     rbx, fs:28h
    jnz     loc_76EB
    add     rsp, 78h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_6C78:
    movzx   ebp, bp
    test    ebp, ebp
    mov     [r14+5Ch], ebp
    jz      loc_6D44
    mov     [rsp+0A8h+var_70], r13
    mov     r12, [rsp+0A8h+dest]
    mov     r13, r14
    mov     r14d, ebx
    mov     ebx, dword ptr [rsp+0A8h+var_98]
    mov     [rsp+0A8h+var_78], r15
    
loc_6CA0:
    test    r14d, r14d
    jnz     short loc_6CC0
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    mov     rax, [rsp+0A8h+var_78]
    call    rax
    test    eax, eax
    mov     r14d, eax
    jz      loc_715A
    
loc_6CC0:
    test    ebx, ebx
    jnz     short loc_6CE9
    mov     ebx, [r13+3Ch]
    mov     r12, [r13+48h]
    mov     rdi, [rsp+0A8h+var_88]
    mov     rax, [rsp+0A8h+var_90]
    mov     [r13+40h], ebx
    mov     edx, ebx
    mov     rsi, r12
    call    rax
    test    eax, eax
    jnz     loc_71D7
    
loc_6CE9:
    cmp     r14d, ebx
    mov     ecx, ebx
    mov     rsi, [rsp+0A8h+src]
    cmovbe  ecx, r14d
    mov     rdi, r12
    cmp     ecx, ebp
    cmovbe  ebp, ecx
    mov     r15d, ebp
    sub     r14d, ebp
    sub     ebx, ebp
    mov     rdx, r15
    add     r12, r15
    call    _memcpy
    mov     eax, [r13+5Ch]
    add     [rsp+0A8h+src], r15
    sub     eax, ebp
    test    eax, eax
    mov     ebp, eax
    mov     [r13+5Ch], eax
    jnz     loc_6CA0
    mov     dword ptr [rsp+0A8h+var_98], ebx
    mov     r15, [rsp+0A8h+var_78]
    mov     ebx, r14d
    mov     r14, r13
    mov     r13, [rsp+0A8h+var_70]
    mov     [rsp+0A8h+dest], r12
    
loc_6D44:
    mov     edi, [r14+0Ch]
    xor     ebp, ebp
    xor     r12d, r12d
    mov     dword ptr [r14+8], 3F3Fh
    test    edi, edi
    jz      loc_6A33
    nop     dword ptr [rax]
    
loc_6D60:
    mov     dword ptr [r14+8], 3F50h
    
loc_6D68:
    mov     edx, [r14+3Ch]
    cmp     edx, dword ptr [rsp+0A8h+var_98]
    jbe     loc_6FD8
    sub     edx, dword ptr [rsp+0A8h+var_98]
    mov     rsi, [r14+48h]
    mov     rdi, [rsp+0A8h+var_88]
    mov     rax, [rsp+0A8h+var_90]
    call    rax
    test    eax, eax
    mov     rdx, [rsp+0A8h+src]
    jnz     loc_6EF8
    mov     eax, 1
    jmp     loc_6C4A
    
loc_6DA1:
    lea     ecx, [r8+rax]
    or      eax, 0FFFFFFFFh
    shl     eax, cl
    mov     ecx, edi
    not     eax
    mov     dword ptr [rsp+0A8h+var_70], eax
    and     eax, ebp
    shr     eax, cl
    add     eax, r9d
    lea     rcx, [rsi+rax*4]
    movzx   eax, byte ptr [rcx+1]
    lea     edi, [rax+r10]
    cmp     r12d, edi
    jnb     loc_78B8
    mov     rax, rbp
    mov     [rsp+0A8h+var_68], r13
    mov     rbp, r14
    mov     [rsp+0A8h+var_78], r15
    mov     dword ptr [rsp+0A8h+var_60], edx
    mov     r13d, r9d
    mov     r15d, r10d
    mov     r14, rax
    jmp     short loc_6E36
    
loc_6DED:
    mov     rsi, [rbp+70h]
    
loc_6DF1:
    mov     rax, [rsp+0A8h+src]
    sub     ebx, 1
    lea     rcx, [rax+1]
    mov     [rsp+0A8h+src], rcx
    movzx   eax, byte ptr [rax]
    mov     ecx, r12d
    add     r12d, 8
    shl     rax, cl
    mov     ecx, r15d
    add     r14, rax
    mov     eax, dword ptr [rsp+0A8h+var_70]
    and     eax, r14d
    shr     eax, cl
    add     eax, r13d
    lea     rcx, [rsi+rax*4]
    movzx   eax, byte ptr [rcx+1]
    lea     edi, [rax+r15]
    cmp     edi, r12d
    jbe     loc_76F0
    
loc_6E36:
    test    ebx, ebx
    jnz     short loc_6DF1
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    mov     rax, [rsp+0A8h+var_78]
    call    rax
    test    eax, eax
    mov     ebx, eax
    jnz     short loc_6DED
    mov     r13, [rsp+0A8h+var_68]
    nop     dword ptr [rax]
    
loc_6E58:
    xor     edx, edx
    mov     eax, 0FFFFFFFBh
    xor     ebx, ebx
    jmp     loc_6C4A
    align 10h
    
loc_6E70:
    mov     edi, dword ptr [rsp+0A8h+var_98]
    cmp     edi, 101h
    jbe     loc_6929
    mov     rsi, [rsp+0A8h+dest]
    mov     rax, [rsp+0A8h+src]
    mov     [r13+20h], edi
    mov     [r13+8], ebx
    mov     [r13+18h], rsi
    mov     esi, [r14+3Ch]
    cmp     [r14+40h], esi
    mov     [r13+0], rax
    mov     [r14+50h], rbp
    mov     [r14+58h], r12d
    jnb     short loc_6EB4
    mov     eax, esi
    sub     eax, edi
    mov     [r14+40h], eax
    
loc_6EB4:
    mov     rdi, r13
    call    inflate_fast
    mov     rax, [r13+18h]
    mov     ebx, [r13+8]
    mov     rbp, [r14+50h]
    mov     r12d, [r14+58h]
    mov     [rsp+0A8h+dest], rax
    mov     eax, [r13+20h]
    mov     dword ptr [rsp+0A8h+var_98], eax
    mov     rax, [r13+0]
    mov     [rsp+0A8h+src], rax
    mov     eax, [r14+8]
    jmp     loc_6897
    
loc_6EEB:
    mov     ebx, ebp
    mov     r13, r15
    
loc_6EF0:
    mov     rdx, [rsp+0A8h+src]
    nop     dword ptr [rax]
    
loc_6EF8:
    mov     eax, 0FFFFFFFBh
    jmp     loc_6C4A
    
loc_6F02:
    mov     edx, [r14+84h]
    mov     esi, [r14+88h]
    xor     eax, eax
    mov     ecx, eax
    mov     dword ptr [r14+8Ch], 0
    mov     eax, ebx
    mov     [rsp+0A8h+var_78], r13
    mov     rbx, rbp
    
loc_6F29:
    add     esi, edx
    cmp     esi, ecx
    jbe     loc_7846
    mov     edi, [r14+78h]
    mov     edx, 0FFFFFFFFh
    mov     rsi, [r14+68h]
    mov     ecx, edi
    shl     edx, cl
    not     edx
    and     edx, ebx
    lea     r10, [rsi+rdx*4]
    movzx   ebp, byte ptr [r10+1]
    cmp     r12d, ebp
    mov     ecx, ebp
    jnb     loc_7721
    mov     rbp, rbx
    mov     r13, [rsp+0A8h+var_A8]
    mov     rbx, [rsp+0A8h+var_A0]
    jmp     short loc_6FB4
    
loc_6F6A:
    mov     edi, [r14+78h]
    mov     rsi, [r14+68h]
    
loc_6F72:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, r12d
    add     r12d, 8
    shl     rdx, cl
    mov     ecx, edi
    add     rbp, rdx
    mov     edx, 0FFFFFFFFh
    shl     edx, cl
    not     edx
    and     edx, ebp
    lea     r10, [rsi+rdx*4]
    movzx   edx, byte ptr [r10+1]
    cmp     edx, r12d
    mov     ecx, edx
    jbe     loc_752A
    
loc_6FB4:
    test    eax, eax
    jnz     short loc_6F72
    mov     rsi, rbx
    mov     rdi, r13
    call    r15
    test    eax, eax
    jnz     short loc_6F6A
    nop     dword ptr [rax]
    
loc_6FC8:
    mov     r13, [rsp+0A8h+var_78]
    jmp     loc_6E58
    align 8
    
loc_6FD8:
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 1
    jmp     loc_6C4A
    align 10h
    
loc_6FF0:
    mov     eax, ebx
    mov     [rsp+0A8h+var_78], r13
    mov     rbx, [rsp+0A8h+var_A8]
    mov     r13d, r12d
    mov     r12, [rsp+0A8h+var_A0]
    mov     dword ptr [r14+8Ch], 0
    
loc_700E:
    cmp     r13d, 2
    ja      short loc_7046
    test    eax, eax
    jnz     short loc_7025
    mov     rsi, r12
    mov     rdi, rbx
    call    r15
    test    eax, eax
    jz      short loc_6FC8
    
loc_7025:
    mov     rdx, [rsp+0A8h+src]
    mov     ecx, r13d
    sub     eax, 1
    add     r13d, 8
    lea     rsi, [rdx+1]
    mov     [rsp+0A8h+src], rsi
    movzx   edx, byte ptr [rdx]
    shl     rdx, cl
    add     rbp, rdx
    
loc_7046:
    mov     edi, [r14+8Ch]
    lea     rcx, order_4048
    mov     r8d, ebp
    and     r8d, 7
    shr     rbp, 3
    sub     r13d, 3
    lea     esi, [rdi+1]
    mov     rdx, rdi
    cmp     esi, [r14+80h]
    movzx   edi, word ptr [rcx+rdi*2]
    mov     [r14+8Ch], esi
    mov     [r14+rdi*2+98h], r8w
    jb      short loc_700E
    cmp     esi, 12h
    mov     ebx, eax
    mov     r12d, r13d
    mov     ecx, edx
    mov     eax, esi
    mov     r13, [rsp+0A8h+var_78]
    ja      short loc_70D5
    mov     edx, esi
    lea     rsi, order_4048
    add     ecx, 2
    movzx   edx, word ptr [rsi+rdx*2]
    lea     rcx, [rsi+rcx*2]
    jmp     short loc_70B7
    align 10h
    
loc_70B0:
    movzx   edx, word ptr [rcx]
    add     rcx, 2
    
loc_70B7:
    add     eax, 1
    xor     esi, esi
    cmp     eax, 13h
    mov     [r14+rdx*2+98h], si
    jnz     short loc_70B0
    mov     dword ptr [r14+8Ch], 13h
    
loc_70D5:
    lea     rax, [r14+558h]
    lea     r9, [r14+318h]
    lea     r8, [r14+78h]
    lea     rcx, [r14+90h]
    xor     edi, edi
    mov     dword ptr [r14+78h], 7
    mov     [rsp+0A8h+var_58], rax
    mov     [r14+90h], rax
    mov     edx, 13h
    mov     [r14+68h], rax
    lea     rax, [r14+98h]
    mov     [rsp+0A8h+var_70], r9
    mov     [rsp+0A8h+var_50], r8
    mov     [rsp+0A8h+var_68], rcx
    mov     rsi, rax
    mov     [rsp+0A8h+var_60], rax
    call    inflate_table
    test    eax, eax
    jz      loc_6F02
    lea     rax, aInvalidCodeLen
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_7150:
    mov     eax, 0FFFFFFFEh
    jmp     loc_6C52
    
loc_715A:
    mov     r13, [rsp+0A8h+var_70]
    jmp     loc_6E58
    
loc_7164:
    test    sil, 40h
    jz      loc_72DD
    lea     rax, aInvalidLiteral
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_7186:
    lea     rax, lenfix_4026
    mov     dword ptr [r14+8], 3F48h
    shr     rbp, 3
    sub     r12d, 3
    mov     [r14+68h], rax
    lea     rax, distfix_4027
    mov     [r14+70h], rax
    mov     rax, 500000009h
    mov     [r14+78h], rax
    jmp     loc_6920
    
loc_71BF:
    lea     rax, aInvalidBlockTy
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_71D7:
    mov     ebx, r14d
    mov     r13, [rsp+0A8h+var_70]
    mov     rdx, [rsp+0A8h+src]
    mov     eax, 0FFFFFFFBh
    jmp     loc_6C4A
    
loc_71EE:
    lea     ecx, [rsi+r8]
    mov     eax, 0FFFFFFFFh
    shl     eax, cl
    mov     ecx, r8d
    not     eax
    mov     dword ptr [rsp+0A8h+var_78], eax
    and     eax, ebp
    shr     eax, cl
    add     eax, r9d
    lea     rcx, [rdx+rax*4]
    movzx   eax, byte ptr [rcx+1]
    lea     esi, [rax+r8]
    cmp     esi, r12d
    jbe     loc_756F
    mov     eax, ebx
    mov     [rsp+0A8h+var_70], r13
    mov     ebx, r8d
    mov     r13, rbp
    mov     ebp, r12d
    mov     r12d, r9d
    nop     dword ptr [rax+00000000h]
    
loc_7238:
    test    eax, eax
    jnz     short loc_7254
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r15
    test    eax, eax
    jz      loc_715A
    mov     rdx, [r14+68h]
    
loc_7254:
    mov     rcx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rsi, [rcx+1]
    mov     [rsp+0A8h+src], rsi
    movzx   esi, byte ptr [rcx]
    mov     ecx, ebp
    add     ebp, 8
    shl     rsi, cl
    mov     ecx, ebx
    add     r13, rsi
    mov     esi, dword ptr [rsp+0A8h+var_78]
    and     esi, r13d
    shr     esi, cl
    lea     ecx, [rsi+r12]
    lea     rcx, [rdx+rcx*4]
    movzx   esi, byte ptr [rcx+1]
    lea     edi, [rsi+rbx]
    cmp     edi, ebp
    ja      short loc_7238
    mov     r8d, ebx
    movzx   edx, word ptr [rcx+2]
    mov     ebx, eax
    mov     eax, esi
    movzx   esi, byte ptr [rcx]
    mov     r12d, ebp
    mov     rbp, r13
    mov     r13, [rsp+0A8h+var_70]
    
loc_72AA:
    mov     ecx, r8d
    sub     r12d, r8d
    mov     [r14+5Ch], edx
    shr     rbp, cl
    mov     ecx, eax
    sub     r12d, eax
    shr     rbp, cl
    test    sil, sil
    jnz     loc_6A04
    jmp     loc_68C2
    align 10h
    
loc_72D0:
    movzx   esi, byte ptr [rax]
    movzx   r9d, word ptr [rax+2]
    jmp     loc_69E4
    
loc_72DD:
    and     esi, 0Fh
    movzx   ecx, sil
    test    sil, sil
    mov     [r14+64h], ecx
    jz      loc_7371
    cmp     ecx, r12d
    jbe     short loc_735C
    mov     eax, ebx
    mov     [rsp+0A8h+var_78], r13
    mov     rbx, [rsp+0A8h+var_A8]
    mov     r13d, r12d
    mov     r12, [rsp+0A8h+var_A0]
    jmp     short loc_733A
    align 10h
    
loc_7310:
    mov     rdx, [rsp+0A8h+src]
    mov     ecx, r13d
    add     r13d, 8
    sub     eax, 1
    lea     rsi, [rdx+1]
    mov     [rsp+0A8h+src], rsi
    movzx   edx, byte ptr [rdx]
    shl     rdx, cl
    add     rbp, rdx
    mov     edx, [r14+64h]
    cmp     edx, r13d
    jbe     short loc_7350
    
loc_733A:
    test    eax, eax
    jnz     short loc_7310
    mov     rsi, r12
    mov     rdi, rbx
    call    r15
    test    eax, eax
    jnz     short loc_7310
    jmp     loc_6FC8
    
loc_7350:
    mov     r12d, r13d
    mov     r13, [rsp+0A8h+var_78]
    mov     ecx, edx
    mov     ebx, eax
    
loc_735C:
    mov     eax, 0FFFFFFFFh
    sub     r12d, ecx
    shl     eax, cl
    not     eax
    and     eax, ebp
    add     [r14+5Ch], eax
    shr     rbp, cl
    
loc_7371:
    mov     r8d, [r14+7Ch]
    mov     r9d, 0FFFFFFFFh
    mov     rsi, [r14+70h]
    mov     eax, r9d
    mov     ecx, r8d
    shl     eax, cl
    not     eax
    and     eax, ebp
    lea     rcx, [rsi+rax*4]
    movzx   eax, byte ptr [rcx+1]
    cmp     eax, r12d
    mov     edi, eax
    mov     edx, eax
    jbe     loc_76DD
    mov     eax, ebx
    mov     [rsp+0A8h+var_70], r13
    mov     rbx, [rsp+0A8h+var_A8]
    mov     r13, r14
    mov     r14, rbp
    mov     rbp, [rsp+0A8h+var_A0]
    mov     dword ptr [rsp+0A8h+var_78], r9d
    nop     dword ptr [rax+rax+00h]
    
loc_73C0:
    test    eax, eax
    jnz     short loc_73DD
    mov     rsi, rbp
    mov     rdi, rbx
    call    r15
    test    eax, eax
    jz      loc_715A
    mov     r8d, [r13+7Ch]
    mov     rsi, [r13+70h]
    
loc_73DD:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, r12d
    add     r12d, 8
    shl     rdx, cl
    mov     ecx, r8d
    add     r14, rdx
    mov     edx, dword ptr [rsp+0A8h+var_78]
    shl     edx, cl
    not     edx
    and     edx, r14d
    lea     rcx, [rsi+rdx*4]
    movzx   r10d, byte ptr [rcx+1]
    cmp     r10d, r12d
    mov     edi, r10d
    mov     edx, r10d
    ja      short loc_73C0
    movzx   r8d, byte ptr [rcx]
    movzx   r9d, word ptr [rcx+2]
    mov     rbp, r14
    mov     r14, r13
    mov     r13, [rsp+0A8h+var_70]
    mov     ebx, eax
    mov     eax, r10d
    
loc_7439:
    test    r8b, 0F0h
    mov     r10d, eax
    jz      loc_6DA1
    
loc_7446:
    mov     ecx, eax
    sub     r12d, eax
    shr     rbp, cl
    test    r8b, 40h
    jnz     loc_7512
    and     r8d, 0Fh
    mov     [r14+60h], r9d
    movzx   ecx, r8b
    test    r8b, r8b
    mov     [r14+64h], ecx
    jnz     short loc_74E4
    
loc_746D:
    mov     edx, [r14+3Ch]
    cmp     edx, [r14+40h]
    mov     eax, 0
    cmova   eax, dword ptr [rsp+0A8h+var_98]
    mov     esi, edx
    sub     esi, eax
    cmp     [r14+60h], esi
    jbe     loc_7627
    lea     rax, aInvalidDistanc
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_74A5:
    test    ebx, ebx
    jnz     short loc_74BF
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r15
    test    eax, eax
    mov     ebx, eax
    jz      loc_6E58
    
loc_74BF:
    mov     rax, [rsp+0A8h+src]
    mov     ecx, r12d
    sub     ebx, 1
    add     r12d, 8
    lea     rdx, [rax+1]
    mov     [rsp+0A8h+src], rdx
    movzx   eax, byte ptr [rax]
    shl     rax, cl
    mov     ecx, [r14+64h]
    add     rbp, rax
    
loc_74E4:
    cmp     ecx, r12d
    ja      short loc_74A5
    or      eax, 0FFFFFFFFh
    sub     r12d, ecx
    shl     eax, cl
    not     eax
    and     eax, ebp
    shr     rbp, cl
    add     [r14+60h], eax
    jmp     loc_746D
    align 8
    
loc_7508:
    mov     rcx, [rsp+0A8h+dest]
    jmp     loc_6901
    
loc_7512:
    lea     rax, aInvalidDistanc_0
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_752A:
    movzx   esi, word ptr [r10+2]
    mov     rbx, rbp
    mov     ebp, edx
    
loc_7534:
    cmp     si, 0Fh
    ja      short loc_757B
    shr     rbx, cl
    mov     ecx, [r14+8Ch]
    sub     r12d, ebp
    mov     edx, ecx
    add     ecx, 1
    mov     [r14+8Ch], ecx
    mov     [r14+rdx*2+98h], si
    mov     edx, [r14+84h]
    mov     esi, [r14+88h]
    jmp     loc_6F29
    
loc_756F:
    movzx   esi, byte ptr [rcx]
    movzx   edx, word ptr [rcx+2]
    jmp     loc_72AA
    
loc_757B:
    cmp     si, 10h
    lea     r13d, [rbp+2]
    jz      short loc_75E3
    cmp     si, 11h
    jz      loc_77B1
    lea     r13d, [rbp+7]
    cmp     r13d, r12d
    ja      short loc_75CA
    jmp     loc_774C
    align 20h
    
loc_75A0:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, r12d
    add     r12d, 8
    shl     rdx, cl
    add     rbx, rdx
    cmp     r12d, r13d
    jnb     loc_774C
    
loc_75CA:
    test    eax, eax
    jnz     short loc_75A0
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r15
    test    eax, eax
    jnz     short loc_75A0
    jmp     loc_6FC8
    
loc_75E3:
    cmp     r13d, r12d
    jbe     loc_7881
    test    eax, eax
    jnz     short loc_7604
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r15
    test    eax, eax
    jz      loc_6FC8
    
loc_7604:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, r12d
    add     r12d, 8
    shl     rdx, cl
    add     rbx, rdx
    jmp     short loc_75E3
    
loc_7627:
    mov     rcx, r15
    mov     r9d, dword ptr [rsp+0A8h+var_98]
    mov     r15, r13
    mov     r13d, r12d
    mov     r12, rbp
    mov     ebp, ebx
    mov     rbx, [rsp+0A8h+dest]
    
loc_763F:
    test    r9d, r9d
    mov     dword ptr [rsp+0A8h+dest], edx
    jnz     loc_76D8
    mov     rbx, [r14+48h]
    mov     [rsp+0A8h+var_98], rcx
    mov     [r14+40h], edx
    mov     rdi, [rsp+0A8h+var_88]
    mov     rax, [rsp+0A8h+var_90]
    mov     rsi, rbx
    call    rax
    test    eax, eax
    jnz     loc_6EEB
    mov     edx, [r14+3Ch]
    mov     rcx, [rsp+0A8h+var_98]
    mov     r8d, dword ptr [rsp+0A8h+dest]
    
loc_767E:
    mov     eax, [r14+60h]
    sub     edx, eax
    cmp     r8d, edx
    jbe     short loc_76CD
    mov     esi, edx
    mov     eax, r8d
    add     rsi, rbx
    sub     eax, edx
    
loc_7693:
    mov     edx, [r14+5Ch]
    mov     r9d, r8d
    mov     rdi, rbx
    cmp     edx, eax
    cmovbe  eax, edx
    sub     edx, eax
    sub     r9d, eax
    sub     eax, 1
    lea     rax, [rbx+rax+1]
    mov     [r14+5Ch], edx
    
loc_76B3:
    movsb
    cmp     rdi, rax
    jnz     short loc_76B3
    mov     eax, [r14+5Ch]
    mov     rbx, rdi
    test    eax, eax
    jz      short loc_772B
    mov     edx, [r14+3Ch]
    jmp     loc_763F
    
loc_76CD:
    mov     rsi, rbx
    sub     rsi, rax
    mov     eax, r8d
    jmp     short loc_7693
    
loc_76D8:
    mov     r8d, r9d
    jmp     short loc_767E
    
loc_76DD:
    movzx   r8d, byte ptr [rcx]
    movzx   r9d, word ptr [rcx+2]
    jmp     loc_7439
    
loc_76EB:
    call    ___stack_chk_fail
    
loc_76F0:
    movzx   r8d, byte ptr [rcx]
    movzx   r9d, word ptr [rcx+2]
    mov     r10d, r15d
    mov     edx, dword ptr [rsp+0A8h+var_60]
    mov     r13, [rsp+0A8h+var_68]
    mov     rsi, r14
    mov     r15, [rsp+0A8h+var_78]
    mov     r14, rbp
    mov     rbp, rsi
    
loc_7713:
    mov     ecx, r10d
    sub     r12d, edx
    shr     rbp, cl
    jmp     loc_7446
    
loc_7721:
    movzx   esi, word ptr [r10+2]
    jmp     loc_7534
    
loc_772B:
    mov     ebx, ebp
    mov     [rsp+0A8h+dest], rdi
    mov     rbp, r12
    mov     dword ptr [rsp+0A8h+var_98], r9d
    mov     r12d, r13d
    mov     eax, [r14+8]
    mov     r13, r15
    mov     r15, rcx
    jmp     loc_6897
    
loc_774C:
    mov     ecx, ebp
    sub     r12d, ebp
    xor     edi, edi
    shr     rbx, cl
    mov     ecx, [r14+8Ch]
    sub     r12d, 7
    mov     r10d, ebx
    shr     rbx, 7
    and     r10d, 7Fh
    add     r10d, 0Bh
    
loc_7770:
    mov     edx, [r14+84h]
    mov     esi, [r14+88h]
    add     r10d, ecx
    lea     r11d, [rdx+rsi]
    cmp     r10d, r11d
    ja      loc_7827
    
loc_778E:
    mov     r8d, ecx
    add     ecx, 1
    cmp     r10d, ecx
    mov     [r14+r8*2+98h], di
    jnz     short loc_778E
    mov     [r14+8Ch], r10d
    mov     ecx, r10d
    jmp     loc_6F29
    
loc_77B1:
    lea     r13d, [rbp+3]
    cmp     r13d, r12d
    ja      short loc_77E2
    jmp     short loc_77FB
    
loc_77BC:
    mov     rdx, [rsp+0A8h+src]
    sub     eax, 1
    lea     rcx, [rdx+1]
    mov     [rsp+0A8h+src], rcx
    movzx   edx, byte ptr [rdx]
    mov     ecx, r12d
    add     r12d, 8
    shl     rdx, cl
    add     rbx, rdx
    cmp     r12d, r13d
    jnb     short loc_77FB
    
loc_77E2:
    test    eax, eax
    jnz     short loc_77BC
    mov     rsi, [rsp+0A8h+var_A0]
    mov     rdi, [rsp+0A8h+var_A8]
    call    r15
    test    eax, eax
    jnz     short loc_77BC
    jmp     loc_6FC8
    
loc_77FB:
    mov     ecx, ebp
    mov     edx, 0FFFFFFFDh
    xor     edi, edi
    shr     rbx, cl
    sub     edx, ebp
    mov     ecx, [r14+8Ch]
    mov     r10d, ebx
    add     r12d, edx
    shr     rbx, 3
    and     r10d, 7
    add     r10d, 3
    jmp     loc_7770
    
loc_7827:
    mov     r13, [rsp+0A8h+var_78]
    mov     ebx, eax
    lea     rax, aInvalidBitLeng
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_7846:
    cmp     dword ptr [r14+8], 3F51h
    mov     rbp, rbx
    mov     r13, [rsp+0A8h+var_78]
    mov     ebx, eax
    jz      loc_6B6C
    cmp     word ptr [r14+298h], 0
    jnz     short loc_78C6
    lea     rax, aInvalidCodeMis
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_7881:
    mov     ecx, ebp
    sub     r12d, ebp
    shr     rbx, cl
    mov     ecx, [r14+8Ch]
    test    ecx, ecx
    jz      short loc_7827
    mov     r10d, ebx
    lea     edx, [rcx-1]
    shr     rbx, 2
    and     r10d, 3
    sub     r12d, 2
    movzx   edi, word ptr [r14+rdx*2+98h]
    add     r10d, 3
    jmp     loc_7770
    
loc_78B8:
    movzx   r8d, byte ptr [rcx]
    movzx   r9d, word ptr [rcx+2]
    jmp     loc_7713
    
loc_78C6:
    mov     rax, [rsp+0A8h+var_58]
    mov     r9, [rsp+0A8h+var_70]
    mov     edi, 1
    mov     r8, [rsp+0A8h+var_50]
    mov     rcx, [rsp+0A8h+var_68]
    mov     rsi, [rsp+0A8h+var_60]
    mov     dword ptr [r14+78h], 9
    mov     [r14+90h], rax
    mov     [r14+68h], rax
    call    inflate_table
    test    eax, eax
    jz      short loc_7918
    lea     rax, aInvalidLiteral_0
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_7918:
    mov     esi, [r14+84h]
    mov     rax, [r14+90h]
    lea     r8, [r14+7Ch]
    mov     edx, [r14+88h]
    mov     r9, [rsp+0A8h+var_70]
    mov     edi, 2
    mov     rcx, [rsp+0A8h+var_68]
    mov     dword ptr [r14+7Ch], 6
    mov     [r14+70h], rax
    add     rsi, rsi
    add     rsi, [rsp+0A8h+var_60]
    call    inflate_table
    test    eax, eax
    jz      short loc_7975
    lea     rax, aInvalidDistanc_1
    mov     [r13+30h], rax
    mov     dword ptr [r14+8], 3F51h
    jmp     loc_6B6C
    
loc_7975:
    mov     dword ptr [r14+8], 3F48h
    jmp     loc_6920
    

<inflateBackEnd>:
    
    test    rdi, rdi
    jz      short loc_79C0
    mov     rsi, [rdi+38h]
    test    rsi, rsi
    jz      short loc_79C0
    mov     rax, [rdi+48h]
    test    rax, rax
    jz      short loc_79C0
    push    rbx
    mov     rbx, rdi
    mov     rdi, [rdi+50h]
    call    rax
    mov     qword ptr [rbx+38h], 0
    xor     eax, eax
    pop     rbx
    retn
    align 20h
    
loc_79C0:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflate_fast>:
    
    var_78= qword ptr -78h
    var_70= qword ptr -70h
    var_68= qword ptr -68h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_48= dword ptr -48h
    var_44= dword ptr -44h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    var_38= qword ptr -38h
    
    
    push    r15
    push    r14
    mov     r10d, 1
    push    r13
    push    r12
    mov     r12, rdi
    push    rbp
    push    rbx
    mov     eax, [rdi+8]
    mov     rbx, [rdi]
    mov     rbp, [rdi+38h]
    mov     rdi, [rdi+18h]
    sub     eax, 5
    add     rax, rbx
    mov     ecx, [rbp+7Ch]
    mov     rdx, rdi
    mov     [rsp+30h+var_70], rax
    mov     eax, [r12+20h]
    mov     r15d, [rbp+44h]
    mov     r14d, [rbp+3Ch]
    mov     r8d, [rbp+58h]
    mov     r11, [rbp+68h]
    sub     esi, eax
    sub     eax, 101h
    mov     r13, [rbp+70h]
    add     rax, rdi
    sub     rdx, rsi
    mov     esi, 1
    mov     [rsp+30h+var_78], rax
    mov     eax, [rbp+40h]
    mov     [rsp+30h+var_58], rdx
    mov     rdx, [rbp+50h]
    mov     [rsp+30h+var_40], r14d
    mov     [rsp+30h+var_48], r15d
    mov     [rsp+30h+var_44], eax
    mov     rax, [rbp+48h]
    mov     [rsp+30h+var_50], rax
    mov     eax, esi
    shl     eax, cl
    mov     ecx, [rbp+78h]
    sub     eax, 1
    mov     [rsp+30h+var_60], rax
    lea     eax, [r14+r15]
    shl     esi, cl
    mov     [rsp+30h+var_3C], eax
    lea     eax, [r15-1]
    sub     esi, 1
    mov     [rsp+30h+var_68], rsi
    add     rax, 1
    mov     [rsp+30h+var_38], rax
    
loc_7A83:
    cmp     r8d, 0Eh
    ja      short loc_7AAB
    movzx   eax, byte ptr [rbx+1]
    movzx   esi, byte ptr [rbx]
    lea     ecx, [r8+8]
    add     rbx, 2
    shl     rax, cl
    mov     ecx, r8d
    add     r8d, 10h
    shl     rsi, cl
    add     rax, rsi
    add     rdx, rax
    
loc_7AAB:
    mov     rax, [rsp+30h+var_68]
    and     rax, rdx
    jmp     short loc_7ADC
    align 8
    
loc_7AB8:
    test    sil, 10h
    jnz     loc_7B90
    test    sil, 40h
    jnz     loc_7D18
    mov     esi, r10d
    shl     esi, cl
    mov     ecx, esi
    sub     ecx, 1
    and     rcx, rdx
    add     rax, rcx
    
loc_7ADC:
    lea     rcx, [r11+rax*4]
    movzx   esi, byte ptr [rcx]
    movzx   eax, word ptr [rcx+2]
    movzx   ecx, byte ptr [rcx+1]
    shr     rdx, cl
    sub     r8d, ecx
    movzx   ecx, sil
    test    ecx, ecx
    jnz     short loc_7AB8
    mov     [rdi], al
    add     rdi, 1
    
loc_7AFF:
    cmp     rbx, [rsp+30h+var_70]
    jnb     short loc_7B18
    cmp     rdi, [rsp+30h+var_78]
    jb      loc_7A83
    nop     dword ptr [rax+00000000h]
    
loc_7B18:
    mov     eax, r8d
    mov     ecx, r8d
    mov     [r12+18h], rdi
    shr     eax, 3
    and     ecx, 7
    sub     rbx, rax
    mov     eax, 1
    shl     eax, cl
    mov     [r12], rbx
    sub     eax, 1
    and     rdx, rax
    mov     rax, [rsp+30h+var_70]
    cmp     rax, rbx
    jbe     loc_7D30
    sub     rax, rbx
    add     eax, 5
    mov     [r12+8], eax
    mov     rax, [rsp+30h+var_78]
    cmp     rdi, rax
    jb      loc_7D4C
    
loc_7B64:
    mov     eax, dword ptr [rsp+30h+var_78]
    sub     eax, edi
    add     eax, 101h
    
loc_7B6F:
    mov     [r12+20h], eax
    mov     [rbp+50h], rdx
    mov     [rbp+58h], ecx
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_7B90:
    and     esi, 0Fh
    jz      short loc_7BCF
    movzx   r9d, sil
    cmp     r9d, r8d
    jbe     short loc_7BB3
    movzx   r14d, byte ptr [rbx]
    mov     ecx, r8d
    add     rbx, 1
    add     r8d, 8
    shl     r14, cl
    add     rdx, r14
    
loc_7BB3:
    mov     ecx, esi
    mov     r15d, 0FFFFFFFFh
    sub     r8d, r9d
    shl     r15d, cl
    mov     ecx, r15d
    not     ecx
    and     ecx, edx
    add     eax, ecx
    mov     ecx, esi
    shr     rdx, cl
    
loc_7BCF:
    cmp     r8d, 0Eh
    jbe     loc_7D60
    
loc_7BD9:
    mov     rcx, [rsp+30h+var_60]
    and     rcx, rdx
    jmp     short loc_7C04
    align 8
    
loc_7BE8:
    and     r9d, 40h
    jnz     loc_7DB0
    mov     r14d, r10d
    shl     r14d, cl
    mov     ecx, r14d
    sub     ecx, 1
    and     rcx, rdx
    add     rcx, rsi
    
loc_7C04:
    lea     rcx, [r13+rcx*4+0]
    movzx   r9d, byte ptr [rcx]
    movzx   esi, word ptr [rcx+2]
    movzx   ecx, byte ptr [rcx+1]
    shr     rdx, cl
    sub     r8d, ecx
    test    r9b, 10h
    movzx   ecx, r9b
    jz      short loc_7BE8
    and     r9d, 0Fh
    movzx   r14d, r9b
    cmp     r14d, r8d
    jbe     short loc_7C53
    movzx   r15d, byte ptr [rbx]
    mov     ecx, r8d
    shl     r15, cl
    lea     ecx, [r8+8]
    add     rdx, r15
    cmp     r14d, ecx
    ja      loc_7EB4
    add     rbx, 1
    mov     r8d, ecx
    
loc_7C53:
    mov     ecx, r9d
    mov     r15d, 0FFFFFFFFh
    sub     r8d, r14d
    shl     r15d, cl
    not     r15d
    and     r15d, edx
    shr     rdx, cl
    mov     rcx, rdi
    sub     rcx, [rsp+30h+var_58]
    add     r15d, esi
    cmp     r15d, ecx
    jbe     loc_7E43
    mov     esi, r15d
    sub     esi, ecx
    cmp     [rsp+30h+var_44], esi
    mov     ecx, esi
    jnb     short loc_7C9C
    mov     r9d, [rbp+1BE8h]
    test    r9d, r9d
    jnz     loc_7EF4
    
loc_7C9C:
    mov     esi, [rsp+30h+var_48]
    test    esi, esi
    jz      loc_7E1A
    mov     r14d, [rsp+30h+var_48]
    cmp     r14d, ecx
    jnb     loc_7ECC
    mov     esi, [rsp+30h+var_3C]
    sub     esi, ecx
    sub     ecx, r14d
    add     rsi, [rsp+30h+var_50]
    cmp     eax, ecx
    jbe     loc_7DEF
    sub     eax, ecx
    sub     ecx, 1
    lea     rcx, [rdi+rcx+1]
    
loc_7CD6:
    movsb
    cmp     rdi, rcx
    jnz     short loc_7CD6
    cmp     [rsp+30h+var_48], eax
    mov     rsi, [rsp+30h+var_50]
    jnb     loc_7DEF
    mov     rsi, [rsp+30h+var_38]
    sub     eax, [rsp+30h+var_48]
    lea     rcx, [rdi+rsi]
    mov     rsi, [rsp+30h+var_50]
    
loc_7CFD:
    movsb
    cmp     rdi, rcx
    jnz     short loc_7CFD
    
loc_7D03:
    mov     esi, r15d
    mov     rcx, rdi
    sub     rcx, rsi
    mov     rsi, rcx
    jmp     loc_7DEF
    align 8
    
loc_7D18:
    and     esi, 20h
    jz      short loc_7D90
    mov     dword ptr [rbp+8], 3F3Fh
    jmp     loc_7B18
    align 10h
    
loc_7D30:
    mov     eax, dword ptr [rsp+30h+var_70]
    sub     eax, ebx
    add     eax, 5
    mov     [r12+8], eax
    mov     rax, [rsp+30h+var_78]
    cmp     rdi, rax
    jnb     loc_7B64
    
loc_7D4C:
    sub     rax, rdi
    add     eax, 101h
    jmp     loc_7B6F
    align 20h
    
loc_7D60:
    movzx   esi, byte ptr [rbx+1]
    movzx   r9d, byte ptr [rbx]
    lea     ecx, [r8+8]
    add     rbx, 2
    shl     rsi, cl
    mov     ecx, r8d
    add     r8d, 10h
    shl     r9, cl
    add     rsi, r9
    add     rdx, rsi
    jmp     loc_7BD9
    align 10h
    
loc_7D90:
    lea     rax, aInvalidLiteral
    mov     [r12+30h], rax
    mov     dword ptr [rbp+8], 3F51h
    jmp     loc_7B18
    align 10h
    
loc_7DB0:
    lea     rax, aInvalidDistanc_0
    mov     [r12+30h], rax
    mov     dword ptr [rbp+8], 3F51h
    jmp     loc_7B18
    align 10h
    
loc_7DD0:
    movzx   ecx, byte ptr [rsi]
    add     rsi, 3
    add     rdi, 3
    sub     eax, 3
    mov     [rdi-3], cl
    movzx   ecx, byte ptr [rsi-2]
    mov     [rdi-2], cl
    movzx   ecx, byte ptr [rsi-1]
    mov     [rdi-1], cl
    
loc_7DEF:
    cmp     eax, 2
    ja      short loc_7DD0
    test    eax, eax
    jz      loc_7AFF
    movzx   ecx, byte ptr [rsi]
    cmp     eax, 2
    mov     [rdi], cl
    jnz     loc_7F0C
    movzx   eax, byte ptr [rsi+1]
    add     rdi, 2
    mov     [rdi-1], al
    jmp     loc_7AFF
    
loc_7E1A:
    mov     esi, [rsp+30h+var_40]
    sub     esi, ecx
    add     rsi, [rsp+30h+var_50]
    cmp     eax, ecx
    jbe     short loc_7DEF
    sub     eax, ecx
    sub     ecx, 1
    lea     rcx, [rdi+rcx+1]
    nop     dword ptr [rax+rax+00h]
    
loc_7E38:
    movsb
    cmp     rdi, rcx
    jnz     short loc_7E38
    jmp     loc_7D03
    
loc_7E43:
    mov     esi, r15d
    mov     rcx, rdi
    mov     r14, rdi
    sub     rcx, rsi
    jmp     short loc_7E5E
    align 8
    
loc_7E58:
    mov     rcx, rsi
    mov     r14, rdi
    
loc_7E5E:
    movzx   esi, byte ptr [rcx]
    sub     eax, 3
    add     rdi, 3
    mov     [rdi-3], sil
    movzx   esi, byte ptr [rcx+1]
    mov     [rdi-2], sil
    lea     rsi, [rcx+3]
    movzx   r9d, byte ptr [rsi-1]
    cmp     eax, 2
    mov     [rdi-1], r9b
    ja      short loc_7E58
    test    eax, eax
    jz      loc_7AFF
    movzx   esi, byte ptr [rcx+3]
    cmp     eax, 2
    lea     rdi, [r14+4]
    mov     [r14+3], sil
    jnz     loc_7AFF
    movzx   eax, byte ptr [rcx+4]
    lea     rdi, [r14+5]
    mov     [r14+4], al
    jmp     loc_7AFF
    
loc_7EB4:
    movzx   r15d, byte ptr [rbx+1]
    add     r8d, 10h
    add     rbx, 2
    shl     r15, cl
    add     rdx, r15
    jmp     loc_7C53
    
loc_7ECC:
    mov     esi, [rsp+30h+var_48]
    sub     esi, ecx
    add     rsi, [rsp+30h+var_50]
    cmp     eax, ecx
    jbe     loc_7DEF
    sub     eax, ecx
    sub     ecx, 1
    lea     rcx, [rdi+rcx+1]
    
loc_7EE9:
    movsb
    cmp     rdi, rcx
    jnz     short loc_7EE9
    jmp     loc_7D03
    
loc_7EF4:
    lea     rax, aInvalidDistanc
    mov     [r12+30h], rax
    mov     dword ptr [rbp+8], 3F51h
    jmp     loc_7B18
    
loc_7F0C:
    add     rdi, 1
    jmp     loc_7AFF
    

<updatewindow>:
    
    push    r13
    push    r12
    mov     rax, rdi
    push    rbp
    push    rbx
    mov     r12, rsi
    mov     r13d, edx
    sub     rsp, 8
    mov     rbx, [rdi+38h]
    mov     rdi, [rbx+48h]
    test    rdi, rdi
    jnz     short loc_7F67
    mov     ecx, [rbx+38h]
    mov     esi, 1
    mov     rdi, [rax+50h]
    mov     edx, 1
    shl     esi, cl
    call    qword ptr [rax+40h]
    mov     rdi, rax
    mov     [rbx+48h], rax
    mov     eax, 1
    test    rdi, rdi
    jz      short loc_7FBB
    
loc_7F67:
    mov     edx, [rbx+3Ch]
    test    edx, edx
    jz      short loc_7FD0
    cmp     r13d, edx
    jnb     short loc_7FEA
    
loc_7F73:
    mov     eax, [rbx+44h]
    mov     rsi, r12
    sub     edx, eax
    add     rdi, rax
    mov     ebp, edx
    mov     edx, r13d
    sub     rsi, rdx
    cmp     r13d, ebp
    jnb     loc_8010
    call    _memcpy
    
loc_7F94:
    mov     eax, [rbx+44h]
    mov     ecx, [rbx+3Ch]
    add     eax, r13d
    cmp     eax, ecx
    mov     [rbx+44h], eax
    jnz     short loc_7FAB
    mov     dword ptr [rbx+44h], 0
    
loc_7FAB:
    mov     edx, [rbx+40h]
    xor     eax, eax
    cmp     ecx, edx
    jbe     short loc_7FBB
    add     r13d, edx
    mov     [rbx+40h], r13d
    
loc_7FBB:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_7FD0:
    mov     ecx, [rbx+38h]
    mov     edx, 1
    mov     qword ptr [rbx+40h], 0
    shl     edx, cl
    cmp     r13d, edx
    mov     [rbx+3Ch], edx
    jb      short loc_7F73
    
loc_7FEA:
    mov     rsi, r12
    sub     rsi, rdx
    call    _memcpy
    mov     eax, [rbx+3Ch]
    mov     dword ptr [rbx+44h], 0
    mov     [rbx+40h], eax
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_8010:
    mov     edx, ebp
    call    _memcpy
    sub     r13d, ebp
    jz      short loc_8048
    mov     rdi, [rbx+48h]
    mov     edx, r13d
    mov     rsi, r12
    sub     rsi, rdx
    call    _memcpy
    mov     eax, [rbx+3Ch]
    mov     [rbx+44h], r13d
    mov     [rbx+40h], eax
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 8
    
loc_8048:
    mov     r13d, ebp
    jmp     loc_7F94
    

<inflateStateCheck_part_0>:
    
    mov     rdx, [rdi+38h]
    mov     eax, 1
    test    rdx, rdx
    jz      short locret_8063
    cmp     rdi, [rdx]
    jz      short loc_8068
    
locret_8063:
    rep retn
    align 8
    
loc_8068:
    mov     eax, [rdx+8]
    sub     eax, 3F34h
    cmp     eax, 1Fh
    setnbe  al
    movzx   eax, al
    retn
    

<inflateResetKeep>:
    
    test    rdi, rdi
    jz      loc_8140
    cmp     qword ptr [rdi+40h], 0
    jz      loc_8140
    cmp     qword ptr [rdi+48h], 0
    jz      loc_8140
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     loc_8140
    mov     rdx, [rdi+38h]
    mov     esi, [rdx+10h]
    mov     qword ptr [rdx+28h], 0
    mov     qword ptr [rdi+28h], 0
    mov     qword ptr [rdi+10h], 0
    mov     qword ptr [rdi+30h], 0
    test    esi, esi
    jz      short loc_80DE
    and     esi, 1
    mov     [rdi+60h], rsi
    
loc_80DE:
    lea     rcx, [rdx+558h]
    mov     rsi, 0FFFFFFFF00000001h
    mov     dword ptr [rdx+8], 3F34h
    mov     dword ptr [rdx+0Ch], 0
    mov     dword ptr [rdx+14h], 0
    mov     dword ptr [rdx+1Ch], 8000h
    mov     qword ptr [rdx+30h], 0
    mov     qword ptr [rdx+50h], 0
    mov     dword ptr [rdx+58h], 0
    mov     [rdx+90h], rcx
    mov     [rdx+70h], rcx
    mov     [rdx+68h], rcx
    mov     [rdx+1BE8h], rsi
    retn
    align 20h
    
loc_8140:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateReset>:
    
    test    rdi, rdi
    jz      short loc_81A0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_81A0
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_81A0
    sub     rsp, 8
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_8190
    mov     rax, [rdi+38h]
    mov     qword ptr [rax+3Ch], 0
    mov     dword ptr [rax+44h], 0
    add     rsp, 8
    jmp     _inflateResetKeep
    align 10h
    
loc_8190:
    mov     eax, 0FFFFFFFEh
    add     rsp, 8
    retn
    align 20h
    
loc_81A0:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateReset2>:
    
    test    rdi, rdi
    jz      loc_8268
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbp, rdi
    sub     rsp, 8
    cmp     qword ptr [rdi+40h], 0
    jz      loc_8258
    mov     rcx, [rdi+48h]
    test    rcx, rcx
    jz      short loc_8258
    call    inflateStateCheck_part_0
    test    eax, eax
    mov     r13d, eax
    jnz     short loc_8258
    test    esi, esi
    mov     ebx, esi
    mov     r12, [rdi+38h]
    js      short loc_8250
    mov     r13d, esi
    mov     eax, esi
    sar     r13d, 4
    and     eax, 0Fh
    add     r13d, 5
    cmp     esi, 30h
    cmovl   ebx, eax
    
loc_8206:
    lea     eax, [rbx-8]
    cmp     eax, 7
    jbe     short loc_8212
    test    ebx, ebx
    jnz     short loc_8258
    
loc_8212:
    mov     rsi, [r12+48h]
    test    rsi, rsi
    jz      short loc_8232
    cmp     ebx, [r12+38h]
    jz      short loc_8232
    mov     rdi, [rbp+50h]
    call    rcx
    mov     qword ptr [r12+48h], 0
    
loc_8232:
    mov     [r12+10h], r13d
    mov     [r12+38h], ebx
    add     rsp, 8
    pop     rbx
    mov     rdi, rbp
    pop     rbp
    pop     r12
    pop     r13
    jmp     _inflateReset
    align 10h
    
loc_8250:
    neg     ebx
    jmp     short loc_8206
    align 8
    
loc_8258:
    add     rsp, 8
    mov     eax, 0FFFFFFFEh
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    
loc_8268:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateInit2_>:
    
    test    rdx, rdx
    push    r12
    push    rbp
    push    rbx
    jz      loc_8348
    cmp     byte ptr [rdx], 31h
    jnz     loc_8348
    cmp     ecx, 70h
    jnz     loc_8348
    test    rdi, rdi
    mov     rbx, rdi
    jz      loc_8358
    mov     rcx, [rdi+40h]
    mov     qword ptr [rdi+30h], 0
    test    rcx, rcx
    jz      short loc_8318
    cmp     qword ptr [rbx+48h], 0
    mov     rdi, [rdi+50h]
    jz      short loc_8334
    
loc_82B7:
    mov     r12d, esi
    mov     edx, 1BF8h
    mov     esi, 1
    call    rcx
    test    rax, rax
    mov     rbp, rax
    jz      loc_8350
    mov     [rbx+38h], rax
    mov     esi, r12d
    mov     [rax], rbx
    mov     qword ptr [rax+48h], 0
    mov     dword ptr [rax+8], 3F34h
    mov     rdi, rbx
    call    _inflateReset2
    test    eax, eax
    mov     r12d, eax
    jz      short loc_830C
    mov     rdi, [rbx+50h]
    mov     rsi, rbp
    call    qword ptr [rbx+48h]
    mov     qword ptr [rbx+38h], 0
    
loc_830C:
    mov     eax, r12d
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_8318:
    lea     rcx, zcalloc
    mov     qword ptr [rdi+50h], 0
    mov     [rdi+40h], rcx
    xor     edi, edi
    cmp     qword ptr [rbx+48h], 0
    jnz     short loc_82B7
    
loc_8334:
    lea     rax, zcfree
    mov     [rbx+48h], rax
    jmp     loc_82B7
    align 8
    
loc_8348:
    mov     r12d, 0FFFFFFFAh
    jmp     short loc_830C
    
loc_8350:
    mov     r12d, 0FFFFFFFCh
    jmp     short loc_830C
    
loc_8358:
    mov     r12d, 0FFFFFFFEh
    jmp     short loc_830C
    

<inflateInit_>:
    
    mov     ecx, edx
    mov     rdx, rsi
    mov     esi, 0Fh
    jmp     _inflateInit2_
    

<inflatePrime>:
    
    test    rdi, rdi
    jz      short loc_83E0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_83E0
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_83E0
    mov     r9d, edx
    mov     ecx, esi
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_83E0
    test    ecx, ecx
    mov     rsi, [rdi+38h]
    js      short loc_83D0
    cmp     ecx, 10h
    jg      short loc_83E0
    mov     r10d, [rsi+58h]
    lea     r8d, [rcx+r10]
    cmp     r8d, 20h
    ja      short loc_83E0
    mov     edi, 1
    mov     [rsi+58h], r8d
    shl     rdi, cl
    mov     ecx, r10d
    lea     edx, [rdi-1]
    and     edx, r9d
    shl     edx, cl
    add     [rsi+50h], rdx
    retn
    align 10h
    
loc_83D0:
    mov     qword ptr [rsi+50h], 0
    mov     dword ptr [rsi+58h], 0
    retn
    
loc_83E0:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflate>:
    
    n= qword ptr -8Ch
    var_80= qword ptr -80h
    var_78= dword ptr -78h
    var_74= dword ptr -74h
    var_70= qword ptr -70h
    var_68= qword ptr -68h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_44= word ptr -44h
    var_42= byte ptr -42h
    var_41= byte ptr -41h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 68h
    mov     rax, fs:28h
    mov     [rsp+98h+var_40], rax
    xor     eax, eax
    test    rdi, rdi
    mov     [rsp+98h+var_74], esi
    jz      def_84BA
    cmp     qword ptr [rdi+40h], 0
    mov     r14, rdi
    jz      def_84BA
    cmp     qword ptr [rdi+48h], 0
    jz      def_84BA
    call    inflateStateCheck_part_0
    test    eax, eax
    mov     [rsp+98h+var_78], eax
    jnz     def_84BA
    mov     r11, [rdi+18h]
    test    r11, r11
    jz      def_84BA
    mov     r12, [rdi]
    mov     eax, [rdi+8]
    test    r12, r12
    mov     dword ptr [rsp+98h+n], eax
    jz      loc_85E0
    
loc_8465:
    mov     r13, [r14+38h]
    mov     eax, [r13+8]
    cmp     eax, 3F3Fh
    jnz     short loc_8481
    mov     dword ptr [r13+8], 3F40h
    mov     eax, 3F40h
    
loc_8481:
    mov     r10d, [r14+20h]
    mov     r15, [r13+50h]
    mov     ebx, [r13+58h]
    mov     ebp, dword ptr [rsp+98h+n]
    mov     [rsp+98h+var_80], r14
    mov     dword ptr [rsp+98h+n+4], r10d
    mov     r14d, r10d
    
loc_849E:
    sub     eax, 3F34h
    cmp     eax, 1Eh
    ja      def_84BA
    lea     rdi, jpt_84BA
    movsxd  rax, ds:(jpt_84BA - 11DA0h)[rdi+rax*4]
    add     rax, rdi
    jmp     rax
    align 20h
    
loc_84C0:
    mov     edx, [r13+10h]
    test    edx, edx
    jnz     loc_9730
    mov     dword ptr [r13+8], 3F40h
    
loc_84D4:
    mov     r8d, [r13+0Ch]
    test    r8d, r8d
    jz      loc_8600
    mov     ecx, ebx
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    and     ecx, 7
    and     ebx, 0FFFFFFF8h
    mov     dword ptr [r13+8], 3F4Eh
    shr     r15, cl
    
loc_84FC:
    mov     esi, [r13+10h]
    test    esi, esi
    jz      loc_96D8
    cmp     ebx, 1Fh
    ja      short loc_8545
    test    ebp, ebp
    mov     ecx, ebx
    jnz     short loc_8528
    jmp     loc_9632
    align 20h
    
loc_8520:
    test    ebp, ebp
    jz      loc_9630
    
loc_8528:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 1Fh
    jbe     short loc_8520
    mov     ebx, ecx
    
loc_8545:
    mov     edx, dword ptr [rsp+98h+n+4]
    mov     ecx, esi
    and     ecx, 4
    sub     edx, r10d
    mov     eax, edx
    add     [r14+28h], rax
    add     [r13+28h], rax
    test    edx, edx
    jz      short loc_8567
    test    ecx, ecx
    jnz     loc_9DF8
    
loc_8567:
    test    ecx, ecx
    jz      loc_96CB
    mov     r8d, [r13+18h]
    mov     rax, r15
    test    r8d, r8d
    jnz     short loc_85AE
    mov     rdx, r15
    shr     rax, 18h
    mov     rcx, r15
    shr     rdx, 8
    movzx   eax, al
    shl     rcx, 18h
    and     edx, 0FF00h
    mov     ecx, ecx
    or      rax, rdx
    mov     rdx, r15
    shl     rdx, 8
    and     edx, 0FF0000h
    add     rdx, rcx
    add     rax, rdx
    
loc_85AE:
    cmp     [r13+20h], rax
    jz      loc_96CB
    lea     rax, aIncorrectDataC
    mov     dword ptr [rsp+98h+n+4], r10d
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    align 20h
    
loc_85E0:
    test    eax, eax
    jz      loc_8465
    nop     dword ptr [rax+rax+00000000h]
    
def_84BA:
    mov     r8d, 0FFFFFFFEh
    jmp     loc_91C0
    align 20h
    
loc_8600:
    cmp     ebx, 2
    ja      loc_9DB8
    test    ebp, ebp
    jz      loc_9DEB
    movzx   esi, byte ptr [r12]
    mov     ecx, ebx
    lea     rdx, [r12+1]
    sub     ebp, 1
    add     ebx, 8
    shl     rsi, cl
    add     r15, rsi
    
loc_8629:
    mov     eax, r15d
    and     eax, 1
    mov     [r13+0Ch], eax
    mov     rax, r15
    shr     rax, 1
    and     eax, 3
    cmp     eax, 2
    jz      loc_9264
    cmp     eax, 3
    jz      loc_9B19
    cmp     eax, 1
    jz      loc_8787
    mov     dword ptr [r13+8], 3F41h
    shr     r15, 3
    sub     ebx, 3
    mov     r12, rdx
    
loc_8669:
    mov     ecx, ebx
    and     ebx, 0FFFFFFF8h
    and     ecx, 7
    shr     r15, cl
    cmp     ebx, 1Fh
    ja      short loc_86AD
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_8690
    align 8
    
loc_8688:
    test    ebp, ebp
    jz      loc_93A0
    
loc_8690:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 1Fh
    jbe     short loc_8688
    mov     ebx, ecx
    
loc_86AD:
    mov     rax, r15
    movzx   edx, r15w
    shr     rax, 10h
    xor     rax, 0FFFFh
    cmp     rdx, rax
    jz      loc_99F0
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidStoredB
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    align 10h
    
loc_86F0:
    mov     rdx, r11
    
loc_86F3:
    test    r14d, r14d
    jz      loc_8A30
    mov     eax, [r13+5Ch]
    add     r11, 1
    sub     r14d, 1
    mov     [rdx], al
    mov     dword ptr [r13+8], 3F48h
    
loc_8712:
    cmp     ebp, 5
    jbe     loc_94B0
    cmp     r14d, 101h
    jbe     loc_94B0
    mov     rax, [rsp+98h+var_80]
    mov     esi, dword ptr [rsp+98h+n+4]
    mov     [rax+18h], r11
    mov     [rax+20h], r14d
    mov     rdi, rax
    mov     [rax], r12
    mov     [rax+8], ebp
    mov     [r13+50h], r15
    mov     [r13+58h], ebx
    mov     rbx, rax
    call    inflate_fast
    mov     eax, [r13+8]
    mov     r11, [rbx+18h]
    mov     r14d, [rbx+20h]
    mov     r12, [rbx]
    mov     ebp, [rbx+8]
    mov     r15, [r13+50h]
    cmp     eax, 3F3Fh
    mov     ebx, [r13+58h]
    jnz     loc_849E
    mov     dword ptr [r13+1BECh], 0FFFFFFFFh
    jmp     loc_8A17
    
loc_8787:
    lea     rax, lenfix_4065
    cmp     [rsp+98h+var_74], 6
    mov     dword ptr [r13+8], 3F47h
    mov     [r13+68h], rax
    lea     rax, distfix_4066
    mov     [r13+70h], rax
    mov     rax, 500000009h
    mov     [r13+78h], rax
    jz      loc_A1A1
    shr     r15, 3
    sub     ebx, 3
    mov     r12, rdx
    nop     dword ptr [rax+rax+00000000h]
    
loc_87D0:
    mov     dword ptr [r13+8], 3F48h
    jmp     loc_8712
    align 20h
    
loc_87E0:
    mov     esi, [r13+64h]
    
loc_87E4:
    test    esi, esi
    jnz     loc_9950
    
loc_87EC:
    mov     dword ptr [r13+8], 3F4Ch
    
loc_87F4:
    test    r14d, r14d
    jz      loc_8A30
    mov     edx, dword ptr [rsp+98h+n+4]
    mov     eax, [r13+60h]
    sub     edx, r14d
    cmp     eax, edx
    jbe     loc_9938
    sub     eax, edx
    cmp     [r13+40h], eax
    jnb     loc_9340
    mov     edx, [r13+1BE8h]
    test    edx, edx
    jz      loc_9340
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidDistanc
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    align 8
    
loc_8858:
    mov     edx, [r13+64h]
    
loc_885C:
    test    edx, edx
    jnz     loc_9668
    mov     eax, [r13+5Ch]
    
loc_8868:
    mov     [r13+1BF0h], eax
    mov     dword ptr [r13+8], 3F4Ah
    
loc_8877:
    mov     ecx, [r13+7Ch]
    mov     r10d, 0FFFFFFFFh
    mov     rdi, [r13+70h]
    shl     r10d, cl
    not     r10d
    mov     eax, r10d
    and     eax, r15d
    lea     rax, [rdi+rax*4]
    movzx   edx, byte ptr [rax+1]
    movzx   esi, byte ptr [rax]
    movzx   r8d, word ptr [rax+2]
    movzx   eax, dl
    cmp     eax, ebx
    mov     r9d, eax
    jbe     short loc_8900
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_88C8
    align 20h
    
loc_88C0:
    test    ebp, ebp
    jz      loc_93A0
    
loc_88C8:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    mov     eax, r10d
    and     eax, r15d
    lea     rax, [rdi+rax*4]
    movzx   edx, byte ptr [rax+1]
    movzx   esi, byte ptr [rax]
    movzx   r8d, word ptr [rax+2]
    movzx   eax, dl
    cmp     eax, ecx
    mov     r9d, eax
    ja      short loc_88C0
    mov     ebx, ecx
    
loc_8900:
    test    sil, 0F0h
    mov     r10d, eax
    jz      loc_9850
    mov     r10d, [r13+1BECh]
    
loc_8914:
    mov     ecx, eax
    sub     ebx, eax
    add     eax, r10d
    shr     r15, cl
    test    sil, 40h
    mov     [r13+1BECh], eax
    jz      loc_99B0
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidDistanc_0
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    align 8
    
loc_8958:
    cmp     ebx, 1Fh
    ja      short loc_8993
    
loc_895D:
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_8978
    align 10h
    
loc_8970:
    test    ebp, ebp
    jz      loc_93A0
    
loc_8978:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 1Fh
    jbe     short loc_8970
    
loc_8993:
    mov     rax, r15
    mov     rdx, r15
    mov     rsi, [rsp+98h+var_80]
    shr     rax, 18h
    shr     rdx, 8
    xor     ebx, ebx
    and     edx, 0FF00h
    movzx   eax, al
    or      rax, rdx
    mov     rdx, r15
    shl     r15, 18h
    shl     rdx, 8
    mov     r15d, r15d
    and     edx, 0FF0000h
    add     rdx, r15
    xor     r15d, r15d
    add     rax, rdx
    mov     [r13+20h], rax
    mov     [rsi+60h], rax
    mov     dword ptr [r13+8], 3F3Eh
    
loc_89E1:
    mov     edi, [r13+14h]
    test    edi, edi
    jz      loc_9F4F
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    mov     [rsp+98h+var_70], r11
    call    _adler32
    
loc_89FD:
    mov     rsi, [rsp+98h+var_80]
    mov     r11, [rsp+98h+var_70]
    mov     [r13+20h], rax
    mov     [rsi+60h], rax
    mov     dword ptr [r13+8], 3F3Fh
    
loc_8A17:
    mov     eax, [rsp+98h+var_74]
    sub     eax, 5
    cmp     eax, 1
    ja      loc_84D4
    nop     word ptr [rax+rax+00000000h]
    
loc_8A30:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    xor     r8d, r8d
    nop     dword ptr [rax+rax+00h]
    
loc_8A40:
    mov     esi, [r13+3Ch]
    mov     [r14+18h], r11
    mov     [r14+20h], r10d
    mov     [r14], r12
    mov     [r14+8], ebp
    mov     [r13+50h], r15
    test    esi, esi
    mov     [r13+58h], ebx
    jnz     short loc_8A80
    cmp     r10d, dword ptr [rsp+98h+n+4]
    jz      short loc_8AAC
    mov     eax, [r13+8]
    cmp     eax, 3F50h
    ja      short loc_8AAC
    cmp     eax, 3F4Dh
    jbe     short loc_8A80
    cmp     [rsp+98h+var_74], 4
    jz      short loc_8AAC
    nop
    
loc_8A80:
    mov     edx, dword ptr [rsp+98h+n+4]
    mov     rsi, r11
    mov     rdi, r14
    mov     dword ptr [rsp+98h+var_80], r8d
    sub     edx, r10d
    call    updatewindow
    test    eax, eax
    jnz     loc_919E
    mov     ebp, [r14+8]
    mov     r10d, [r14+20h]
    mov     r8d, dword ptr [rsp+98h+var_80]
    
loc_8AAC:
    mov     eax, dword ptr [rsp+98h+n]
    mov     ebx, dword ptr [rsp+98h+n+4]
    sub     eax, ebp
    sub     ebx, r10d
    mov     eax, eax
    add     [r14+10h], rax
    mov     rbp, rax
    mov     eax, ebx
    add     [r14+28h], rax
    add     [r13+28h], rax
    test    byte ptr [r13+10h], 4
    jz      short loc_8ADB
    test    ebx, ebx
    jnz     loc_93C0
    
loc_8ADB:
    mov     edx, [r13+0Ch]
    mov     eax, [r13+58h]
    test    edx, edx
    jz      short loc_8AEA
    add     eax, 40h
    
loc_8AEA:
    mov     edx, [r13+8]
    cmp     edx, 3F3Fh
    jz      loc_93B8
    cmp     edx, 3F47h
    jz      short loc_8B0A
    cmp     edx, 3F42h
    jnz     short loc_8B12
    
loc_8B0A:
    mov     [rsp+98h+var_78], 100h
    
loc_8B12:
    add     eax, [rsp+98h+var_78]
    or      ebp, ebx
    mov     [r14+58h], eax
    jz      short loc_8B29
    cmp     [rsp+98h+var_74], 4
    jnz     loc_91C0
    
loc_8B29:
    test    r8d, r8d
    jnz     loc_91C0
    mov     r8d, 0FFFFFFFBh
    jmp     loc_91C0
    align 20h
    
loc_8B40:
    mov     eax, [r13+18h]
    test    ah, 2
    jnz     loc_8BD9
    nop     dword ptr [rax]
    
loc_8B50:
    mov     rdx, [r13+30h]
    test    rdx, rdx
    jz      short loc_8B69
    sar     eax, 9
    mov     dword ptr [rdx+48h], 1
    and     eax, 1
    mov     [rdx+44h], eax
    
loc_8B69:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    mov     [rsp+98h+var_70], r11
    call    _crc32
    jmp     loc_89FD
    align 20h
    
loc_8B80:
    mov     eax, [r13+18h]
    
loc_8B84:
    test    ah, 8
    jnz     loc_9580
    mov     rdx, [r13+30h]
    test    rdx, rdx
    jz      short loc_8B9E
    mov     qword ptr [rdx+28h], 0
    
loc_8B9E:
    mov     dword ptr [r13+5Ch], 0
    mov     dword ptr [r13+8], 3F3Bh
    
loc_8BAE:
    test    ah, 10h
    jnz     loc_9408
    mov     rdx, [r13+30h]
    test    rdx, rdx
    jz      short loc_8BC8
    mov     qword ptr [rdx+38h], 0
    
loc_8BC8:
    test    ah, 2
    mov     dword ptr [r13+8], 3F3Ch
    jz      loc_8B50
    
loc_8BD9:
    cmp     ebx, 0Fh
    ja      short loc_8C15
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_8BF8
    align 10h
    
loc_8BF0:
    test    ebp, ebp
    jz      loc_93A0
    
loc_8BF8:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    sub     ebp, 1
    shl     rdx, cl
    add     ecx, 8
    add     r15, rdx
    cmp     ecx, 0Fh
    jbe     short loc_8BF0
    mov     ebx, ecx
    
loc_8C15:
    test    byte ptr [r13+10h], 4
    jz      loc_96E8
    movzx   edx, word ptr [r13+20h]
    cmp     rdx, r15
    jz      loc_96E8
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aHeaderCrcMisma
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    align 8
    
loc_8C58:
    mov     eax, [r13+18h]
    jmp     loc_8BAE
    align 8
    
loc_8C68:
    mov     eax, [r13+5Ch]
    
loc_8C6C:
    mov     dword ptr [r13+8], 3F43h
    
loc_8C74:
    test    eax, eax
    jz      loc_9570
    cmp     ebp, eax
    cmovbe  eax, ebp
    cmp     eax, r14d
    cmova   eax, r14d
    test    eax, eax
    jz      loc_8A30
    mov     r8d, eax
    mov     rsi, r12
    mov     rdi, r11
    mov     rdx, r8
    mov     [rsp+98h+var_70], r8
    mov     dword ptr [rsp+98h+var_68], eax
    call    _memcpy
    mov     ecx, dword ptr [rsp+98h+var_68]
    mov     r8, [rsp+98h+var_70]
    mov     r11, rax
    sub     [r13+5Ch], ecx
    mov     eax, [r13+8]
    sub     ebp, ecx
    add     r12, r8
    sub     r14d, ecx
    add     r11, r8
    jmp     loc_849E
    align 10h
    
loc_8CD0:
    mov     eax, [r13+5Ch]
    jmp     short loc_8C74
    align 20h
    
loc_8CE0:
    mov     r10d, r14d
    mov     esi, [r13+10h]
    mov     r14, [rsp+98h+var_80]
    
loc_8CEC:
    test    esi, esi
    jz      loc_9DC5
    mov     edi, [r13+18h]
    test    edi, edi
    jz      loc_9DC5
    cmp     ebx, 1Fh
    ja      short loc_8D35
    test    ebp, ebp
    mov     ecx, ebx
    jnz     short loc_8D18
    jmp     loc_9632
    
loc_8D10:
    test    ebp, ebp
    jz      loc_9630
    
loc_8D18:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 1Fh
    jbe     short loc_8D10
    mov     ebx, ecx
    
loc_8D35:
    mov     eax, [r13+28h]
    cmp     rax, r15
    jz      loc_9DC0
    lea     rax, aIncorrectLengt
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_8D60:
    mov     edi, [r13+8Ch]
    mov     eax, [r13+80h]
    cmp     edi, eax
    jnb     loc_9A52
    
loc_8D76:
    sub     eax, 1
    mov     ecx, ebx
    xor     r8d, r8d
    sub     eax, edi
    cmp     ecx, 2
    lea     r9d, [rdi+1]
    lea     rsi, [rax+1]
    ja      short loc_8DF1
    
loc_8D8D:
    test    ebp, ebp
    jz      loc_93A0
    movzx   eax, byte ptr [r12]
    lea     rdx, [r12+1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    
loc_8DAB:
    lea     r10, [rdi+r8]
    lea     rbx, order_4094
    lea     eax, [r9+r8]
    add     r8, 1
    sub     ecx, 3
    movzx   r10d, word ptr [rbx+r10*2]
    mov     ebx, r15d
    shr     r15, 3
    and     ebx, 7
    cmp     rsi, r8
    mov     [r13+8Ch], eax
    mov     [r13+r10*2+98h], bx
    jz      loc_9A4B
    cmp     ecx, 2
    mov     r12, rdx
    jbe     short loc_8D8D
    
loc_8DF1:
    mov     rdx, r12
    jmp     short loc_8DAB
    align 20h
    
loc_8E00:
    mov     r8d, [r13+8Ch]
    
loc_8E07:
    mov     eax, [r13+84h]
    mov     r9d, [r13+88h]
    mov     r10d, 0FFFFFFFFh
    mov     dword ptr [rsp+98h+var_70], eax
    add     r9d, eax
    
loc_8E22:
    cmp     r9d, r8d
    jbe     loc_9F0C
    mov     ecx, [r13+78h]
    mov     edx, r10d
    mov     rsi, [r13+68h]
    shl     edx, cl
    not     edx
    mov     eax, edx
    and     eax, r15d
    lea     rax, [rsi+rax*4]
    movzx   ecx, byte ptr [rax+1]
    movzx   edi, word ptr [rax+2]
    movzx   eax, cl
    cmp     ebx, eax
    jnb     short loc_8E9C
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_8E68
    align 20h
    
loc_8E60:
    test    ebp, ebp
    jz      loc_93A0
    
loc_8E68:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    mov     eax, edx
    and     eax, r15d
    lea     rax, [rsi+rax*4]
    movzx   ebx, byte ptr [rax+1]
    movzx   edi, word ptr [rax+2]
    movzx   eax, bl
    cmp     eax, ecx
    ja      short loc_8E60
    mov     esi, ecx
    mov     ecx, ebx
    mov     ebx, esi
    
loc_8E9C:
    cmp     di, 0Fh
    jbe     loc_96F8
    cmp     di, 10h
    jz      loc_9C2F
    cmp     di, 11h
    jz      loc_9B78
    lea     esi, [rax+7]
    cmp     ebx, esi
    jnb     short loc_8EF4
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_8ED8
    align 10h
    
loc_8ED0:
    test    ebp, ebp
    jz      loc_93A0
    
loc_8ED8:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    sub     ebp, 1
    shl     rdx, cl
    add     ecx, 8
    add     r15, rdx
    cmp     ecx, esi
    jb      short loc_8ED0
    mov     ebx, ecx
    
loc_8EF4:
    mov     ecx, eax
    mov     esi, 0FFFFFFF9h
    shr     r15, cl
    sub     esi, eax
    xor     ecx, ecx
    mov     edx, r15d
    add     ebx, esi
    shr     r15, 7
    and     edx, 7Fh
    add     edx, 0Bh
    
loc_8F11:
    add     edx, r8d
    cmp     edx, r9d
    ja      loc_A07B
    nop     dword ptr [rax]
    
loc_8F20:
    mov     eax, r8d
    add     r8d, 1
    cmp     edx, r8d
    mov     [r13+rax*2+98h], cx
    jnz     short loc_8F20
    mov     [r13+8Ch], r8d
    jmp     loc_8E22
    align 8
    
loc_8F48:
    cmp     ebx, 1Fh
    ja      short loc_8F83
    
loc_8F4D:
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_8F68
    align 20h
    
loc_8F60:
    test    ebp, ebp
    jz      loc_93A0
    
loc_8F68:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 1Fh
    jbe     short loc_8F60
    
loc_8F83:
    mov     rax, [r13+30h]
    test    rax, rax
    jz      short loc_8F90
    mov     [rax+8], r15
    
loc_8F90:
    test    byte ptr [r13+19h], 2
    jz      short loc_8FA2
    test    byte ptr [r13+10h], 4
    jnz     loc_9CB8
    
loc_8FA2:
    mov     dword ptr [r13+8], 3F37h
    xor     r15d, r15d
    xor     ebx, ebx
    jmp     short loc_8FBD
    align 8
    
loc_8FB8:
    cmp     ebx, 0Fh
    ja      short loc_8FF3
    
loc_8FBD:
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_8FD8
    align 10h
    
loc_8FD0:
    test    ebp, ebp
    jz      loc_93A0
    
loc_8FD8:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 0Fh
    jbe     short loc_8FD0
    
loc_8FF3:
    mov     rax, [r13+30h]
    test    rax, rax
    jz      short loc_900D
    movzx   edx, r15b
    mov     [rax+10h], edx
    mov     rdx, r15
    shr     rdx, 8
    mov     [rax+14h], edx
    
loc_900D:
    mov     eax, [r13+18h]
    test    ah, 2
    jz      short loc_9050
    test    byte ptr [r13+10h], 4
    jz      short loc_9050
    mov     rdi, [r13+20h]
    lea     rsi, [rsp+98h+var_44]
    mov     byte ptr [rsp+98h+var_44], r15b
    mov     edx, 2
    shr     r15, 8
    mov     [rsp+98h+var_70], r11
    mov     byte ptr [rsp+98h+var_44+1], r15b
    call    _crc32
    mov     r11, [rsp+98h+var_70]
    mov     [r13+20h], rax
    mov     eax, [r13+18h]
    
loc_9050:
    test    ah, 4
    mov     dword ptr [r13+8], 3F38h
    jnz     loc_9908
    xor     ebx, ebx
    xor     r15d, r15d
    
loc_9066:
    mov     rdx, [r13+30h]
    test    rdx, rdx
    jz      short loc_9077
    mov     qword ptr [rdx+18h], 0
    
loc_9077:
    mov     dword ptr [r13+8], 3F39h
    
loc_907F:
    test    ah, 4
    jz      loc_9119
    mov     edx, [r13+5Ch]
    cmp     ebp, edx
    mov     ecx, edx
    cmovbe  ecx, ebp
    test    ecx, ecx
    jz      short loc_910D
    mov     rsi, [r13+30h]
    mov     r8d, ecx
    test    rsi, rsi
    jz      short loc_90EE
    mov     rdi, [rsi+18h]
    test    rdi, rdi
    jz      short loc_90EE
    mov     eax, [rsi+20h]
    mov     esi, [rsi+24h]
    mov     [rsp+98h+var_60], r11
    mov     dword ptr [rsp+98h+var_68], ecx
    mov     [rsp+98h+var_70], r8
    sub     eax, edx
    mov     edx, esi
    lea     r9d, [rcx+rax]
    sub     edx, eax
    cmp     r9d, esi
    mov     rsi, r12
    cmovbe  rdx, r8
    add     rdi, rax
    call    _memcpy
    mov     eax, [r13+18h]
    mov     r11, [rsp+98h+var_60]
    mov     ecx, dword ptr [rsp+98h+var_68]
    mov     r8, [rsp+98h+var_70]
    
loc_90EE:
    test    ah, 2
    jz      short loc_90FE
    test    byte ptr [r13+10h], 4
    jnz     loc_9BFC
    
loc_90FE:
    mov     edx, [r13+5Ch]
    sub     ebp, ecx
    add     r12, r8
    sub     edx, ecx
    mov     [r13+5Ch], edx
    
loc_910D:
    test    edx, edx
    jnz     loc_8A30
    mov     eax, [r13+18h]
    
loc_9119:
    mov     dword ptr [r13+5Ch], 0
    mov     dword ptr [r13+8], 3F3Ah
    jmp     loc_8B84
    align 10h
    
loc_9130:
    mov     eax, [r13+18h]
    test    ah, 4
    jz      loc_9066
    cmp     ebx, 0Fh
    ja      short loc_9173
    
loc_9142:
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_9158
    align 10h
    
loc_9150:
    test    ebp, ebp
    jz      loc_93A0
    
loc_9158:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    sub     ebp, 1
    shl     rdx, cl
    add     ecx, 8
    add     r15, rdx
    cmp     ecx, 0Fh
    jbe     short loc_9150
    
loc_9173:
    mov     rdx, [r13+30h]
    mov     [r13+5Ch], r15d
    test    rdx, rdx
    jz      short loc_9184
    mov     [rdx+20h], r15d
    
loc_9184:
    test    ah, 2
    jz      short loc_9194
    test    byte ptr [r13+10h], 4
    jnz     loc_9ECF
    
loc_9194:
    xor     ebx, ebx
    xor     r15d, r15d
    jmp     loc_9077
    
loc_919E:
    mov     dword ptr [r13+8], 3F52h
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_91B0:
    mov     r8d, 0FFFFFFFCh
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_91C0:
    mov     rsi, [rsp+98h+var_40]
    xor     rsi, fs:28h
    mov     eax, r8d
    jnz     loc_A0A1
    add     rsp, 68h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_91F0:
    cmp     ebx, 0Fh
    ja      short loc_922D
    
loc_91F5:
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_9210
    align 8
    
loc_9208:
    test    ebp, ebp
    jz      loc_93A0
    
loc_9210:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 0Fh
    jbe     short loc_9208
    mov     ebx, ecx
    
loc_922D:
    cmp     r15b, 8
    mov     eax, r15d
    mov     [r13+18h], r15d
    jz      loc_9A18
    
loc_923E:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aUnknownCompres
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_9264:
    mov     dword ptr [r13+8], 3F44h
    shr     r15, 3
    sub     ebx, 3
    mov     r12, rdx
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_9280:
    cmp     ebx, 0Dh
    ja      short loc_92BD
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_92A0
    align 8
    
loc_9298:
    test    ebp, ebp
    jz      loc_93A0
    
loc_92A0:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 0Dh
    jbe     short loc_9298
    mov     ebx, ecx
    
loc_92BD:
    mov     ecx, r15d
    mov     rdx, r15
    mov     rax, r15
    and     ecx, 1Fh
    shr     rdx, 5
    shr     rax, 0Ah
    add     ecx, 101h
    and     edx, 1Fh
    and     eax, 0Fh
    add     edx, 1
    add     eax, 4
    shr     r15, 0Eh
    sub     ebx, 0Eh
    cmp     ecx, 11Eh
    mov     [r13+84h], ecx
    mov     [r13+88h], edx
    mov     [r13+80h], eax
    ja      short loc_9310
    cmp     edx, 1Eh
    jbe     loc_9C9E
    
loc_9310:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aTooManyLengthO
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    align 20h
    
loc_9340:
    mov     esi, [r13+44h]
    mov     rdx, [r13+48h]
    cmp     esi, eax
    jb      loc_9720
    sub     esi, eax
    add     rsi, rdx
    
loc_9355:
    mov     edx, [r13+5Ch]
    cmp     edx, eax
    cmovbe  eax, edx
    
loc_935E:
    cmp     eax, r14d
    mov     rdi, r11
    cmova   eax, r14d
    sub     edx, eax
    sub     r14d, eax
    sub     eax, 1
    lea     rax, [r11+rax+1]
    mov     [r13+5Ch], edx
    nop     dword ptr [rax+00000000h]
    
loc_9380:
    movsb
    cmp     rdi, rax
    jnz     short loc_9380
    mov     r10d, [r13+5Ch]
    mov     r11, rdi
    test    r10d, r10d
    jz      loc_87D0
    mov     eax, [r13+8]
    jmp     loc_849E
    align 20h
    
loc_93A0:
    mov     r10d, r14d
    mov     ebx, ecx
    mov     r14, [rsp+98h+var_80]
    xor     r8d, r8d
    jmp     loc_8A40
    align 8
    
loc_93B8:
    sub     eax, 0FFFFFF80h
    jmp     loc_8B12
    
loc_93C0:
    mov     rsi, [r14+18h]
    mov     ecx, [r13+18h]
    mov     edx, ebx
    mov     rdi, [r13+20h]
    mov     dword ptr [rsp+98h+n], r8d
    sub     rsi, rax
    test    ecx, ecx
    jz      short loc_93F8
    call    _crc32
    mov     r8d, dword ptr [rsp+98h+n]
    
loc_93E4:
    mov     [r13+20h], rax
    mov     [r14+60h], rax
    jmp     loc_8ADB
    align 8
    
loc_93F8:
    call    _adler32
    mov     r8d, dword ptr [rsp+98h+n]
    jmp     short loc_93E4
    align 8
    
loc_9408:
    test    ebp, ebp
    jz      loc_8A30
    xor     eax, eax
    nop     word ptr [rax+rax+00h]
    
loc_9418:
    lea     ecx, [rax+1]
    movzx   r8d, byte ptr [r12+rax]
    mov     rax, [r13+30h]
    test    rax, rax
    jz      short loc_9446
    mov     rsi, [rax+38h]
    test    rsi, rsi
    jz      short loc_9446
    mov     edx, [r13+5Ch]
    cmp     edx, [rax+40h]
    jnb     short loc_9446
    lea     eax, [rdx+1]
    mov     [r13+5Ch], eax
    mov     [rsi+rdx], r8b
    
loc_9446:
    test    r8b, r8b
    mov     eax, ecx
    jz      short loc_9451
    cmp     ebp, ecx
    ja      short loc_9418
    
loc_9451:
    test    byte ptr [r13+19h], 2
    jz      short loc_9490
    test    byte ptr [r13+10h], 4
    jz      short loc_9490
    mov     rdi, [r13+20h]
    mov     edx, ecx
    mov     rsi, r12
    mov     [rsp+98h+var_60], r11
    mov     byte ptr [rsp+98h+var_68], r8b
    mov     dword ptr [rsp+98h+var_70], ecx
    call    _crc32
    movzx   r8d, byte ptr [rsp+98h+var_68]
    mov     r11, [rsp+98h+var_60]
    mov     ecx, dword ptr [rsp+98h+var_70]
    mov     [r13+20h], rax
    xchg    ax, ax
    
loc_9490:
    mov     eax, ecx
    sub     ebp, ecx
    add     r12, rax
    test    r8b, r8b
    jnz     loc_8A30
    mov     eax, [r13+18h]
    jmp     loc_8BC8
    align 10h
    
loc_94B0:
    mov     ecx, [r13+78h]
    mov     edi, 0FFFFFFFFh
    mov     rsi, [r13+68h]
    mov     dword ptr [r13+1BECh], 0
    shl     edi, cl
    not     edi
    mov     eax, edi
    and     eax, r15d
    lea     rax, [rsi+rax*4]
    movzx   ecx, byte ptr [rax+1]
    movzx   edx, byte ptr [rax]
    movzx   r10d, word ptr [rax+2]
    movzx   eax, cl
    cmp     ebx, eax
    jnb     short loc_9539
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_9500
    align 8
    
loc_94F8:
    test    ebp, ebp
    jz      loc_93A0
    
loc_9500:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    mov     eax, edi
    and     eax, r15d
    lea     rax, [rsi+rax*4]
    movzx   r8d, byte ptr [rax+1]
    movzx   edx, byte ptr [rax]
    movzx   r10d, word ptr [rax+2]
    movzx   eax, r8b
    cmp     eax, ecx
    ja      short loc_94F8
    mov     ebx, ecx
    mov     ecx, r8d
    
loc_9539:
    test    dl, dl
    jz      loc_99D0
    test    dl, 0F0h
    jz      loc_9D02
    mov     ecx, eax
    sub     ebx, eax
    mov     [r13+1BECh], eax
    shr     r15, cl
    mov     [r13+5Ch], r10d
    
loc_955C:
    test    dl, 20h
    jz      loc_9B49
    mov     dword ptr [r13+1BECh], 0FFFFFFFFh
    
loc_9570:
    mov     dword ptr [r13+8], 3F3Fh
    jmp     loc_8A17
    align 20h
    
loc_9580:
    test    ebp, ebp
    jz      loc_8A30
    xor     eax, eax
    jmp     short loc_9594
    align 10h
    
loc_9590:
    cmp     ebp, ecx
    jbe     short loc_95C9
    
loc_9594:
    lea     ecx, [rax+1]
    movzx   r8d, byte ptr [r12+rax]
    mov     rax, [r13+30h]
    test    rax, rax
    jz      short loc_95C2
    mov     rsi, [rax+28h]
    test    rsi, rsi
    jz      short loc_95C2
    mov     edx, [r13+5Ch]
    cmp     edx, [rax+30h]
    jnb     short loc_95C2
    lea     eax, [rdx+1]
    mov     [r13+5Ch], eax
    mov     [rsi+rdx], r8b
    
loc_95C2:
    test    r8b, r8b
    mov     eax, ecx
    jnz     short loc_9590
    
loc_95C9:
    test    byte ptr [r13+19h], 2
    jz      short loc_9610
    test    byte ptr [r13+10h], 4
    jz      short loc_9610
    mov     rdi, [r13+20h]
    mov     edx, ecx
    mov     rsi, r12
    mov     [rsp+98h+var_60], r11
    mov     byte ptr [rsp+98h+var_68], r8b
    mov     dword ptr [rsp+98h+var_70], ecx
    call    _crc32
    movzx   r8d, byte ptr [rsp+98h+var_68]
    mov     r11, [rsp+98h+var_60]
    mov     ecx, dword ptr [rsp+98h+var_70]
    mov     [r13+20h], rax
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_9610:
    mov     eax, ecx
    sub     ebp, ecx
    add     r12, rax
    test    r8b, r8b
    jnz     loc_8A30
    mov     eax, [r13+18h]
    jmp     loc_8B9E
    align 10h
    
loc_9630:
    mov     ebx, ecx
    
loc_9632:
    xor     r8d, r8d
    jmp     loc_8A40
    align 20h
    
loc_9640:
    mov     r10d, r14d
    mov     r8d, 1
    mov     r14, [rsp+98h+var_80]
    jmp     loc_8A40
    align 8
    
loc_9658:
    mov     eax, [r13+18h]
    jmp     loc_907F
    align 8
    
loc_9668:
    cmp     ebx, edx
    jnb     short loc_96A4
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_9688
    align 20h
    
loc_9680:
    test    ebp, ebp
    jz      loc_93A0
    
loc_9688:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, edx
    jb      short loc_9680
    mov     ebx, ecx
    
loc_96A4:
    mov     ecx, edx
    mov     eax, 0FFFFFFFFh
    sub     ebx, edx
    shl     eax, cl
    add     [r13+1BECh], edx
    not     eax
    and     eax, r15d
    add     eax, [r13+5Ch]
    shr     r15, cl
    mov     [r13+5Ch], eax
    jmp     loc_8868
    
loc_96CB:
    mov     dword ptr [rsp+98h+n+4], r10d
    xor     ebx, ebx
    xor     r15d, r15d
    nop     dword ptr [rax]
    
loc_96D8:
    mov     dword ptr [r13+8], 3F4Fh
    jmp     loc_8CEC
    align 8
    
loc_96E8:
    xor     ebx, ebx
    xor     r15d, r15d
    jmp     loc_8B50
    align 8
    
loc_96F8:
    sub     ebx, eax
    lea     eax, [r8+1]
    shr     r15, cl
    mov     [r13+8Ch], eax
    mov     [r13+r8*2+98h], di
    mov     r8d, eax
    jmp     loc_8E22
    align 20h
    
loc_9720:
    sub     eax, esi
    mov     esi, [r13+3Ch]
    sub     esi, eax
    add     rsi, rdx
    jmp     loc_9355
    
loc_9730:
    cmp     ebx, 0Fh
    ja      short loc_976D
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_9750
    align 8
    
loc_9748:
    test    ebp, ebp
    jz      loc_93A0
    
loc_9750:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, 0Fh
    jbe     short loc_9748
    mov     ebx, ecx
    
loc_976D:
    test    dl, 2
    jz      short loc_977F
    cmp     r15, 8B1Fh
    jz      loc_9F8D
    
loc_977F:
    mov     rax, [r13+30h]
    mov     dword ptr [r13+18h], 0
    test    rax, rax
    jz      short loc_9797
    mov     dword ptr [rax+48h], 0FFFFFFFFh
    
loc_9797:
    and     edx, 1
    jz      loc_9BD6
    mov     ecx, r15d
    mov     rax, r15
    mov     rdx, 842108421084211h
    shl     ecx, 8
    shr     rax, 8
    and     ecx, 0FF00h
    add     rcx, rax
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rdx, rax
    shr     rdx, 4
    mov     rax, rdx
    shl     rax, 5
    sub     rax, rdx
    cmp     rcx, rax
    jnz     loc_9BD6
    mov     eax, r15d
    and     eax, 0Fh
    cmp     eax, 8
    jnz     loc_923E
    shr     r15, 4
    mov     eax, [r13+38h]
    sub     ebx, 4
    mov     ecx, r15d
    and     ecx, 0Fh
    add     ecx, 8
    test    eax, eax
    jnz     loc_A0A6
    cmp     ecx, 0Fh
    mov     [r13+38h], ecx
    jbe     loc_A0B7
    
loc_9821:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidWindowS
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    align 10h
    
loc_9850:
    lea     ecx, [rsi+rax]
    mov     eax, 0FFFFFFFFh
    mov     dword ptr [rsp+98h+var_70], r8d
    shl     eax, cl
    mov     ecx, edx
    not     eax
    mov     dword ptr [rsp+98h+var_68], eax
    and     eax, r15d
    shr     eax, cl
    add     eax, r8d
    lea     rax, [rdi+rax*4]
    movzx   esi, byte ptr [rax]
    movzx   r8d, word ptr [rax+2]
    movzx   eax, byte ptr [rax+1]
    lea     edx, [rax+r10]
    cmp     edx, ebx
    jbe     short loc_98EC
    test    ebp, ebp
    jz      loc_8A30
    mov     dword ptr [rsp+98h+var_60], r9d
    mov     esi, dword ptr [rsp+98h+var_68]
    mov     r9d, dword ptr [rsp+98h+var_70]
    jmp     short loc_98A8
    align 20h
    
loc_98A0:
    test    ebp, ebp
    jz      loc_8A30
    
loc_98A8:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    mov     ecx, ebx
    add     ebx, 8
    sub     ebp, 1
    shl     rax, cl
    mov     ecx, r10d
    add     r15, rax
    mov     eax, esi
    and     eax, r15d
    shr     eax, cl
    add     eax, r9d
    lea     rax, [rdi+rax*4]
    movzx   ecx, byte ptr [rax]
    movzx   r8d, word ptr [rax+2]
    movzx   eax, byte ptr [rax+1]
    lea     edx, [rax+r10]
    cmp     edx, ebx
    ja      short loc_98A0
    mov     r9d, dword ptr [rsp+98h+var_60]
    mov     esi, ecx
    
loc_98EC:
    mov     ecx, r10d
    sub     ebx, r9d
    add     r10d, [r13+1BECh]
    shr     r15, cl
    jmp     loc_8914
    align 8
    
loc_9908:
    xor     r15d, r15d
    xor     ebx, ebx
    jmp     loc_9142
    
loc_9912:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    jmp     loc_84FC
    
loc_991F:
    mov     r10d, r14d
    mov     r8d, 0FFFFFFFDh
    mov     r14, [rsp+98h+var_80]
    jmp     loc_8A40
    align 8
    
loc_9938:
    mov     rsi, r11
    sub     rsi, rax
    mov     eax, [r13+5Ch]
    mov     edx, eax
    jmp     loc_935E
    align 10h
    
loc_9950:
    cmp     ebx, esi
    jnb     short loc_9984
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_9968
    
loc_9960:
    test    ebp, ebp
    jz      loc_93A0
    
loc_9968:
    add     r12, 1
    movzx   eax, byte ptr [r12-1]
    sub     ebp, 1
    shl     rax, cl
    add     ecx, 8
    add     r15, rax
    cmp     ecx, esi
    jb      short loc_9960
    mov     ebx, ecx
    
loc_9984:
    mov     ecx, esi
    mov     eax, 0FFFFFFFFh
    sub     ebx, esi
    shl     eax, cl
    add     [r13+1BECh], esi
    not     eax
    and     eax, r15d
    shr     r15, cl
    add     [r13+60h], eax
    jmp     loc_87EC
    align 10h
    
loc_99B0:
    and     esi, 0Fh
    mov     [r13+60h], r8d
    mov     dword ptr [r13+8], 3F4Bh
    mov     [r13+64h], esi
    jmp     loc_87E4
    align 10h
    
loc_99D0:
    shr     r15, cl
    sub     ebx, eax
    mov     [r13+1BECh], eax
    mov     [r13+5Ch], r10d
    
loc_99E0:
    mov     dword ptr [r13+8], 3F4Dh
    mov     rdx, r11
    jmp     loc_86F3
    
loc_99F0:
    cmp     [rsp+98h+var_74], 6
    movzx   eax, r15w
    mov     dword ptr [r13+8], 3F42h
    mov     [r13+5Ch], eax
    jz      loc_A18C
    xor     ebx, ebx
    xor     r15d, r15d
    jmp     loc_8C6C
    align 8
    
loc_9A18:
    test    r15d, 0E000h
    jz      loc_9E3E
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aUnknownHeaderF
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_9A4B:
    mov     ebx, ecx
    mov     edi, eax
    mov     r12, rdx
    
loc_9A52:
    cmp     edi, 12h
    ja      short loc_9AA2
    mov     edx, 12h
    mov     ecx, edi
    lea     rax, order_4094
    sub     edx, edi
    lea     rsi, unk_126A2
    add     rdx, rcx
    lea     rax, [rax+rcx*2]
    lea     rcx, [rsi+rdx*2]
    nop     dword ptr [rax+00000000h]
    
loc_9A80:
    movzx   edx, word ptr [rax]
    add     rax, 2
    xor     esi, esi
    cmp     rcx, rax
    mov     [r13+rdx*2+98h], si
    jnz     short loc_9A80
    mov     dword ptr [r13+8Ch], 13h
    
loc_9AA2:
    lea     rax, [r13+558h]
    lea     rcx, [r13+90h]
    lea     rsi, [r13+98h]
    lea     r9, [r13+318h]
    lea     r8, [r13+78h]
    xor     edi, edi
    mov     [r13+90h], rax
    mov     [r13+68h], rax
    mov     edx, 13h
    mov     dword ptr [r13+78h], 7
    mov     [rsp+98h+var_70], r11
    call    inflate_table
    test    eax, eax
    mov     r11, [rsp+98h+var_70]
    jz      loc_9EB4
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidCodeLen
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_9B19:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidBlockTy
    shr     r15, 3
    sub     ebx, 3
    mov     r12, rdx
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_9B49:
    test    dl, 40h
    jz      loc_9EA0
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidLiteral
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_9B78:
    lea     esi, [rax+3]
    cmp     esi, ebx
    jbe     short loc_9BB4
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_9B98
    align 10h
    
loc_9B90:
    test    ebp, ebp
    jz      loc_93A0
    
loc_9B98:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    sub     ebp, 1
    shl     rdx, cl
    add     ecx, 8
    add     r15, rdx
    cmp     esi, ecx
    ja      short loc_9B90
    mov     ebx, ecx
    
loc_9BB4:
    mov     ecx, eax
    mov     esi, 0FFFFFFFDh
    shr     r15, cl
    sub     esi, eax
    xor     ecx, ecx
    mov     edx, r15d
    add     ebx, esi
    shr     r15, 3
    and     edx, 7
    add     edx, 3
    jmp     loc_8F11
    
loc_9BD6:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aIncorrectHeade
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_9BFC:
    mov     rdi, [r13+20h]
    mov     edx, ecx
    mov     rsi, r12
    mov     [rsp+98h+var_60], r11
    mov     [rsp+98h+var_68], r8
    mov     dword ptr [rsp+98h+var_70], ecx
    call    _crc32
    mov     r11, [rsp+98h+var_60]
    mov     [r13+20h], rax
    mov     r8, [rsp+98h+var_68]
    mov     ecx, dword ptr [rsp+98h+var_70]
    jmp     loc_90FE
    
loc_9C2F:
    lea     esi, [rax+2]
    cmp     esi, ebx
    jbe     short loc_9C6C
    test    ebp, ebp
    jz      loc_8A30
    mov     ecx, ebx
    jmp     short loc_9C50
    align 8
    
loc_9C48:
    test    ebp, ebp
    jz      loc_93A0
    
loc_9C50:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    sub     ebp, 1
    shl     rdx, cl
    add     ecx, 8
    add     r15, rdx
    cmp     esi, ecx
    ja      short loc_9C48
    mov     ebx, ecx
    
loc_9C6C:
    mov     ecx, eax
    sub     ebx, eax
    shr     r15, cl
    test    r8d, r8d
    jz      loc_A07B
    mov     edx, r15d
    lea     eax, [r8-1]
    shr     r15, 2
    and     edx, 3
    sub     ebx, 2
    movzx   ecx, word ptr [r13+rax*2+98h]
    add     edx, 3
    jmp     loc_8F11
    
loc_9C9E:
    mov     dword ptr [r13+8Ch], 0
    mov     dword ptr [r13+8], 3F45h
    xor     edi, edi
    jmp     loc_8D76
    
loc_9CB8:
    mov     rax, r15
    mov     rdi, [r13+20h]
    lea     rsi, [rsp+98h+var_44]
    shr     rax, 8
    mov     byte ptr [rsp+98h+var_44], r15b
    mov     edx, 4
    mov     byte ptr [rsp+98h+var_44+1], al
    mov     rax, r15
    shr     r15, 18h
    shr     rax, 10h
    mov     [rsp+98h+var_70], r11
    mov     [rsp+98h+var_41], r15b
    mov     [rsp+98h+var_42], al
    call    _crc32
    mov     r11, [rsp+98h+var_70]
    mov     [r13+20h], rax
    jmp     loc_8FA2
    
loc_9D02:
    lea     ecx, [rdx+rax]
    mov     edi, 0FFFFFFFFh
    shl     edi, cl
    mov     ecx, eax
    not     edi
    mov     edx, edi
    mov     dword ptr [rsp+98h+var_70], edi
    and     edx, r15d
    shr     edx, cl
    add     edx, r10d
    lea     rcx, [rsi+rdx*4]
    movzx   edi, byte ptr [rcx+1]
    movzx   edx, byte ptr [rcx]
    movzx   r9d, word ptr [rcx+2]
    lea     r8d, [rdi+rax]
    cmp     r8d, ebx
    jbe     short loc_9D8F
    test    ebp, ebp
    jz      loc_8A30
    mov     edi, dword ptr [rsp+98h+var_70]
    jmp     short loc_9D50
    align 8
    
loc_9D48:
    test    ebp, ebp
    jz      loc_8A30
    
loc_9D50:
    add     r12, 1
    movzx   edx, byte ptr [r12-1]
    mov     ecx, ebx
    add     ebx, 8
    sub     ebp, 1
    shl     rdx, cl
    mov     ecx, eax
    add     r15, rdx
    mov     edx, edi
    and     edx, r15d
    shr     edx, cl
    add     edx, r10d
    lea     rcx, [rsi+rdx*4]
    movzx   edx, byte ptr [rcx]
    movzx   r9d, word ptr [rcx+2]
    movzx   ecx, byte ptr [rcx+1]
    lea     r8d, [rcx+rax]
    cmp     r8d, ebx
    ja      short loc_9D48
    mov     edi, ecx
    
loc_9D8F:
    mov     ecx, eax
    sub     ebx, eax
    mov     [r13+1BECh], r8d
    shr     r15, cl
    mov     ecx, edi
    sub     ebx, edi
    shr     r15, cl
    test    dl, dl
    mov     [r13+5Ch], r9d
    jnz     loc_955C
    jmp     loc_99E0
    align 8
    
loc_9DB8:
    mov     rdx, r12
    jmp     loc_8629
    
loc_9DC0:
    xor     ebx, ebx
    xor     r15d, r15d
    
loc_9DC5:
    mov     dword ptr [r13+8], 3F50h
    mov     r8d, 1
    jmp     loc_8A40
    
loc_9DD8:
    cmp     [rsp+98h+var_74], 6
    mov     dword ptr [r13+8], 3F47h
    jnz     loc_87D0
    
loc_9DEB:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    jmp     loc_8A40
    
loc_9DF8:
    mov     r9d, [r13+18h]
    mov     rsi, r11
    mov     rdi, [r13+20h]
    sub     rsi, rax
    mov     dword ptr [rsp+98h+var_80], r10d
    mov     [rsp+98h+n+4], r11
    test    r9d, r9d
    jz      loc_9F79
    call    _crc32
    mov     r11, [rsp+98h+n+4]
    mov     r10d, dword ptr [rsp+98h+var_80]
    
loc_9E28:
    mov     esi, [r13+10h]
    mov     [r13+20h], rax
    mov     [r14+60h], rax
    mov     ecx, esi
    and     ecx, 4
    jmp     loc_8567
    
loc_9E3E:
    mov     rcx, [r13+30h]
    test    rcx, rcx
    jz      short loc_9E53
    mov     rdx, r15
    shr     rdx, 8
    and     edx, 1
    mov     [rcx], edx
    
loc_9E53:
    test    ah, 2
    jz      short loc_9E8E
    test    byte ptr [r13+10h], 4
    jz      short loc_9E8E
    mov     rdi, [r13+20h]
    lea     rsi, [rsp+98h+var_44]
    mov     byte ptr [rsp+98h+var_44], r15b
    mov     edx, 2
    shr     r15, 8
    mov     [rsp+98h+var_70], r11
    mov     byte ptr [rsp+98h+var_44+1], r15b
    call    _crc32
    mov     r11, [rsp+98h+var_70]
    mov     [r13+20h], rax
    
loc_9E8E:
    mov     dword ptr [r13+8], 3F36h
    xor     r15d, r15d
    xor     ebx, ebx
    jmp     loc_8F4D
    
loc_9EA0:
    and     edx, 0Fh
    mov     dword ptr [r13+8], 3F49h
    mov     [r13+64h], edx
    jmp     loc_885C
    
loc_9EB4:
    mov     dword ptr [r13+8Ch], 0
    mov     dword ptr [r13+8], 3F46h
    xor     r8d, r8d
    jmp     loc_8E07
    
loc_9ECF:
    mov     rdi, [r13+20h]
    lea     rsi, [rsp+98h+var_44]
    mov     byte ptr [rsp+98h+var_44], r15b
    mov     edx, 2
    shr     r15, 8
    mov     [rsp+98h+var_70], r11
    mov     byte ptr [rsp+98h+var_44+1], r15b
    xor     ebx, ebx
    xor     r15d, r15d
    call    _crc32
    mov     r11, [rsp+98h+var_70]
    mov     [r13+20h], rax
    mov     eax, [r13+18h]
    jmp     loc_9077
    
loc_9F0C:
    cmp     dword ptr [r13+8], 3F51h
    jz      loc_991F
    cmp     word ptr [r13+298h], 0
    jnz     loc_9FEB
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidCodeMis
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_9F4F:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    mov     r8d, 2
    mov     [r14+18h], r11
    mov     [r14+20h], r10d
    mov     [r14], r12
    mov     [r14+8], ebp
    mov     [r13+50h], r15
    mov     [r13+58h], ebx
    jmp     loc_91C0
    
loc_9F79:
    call    _adler32
    mov     r10d, dword ptr [rsp+98h+var_80]
    mov     r11, [rsp+98h+n+4]
    jmp     loc_9E28
    
loc_9F8D:
    mov     r9d, [r13+38h]
    test    r9d, r9d
    jnz     short loc_9F9E
    mov     dword ptr [r13+38h], 0Fh
    
loc_9F9E:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    mov     [rsp+98h+var_70], r11
    xor     ebx, ebx
    xor     r15d, r15d
    call    _crc32
    lea     rsi, [rsp+98h+var_44]
    mov     r8d, 0FFFF8B1Fh
    mov     [r13+20h], rax
    mov     edx, 2
    mov     rdi, rax
    mov     [rsp+98h+var_44], r8w
    call    _crc32
    mov     dword ptr [r13+8], 3F35h
    mov     [r13+20h], rax
    mov     r11, [rsp+98h+var_70]
    jmp     loc_91F5
    
loc_9FEB:
    lea     r10, [r13+318h]
    lea     rax, [r13+558h]
    mov     edx, dword ptr [rsp+98h+var_70]
    lea     rcx, [r13+90h]
    lea     rsi, [r13+98h]
    lea     r8, [r13+78h]
    mov     r9, r10
    mov     [r13+90h], rax
    mov     [r13+68h], rax
    mov     dword ptr [r13+78h], 9
    mov     edi, 1
    mov     [rsp+98h+var_50], r11
    mov     [rsp+98h+var_58], r10
    mov     [rsp+98h+var_68], rcx
    mov     [rsp+98h+var_60], rsi
    call    inflate_table
    test    eax, eax
    mov     r10, [rsp+98h+var_58]
    mov     r11, [rsp+98h+var_50]
    jz      loc_A103
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidLiteral_0
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_A07B:
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidBitLeng
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_A0A1:
    call    ___stack_chk_fail
    
loc_A0A6:
    cmp     ecx, 0Fh
    ja      loc_9821
    cmp     eax, ecx
    jb      loc_9821
    
loc_A0B7:
    mov     eax, 1
    xor     esi, esi
    xor     edx, edx
    shl     eax, cl
    xor     edi, edi
    mov     [rsp+98h+var_70], r11
    mov     [r13+1Ch], eax
    call    _adler32
    mov     rsi, [rsp+98h+var_80]
    and     r15d, 200h
    mov     [r13+20h], rax
    mov     r11, [rsp+98h+var_70]
    mov     [rsi+60h], rax
    jz      loc_A17D
    mov     dword ptr [r13+8], 3F3Dh
    xor     r15d, r15d
    xor     ebx, ebx
    jmp     loc_895D
    
loc_A103:
    mov     esi, [r13+84h]
    mov     rax, [r13+90h]
    lea     r8, [r13+7Ch]
    mov     edx, [r13+88h]
    mov     rcx, [rsp+98h+var_68]
    mov     r9, r10
    mov     dword ptr [r13+7Ch], 6
    mov     edi, 2
    mov     [rsp+98h+var_70], r11
    mov     [r13+70h], rax
    add     rsi, rsi
    add     rsi, [rsp+98h+var_60]
    call    inflate_table
    test    eax, eax
    mov     r8d, eax
    mov     r11, [rsp+98h+var_70]
    jz      loc_9DD8
    mov     r10d, r14d
    mov     r14, [rsp+98h+var_80]
    lea     rax, aInvalidDistanc_1
    mov     r8d, 0FFFFFFFDh
    mov     [r14+30h], rax
    mov     dword ptr [r13+8], 3F51h
    jmp     loc_8A40
    
loc_A17D:
    mov     dword ptr [r13+8], 3F3Fh
    xor     ebx, ebx
    jmp     loc_8A17
    
loc_A18C:
    mov     r10d, r14d
    xor     r8d, r8d
    mov     r14, [rsp+98h+var_80]
    xor     ebx, ebx
    xor     r15d, r15d
    jmp     loc_8A40
    
loc_A1A1:
    mov     r10d, r14d
    shr     r15, 3
    mov     r14, [rsp+98h+var_80]
    sub     ebx, 3
    mov     r12, rdx
    jmp     loc_8A40
    

<inflateEnd>:
    
    push    rbp
    push    rbx
    sub     rsp, 8
    test    rdi, rdi
    jz      short loc_A220
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_A220
    mov     rcx, [rdi+48h]
    test    rcx, rcx
    jz      short loc_A220
    mov     rbx, rdi
    call    inflateStateCheck_part_0
    test    eax, eax
    mov     ebp, eax
    jnz     short loc_A220
    mov     rdx, [rdi+38h]
    mov     rdi, [rdi+50h]
    mov     rsi, [rdx+48h]
    test    rsi, rsi
    jz      short loc_A208
    call    rcx
    mov     rcx, [rbx+48h]
    mov     rdx, [rbx+38h]
    mov     rdi, [rbx+50h]
    
loc_A208:
    mov     rsi, rdx
    call    rcx
    mov     qword ptr [rbx+38h], 0
    
loc_A215:
    add     rsp, 8
    mov     eax, ebp
    pop     rbx
    pop     rbp
    retn
    align 20h
    
loc_A220:
    mov     ebp, 0FFFFFFFEh
    jmp     short loc_A215
    

<inflateGetDictionary>:
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 8
    test    rdi, rdi
    jz      loc_A2C0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_A2C0
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_A2C0
    mov     rbx, rdx
    mov     rbp, rsi
    call    inflateStateCheck_part_0
    test    eax, eax
    mov     r13d, eax
    jnz     short loc_A2C0
    mov     r12, [rdi+38h]
    mov     edx, [r12+40h]
    test    edx, edx
    jz      short loc_A275
    test    rsi, rsi
    jnz     short loc_A290
    
loc_A275:
    test    rbx, rbx
    jz      short loc_A281
    mov     eax, [r12+40h]
    mov     [rbx], eax
    
loc_A281:
    add     rsp, 8
    mov     eax, r13d
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_A290:
    mov     esi, [r12+44h]
    mov     rdi, rbp
    sub     edx, esi
    add     rsi, [r12+48h]
    call    _memcpy
    mov     edx, [r12+44h]
    mov     edi, [r12+40h]
    mov     rsi, [r12+48h]
    sub     rdi, rdx
    add     rdi, rbp
    call    _memcpy
    jmp     short loc_A275
    
loc_A2C0:
    mov     r13d, 0FFFFFFFEh
    jmp     short loc_A281
    

<inflateSetDictionary>:
    
    test    rdi, rdi
    jz      loc_A390
    cmp     qword ptr [rdi+40h], 0
    jz      loc_A390
    cmp     qword ptr [rdi+48h], 0
    jz      loc_A390
    push    r13
    push    r12
    mov     r12, rsi
    push    rbp
    push    rbx
    mov     ebp, edx
    mov     rbx, rdi
    sub     rsp, 8
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_A380
    mov     r13, [rdi+38h]
    mov     edx, [r13+10h]
    mov     eax, [r13+8]
    test    edx, edx
    jnz     short loc_A350
    cmp     eax, 3F3Eh
    jz      short loc_A357
    
loc_A321:
    mov     esi, ebp
    mov     edx, ebp
    mov     rdi, rbx
    add     rsi, r12
    call    updatewindow
    test    eax, eax
    jnz     short loc_A3A0
    mov     dword ptr [r13+14h], 1
    
loc_A33C:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_A350:
    cmp     eax, 3F3Eh
    jnz     short loc_A380
    
loc_A357:
    xor     edx, edx
    xor     esi, esi
    xor     edi, edi
    call    _adler32
    mov     edx, ebp
    mov     rsi, r12
    mov     rdi, rax
    call    _adler32
    cmp     [r13+20h], rax
    jz      short loc_A321
    mov     eax, 0FFFFFFFDh
    jmp     short loc_A33C
    align 20h
    
loc_A380:
    mov     eax, 0FFFFFFFEh
    jmp     short loc_A33C
    align 10h
    
loc_A390:
    mov     eax, 0FFFFFFFEh
    retn
    align 20h
    
loc_A3A0:
    mov     dword ptr [r13+8], 3F52h
    mov     eax, 0FFFFFFFCh
    jmp     short loc_A33C
    

<inflateGetHeader>:
    
    test    rdi, rdi
    jz      short loc_A3E8
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_A3E8
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_A3E8
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_A3E8
    mov     rdx, [rdi+38h]
    test    byte ptr [rdx+10h], 2
    jz      short loc_A3E8
    mov     [rdx+30h], rsi
    mov     dword ptr [rsi+48h], 0
    retn
    align 8
    
loc_A3E8:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateSync>:
    
    var_34= byte ptr -34h
    var_30= qword ptr -30h
    
    
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 10h
    mov     rax, fs:28h
    mov     [rsp+38h+var_30], rax
    xor     eax, eax
    test    rdi, rdi
    jz      loc_A673
    cmp     qword ptr [rdi+40h], 0
    mov     rbx, rdi
    jz      loc_A673
    cmp     qword ptr [rdi+48h], 0
    jz      loc_A673
    call    inflateStateCheck_part_0
    test    eax, eax
    mov     r12d, eax
    jnz     loc_A673
    mov     r8d, [rdi+8]
    mov     rbp, [rdi+38h]
    test    r8d, r8d
    jz      loc_A5F0
    
loc_A44F:
    cmp     dword ptr [rbp+8], 3F53h
    jz      loc_A628
    mov     esi, [rbp+58h]
    mov     rax, [rbp+50h]
    mov     dword ptr [rbp+8], 3F53h
    mov     ecx, esi
    and     esi, 0FFFFFFF8h
    and     ecx, 7
    mov     [rbp+58h], esi
    shl     rax, cl
    cmp     esi, 7
    mov     [rbp+50h], rax
    jbe     loc_A658
    lea     r8, [rsp+38h+var_34]
    sub     esi, 8
    shr     esi, 3
    lea     rdi, [r8+1]
    mov     ecx, esi
    mov     rdx, r8
    add     rcx, rdi
    
loc_A49C:
    mov     [rdx], al
    add     rdx, 1
    shr     rax, 8
    cmp     rcx, rdx
    jnz     short loc_A49C
    mov     [rbp+50h], rax
    add     esi, 1
    mov     dword ptr [rbp+58h], 0
    xor     eax, eax
    xor     ecx, ecx
    mov     r9d, 4
    jmp     short loc_A4F0
    align 8
    
loc_A4C8:
    test    r8b, r8b
    jnz     loc_A608
    mov     edx, r9d
    sub     edx, eax
    cmp     edx, 3
    mov     eax, edx
    setbe   dl
    
loc_A4DE:
    add     ecx, 1
    mov     r8, rdi
    cmp     ecx, esi
    jnb     short loc_A518
    
loc_A4E8:
    test    dl, dl
    jz      short loc_A518
    add     rdi, 1
    
loc_A4F0:
    movzx   r8d, byte ptr [r8]
    cmp     eax, 2
    sbb     edx, edx
    not     edx
    cmp     r8b, dl
    jnz     short loc_A4C8
    add     eax, 1
    mov     r8, rdi
    cmp     eax, 3
    setbe   dl
    add     ecx, 1
    cmp     ecx, esi
    jb      short loc_A4E8
    nop     dword ptr [rax+rax+00h]
    
loc_A518:
    mov     [rbp+8Ch], eax
    mov     r8d, [rbx+8]
    mov     rdi, [rbx]
    test    r8d, r8d
    setnz   cl
    and     cl, dl
    mov     r9d, ecx
    jz      loc_A648
    
loc_A536:
    xor     edx, edx
    mov     r10d, 4
    jmp     short loc_A562
    
loc_A540:
    test    sil, sil
    jnz     loc_A618
    mov     esi, r10d
    sub     esi, eax
    cmp     esi, 3
    mov     eax, esi
    setbe   cl
    
loc_A556:
    add     edx, 1
    cmp     edx, r8d
    jnb     short loc_A588
    
loc_A55E:
    test    cl, cl
    jz      short loc_A588
    
loc_A562:
    mov     ecx, edx
    cmp     eax, 2
    movzx   esi, byte ptr [rdi+rcx]
    sbb     ecx, ecx
    not     ecx
    cmp     sil, cl
    jnz     short loc_A540
    add     eax, 1
    cmp     eax, 3
    setbe   cl
    add     edx, 1
    cmp     edx, r8d
    jb      short loc_A55E
    nop     dword ptr [rax]
    
loc_A588:
    mov     r13d, edx
    add     rdi, r13
    
loc_A58E:
    add     r13, [rbx+10h]
    mov     [rbp+8Ch], eax
    sub     [rbx+8], edx
    cmp     eax, 4
    mov     [rbx], rdi
    mov     [rbx+10h], r13
    jnz     loc_A668
    mov     r14, [rbx+28h]
    mov     rdi, rbx
    call    _inflateReset
    mov     [rbx+10h], r13
    mov     [rbx+28h], r14
    mov     dword ptr [rbp+8], 3F3Fh
    
loc_A5C6:
    mov     rbx, [rsp+38h+var_30]
    xor     rbx, fs:28h
    mov     eax, r12d
    jnz     loc_A67E
    add     rsp, 10h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 10h
    
loc_A5F0:
    cmp     dword ptr [rbp+58h], 7
    ja      loc_A44F
    mov     r12d, 0FFFFFFFBh
    jmp     short loc_A5C6
    align 8
    
loc_A608:
    mov     edx, 1
    xor     eax, eax
    jmp     loc_A4DE
    align 8
    
loc_A618:
    mov     ecx, r9d
    xor     eax, eax
    jmp     loc_A556
    align 8
    
loc_A628:
    mov     eax, [rbp+8Ch]
    mov     rdi, [rbx]
    cmp     eax, 3
    setbe   dl
    test    r8d, r8d
    setnz   cl
    and     cl, dl
    mov     r9d, ecx
    jnz     loc_A536
    
loc_A648:
    xor     r13d, r13d
    xor     edx, edx
    jmp     loc_A58E
    align 8
    
loc_A658:
    mov     edx, 1
    xor     eax, eax
    jmp     loc_A518
    align 8
    
loc_A668:
    mov     r12d, 0FFFFFFFDh
    jmp     loc_A5C6
    
loc_A673:
    mov     r12d, 0FFFFFFFEh
    jmp     loc_A5C6
    
loc_A67E:
    call    ___stack_chk_fail
    

<inflateSyncPoint>:
    
    test    rdi, rdi
    jz      short loc_A6D0
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_A6D0
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_A6D0
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_A6D0
    mov     rdx, [rdi+38h]
    cmp     dword ptr [rdx+8], 3F41h
    jz      short loc_A6C0
    rep retn
    align 20h
    
loc_A6C0:
    mov     edx, [rdx+58h]
    xor     eax, eax
    test    edx, edx
    setz    al
    retn
    align 10h
    
loc_A6D0:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateCopy>:
    
    test    rsi, rsi
    jz      loc_A898
    mov     rcx, [rsi+40h]
    test    rcx, rcx
    jz      loc_A898
    cmp     qword ptr [rsi+48h], 0
    jz      loc_A898
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbp, rdi
    mov     rdi, rsi
    mov     rbx, rsi
    sub     rsp, 8
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     loc_A8A0
    test    rbp, rbp
    jz      loc_A8A0
    mov     r13, [rsi+38h]
    mov     rdi, [rsi+50h]
    mov     edx, 1BF8h
    mov     esi, 1
    call    rcx
    test    rax, rax
    mov     r12, rax
    jz      loc_A8A7
    mov     r8, [r13+48h]
    test    r8, r8
    jz      short loc_A776
    mov     ecx, [r13+38h]
    mov     esi, 1
    mov     rdi, [rbx+50h]
    mov     edx, 1
    shl     esi, cl
    call    qword ptr [rbx+40h]
    test    rax, rax
    mov     r8, rax
    jz      loc_A880
    
loc_A776:
    movdqu  xmm0, xmmword ptr [rbx]
    lea     rdi, [r12+8]
    mov     rcx, r12
    mov     rsi, r13
    movups  xmmword ptr [rbp+0], xmm0
    and     rdi, 0FFFFFFFFFFFFFFF8h
    sub     rcx, rdi
    sub     rsi, rcx
    add     ecx, 1BF8h
    movdqu  xmm0, xmmword ptr [rbx+10h]
    shr     ecx, 3
    movups  xmmword ptr [rbp+10h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+20h]
    movups  xmmword ptr [rbp+20h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+30h]
    movups  xmmword ptr [rbp+30h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+40h]
    movups  xmmword ptr [rbp+40h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+50h]
    movups  xmmword ptr [rbp+50h], xmm0
    movdqu  xmm0, xmmword ptr [rbx+60h]
    movups  xmmword ptr [rbp+60h], xmm0
    mov     rax, [r13+0]
    mov     [r12], rax
    mov     rax, [r13+1BF0h]
    mov     [r12+1BF0h], rax
    lea     rax, [r12+558h]
    rep movsq
    lea     rcx, [r13+558h]
    mov     [r12], rbp
    mov     rdx, [r13+68h]
    cmp     rdx, rcx
    jb      short loc_A82E
    lea     rsi, [r13+1BE4h]
    cmp     rdx, rsi
    ja      short loc_A82E
    sub     rdx, rcx
    add     rdx, rax
    mov     [r12+68h], rdx
    mov     rdx, [r13+70h]
    sub     rdx, rcx
    add     rdx, rax
    mov     [r12+70h], rdx
    
loc_A82E:
    mov     rdx, [r13+90h]
    sub     rdx, rcx
    add     rax, rdx
    test    r8, r8
    mov     [r12+90h], rax
    jz      short loc_A862
    mov     ecx, [r13+38h]
    mov     rsi, [r13+48h]
    mov     edx, 1
    mov     rdi, r8
    shl     edx, cl
    call    _memcpy
    mov     r8, rax
    
loc_A862:
    mov     [r12+48h], r8
    xor     eax, eax
    mov     [rbp+38h], r12
    
loc_A86D:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_A880:
    mov     rdi, [rbx+50h]
    mov     rsi, r12
    call    qword ptr [rbx+48h]
    mov     eax, 0FFFFFFFCh
    jmp     short loc_A86D
    align 8
    
loc_A898:
    mov     eax, 0FFFFFFFEh
    retn
    align 20h
    
loc_A8A0:
    mov     eax, 0FFFFFFFEh
    jmp     short loc_A86D
    
loc_A8A7:
    mov     eax, 0FFFFFFFCh
    jmp     short loc_A86D
    

<inflateUndermine>:
    
    test    rdi, rdi
    mov     esi, 0FFFFFFFEh
    jz      short loc_A8E4
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_A8E4
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_A8E4
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_A8E4
    mov     rax, [rdi+38h]
    mov     esi, 0FFFFFFFDh
    mov     dword ptr [rax+1BE8h], 1
    
loc_A8E4:
    mov     eax, esi
    retn
    

<inflateValidate>:
    
    test    rdi, rdi
    jz      short loc_A928
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_A928
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_A928
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_A928
    mov     rcx, [rdi+38h]
    mov     edx, [rcx+10h]
    mov     edi, edx
    or      edx, 4
    and     edi, 0FFFFFFFBh
    test    esi, esi
    cmovz   edx, edi
    mov     [rcx+10h], edx
    retn
    align 8
    
loc_A928:
    mov     eax, 0FFFFFFFEh
    retn
    

<inflateMark>:
    
    test    rdi, rdi
    jz      short loc_A990
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_A990
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_A990
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_A990
    mov     rdx, [rdi+38h]
    movsxd  rax, dword ptr [rdx+1BECh]
    mov     ecx, [rdx+8]
    shl     rax, 10h
    cmp     ecx, 3F43h
    jz      short loc_A980
    cmp     ecx, 3F4Ch
    jz      short loc_A970
    rep retn
    
loc_A970:
    mov     ecx, [rdx+1BF0h]
    mov     esi, ecx
    sub     esi, [rdx+5Ch]
    add     rax, rsi
    retn
    align 20h
    
loc_A980:
    mov     edx, [rdx+5Ch]
    add     rax, rdx
    retn
    align 10h
    
loc_A990:
    mov     rax, 0FFFFFFFFFFFF0000h
    retn
    

<inflateCodesUsed>:
    
    test    rdi, rdi
    mov     rsi, 0FFFFFFFFFFFFFFFFh
    jz      short loc_A9DC
    cmp     qword ptr [rdi+40h], 0
    jz      short loc_A9DC
    cmp     qword ptr [rdi+48h], 0
    jz      short loc_A9DC
    call    inflateStateCheck_part_0
    test    eax, eax
    jnz     short loc_A9DC
    mov     rax, [rdi+38h]
    mov     rsi, [rax+90h]
    lea     rdx, [rax+558h]
    sub     rsi, rdx
    sar     rsi, 2
    
loc_A9DC:
    mov     rax, rsi
    retn
    

<inflate_table>:
    
    var_E0= qword ptr -0E0h
    var_D8= qword ptr -0D8h
    var_D0= dword ptr -0D0h
    var_CC= dword ptr -0CCh
    var_C8= qword ptr -0C8h
    var_C0= dword ptr -0C0h
    var_BC= dword ptr -0BCh
    var_B8= qword ptr -0B8h
    var_B0= qword ptr -0B0h
    var_A8= qword ptr -0A8h
    var_A0= qword ptr -0A0h
    var_98= qword ptr -98h
    var_90= dword ptr -90h
    var_8A= byte ptr -8Ah
    var_89= byte ptr -89h
    var_88= word ptr -88h
    var_86= word ptr -86h
    var_68= word ptr -68h
    var_66= word ptr -66h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    mov     r15, rsi
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 0B8h
    lea     r12, [rsp+0E8h+var_88]
    mov     [rsp+0E8h+var_C8], rcx
    mov     [rsp+0E8h+var_D8], r8
    mov     rax, fs:28h
    mov     [rsp+0E8h+var_40], rax
    xor     eax, eax
    lea     rcx, [r12+20h]
    mov     [rsp+0E8h+var_E0], r9
    mov     rax, r12
    nop     dword ptr [rax+rax+00h]
    
loc_AA28:
    xor     esi, esi
    add     rax, 2
    mov     [rax-2], si
    cmp     rcx, rax
    jnz     short loc_AA28
    test    edx, edx
    jz      short loc_AA62
    lea     esi, [rdx-1]
    mov     rcx, r15
    lea     r8, [r15+rsi*2+2]
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_AA50:
    movzx   esi, word ptr [rcx]
    add     rcx, 2
    add     [rsp+rsi*2+0E8h+var_88], 1
    cmp     r8, rcx
    jnz     short loc_AA50
    
loc_AA62:
    lea     rcx, [r12+1Eh]
    mov     esi, 0Fh
    jmp     short loc_AA7D
    align 10h
    
loc_AA70:
    sub     rcx, 2
    sub     esi, 1
    jz      loc_AB20
    
loc_AA7D:
    cmp     word ptr [rcx], 0
    jz      short loc_AA70
    cmp     esi, 1
    movzx   r11d, [rsp+0E8h+var_86]
    jz      loc_AE58
    test    r11w, r11w
    jnz     loc_AE58
    lea     r8d, [rsi-2]
    mov     ecx, 2
    add     r8, 2
    jmp     short loc_AABD
    align 10h
    
loc_AAB0:
    add     rcx, 1
    cmp     word ptr [r12+rcx*2-2], 0
    jnz     short loc_AAC5
    
loc_AABD:
    cmp     r8, rcx
    mov     r9d, ecx
    jnz     short loc_AAB0
    
loc_AAC5:
    lea     r10, [r12+4]
    movzx   r8d, r11w
    mov     ecx, 1
    jmp     short loc_AAE5
    align 8
    
loc_AAD8:
    cmp     rax, r10
    jz      short loc_AB50
    movzx   r8d, word ptr [r10]
    add     r10, 2
    
loc_AAE5:
    add     ecx, ecx
    sub     ecx, r8d
    jns     short loc_AAD8
    
loc_AAEC:
    mov     eax, 0FFFFFFFFh
    
loc_AAF1:
    mov     rsi, [rsp+0E8h+var_40]
    xor     rsi, fs:28h
    jnz     loc_AF23
    add     rsp, 0B8h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_AB20:
    mov     rsi, [rsp+0E8h+var_C8]
    mov     rax, [rsi]
    lea     rdx, [rax+8]
    mov     dword ptr [rax], 140h
    mov     [rsi], rdx
    mov     dword ptr [rax+4], 140h
    mov     rax, [rsp+0E8h+var_D8]
    mov     dword ptr [rax], 1
    xor     eax, eax
    jmp     short loc_AAF1
    align 10h
    
loc_AB50:
    test    ecx, ecx
    jz      short loc_AB5D
    test    edi, edi
    jz      short loc_AAEC
    cmp     esi, 1
    jnz     short loc_AAEC
    
loc_AB5D:
    mov     rax, [rsp+0E8h+var_D8]
    xor     ecx, ecx
    lea     r10, [rsp+0E8h+var_68]
    mov     [rsp+0E8h+var_66], cx
    xor     ecx, ecx
    mov     r8d, [rax]
    mov     eax, 4
    jmp     short loc_AB89
    
loc_AB80:
    movzx   r11d, word ptr [r12+rax]
    add     rax, 2
    
loc_AB89:
    add     ecx, r11d
    cmp     rax, 1Eh
    mov     [r10+rax], cx
    jnz     short loc_AB80
    test    edx, edx
    jz      short loc_ABDC
    lea     r10d, [rdx-1]
    mov     rbx, [rsp+0E8h+var_E0]
    xor     eax, eax
    add     r10, 1
    nop     word ptr [rax+rax+00h]
    
loc_ABB0:
    movzx   edx, word ptr [r15+rax*2]
    test    dx, dx
    jz      short loc_ABD3
    movzx   ecx, [rsp+rdx*2+0E8h+var_68]
    lea     r11d, [rcx+1]
    mov     [rbx+rcx*2], ax
    mov     [rsp+rdx*2+0E8h+var_68], r11w
    
loc_ABD3:
    add     rax, 1
    cmp     r10, rax
    jnz     short loc_ABB0
    
loc_ABDC:
    cmp     r8d, esi
    mov     eax, 1
    cmova   r8d, esi
    cmp     r8d, r9d
    cmovb   r8d, r9d
    mov     ecx, r8d
    mov     [rsp+0E8h+var_D0], r8d
    shl     eax, cl
    test    edi, edi
    jz      short loc_AC1B
    cmp     edi, 1
    jnz     loc_AE76
    cmp     eax, 354h
    jbe     loc_AEF4
    
loc_AC11:
    mov     eax, 1
    jmp     loc_AAF1
    
loc_AC1B:
    mov     rbx, [rsp+0E8h+var_E0]
    mov     [rsp+0E8h+var_CC], 14h
    mov     [rsp+0E8h+var_8A], 0
    mov     [rsp+0E8h+var_B0], rbx
    mov     [rsp+0E8h+var_A8], rbx
    
loc_AC37:
    cmp     edi, 1
    setz    [rsp+0E8h+var_89]
    
loc_AC3F:
    mov     rdi, [rsp+0E8h+var_C8]
    mov     r13d, [rsp+0E8h+var_D0]
    xor     ebx, ebx
    mov     [rsp+0E8h+var_C0], eax
    sub     eax, 1
    mov     [rsp+0E8h+var_98], r12
    mov     [rsp+0E8h+var_BC], 0FFFFFFFFh
    xor     r14d, r14d
    mov     [rsp+0E8h+var_90], eax
    mov     rdi, [rdi]
    mov     [rsp+0E8h+var_B8], r15
    mov     r12d, ebx
    mov     [rsp+0E8h+var_A0], rdi
    mov     rbp, rdi
    xor     edi, edi
    nop     dword ptr [rax+rax+00h]
    
loc_AC80:
    mov     rbx, [rsp+0E8h+var_E0]
    mov     eax, r12d
    mov     r11d, r9d
    sub     r11d, r14d
    xor     r10d, r10d
    movzx   eax, word ptr [rbx+rax*2]
    mov     ebx, [rsp+0E8h+var_CC]
    lea     edx, [rax+1]
    mov     r8d, eax
    cmp     edx, ebx
    jb      short loc_ACC1
    cmp     eax, ebx
    jb      loc_AE68
    sub     eax, ebx
    mov     rbx, [rsp+0E8h+var_B0]
    movzx   r10d, byte ptr [rbx+rax*2]
    mov     rbx, [rsp+0E8h+var_A8]
    movzx   r8d, word ptr [rbx+rax*2]
    
loc_ACC1:
    mov     ecx, r9d
    mov     ebx, 1
    mov     r15d, 1
    sub     ecx, r14d
    mov     eax, edi
    shl     ebx, cl
    mov     ecx, r13d
    shl     r15d, cl
    mov     ecx, r14d
    shr     eax, cl
    mov     ecx, eax
    mov     eax, r15d
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_ACF0:
    sub     eax, ebx
    lea     edx, [rcx+rax]
    test    eax, eax
    lea     rdx, [rbp+rdx*4+0]
    mov     [rdx], r10b
    mov     [rdx+1], r11b
    mov     [rdx+2], r8w
    jnz     short loc_ACF0
    lea     ecx, [r9-1]
    mov     eax, 1
    shl     eax, cl
    test    edi, eax
    jz      short loc_AD26
    nop     dword ptr [rax+00000000h]
    
loc_AD20:
    shr     eax, 1
    test    edi, eax
    jnz     short loc_AD20
    
loc_AD26:
    test    eax, eax
    jz      short loc_AD31
    lea     edx, [rax-1]
    and     edi, edx
    add     eax, edi
    
loc_AD31:
    mov     ecx, r9d
    add     r12d, 1
    movzx   ebx, [rsp+rcx*2+0E8h+var_88]
    lea     edx, [rbx-1]
    test    dx, dx
    mov     [rsp+rcx*2+0E8h+var_88], dx
    jnz     short loc_AD69
    cmp     r9d, esi
    jz      loc_AEB7
    mov     rbx, [rsp+0E8h+var_E0]
    mov     edx, r12d
    movzx   edx, word ptr [rbx+rdx*2]
    mov     rbx, [rsp+0E8h+var_B8]
    movzx   r9d, word ptr [rbx+rdx*2]
    
loc_AD69:
    mov     ebx, [rsp+0E8h+var_D0]
    cmp     ebx, r9d
    jnb     loc_AE51
    mov     edx, [rsp+0E8h+var_90]
    and     edx, eax
    cmp     edx, [rsp+0E8h+var_BC]
    jz      loc_AE51
    test    r14d, r14d
    mov     r13d, r9d
    lea     rbp, [rbp+r15*4+0]
    cmovz   r14d, ebx
    mov     ebx, 1
    sub     r13d, r14d
    mov     ecx, r13d
    shl     ebx, cl
    cmp     r9d, esi
    mov     ecx, ebx
    jnb     short loc_ADEE
    mov     edi, r9d
    movzx   edi, [rsp+rdi*2+0E8h+var_88]
    sub     ecx, edi
    test    ecx, ecx
    jle     short loc_ADEE
    mov     rbx, [rsp+0E8h+var_98]
    lea     edi, [r14+r13+1]
    lea     rdi, [rbx+rdi*2]
    jmp     short loc_ADDF
    align 10h
    
loc_ADD0:
    movzx   r8d, word ptr [rdi]
    add     rdi, 2
    sub     ecx, r8d
    test    ecx, ecx
    jle     short loc_ADEE
    
loc_ADDF:
    add     r13d, 1
    add     ecx, ecx
    lea     r8d, [r14+r13]
    cmp     r8d, esi
    jb      short loc_ADD0
    
loc_ADEE:
    mov     ebx, 1
    mov     ecx, r13d
    shl     ebx, cl
    add     [rsp+0E8h+var_C0], ebx
    mov     ebx, [rsp+0E8h+var_C0]
    cmp     ebx, 354h
    jbe     short loc_AE13
    cmp     [rsp+0E8h+var_89], 0
    jnz     loc_AC11
    
loc_AE13:
    cmp     [rsp+0E8h+var_C0], 250h
    jbe     short loc_AE28
    cmp     [rsp+0E8h+var_8A], 0
    jnz     loc_AC11
    
loc_AE28:
    mov     rbx, [rsp+0E8h+var_A0]
    movzx   edi, byte ptr [rsp+0E8h+var_D0]
    mov     ecx, edx
    mov     [rsp+0E8h+var_BC], edx
    lea     rcx, [rbx+rcx*4]
    mov     [rcx+1], dil
    mov     rdi, rbp
    mov     [rcx], r13b
    sub     rdi, rbx
    sar     rdi, 2
    mov     [rcx+2], di
    
loc_AE51:
    mov     edi, eax
    jmp     loc_AC80
    
loc_AE58:
    mov     r9d, 1
    jmp     loc_AAC5
    align 8
    
loc_AE68:
    xor     r8d, r8d
    mov     r10d, 60h
    jmp     loc_ACC1
    
loc_AE76:
    cmp     edi, 2
    setz    [rsp+0E8h+var_8A]
    cmp     eax, 250h
    movzx   ebx, [rsp+0E8h+var_8A]
    jbe     short loc_AE92
    test    bl, bl
    jnz     loc_AC11
    
loc_AE92:
    lea     rbx, dext_3973
    mov     [rsp+0E8h+var_CC], 0
    mov     [rsp+0E8h+var_B0], rbx
    lea     rbx, dbase_3972
    mov     [rsp+0E8h+var_A8], rbx
    jmp     loc_AC37
    
loc_AEB7:
    test    eax, eax
    jz      short loc_AECD
    lea     rax, [rbp+rax*4+0]
    xor     edx, edx
    mov     byte ptr [rax], 40h
    mov     [rax+1], r11b
    mov     [rax+2], dx
    
loc_AECD:
    mov     eax, [rsp+0E8h+var_C0]
    mov     rsi, [rsp+0E8h+var_A0]
    lea     rax, [rsi+rax*4]
    mov     rsi, [rsp+0E8h+var_C8]
    mov     [rsi], rax
    mov     rax, [rsp+0E8h+var_D8]
    mov     esi, [rsp+0E8h+var_D0]
    mov     [rax], esi
    xor     eax, eax
    jmp     loc_AAF1
    
loc_AEF4:
    lea     rdi, lext_3971
    mov     [rsp+0E8h+var_CC], 101h
    mov     [rsp+0E8h+var_89], 1
    mov     [rsp+0E8h+var_8A], 0
    mov     [rsp+0E8h+var_B0], rdi
    lea     rdi, lbase_3970
    mov     [rsp+0E8h+var_A8], rdi
    jmp     loc_AC3F
    
loc_AF23:
    call    ___stack_chk_fail
    

<pqdownheap>:
    
    mov     r11d, [rdi+14B4h]
    movsxd  r10, edx
    add     edx, edx
    push    r15
    push    r14
    push    r13
    push    r12
    cmp     edx, r11d
    push    rbp
    push    rbx
    mov     r13d, [rdi+r10*4+0BC0h]
    jg      short loc_AFCD
    movsxd  r12, r13d
    movzx   ebp, word ptr [rsi+r12*4]
    jmp     short loc_AF73
    align 20h
    
loc_AF60:
    lea     edx, [rax+rax]
    mov     [rdi+r10*4+0BC0h], ecx
    movsxd  r10, eax
    cmp     edx, r11d
    jg      short loc_AFCD
    
loc_AF73:
    movsxd  rax, edx
    cmp     r11d, edx
    lea     r9, [rdi+rax*4]
    mov     eax, edx
    movsxd  rbx, dword ptr [r9+0BC0h]
    mov     rcx, rbx
    movzx   r8d, word ptr [rsi+rbx*4]
    jle     short loc_AFB0
    movsxd  r15, dword ptr [r9+0BC4h]
    add     eax, 1
    movzx   r14d, word ptr [rsi+r15*4]
    cmp     r14w, r8w
    jb      short loc_AFE0
    jz      short loc_AFF0
    mov     eax, edx
    nop     dword ptr [rax+00000000h]
    
loc_AFB0:
    cmp     bp, r8w
    jb      short loc_AFCD
    jnz     short loc_AF60
    movsxd  rdx, ecx
    movzx   ebx, byte ptr [rdi+rdx+14BCh]
    cmp     [rdi+r12+14BCh], bl
    ja      short loc_AF60
    
loc_AFCD:
    mov     [rdi+r10*4+0BC0h], r13d
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_AFE0:
    mov     r8d, r14d
    mov     ecx, r15d
    jmp     short loc_AFB0
    align 10h
    
loc_AFF0:
    movzx   r14d, byte ptr [rdi+r15+14BCh]
    cmp     r14b, [rdi+rbx+14BCh]
    cmova   eax, edx
    cmovbe  ecx, r15d
    jmp     short loc_AFB0
    

<build_tree>:
    
    var_80= qword ptr -80h
    var_78= qword ptr -78h
    var_70= qword ptr -70h
    var_68= word ptr -68h
    var_66= byte ptr -66h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 58h
    mov     rax, [rsi+10h]
    mov     rbp, [rsi]
    mov     [rsp+88h+var_80], rsi
    mov     rdi, fs:28h
    mov     [rsp+88h+var_40], rdi
    xor     edi, edi
    mov     r13d, [rax+14h]
    mov     rsi, [rax]
    mov     rax, 23D00000000h
    mov     [rbx+14B4h], rax
    test    r13d, r13d
    jle     loc_B57E
    lea     edi, [r13-1]
    xor     eax, eax
    xor     edx, edx
    mov     r12d, 0FFFFFFFFh
    add     rdi, 1
    jmp     short loc_B09F
    align 8
    
loc_B078:
    add     edx, 1
    mov     r12d, eax
    movsxd  rcx, edx
    mov     [rbx+14B4h], edx
    mov     [rbx+rcx*4+0BC0h], eax
    mov     byte ptr [rbx+rax+14BCh], 0
    add     rax, 1
    cmp     rdi, rax
    jz      short loc_B0B9
    
loc_B09F:
    cmp     word ptr [rbp+rax*4+0], 0
    jnz     short loc_B078
    xor     r15d, r15d
    mov     [rbp+rax*4+2], r15w
    add     rax, 1
    cmp     rdi, rax
    jnz     short loc_B09F
    
loc_B0B9:
    movsxd  rax, edx
    add     edx, 1
    movsxd  rdx, edx
    sub     rdx, rax
    lea     r10, [rbx+rdx*4]
    jmp     short loc_B119
    align 10h
    
loc_B0D0:
    mov     rdi, rbp
    xor     ecx, ecx
    xor     edx, edx
    
loc_B0D7:
    lea     r8d, [rax+1]
    mov     r14d, 1
    mov     [rbx+14B4h], r8d
    mov     [r10+rax*4+0BC0h], edx
    mov     [rdi], r14w
    mov     byte ptr [rbx+rdx+14BCh], 0
    sub     qword ptr [rbx+1718h], 1
    test    rsi, rsi
    jz      short loc_B115
    movzx   edx, word ptr [rsi+rcx+2]
    sub     [rbx+1720h], rdx
    
loc_B115:
    add     rax, 1
    
loc_B119:
    cmp     eax, 1
    mov     r14d, eax
    jg      short loc_B140
    cmp     r12d, 1
    jg      short loc_B0D0
    add     r12d, 1
    movsxd  rcx, r12d
    movsxd  rdx, r12d
    shl     rcx, 2
    lea     rdi, [rbp+rcx+0]
    jmp     short loc_B0D7
    align 20h
    
loc_B140:
    mov     rax, [rsp+88h+var_80]
    sar     r14d, 1
    mov     [rax+8], r12d
    nop     dword ptr [rax+00h]
    
loc_B150:
    mov     edx, r14d
    mov     rsi, rbp
    mov     rdi, rbx
    call    pqdownheap
    sub     r14d, 1
    jnz     short loc_B150
    movsxd  rax, dword ptr [rbx+14B4h]
    movsxd  r14, r13d
    jmp     short loc_B173
    
loc_B170:
    mov     r13d, r15d
    
loc_B173:
    lea     edx, [rax-1]
    mov     eax, [rbx+rax*4+0BC0h]
    movsxd  r15, dword ptr [rbx+0BC4h]
    mov     rsi, rbp
    mov     rdi, rbx
    mov     [rbx+14B4h], edx
    mov     edx, 1
    mov     [rbx+0BC4h], eax
    call    pqdownheap
    movsxd  rcx, dword ptr [rbx+14B8h]
    movsxd  rax, dword ptr [rbx+0BC4h]
    mov     rdx, rcx
    lea     rcx, [rbx+rcx*4]
    lea     rsi, [rbp+rax*4+0]
    sub     edx, 2
    mov     [rcx+0BBCh], r15d
    mov     [rbx+14B8h], edx
    mov     [rcx+0BB8h], eax
    lea     rcx, [rbp+r15*4+0]
    movzx   edx, word ptr [rsi]
    add     dx, [rcx]
    mov     [rbp+r14*4+0], dx
    movzx   edi, byte ptr [rbx+r15+14BCh]
    lea     r15d, [r13+1]
    movzx   edx, byte ptr [rbx+rax+14BCh]
    lea     r8d, [rdi+1]
    lea     eax, [rdx+1]
    cmp     dil, dl
    mov     edx, 1
    mov     rdi, rbx
    cmovnb  eax, r8d
    mov     [rbx+r14+14BCh], al
    mov     [rsi+2], r13w
    mov     rsi, rbp
    mov     [rcx+2], r13w
    mov     [rbx+0BC4h], r13d
    add     r14, 1
    call    pqdownheap
    movsxd  rax, dword ptr [rbx+14B4h]
    cmp     eax, 1
    jg      loc_B170
    mov     ecx, [rbx+14B8h]
    movsxd  r9, dword ptr [rbx+0BC4h]
    lea     r10, [rbx+0BA0h]
    lea     rdx, [rbx+0BC0h]
    lea     eax, [rcx-1]
    mov     [rbx+14B8h], eax
    cdqe
    mov     [rbx+rax*4+0BC0h], r9d
    mov     rax, [rsp+88h+var_80]
    mov     rdi, [rax]
    mov     r8d, [rax+8]
    mov     rax, [rax+10h]
    mov     rsi, [rax+8]
    mov     r15, [rax]
    mov     [rsp+88h+var_80], rsi
    mov     esi, [rax+10h]
    mov     r11d, esi
    mov     esi, [rax+18h]
    mov     rax, r10
    nop     word ptr [rax+rax+00000000h]
    
loc_B2A0:
    xor     r13d, r13d
    add     rax, 2
    mov     [rax-2], r13w
    cmp     rdx, rax
    jnz     short loc_B2A0
    xor     eax, eax
    cmp     ecx, 23Ch
    mov     [rdi+r9*4+2], ax
    jg      loc_B458
    mov     eax, 23Ch
    movsxd  rdx, ecx
    mov     [rsp+88h+var_78], rbp
    sub     eax, ecx
    lea     r9, [rbx+rdx*4]
    mov     [rsp+88h+var_70], r10
    add     rax, rdx
    xor     r13d, r13d
    mov     r10d, r11d
    lea     rax, [rbx+rax*4+4]
    mov     rbp, rax
    xchg    ax, ax
    
loc_B2F0:
    movsxd  rcx, dword ptr [r9+0BC0h]
    mov     rdx, rcx
    shl     rcx, 2
    lea     r11, [rdi+rcx]
    movzx   eax, word ptr [r11+2]
    movzx   eax, word ptr [rdi+rax*4+2]
    add     eax, 1
    cmp     esi, eax
    jge     short loc_B319
    add     r13d, 1
    mov     eax, esi
    
loc_B319:
    cmp     r8d, edx
    mov     [r11+2], ax
    jl      short loc_B374
    movsxd  r14, eax
    add     word ptr [rbx+r14*2+0BA0h], 1
    xor     r14d, r14d
    cmp     r10d, edx
    jg      short loc_B34A
    mov     r14, [rsp+88h+var_80]
    sub     edx, r10d
    movsxd  rdx, edx
    mov     r14d, [r14+rdx*4]
    add     eax, r14d
    
loc_B34A:
    movzx   edx, word ptr [r11]
    mov     eax, eax
    imul    rax, rdx
    add     [rbx+1718h], rax
    test    r15, r15
    jz      short loc_B374
    movzx   eax, word ptr [r15+rcx+2]
    add     eax, r14d
    imul    rdx, rax
    add     [rbx+1720h], rdx
    
loc_B374:
    add     r9, 4
    cmp     rbp, r9
    jnz     loc_B2F0
    test    r13d, r13d
    mov     rbp, [rsp+88h+var_78]
    mov     r10, [rsp+88h+var_70]
    jz      loc_B458
    lea     r14d, [r13-2]
    sub     r13d, 1
    movsxd  r15, esi
    and     r13d, 0FFFFFFFEh
    lea     ecx, [rsi-2]
    mov     [rsp+88h+var_80], rdi
    mov     eax, r14d
    mov     dword ptr [rsp+88h+var_78], r8d
    lea     r11d, [rsi-1]
    sub     eax, r13d
    lea     r13, [rbx+r15*2]
    mov     r8d, ecx
    mov     edi, eax
    mov     r9, r15
    movzx   edx, word ptr [r13+0B9Eh]
    test    dx, dx
    jnz     short loc_B42F
    nop     dword ptr [rax+rax+00h]
    
loc_B3D8:
    movsxd  rax, r8d
    nop     dword ptr [rax+rax+00h]
    
loc_B3E0:
    movsxd  rcx, eax
    sub     rax, 1
    movzx   edx, word ptr [rbx+rax*2+0BA2h]
    test    dx, dx
    jz      short loc_B3E0
    lea     eax, [rcx+1]
    
loc_B3F7:
    sub     edx, 1
    cdqe
    mov     [rbx+rcx*2+0BA0h], dx
    add     word ptr [rbx+rax*2+0BA0h], 2
    sub     word ptr [r13+0BA0h], 1
    cmp     r14d, edi
    jz      short loc_B440
    movzx   edx, word ptr [r13+0B9Eh]
    sub     r14d, 2
    mov     r9, r15
    test    dx, dx
    jz      short loc_B3D8
    
loc_B42F:
    mov     eax, esi
    movsxd  rcx, r11d
    jmp     short loc_B3F7
    align 20h
    
loc_B440:
    test    esi, esi
    mov     rdi, [rsp+88h+var_80]
    mov     r8d, dword ptr [rsp+88h+var_78]
    jnz     loc_B4F8
    nop     word ptr [rax+rax+00h]
    
loc_B458:
    lea     rsi, [rsp+88h+var_66]
    xor     ecx, ecx
    xor     eax, eax
    nop     dword ptr [rax+00000000h]
    
loc_B468:
    movzx   edx, word ptr [r10+rcx]
    add     eax, edx
    add     eax, eax
    mov     [rsi+rcx], ax
    add     rcx, 2
    cmp     rcx, 1Eh
    jnz     short loc_B468
    cmp     r12d, 0FFFFFFFFh
    jz      short loc_B4CE
    movsxd  r12, r12d
    lea     rdi, [rbp+r12*4+4]
    nop     dword ptr [rax]
    
loc_B490:
    movzx   edx, word ptr [rbp+2]
    test    edx, edx
    jz      short loc_B4C5
    movsxd  rax, edx
    movzx   ecx, [rsp+rax*2+88h+var_68]
    lea     esi, [rcx+1]
    mov     [rsp+rax*2+88h+var_68], si
    xor     esi, esi
    nop     word ptr [rax+rax+00h]
    
loc_B4B0:
    mov     eax, ecx
    shr     ecx, 1
    and     eax, 1
    or      eax, esi
    sub     edx, 1
    lea     esi, [rax+rax]
    jnz     short loc_B4B0
    mov     [rbp+0], ax
    
loc_B4C5:
    add     rbp, 4
    cmp     rdi, rbp
    jnz     short loc_B490
    
loc_B4CE:
    mov     rax, [rsp+88h+var_40]
    xor     rax, fs:28h
    jnz     loc_B58B
    add     rsp, 58h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_B4F8:
    mov     ecx, 23Dh
    nop     dword ptr [rax]
    
loc_B500:
    movzx   r13d, word ptr [rbx+r9*2+0BA0h]
    test    r13d, r13d
    jz      short loc_B55F
    lea     eax, [rcx-1]
    cdqe
    nop     dword ptr [rax+rax+00h]
    
loc_B518:
    movsxd  rdx, dword ptr [rbx+rax*4+0BC0h]
    mov     ecx, eax
    cmp     r8d, edx
    jl      short loc_B578
    lea     r14, [rdi+rdx*4]
    movzx   r15d, word ptr [r14+2]
    cmp     r15d, esi
    mov     rdx, r15
    jz      short loc_B555
    mov     r15, r9
    sub     r15, rdx
    mov     rdx, r15
    movzx   r15d, word ptr [r14]
    imul    rdx, r15
    add     [rbx+1718h], rdx
    mov     [r14+2], si
    
loc_B555:
    sub     rax, 1
    sub     r13d, 1
    jnz     short loc_B518
    
loc_B55F:
    sub     r9, 1
    test    r11d, r11d
    mov     esi, r11d
    jz      loc_B458
    sub     r11d, 1
    jmp     short loc_B500
    align 8
    
loc_B578:
    sub     rax, 1
    jmp     short loc_B518
    
loc_B57E:
    xor     edx, edx
    mov     r12d, 0FFFFFFFFh
    jmp     loc_B0B9
    
loc_B58B:
    call    ___stack_chk_fail
    

<scan_tree>:
    
    movzx   ecx, word ptr [rsi+2]
    movsxd  rax, edx
    mov     r10d, 0FFFFFFFFh
    mov     [rsi+rax*4+6], r10w
    cmp     ecx, 1
    sbb     r9d, r9d
    add     r9d, 4
    cmp     ecx, 1
    sbb     r8d, r8d
    and     r8d, 83h
    add     r8d, 7
    test    edx, edx
    js      locret_B665
    lea     r11, [rsi+rax*4+0Ah]
    lea     rdx, [rsi+6]
    xor     eax, eax
    mov     r10d, 0FFFFFFFFh
    jmp     short loc_B625
    align 20h
    
loc_B5E0:
    test    ecx, ecx
    jz      loc_B670
    cmp     ecx, r10d
    jz      short loc_B5F9
    movsxd  rax, ecx
    add     word ptr [rdi+rax*4+0ABCh], 1
    
loc_B5F9:
    add     word ptr [rdi+0AFCh], 1
    
loc_B601:
    test    esi, esi
    jz      short loc_B649
    
loc_B605:
    cmp     esi, ecx
    jz      short loc_B680
    mov     r10d, ecx
    mov     r9d, 4
    mov     r8d, 7
    xor     eax, eax
    
loc_B61A:
    add     rdx, 4
    mov     ecx, esi
    cmp     r11, rdx
    jz      short locret_B665
    
loc_B625:
    add     eax, 1
    movzx   esi, word ptr [rdx]
    cmp     eax, r8d
    jge     short loc_B5E0
    cmp     esi, ecx
    jz      short loc_B61A
    cmp     eax, r9d
    jge     short loc_B5E0
    movsxd  r8, ecx
    add     [rdi+r8*4+0ABCh], ax
    test    esi, esi
    jnz     short loc_B605
    
loc_B649:
    add     rdx, 4
    xor     eax, eax
    mov     r10d, ecx
    cmp     r11, rdx
    mov     r9d, 3
    mov     r8d, 8Ah
    mov     ecx, esi
    jnz     short loc_B625
    
locret_B665:
    rep retn
    align 10h
    
loc_B670:
    cmp     eax, 0Ah
    jg      short loc_B698
    add     word ptr [rdi+0B00h], 1
    jmp     short loc_B601
    align 20h
    
loc_B680:
    mov     r10d, esi
    mov     r9d, 3
    mov     r8d, 6
    xor     eax, eax
    jmp     short loc_B61A
    align 8
    
loc_B698:
    add     word ptr [rdi+0B04h], 1
    jmp     loc_B601
    

<send_tree>:
    
    movzx   r9d, word ptr [rsi+2]
    cmp     r9d, 1
    sbb     r10d, r10d
    add     r10d, 4
    cmp     r9d, 1
    sbb     ecx, ecx
    and     ecx, 83h
    add     ecx, 7
    test    edx, edx
    js      locret_BC88
    push    r14
    movsxd  rdx, edx
    push    r13
    lea     r11, [rsi+6]
    push    r12
    push    rbp
    push    rbx
    lea     rbp, [rsi+rdx*4+0Ah]
    mov     r12d, 0FFFFFFFFh
    xor     edx, edx
    mov     r8d, 10h
    nop     dword ptr [rax+00000000h]
    
loc_B700:
    lea     eax, [rdx+1]
    movzx   ebx, word ptr [r11]
    cmp     eax, ecx
    jge     loc_B808
    cmp     ebx, r9d
    jz      loc_BBB0
    cmp     eax, r10d
    jge     loc_B808
    movsxd  rdx, r9d
    lea     r10, [rdi+rdx*4]
    jmp     short loc_B785
    align 10h
    
loc_B730:
    mov     rcx, [rdi+28h]
    mov     rsi, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [rsi+rcx], dl
    mov     rdx, [rdi+28h]
    movzx   esi, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r14, [rdx+1]
    mov     [rdi+28h], r14
    mov     [rcx+rdx], sil
    mov     ecx, r8d
    mov     esi, [rdi+1734h]
    mov     edx, r13d
    sub     ecx, esi
    sar     edx, cl
    sub     eax, 1
    mov     [rdi+1730h], dx
    lea     edx, [rsi+r12-10h]
    mov     [rdi+1734h], edx
    jz      short loc_B7CA
    
loc_B785:
    movzx   r13d, word ptr [r10+0ABCh]
    mov     ecx, [rdi+1734h]
    mov     esi, r8d
    movzx   r12d, word ptr [r10+0ABEh]
    mov     edx, r13d
    shl     edx, cl
    or      dx, [rdi+1730h]
    sub     esi, r12d
    cmp     ecx, esi
    mov     [rdi+1730h], dx
    jg      loc_B730
    add     ecx, r12d
    sub     eax, 1
    mov     [rdi+1734h], ecx
    jnz     short loc_B785
    
loc_B7CA:
    test    ebx, ebx
    jz      loc_B9A8
    
loc_B7D2:
    cmp     ebx, r9d
    jz      loc_BAC0
    mov     r12d, r9d
    mov     r10d, 4
    mov     ecx, 7
    xor     edx, edx
    
loc_B7EB:
    add     r11, 4
    mov     r9d, ebx
    cmp     rbp, r11
    jnz     loc_B700
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 8
    
loc_B808:
    test    r9d, r9d
    mov     ecx, [rdi+1734h]
    movzx   esi, word ptr [rdi+1730h]
    jz      loc_B9C0
    cmp     r9d, r12d
    jz      loc_B8B1
    movsxd  rax, r9d
    lea     rax, [rdi+rax*4]
    movzx   r10d, word ptr [rax+0ABEh]
    movzx   eax, word ptr [rax+0ABCh]
    mov     r12d, eax
    shl     r12d, cl
    or      esi, r12d
    mov     r12d, r8d
    sub     r12d, r10d
    mov     [rdi+1730h], si
    cmp     r12d, ecx
    jge     loc_BBC0
    mov     rcx, [rdi+28h]
    mov     r12, [rdi+10h]
    lea     r13, [rcx+1]
    mov     [rdi+28h], r13
    mov     [r12+rcx], sil
    mov     rcx, [rdi+28h]
    movzx   r12d, byte ptr [rdi+1731h]
    mov     rsi, [rdi+10h]
    lea     r13, [rcx+1]
    mov     [rdi+28h], r13
    mov     [rsi+rcx], r12b
    mov     ecx, r8d
    mov     r12d, [rdi+1734h]
    sub     ecx, r12d
    sar     eax, cl
    lea     ecx, [r12+r10-10h]
    mov     esi, eax
    mov     [rdi+1730h], ax
    mov     eax, edx
    mov     [rdi+1734h], ecx
    
loc_B8B1:
    movzx   r10d, word ptr [rdi+0AFCh]
    movzx   edx, word ptr [rdi+0AFEh]
    mov     r12d, r10d
    shl     r12d, cl
    or      esi, r12d
    mov     r12d, r8d
    sub     r12d, edx
    mov     [rdi+1730h], si
    cmp     r12d, ecx
    jge     loc_BBA0
    mov     rcx, [rdi+28h]
    mov     r12, [rdi+10h]
    lea     r13, [rcx+1]
    mov     [rdi+28h], r13
    mov     [r12+rcx], sil
    mov     rcx, [rdi+28h]
    movzx   r12d, byte ptr [rdi+1731h]
    mov     rsi, [rdi+10h]
    lea     r13, [rcx+1]
    mov     [rdi+28h], r13
    mov     [rsi+rcx], r12b
    mov     ecx, r8d
    mov     r12d, [rdi+1734h]
    sub     ecx, r12d
    sar     r10d, cl
    lea     ecx, [r12+rdx-10h]
    mov     esi, r10d
    mov     [rdi+1730h], r10w
    mov     [rdi+1734h], ecx
    
loc_B935:
    sub     eax, 3
    cmp     ecx, 0Eh
    movzx   eax, ax
    jle     loc_BB80
    mov     edx, eax
    shl     edx, cl
    mov     rcx, [rdi+10h]
    or      esi, edx
    mov     rdx, [rdi+28h]
    mov     [rdi+1730h], si
    lea     r10, [rdx+1]
    mov     [rdi+28h], r10
    mov     [rcx+rdx], sil
    mov     rdx, [rdi+28h]
    movzx   esi, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r10, [rdx+1]
    mov     [rdi+28h], r10
    mov     [rcx+rdx], sil
    mov     ecx, r8d
    mov     edx, [rdi+1734h]
    sub     ecx, edx
    sub     edx, 0Eh
    sar     eax, cl
    test    ebx, ebx
    mov     [rdi+1734h], edx
    mov     [rdi+1730h], ax
    jnz     loc_B7D2
    nop     dword ptr [rax]
    
loc_B9A8:
    xor     edx, edx
    mov     r12d, r9d
    mov     r10d, 3
    mov     ecx, 8Ah
    jmp     loc_B7EB
    align 20h
    
loc_B9C0:
    cmp     eax, 0Ah
    jg      loc_BAD8
    movzx   r12d, word ptr [rdi+0B00h]
    movzx   r10d, word ptr [rdi+0B02h]
    mov     r13d, r12d
    shl     r13d, cl
    or      esi, r13d
    mov     r13d, r8d
    sub     r13d, r10d
    mov     [rdi+1730h], si
    cmp     r13d, ecx
    jge     loc_BC50
    mov     rcx, [rdi+28h]
    mov     r13, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r13+rcx+0], sil
    mov     rcx, [rdi+28h]
    movzx   r13d, byte ptr [rdi+1731h]
    mov     rsi, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [rsi+rcx], r13b
    mov     ecx, r8d
    mov     r13d, [rdi+1734h]
    sub     ecx, r13d
    sar     r12d, cl
    lea     ecx, [r13+r10-10h]
    mov     esi, r12d
    mov     [rdi+1730h], r12w
    cmp     ecx, 0Dh
    mov     [rdi+1734h], ecx
    jle     loc_BC62
    
loc_BA58:
    sub     edx, 2
    movzx   edx, dx
    mov     eax, edx
    shl     eax, cl
    mov     rcx, [rdi+10h]
    or      esi, eax
    mov     rax, [rdi+28h]
    mov     [rdi+1730h], si
    lea     r10, [rax+1]
    mov     [rdi+28h], r10
    mov     [rcx+rax], sil
    mov     rax, [rdi+28h]
    movzx   esi, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r10, [rax+1]
    mov     [rdi+28h], r10
    mov     [rcx+rax], sil
    mov     ecx, r8d
    mov     eax, [rdi+1734h]
    sub     ecx, eax
    sub     eax, 0Dh
    sar     edx, cl
    mov     [rdi+1734h], eax
    mov     [rdi+1730h], dx
    jmp     loc_B7CA
    align 20h
    
loc_BAC0:
    mov     r12d, ebx
    mov     r10d, 3
    mov     ecx, 6
    xor     edx, edx
    jmp     loc_B7EB
    align 8
    
loc_BAD8:
    movzx   r12d, word ptr [rdi+0B04h]
    movzx   r10d, word ptr [rdi+0B06h]
    mov     r13d, r12d
    shl     r13d, cl
    or      esi, r13d
    mov     r13d, r8d
    sub     r13d, r10d
    mov     [rdi+1730h], si
    cmp     r13d, ecx
    jl      loc_BBD0
    add     ecx, r10d
    cmp     ecx, 9
    mov     [rdi+1734h], ecx
    jle     loc_BC30
    
loc_BB19:
    sub     edx, 0Ah
    movzx   edx, dx
    mov     eax, edx
    shl     eax, cl
    mov     rcx, [rdi+10h]
    or      esi, eax
    mov     rax, [rdi+28h]
    mov     [rdi+1730h], si
    lea     r10, [rax+1]
    mov     [rdi+28h], r10
    mov     [rcx+rax], sil
    mov     rax, [rdi+28h]
    movzx   esi, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r10, [rax+1]
    mov     [rdi+28h], r10
    mov     [rcx+rax], sil
    mov     ecx, r8d
    mov     eax, [rdi+1734h]
    sub     ecx, eax
    sub     eax, 9
    sar     edx, cl
    mov     [rdi+1734h], eax
    mov     [rdi+1730h], dx
    jmp     loc_B7CA
    align 20h
    
loc_BB80:
    shl     eax, cl
    add     ecx, 2
    or      esi, eax
    mov     [rdi+1734h], ecx
    mov     [rdi+1730h], si
    jmp     loc_B7CA
    align 20h
    
loc_BBA0:
    add     ecx, edx
    mov     [rdi+1734h], ecx
    jmp     loc_B935
    align 10h
    
loc_BBB0:
    mov     edx, eax
    jmp     loc_B7EB
    align 20h
    
loc_BBC0:
    add     ecx, r10d
    mov     eax, edx
    mov     [rdi+1734h], ecx
    jmp     loc_B8B1
    
loc_BBD0:
    mov     rcx, [rdi+28h]
    mov     r13, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r13+rcx+0], sil
    mov     rcx, [rdi+28h]
    movzx   r13d, byte ptr [rdi+1731h]
    mov     rsi, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [rsi+rcx], r13b
    mov     ecx, r8d
    mov     r13d, [rdi+1734h]
    sub     ecx, r13d
    sar     r12d, cl
    lea     ecx, [r13+r10-10h]
    mov     esi, r12d
    mov     [rdi+1730h], r12w
    cmp     ecx, 9
    mov     [rdi+1734h], ecx
    jg      loc_BB19
    
loc_BC30:
    sub     eax, 0Bh
    movzx   eax, ax
    shl     eax, cl
    add     ecx, 7
    or      esi, eax
    mov     [rdi+1734h], ecx
    mov     [rdi+1730h], si
    jmp     loc_B7CA
    align 10h
    
loc_BC50:
    add     ecx, r10d
    cmp     ecx, 0Dh
    mov     [rdi+1734h], ecx
    jg      loc_BA58
    
loc_BC62:
    sub     eax, 3
    movzx   eax, ax
    shl     eax, cl
    add     ecx, 3
    or      esi, eax
    mov     [rdi+1734h], ecx
    mov     [rdi+1730h], si
    jmp     loc_B7CA
    align 8
    
locret_BC88:
    rep retn
    

<compress_block>:
    
    mov     r8d, [rdi+170Ch]
    push    r15
    mov     ecx, [rdi+1734h]
    push    r14
    movzx   eax, word ptr [rdi+1730h]
    push    r13
    test    r8d, r8d
    push    r12
    push    rbp
    push    rbx
    jz      loc_BFE0
    xor     r11d, r11d
    lea     r13, _length_code
    mov     ebx, 10h
    jmp     loc_BD61
    align 10h
    
loc_BCD0:
    lea     r8, [rsi+r9*4]
    mov     ebp, ebx
    movzx   r9d, word ptr [r8]
    movzx   r10d, word ptr [r8+2]
    mov     r8d, r9d
    sub     ebp, r10d
    shl     r8d, cl
    or      r8d, eax
    cmp     ebp, ecx
    mov     eax, r8d
    mov     [rdi+1730h], r8w
    jge     loc_C030
    mov     rcx, [rdi+28h]
    mov     r8, [rdi+10h]
    lea     rbp, [rcx+1]
    mov     [rdi+28h], rbp
    mov     [r8+rcx], al
    mov     rax, [rdi+28h]
    movzx   r8d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     rbp, [rax+1]
    mov     [rdi+28h], rbp
    mov     [rcx+rax], r8b
    mov     ecx, ebx
    mov     ebp, [rdi+1734h]
    sub     ecx, ebp
    
loc_BD38:
    sar     r9d, cl
    lea     ecx, [r10+rbp-10h]
    mov     r8d, r9d
    mov     eax, r9d
    mov     [rdi+1730h], r9w
    mov     [rdi+1734h], ecx
    
loc_BD54:
    cmp     [rdi+170Ch], r11d
    jbe     loc_BFE3
    
loc_BD61:
    mov     r8, [rdi+1710h]
    mov     r9d, r11d
    mov     r10, [rdi+1700h]
    add     r11d, 1
    movzx   r8d, word ptr [r8+r9*2]
    movzx   r9d, byte ptr [r10+r9]
    test    r8d, r8d
    jz      loc_BCD0
    movsxd  r10, r9d
    movzx   r10d, byte ptr [r13+r10+0]
    lea     ebp, [r10+101h]
    lea     r12, [rsi+rbp*4]
    movzx   ebp, word ptr [r12+2]
    movzx   r12d, word ptr [r12]
    mov     r14d, r12d
    shl     r14d, cl
    or      eax, r14d
    mov     r14d, ebx
    sub     r14d, ebp
    mov     [rdi+1730h], ax
    cmp     r14d, ecx
    jge     loc_C040
    mov     rcx, [rdi+28h]
    mov     r14, [rdi+10h]
    lea     r15, [rcx+1]
    mov     [rdi+28h], r15
    mov     [r14+rcx], al
    mov     rax, [rdi+28h]
    movzx   r14d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r15, [rax+1]
    mov     [rdi+28h], r15
    mov     [rcx+rax], r14b
    mov     ecx, ebx
    mov     r14d, [rdi+1734h]
    sub     ecx, r14d
    sar     r12d, cl
    lea     ecx, [r14+rbp-10h]
    mov     eax, r12d
    mov     [rdi+1730h], r12w
    mov     [rdi+1734h], ecx
    
loc_BE1C:
    lea     r15, extra_lbits
    mov     ebp, [r15+r10*4]
    test    ebp, ebp
    jz      loc_BEB0
    lea     r15, base_length
    sub     r9d, [r15+r10*4]
    movzx   r9d, r9w
    mov     r10d, r9d
    shl     r10d, cl
    or      eax, r10d
    mov     r10d, ebx
    sub     r10d, ebp
    mov     [rdi+1730h], ax
    cmp     r10d, ecx
    jge     loc_C090
    mov     rcx, [rdi+28h]
    mov     r10, [rdi+10h]
    lea     r12, [rcx+1]
    mov     [rdi+28h], r12
    mov     [r10+rcx], al
    mov     rax, [rdi+28h]
    movzx   r10d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r12, [rax+1]
    mov     [rdi+28h], r12
    mov     [rcx+rax], r10b
    mov     ecx, ebx
    mov     r10d, [rdi+1734h]
    mov     eax, r9d
    sub     ecx, r10d
    sar     eax, cl
    lea     ecx, [r10+rbp-10h]
    mov     [rdi+1730h], ax
    mov     [rdi+1734h], ecx
    
loc_BEB0:
    lea     r9d, [r8-1]
    cmp     r9d, 0FFh
    ja      loc_C060
    lea     r15, _dist_code
    mov     r8d, r9d
    movzx   r10d, byte ptr [r15+r8]
    
loc_BED0:
    lea     r8, [rdx+r10*4]
    movzx   ebp, word ptr [r8+2]
    movzx   r8d, word ptr [r8]
    mov     r12d, r8d
    shl     r12d, cl
    or      eax, r12d
    mov     r12d, ebx
    sub     r12d, ebp
    mov     [rdi+1730h], ax
    cmp     r12d, ecx
    jge     loc_C050
    mov     rcx, [rdi+28h]
    mov     r12, [rdi+10h]
    lea     r14, [rcx+1]
    mov     [rdi+28h], r14
    mov     [r12+rcx], al
    mov     rax, [rdi+28h]
    movzx   r12d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r14, [rax+1]
    mov     [rdi+28h], r14
    mov     [rcx+rax], r12b
    mov     ecx, ebx
    mov     r12d, [rdi+1734h]
    sub     ecx, r12d
    sar     r8d, cl
    lea     ecx, [r12+rbp-10h]
    mov     eax, r8d
    mov     [rdi+1730h], r8w
    mov     [rdi+1734h], ecx
    
loc_BF51:
    lea     r15, extra_dbits
    mov     r8d, eax
    mov     ebp, [r15+r10*4]
    test    ebp, ebp
    jz      loc_BD54
    lea     r15, base_dist
    sub     r9d, [r15+r10*4]
    mov     r10d, ebx
    sub     r10d, ebp
    movzx   r9d, r9w
    mov     r8d, r9d
    shl     r8d, cl
    or      r8d, eax
    cmp     r10d, ecx
    mov     eax, r8d
    mov     [rdi+1730h], r8w
    jge     loc_C080
    mov     rcx, [rdi+28h]
    mov     r8, [rdi+10h]
    lea     r10, [rcx+1]
    mov     [rdi+28h], r10
    mov     [r8+rcx], al
    mov     rax, [rdi+28h]
    movzx   r8d, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r10, [rax+1]
    mov     [rdi+28h], r10
    mov     [rcx+rax], r8b
    mov     ecx, ebx
    mov     r10d, [rdi+1734h]
    sub     ecx, r10d
    jmp     loc_BD38
    align 20h
    
loc_BFE0:
    mov     r8d, eax
    
loc_BFE3:
    movzx   eax, word ptr [rsi+400h]
    movzx   r10d, word ptr [rsi+402h]
    mov     edx, 10h
    mov     esi, edx
    mov     r9d, eax
    sub     esi, r10d
    shl     r9d, cl
    or      r8d, r9d
    cmp     esi, ecx
    mov     [rdi+1730h], r8w
    jl      loc_C0A0
    add     ecx, r10d
    pop     rbx
    mov     [rdi+1734h], ecx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_C030:
    add     ecx, r10d
    mov     [rdi+1734h], ecx
    jmp     loc_BD54
    align 20h
    
loc_C040:
    add     ecx, ebp
    mov     [rdi+1734h], ecx
    jmp     loc_BE1C
    align 10h
    
loc_C050:
    add     ecx, ebp
    mov     [rdi+1734h], ecx
    jmp     loc_BF51
    align 20h
    
loc_C060:
    mov     r8d, r9d
    lea     r15, _dist_code
    shr     r8d, 7
    add     r8d, 100h
    movzx   r10d, byte ptr [r15+r8]
    jmp     loc_BED0
    align 20h
    
loc_C080:
    add     ecx, ebp
    mov     [rdi+1734h], ecx
    jmp     loc_BD54
    align 10h
    
loc_C090:
    add     ecx, ebp
    mov     [rdi+1734h], ecx
    jmp     loc_BEB0
    align 20h
    
loc_C0A0:
    mov     rcx, [rdi+28h]
    mov     rsi, [rdi+10h]
    lea     r9, [rcx+1]
    mov     [rdi+28h], r9
    mov     [rsi+rcx], r8b
    mov     rcx, [rdi+28h]
    movzx   r8d, byte ptr [rdi+1731h]
    mov     rsi, [rdi+10h]
    lea     r9, [rcx+1]
    mov     [rdi+28h], r9
    mov     [rsi+rcx], r8b
    mov     esi, [rdi+1734h]
    pop     rbx
    pop     rbp
    sub     edx, esi
    mov     ecx, edx
    sar     eax, cl
    mov     [rdi+1730h], ax
    lea     eax, [rsi+r10-10h]
    pop     r12
    mov     [rdi+1734h], eax
    pop     r13
    pop     r14
    pop     r15
    retn
    

<bi_windup>:
    
    mov     eax, [rdi+1734h]
    cmp     eax, 8
    jg      short loc_C140
    test    eax, eax
    jle     short loc_C129
    movzx   ecx, word ptr [rdi+1730h]
    
loc_C116:
    mov     rax, [rdi+28h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    
loc_C129:
    xor     eax, eax
    mov     dword ptr [rdi+1734h], 0
    mov     [rdi+1730h], ax
    retn
    align 20h
    
loc_C140:
    mov     rax, [rdi+28h]
    movzx   ecx, word ptr [rdi+1730h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    movzx   ecx, byte ptr [rdi+1731h]
    jmp     short loc_C116
    

<bi_flush>:
    
    mov     eax, [rdi+1734h]
    cmp     eax, 10h
    jz      short loc_C1B0
    cmp     eax, 7
    jle     short locret_C1A9
    mov     rax, [rdi+28h]
    movzx   ecx, word ptr [rdi+1730h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    shr     word ptr [rdi+1730h], 8
    sub     dword ptr [rdi+1734h], 8
    
locret_C1A9:
    rep retn
    align 10h
    
loc_C1B0:
    mov     rax, [rdi+28h]
    movzx   ecx, word ptr [rdi+1730h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [rdi+28h]
    movzx   ecx, byte ptr [rdi+1731h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    xor     eax, eax
    mov     [rdi+1730h], ax
    mov     dword ptr [rdi+1734h], 0
    retn
    

<_tr_init>:
    
    lea     rsi, static_l_desc
    lea     rcx, static_bl_desc
    lea     rax, [rdi+0D4h]
    lea     rdx, [rdi+9C8h]
    xor     r10d, r10d
    mov     dword ptr [rdi+1734h], 0
    mov     [rdi+0B68h], rsi
    lea     rsi, static_d_desc
    mov     [rdi+0B98h], rcx
    lea     rcx, [rdi+54Ch]
    mov     [rdi+0B58h], rax
    mov     [rdi+0B70h], rdx
    mov     [rdi+0B80h], rsi
    lea     rsi, [rdi+0ABCh]
    mov     [rdi+1730h], r10w
    mov     [rdi+0B88h], rsi
    
loc_C270:
    xor     r9d, r9d
    add     rax, 4
    mov     [rax-4], r9w
    cmp     rax, rcx
    jnz     short loc_C270
    mov     rax, rdx
    lea     rdx, [rdi+0A40h]
    nop     dword ptr [rax+rax+00h]
    
loc_C290:
    xor     r8d, r8d
    add     rax, 4
    mov     [rax-4], r8w
    cmp     rax, rdx
    jnz     short loc_C290
    lea     rdx, [rdi+0B08h]
    mov     rax, rsi
    nop     dword ptr [rax+rax+00h]
    
loc_C2B0:
    xor     ecx, ecx
    add     rax, 4
    mov     [rax-4], cx
    cmp     rdx, rax
    jnz     short loc_C2B0
    mov     eax, 1
    mov     qword ptr [rdi+1720h], 0
    mov     qword ptr [rdi+1718h], 0
    mov     [rdi+4D4h], ax
    mov     dword ptr [rdi+1728h], 0
    mov     dword ptr [rdi+170Ch], 0
    retn
    

<_tr_stored_block>:
    
    push    rbp
    push    rbx
    mov     rbp, rdx
    movzx   eax, cx
    mov     r8, rsi
    mov     rbx, rdi
    sub     rsp, 8
    mov     edx, [rdi+1734h]
    mov     esi, eax
    mov     ecx, edx
    shl     esi, cl
    mov     ecx, esi
    or      cx, [rdi+1730h]
    cmp     edx, 0Dh
    mov     [rdi+1730h], cx
    jg      loc_C3C8
    add     edx, 3
    mov     [rdi+1734h], edx
    
loc_C340:
    mov     rdi, rbx
    call    bi_windup
    mov     rax, [rbx+28h]
    mov     rdx, [rbx+10h]
    mov     rsi, r8
    lea     rcx, [rax+1]
    mov     [rbx+28h], rcx
    mov     [rdx+rax], bpl
    mov     rax, [rbx+28h]
    mov     rdx, [rbx+10h]
    lea     rcx, [rax+1]
    mov     [rbx+28h], rcx
    mov     ecx, ebp
    shr     cx, 8
    mov     [rdx+rax], cl
    mov     rax, [rbx+28h]
    mov     rdx, [rbx+10h]
    lea     rcx, [rax+1]
    mov     [rbx+28h], rcx
    mov     ecx, ebp
    not     ecx
    mov     [rdx+rax], cl
    mov     rdx, [rbx+28h]
    mov     rcx, [rbx+10h]
    lea     rax, [rdx+1]
    mov     [rbx+28h], rax
    mov     eax, ebp
    not     eax
    shr     ax, 8
    mov     [rcx+rdx], al
    mov     rdi, [rbx+28h]
    mov     rdx, rbp
    add     rdi, [rbx+10h]
    call    _memcpy
    add     [rbx+28h], rbp
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 8
    
loc_C3C8:
    mov     rdx, [rdi+28h]
    mov     rsi, [rdi+10h]
    lea     rdi, [rdx+1]
    mov     [rbx+28h], rdi
    mov     [rsi+rdx], cl
    mov     rdx, [rbx+28h]
    movzx   esi, byte ptr [rbx+1731h]
    mov     rcx, [rbx+10h]
    lea     rdi, [rdx+1]
    mov     [rbx+28h], rdi
    mov     [rcx+rdx], sil
    mov     ecx, 10h
    mov     edx, [rbx+1734h]
    sub     ecx, edx
    sub     edx, 0Dh
    sar     eax, cl
    mov     [rbx+1734h], edx
    mov     [rbx+1730h], ax
    jmp     loc_C340
    

<_tr_flush_bits>:
    
    jmp     bi_flush
    

<_tr_align>:
    
    mov     ecx, [rdi+1734h]
    mov     edx, 2
    mov     eax, edx
    shl     eax, cl
    or      ax, [rdi+1730h]
    cmp     ecx, 0Dh
    mov     [rdi+1730h], ax
    jle     short loc_C4B8
    mov     rcx, [rdi+28h]
    mov     rsi, [rdi+10h]
    lea     r8, [rcx+1]
    mov     [rdi+28h], r8
    mov     [rsi+rcx], al
    mov     rax, [rdi+28h]
    movzx   esi, byte ptr [rdi+1731h]
    mov     rcx, [rdi+10h]
    lea     r8, [rax+1]
    mov     [rdi+28h], r8
    mov     [rcx+rax], sil
    mov     ecx, 10h
    mov     eax, [rdi+1734h]
    sub     ecx, eax
    sar     edx, cl
    lea     ecx, [rax-0Dh]
    mov     [rdi+1730h], dx
    cmp     ecx, 9
    mov     [rdi+1734h], ecx
    jg      short loc_C4C6
    
loc_C4A4:
    add     ecx, 7
    mov     [rdi+1734h], ecx
    jmp     bi_flush
    align 8
    
loc_C4B8:
    add     ecx, 3
    cmp     ecx, 9
    mov     [rdi+1734h], ecx
    jle     short loc_C4A4
    
loc_C4C6:
    mov     rax, [rdi+28h]
    movzx   ecx, word ptr [rdi+1730h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    mov     rax, [rdi+28h]
    movzx   ecx, byte ptr [rdi+1731h]
    mov     rdx, [rdi+10h]
    lea     rsi, [rax+1]
    mov     [rdi+28h], rsi
    mov     [rdx+rax], cl
    xor     eax, eax
    mov     [rdi+1730h], ax
    mov     eax, [rdi+1734h]
    sub     eax, 9
    mov     [rdi+1734h], eax
    jmp     bi_flush
    

<_tr_flush_block>:
    
    var_48= qword ptr -48h
    var_39= byte ptr -39h
    
    
    push    r15
    push    r14
    mov     r15, rsi
    push    r13
    push    r12
    mov     r13, rdi
    push    rbp
    push    rbx
    mov     r12d, ecx
    mov     r14, rdx
    lea     rcx, [rdx+4]
    sub     rsp, 18h
    mov     r9d, [rdi+0C4h]
    test    rsi, rsi
    setnz   r8b
    test    r9d, r9d
    jle     loc_C925
    mov     rdi, [rdi]
    lea     rbx, [r13+0D4h]
    cmp     dword ptr [rdi+58h], 2
    jz      loc_C8E8
    
loc_C569:
    lea     rsi, [r13+0B58h]
    mov     rdi, r13
    mov     [rsp+48h+var_39], r8b
    mov     [rsp+48h+var_48], rcx
    lea     rbp, [r13+9C8h]
    call    build_tree
    lea     rsi, [r13+0B70h]
    mov     rdi, r13
    call    build_tree
    mov     edx, [r13+0B60h]
    mov     rdi, r13
    mov     rsi, rbx
    call    scan_tree
    mov     edx, [r13+0B78h]
    mov     rsi, rbp
    call    scan_tree
    lea     rsi, [r13+0B88h]
    call    build_tree
    mov     eax, 12h
    mov     edx, 0Fh
    lea     rdi, bl_order
    movzx   r8d, [rsp+48h+var_39]
    mov     rcx, [rsp+48h+var_48]
    jmp     short loc_C5FA
    align 8
    
loc_C5E8:
    sub     rax, 1
    cmp     rax, 2
    jz      loc_CAC0
    movzx   edx, byte ptr [rdi+rax]
    
loc_C5FA:
    cmp     word ptr [r13+rdx*4+0ABEh], 0
    mov     esi, eax
    jz      short loc_C5E8
    cdqe
    lea     rdx, [rax+rax*2+3]
    
loc_C60F:
    mov     rax, [r13+1718h]
    mov     rdi, [r13+1720h]
    lea     rax, [rdx+rax+0Eh]
    lea     rdx, [rdi+0Ah]
    mov     [r13+1718h], rax
    add     rax, 0Ah
    shr     rdx, 3
    shr     rax, 3
    mov     rdi, rdx
    cmp     rax, rdx
    cmovbe  rdi, rax
    cmp     rdi, rcx
    jb      short loc_C651
    test    r8b, r8b
    jnz     loc_CAAA
    
loc_C651:
    cmp     dword ptr [r13+0C8h], 4
    mov     ecx, [r13+1734h]
    movzx   edi, word ptr [r13+1730h]
    jz      loc_C962
    cmp     rax, rdx
    jnb     loc_C962
    cmp     ecx, 0Dh
    jg      loc_CAF2
    lea     eax, [r12+4]
    movzx   eax, ax
    shl     eax, cl
    add     ecx, 3
    or      eax, edi
    mov     [r13+1734h], ecx
    mov     [r13+1730h], ax
    
loc_C69E:
    mov     edx, [r13+0B60h]
    cmp     ecx, 0Bh
    lea     r8d, [rsi+1]
    mov     r14d, [r13+0B78h]
    lea     edi, [rdx-100h]
    movzx   edi, di
    jle     loc_CB9D
    mov     r10d, edi
    mov     r9, [r13+10h]
    shl     r10d, cl
    mov     rcx, [r13+28h]
    or      eax, r10d
    mov     [r13+1730h], ax
    lea     r10, [rcx+1]
    mov     [r13+28h], r10
    mov     [r9+rcx], al
    mov     rax, [r13+28h]
    movzx   r9d, byte ptr [r13+1731h]
    mov     rcx, [r13+10h]
    lea     r10, [rax+1]
    mov     [r13+28h], r10
    mov     [rcx+rax], r9b
    mov     ecx, 10h
    mov     eax, [r13+1734h]
    sub     ecx, eax
    sar     edi, cl
    lea     ecx, [rax-0Bh]
    mov     [r13+1730h], di
    mov     [r13+1734h], ecx
    
loc_C725:
    cmp     ecx, 0Bh
    movzx   eax, r14w
    jle     loc_CB82
    mov     r10d, eax
    mov     r9, [r13+10h]
    shl     r10d, cl
    mov     rcx, [r13+28h]
    or      edi, r10d
    mov     [r13+1730h], di
    lea     r10, [rcx+1]
    mov     [r13+28h], r10
    mov     [r9+rcx], dil
    mov     rcx, [r13+28h]
    movzx   r9d, byte ptr [r13+1731h]
    mov     rdi, [r13+10h]
    lea     r10, [rcx+1]
    mov     [r13+28h], r10
    mov     [rdi+rcx], r9b
    mov     ecx, 10h
    mov     edi, [r13+1734h]
    sub     ecx, edi
    sar     eax, cl
    lea     ecx, [rdi-0Bh]
    mov     [r13+1730h], ax
    mov     [r13+1734h], ecx
    
loc_C795:
    cmp     ecx, 0Ch
    jle     loc_CB60
    sub     esi, 3
    movzx   esi, si
    mov     edi, esi
    shl     edi, cl
    mov     rcx, [r13+28h]
    or      eax, edi
    mov     rdi, [r13+10h]
    mov     [r13+1730h], ax
    lea     r9, [rcx+1]
    mov     [r13+28h], r9
    mov     [rdi+rcx], al
    mov     rax, [r13+28h]
    movzx   edi, byte ptr [r13+1731h]
    mov     rcx, [r13+10h]
    lea     r9, [rax+1]
    mov     [r13+28h], r9
    mov     [rcx+rax], dil
    mov     ecx, 10h
    mov     edi, [r13+1734h]
    sub     ecx, edi
    sar     esi, cl
    lea     ecx, [rdi-0Ch]
    mov     eax, esi
    mov     [r13+1730h], si
    mov     [r13+1734h], ecx
    
loc_C805:
    xor     edi, edi
    mov     esi, 10h
    mov     r10d, 10h
    lea     r9, bl_order
    jmp     short loc_C88C
    
loc_C81B:
    mov     rcx, [r13+28h]
    mov     r11, [r13+10h]
    add     rdi, 1
    lea     r15, [rcx+1]
    mov     [r13+28h], r15
    mov     [r11+rcx], al
    mov     rax, [r13+28h]
    movzx   r11d, byte ptr [r13+1731h]
    mov     rcx, [r13+10h]
    lea     r15, [rax+1]
    mov     [r13+28h], r15
    mov     [rcx+rax], r11b
    mov     ecx, r10d
    mov     r11d, [r13+1734h]
    mov     eax, esi
    sub     ecx, r11d
    sub     r11d, 0Dh
    sar     eax, cl
    cmp     r8d, edi
    mov     [r13+1734h], r11d
    mov     [r13+1730h], ax
    jle     short loc_C8C2
    
loc_C878:
    movzx   eax, word ptr [r13+1730h]
    movzx   esi, byte ptr [r9+rdi]
    mov     ecx, [r13+1734h]
    
loc_C88C:
    movzx   esi, word ptr [r13+rsi*4+0ABEh]
    mov     r11d, esi
    shl     r11d, cl
    or      eax, r11d
    cmp     ecx, 0Dh
    mov     [r13+1730h], ax
    jg      loc_C81B
    add     rdi, 1
    add     ecx, 3
    cmp     r8d, edi
    mov     [r13+1734h], ecx
    jg      short loc_C878
    
loc_C8C2:
    mov     rsi, rbx
    mov     rdi, r13
    call    send_tree
    mov     edx, r14d
    mov     rsi, rbp
    call    send_tree
    mov     rdx, rbp
    mov     rsi, rbx
    call    compress_block
    jmp     loc_C9E8
    
loc_C8E8:
    mov     rax, rbx
    lea     rsi, [r13+154h]
    mov     edx, 0F3FFC07Fh
    jmp     short loc_C910
    align 20h
    
loc_C900:
    add     rax, 4
    shr     rdx, 1
    cmp     rsi, rax
    jz      loc_CBB8
    
loc_C910:
    test    dl, 1
    jz      short loc_C900
    cmp     word ptr [rax], 0
    jz      short loc_C900
    
loc_C91B:
    xor     eax, eax
    
loc_C91D:
    mov     [rdi+58h], eax
    jmp     loc_C569
    
loc_C925:
    lea     rax, [rdx+5]
    cmp     rax, rcx
    jb      short loc_C945
    test    r8b, r8b
    lea     rbx, [rdi+0D4h]
    lea     rbp, [rdi+9C8h]
    jnz     loc_CAAA
    
loc_C945:
    movzx   edi, word ptr [r13+1730h]
    mov     ecx, [r13+1734h]
    lea     rbx, [r13+0D4h]
    lea     rbp, [r13+9C8h]
    
loc_C962:
    cmp     ecx, 0Dh
    jle     loc_CACF
    lea     edx, [r12+2]
    mov     rsi, [r13+10h]
    movzx   edx, dx
    mov     eax, edx
    shl     eax, cl
    mov     rcx, [r13+28h]
    or      eax, edi
    mov     [r13+1730h], ax
    lea     rdi, [rcx+1]
    mov     [r13+28h], rdi
    mov     [rsi+rcx], al
    mov     rax, [r13+28h]
    movzx   esi, byte ptr [r13+1731h]
    mov     rcx, [r13+10h]
    lea     rdi, [rax+1]
    mov     [r13+28h], rdi
    mov     [rcx+rax], sil
    mov     ecx, 10h
    mov     eax, [r13+1734h]
    sub     ecx, eax
    sub     eax, 0Dh
    sar     edx, cl
    mov     [r13+1734h], eax
    mov     [r13+1730h], dx
    
loc_C9D2:
    lea     rdx, static_dtree
    lea     rsi, static_ltree
    mov     rdi, r13
    call    compress_block
    
loc_C9E8:
    lea     rax, [r13+54Ch]
    mov     rsi, rbx
    nop     word ptr [rax+rax+00h]
    
loc_C9F8:
    xor     r8d, r8d
    add     rsi, 4
    mov     [rsi-4], r8w
    cmp     rax, rsi
    jnz     short loc_C9F8
    lea     rax, [r13+0A40h]
    mov     rsi, rbp
    nop     dword ptr [rax+rax+00h]
    
loc_CA18:
    xor     edi, edi
    add     rsi, 4
    mov     [rsi-4], di
    cmp     rax, rsi
    jnz     short loc_CA18
    lea     rax, [r13+0ABCh]
    lea     rdx, [r13+0B08h]
    nop     dword ptr [rax]
    
loc_CA38:
    xor     ecx, ecx
    add     rax, 4
    mov     [rax-4], cx
    cmp     rdx, rax
    jnz     short loc_CA38
    mov     eax, 1
    test    r12d, r12d
    mov     qword ptr [r13+1720h], 0
    mov     [r13+4D4h], ax
    mov     qword ptr [r13+1718h], 0
    mov     dword ptr [r13+1728h], 0
    mov     dword ptr [r13+170Ch], 0
    jnz     short loc_CA94
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_CA94:
    add     rsp, 18h
    mov     rdi, r13
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    jmp     bi_windup
    
loc_CAAA:
    mov     ecx, r12d
    mov     rdx, r14
    mov     rsi, r15
    mov     rdi, r13
    call    _tr_stored_block
    jmp     loc_C9E8
    
loc_CAC0:
    mov     edx, 9
    mov     esi, 2
    jmp     loc_C60F
    
loc_CACF:
    lea     eax, [r12+2]
    movzx   eax, ax
    shl     eax, cl
    add     ecx, 3
    or      eax, edi
    mov     [r13+1734h], ecx
    mov     [r13+1730h], ax
    jmp     loc_C9D2
    
loc_CAF2:
    lea     edx, [r12+4]
    movzx   edx, dx
    mov     eax, edx
    shl     eax, cl
    mov     rcx, [r13+28h]
    or      eax, edi
    mov     rdi, [r13+10h]
    mov     [r13+1730h], ax
    lea     r8, [rcx+1]
    mov     [r13+28h], r8
    mov     [rdi+rcx], al
    mov     rax, [r13+28h]
    movzx   edi, byte ptr [r13+1731h]
    mov     rcx, [r13+10h]
    lea     r8, [rax+1]
    mov     [r13+28h], r8
    mov     [rcx+rax], dil
    mov     ecx, 10h
    mov     edi, [r13+1734h]
    sub     ecx, edi
    sar     edx, cl
    lea     ecx, [rdi-0Dh]
    mov     eax, edx
    mov     [r13+1730h], dx
    mov     [r13+1734h], ecx
    jmp     loc_C69E
    
loc_CB60:
    lea     esi, [r8-4]
    movzx   esi, si
    shl     esi, cl
    add     ecx, 4
    or      eax, esi
    mov     [r13+1734h], ecx
    mov     [r13+1730h], ax
    jmp     loc_C805
    
loc_CB82:
    shl     eax, cl
    add     ecx, 5
    or      eax, edi
    mov     [r13+1734h], ecx
    mov     [r13+1730h], ax
    jmp     loc_C795
    
loc_CB9D:
    shl     edi, cl
    add     ecx, 5
    or      edi, eax
    mov     [r13+1734h], ecx
    mov     [r13+1730h], di
    jmp     loc_C725
    
loc_CBB8:
    mov     rdx, 0FFFF0000FFFFh
    test    [r13+0F8h], rdx
    mov     eax, 1
    jnz     loc_C91D
    cmp     word ptr [r13+108h], 0
    jnz     loc_C91D
    lea     rax, [r13+4D4h]
    jmp     short loc_CBFD
    align 10h
    
loc_CBF0:
    add     rsi, 4
    cmp     rax, rsi
    jz      loc_C91B
    
loc_CBFD:
    cmp     word ptr [rsi], 0
    jz      short loc_CBF0
    mov     eax, 1
    jmp     loc_C91D
    

<_tr_tally>:
    
    mov     ecx, [rdi+170Ch]
    mov     r8, [rdi+1710h]
    mov     [r8+rcx*2], si
    mov     r8, [rdi+1700h]
    mov     rax, rcx
    add     eax, 1
    test    esi, esi
    mov     [rdi+170Ch], eax
    mov     [r8+rcx], dl
    jz      short loc_CCA0
    lea     rax, _length_code
    mov     edx, edx
    add     dword ptr [rdi+1728h], 1
    sub     esi, 1
    movzx   eax, byte ptr [rax+rdx]
    add     word ptr [rdi+rax*4+4D8h], 1
    cmp     esi, 0FFh
    ja      short loc_CC90
    
loc_CC65:
    lea     rax, _dist_code
    movzx   eax, byte ptr [rax+rsi]
    add     word ptr [rdi+rax*4+9C8h], 1
    
loc_CC79:
    mov     eax, [rdi+1708h]
    sub     eax, 1
    cmp     eax, [rdi+170Ch]
    setz    al
    movzx   eax, al
    retn
    align 10h
    
loc_CC90:
    shr     esi, 7
    add     esi, 100h
    jmp     short loc_CC65
    align 20h
    
loc_CCA0:
    mov     edx, edx
    add     word ptr [rdi+rdx*4+0D4h], 1
    jmp     short loc_CC79
    

<zlibVersion>:
    
    lea     rax, a1211
    retn
    

<zlibCompileFlags>:
    
    mov     eax, 0A9h
    retn
    

<zError>:
    
    lea     rdx, z_errmsg
    mov     eax, 2
    sub     eax, edi
    cdqe
    mov     rax, [rdx+rax*8]
    retn
    

<zcalloc>:
    
    mov     edi, esi
    imul    edi, edx
    jmp     _malloc
    

<zcfree>:
    
    mov     rdi, rsi
    jmp     _free
    

<compress2>:
    
    var_C0= qword ptr -0C0h
    var_B8= qword ptr -0B8h
    var_B0= dword ptr -0B0h
    var_A0= qword ptr -0A0h
    var_98= dword ptr -98h
    var_90= qword ptr -90h
    var_78= qword ptr -78h
    var_70= qword ptr -70h
    var_68= qword ptr -68h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    mov     r15, rdi
    push    r13
    push    r12
    mov     r14, rcx
    push    rbp
    push    rbx
    mov     rbp, rdx
    lea     rdx, a1211
    sub     rsp, 98h
    mov     rbx, [rsi]
    mov     qword ptr [rsi], 0
    lea     r12, [rsp+0C8h+var_B8]
    mov     [rsp+0C8h+var_C0], rsi
    mov     esi, r8d
    mov     rcx, fs:28h
    mov     [rsp+0C8h+var_40], rcx
    xor     ecx, ecx
    mov     rdi, r12
    mov     ecx, 70h
    mov     [rsp+0C8h+var_78], 0
    mov     [rsp+0C8h+var_70], 0
    mov     [rsp+0C8h+var_68], 0
    call    _deflateInit_
    test    eax, eax
    mov     r13d, eax
    jnz     loc_CE22
    mov     [rsp+0C8h+var_B8], rbp
    mov     [rsp+0C8h+var_A0], r15
    xor     edx, edx
    mov     [rsp+0C8h+var_98], 0
    mov     [rsp+0C8h+var_B0], 0
    xor     eax, eax
    mov     ebp, 0FFFFFFFFh
    jmp     short loc_CDC0
    align 8
    
loc_CDB8:
    mov     eax, [rsp+0C8h+var_98]
    mov     edx, [rsp+0C8h+var_B0]
    
loc_CDC0:
    test    eax, eax
    jnz     short loc_CDD5
    cmp     rbx, rbp
    mov     rax, rbp
    cmovbe  rax, rbx
    mov     [rsp+0C8h+var_98], eax
    sub     rbx, rax
    
loc_CDD5:
    test    edx, edx
    jnz     short loc_CDEA
    cmp     r14, rbp
    mov     rax, rbp
    cmovbe  rax, r14
    mov     [rsp+0C8h+var_B0], eax
    sub     r14, rax
    
loc_CDEA:
    xor     esi, esi
    test    r14, r14
    mov     rdi, r12
    setz    sil
    shl     esi, 2
    call    _deflate
    test    eax, eax
    mov     r15d, eax
    jz      short loc_CDB8
    mov     rax, [rsp+0C8h+var_90]
    mov     rcx, [rsp+0C8h+var_C0]
    mov     rdi, r12
    mov     [rcx], rax
    call    _deflateEnd
    cmp     r15d, 1
    cmovnz  r13d, r15d
    
loc_CE22:
    mov     rcx, [rsp+0C8h+var_40]
    xor     rcx, fs:28h
    mov     eax, r13d
    jnz     short loc_CE4A
    add     rsp, 98h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    
loc_CE4A:
    call    ___stack_chk_fail
    

<compress>:
    
    mov     r8d, 0FFFFFFFFh
    jmp     _compress2
    

<compressBound>:
    
    mov     rax, rdi
    mov     rdx, rdi
    shr     rax, 0Ch
    shr     rdx, 0Eh
    lea     rax, [rdi+rax+0Dh]
    shr     rdi, 19h
    add     rax, rdx
    add     rax, rdi
    retn
    

<uncompress2>:
    
    var_C8= qword ptr -0C8h
    var_C0= qword ptr -0C0h
    var_B8= qword ptr -0B8h
    var_B0= dword ptr -0B0h
    var_A0= qword ptr -0A0h
    var_98= dword ptr -98h
    var_90= qword ptr -90h
    var_78= qword ptr -78h
    var_70= qword ptr -70h
    var_68= qword ptr -68h
    var_41= byte ptr -41h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    mov     r15, rcx
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 98h
    mov     rbx, [rsi]
    mov     rbp, [r15]
    mov     rcx, fs:28h
    mov     [rsp+0C8h+var_40], rcx
    xor     ecx, ecx
    mov     [rsp+0C8h+var_C8], rdi
    mov     [rsp+0C8h+var_C0], rsi
    test    rbx, rbx
    jz      loc_CFF0
    mov     qword ptr [rsi], 0
    
loc_CEC6:
    lea     r13, [rsp+0C8h+var_B8]
    lea     rsi, a1211
    mov     [rsp+0C8h+var_B8], rdx
    mov     edx, 70h
    mov     [rsp+0C8h+var_B0], 0
    mov     [rsp+0C8h+var_78], 0
    mov     rdi, r13
    mov     [rsp+0C8h+var_70], 0
    mov     [rsp+0C8h+var_68], 0
    call    _inflateInit_
    test    eax, eax
    mov     r14d, eax
    jnz     loc_CFC4
    mov     rax, [rsp+0C8h+var_C8]
    mov     [rsp+0C8h+var_98], 0
    mov     r12d, 0FFFFFFFFh
    mov     [rsp+0C8h+var_A0], rax
    xor     eax, eax
    jmp     short loc_CF34
    align 10h
    
loc_CF30:
    mov     eax, [rsp+0C8h+var_98]
    
loc_CF34:
    test    eax, eax
    jnz     short loc_CF49
    cmp     rbx, r12
    mov     rax, r12
    cmovbe  rax, rbx
    mov     [rsp+0C8h+var_98], eax
    sub     rbx, rax
    
loc_CF49:
    mov     eax, [rsp+0C8h+var_B0]
    test    eax, eax
    jnz     short loc_CF62
    cmp     rbp, r12
    mov     rax, r12
    cmovbe  rax, rbp
    mov     [rsp+0C8h+var_B0], eax
    sub     rbp, rax
    
loc_CF62:
    xor     esi, esi
    mov     rdi, r13
    call    _inflate
    test    eax, eax
    mov     edx, eax
    jz      short loc_CF30
    mov     eax, [rsp+0C8h+var_B0]
    mov     rcx, [r15]
    sub     rcx, rax
    mov     rax, rcx
    lea     rcx, [rsp+0C8h+var_41]
    sub     rax, rbp
    cmp     [rsp+0C8h+var_C8], rcx
    mov     [r15], rax
    mov     rax, [rsp+0C8h+var_90]
    jz      short loc_D010
    mov     rcx, [rsp+0C8h+var_C0]
    mov     [rcx], rax
    
loc_CFA0:
    mov     rdi, r13
    mov     dword ptr [rsp+0C8h+var_C8], edx
    call    _inflateEnd
    mov     edx, dword ptr [rsp+0C8h+var_C8]
    cmp     edx, 1
    jz      short loc_CFC4
    cmp     edx, 2
    jz      loc_D045
    
loc_CFBC:
    cmp     edx, 0FFFFFFFBh
    mov     r14d, edx
    jz      short loc_D030
    
loc_CFC4:
    mov     rcx, [rsp+0C8h+var_40]
    xor     rcx, fs:28h
    mov     eax, r14d
    jnz     short loc_D050
    add     rsp, 98h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_CFF0:
    lea     rax, [rsp+0C8h+var_41]
    mov     ebx, 1
    mov     [rsp+0C8h+var_C8], rax
    jmp     loc_CEC6
    align 10h
    
loc_D010:
    test    rax, rax
    jz      short loc_CFA0
    cmp     edx, 0FFFFFFFBh
    jnz     short loc_CFA0
    mov     rdi, r13
    mov     dword ptr [rsp+0C8h+var_C8], edx
    mov     ebx, 1
    call    _inflateEnd
    mov     edx, dword ptr [rsp+0C8h+var_C8]
    jmp     short loc_CFBC
    align 10h
    
loc_D030:
    mov     eax, [rsp+0C8h+var_98]
    add     rax, rbx
    mov     eax, 0FFFFFFFDh
    cmovnz  r14d, eax
    jmp     loc_CFC4
    
loc_D045:
    mov     r14d, 0FFFFFFFDh
    jmp     loc_CFC4
    
loc_D050:
    call    ___stack_chk_fail
    

<uncompress>:
    
    var_10= qword ptr -10h
    
    
    sub     rsp, 18h
    mov     [rsp+18h+var_10], rcx
    lea     rcx, [rsp+18h+var_10]
    call    _uncompress2
    add     rsp, 18h
    retn
    

<gzclose>:
    
    test    rdi, rdi
    jz      short loc_D09D
    cmp     dword ptr [rdi+18h], 1C4Fh
    jz      short loc_D098
    jmp     _gzclose_w
    align 8
    
loc_D098:
    jmp     _gzclose_r
    
loc_D09D:
    mov     eax, 0FFFFFFFEh
    retn
    

<gzbuffer>:
    
    test    rdi, rdi
    jz      short loc_D0E8
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_D0C6
    cmp     eax, 79B1h
    jnz     short loc_D0E8
    
loc_D0C6:
    mov     eax, [rdi+28h]
    test    eax, eax
    jnz     short loc_D0E8
    lea     eax, [rsi+rsi]
    cmp     eax, esi
    jb      short loc_D0E8
    cmp     esi, 2
    mov     eax, 2
    cmovb   esi, eax
    xor     eax, eax
    mov     [rdi+2Ch], esi
    retn
    align 8
    
loc_D0E8:
    mov     eax, 0FFFFFFFFh
    retn
    

<gztell64>:
    
    test    rdi, rdi
    jz      short loc_D120
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_D106
    cmp     eax, 79B1h
    jnz     short loc_D120
    
loc_D106:
    mov     edx, [rdi+68h]
    mov     rax, [rdi+10h]
    test    edx, edx
    jz      short locret_D127
    add     rax, [rdi+60h]
    retn
    align 20h
    
loc_D120:
    mov     rax, 0FFFFFFFFFFFFFFFFh
    
locret_D127:
    rep retn
    

<gztell>:
    
    jmp     _gztell64
    

<gzoffset64>:
    
    test    rdi, rdi
    jz      short loc_D190
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_D156
    cmp     eax, 79B1h
    jnz     short loc_D190
    
loc_D156:
    push    rbx
    mov     rbx, rdi
    mov     edi, [rdi+1Ch]
    xor     esi, esi
    mov     edx, 1
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    jz      short loc_D198
    cmp     dword ptr [rbx+18h], 1C4Fh
    jz      short loc_D180
    pop     rbx
    retn
    align 20h
    
loc_D180:
    mov     edx, [rbx+80h]
    pop     rbx
    sub     rax, rdx
    retn
    align 10h
    
loc_D190:
    mov     rax, 0FFFFFFFFFFFFFFFFh
    retn
    
loc_D198:
    mov     rax, 0FFFFFFFFFFFFFFFFh
    pop     rbx
    retn
    

<gzoffset>:
    
    jmp     _gzoffset64
    

<gzeof>:
    
    xor     eax, eax
    test    rdi, rdi
    jz      short locret_D1D0
    cmp     dword ptr [rdi+18h], 1C4Fh
    jz      short loc_D1D8
    
locret_D1D0:
    rep retn
    align 8
    
loc_D1D8:
    mov     eax, [rdi+54h]
    retn
    

<gzerror>:
    
    test    rdi, rdi
    jz      short loc_D228
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_D1F6
    cmp     eax, 79B1h
    jnz     short loc_D228
    
loc_D1F6:
    test    rsi, rsi
    mov     edx, [rdi+6Ch]
    jz      short loc_D203
    mov     [rsi], edx
    mov     edx, [rdi+6Ch]
    
loc_D203:
    cmp     edx, 0FFFFFFFCh
    lea     rax, aOutOfMemory
    jz      short locret_D22A
    mov     rax, [rdi+70h]
    lea     rdx, asc_13319+2
    test    rax, rax
    cmovz   rax, rdx
    retn
    align 8
    
loc_D228:
    xor     eax, eax
    
locret_D22A:
    rep retn
    

<gz_error>:
    
    var_2C= dword ptr -2Ch
    
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    mov     rbx, rdi
    mov     rbp, rdx
    sub     rsp, 18h
    mov     rdi, [rdi+70h]
    test    rdi, rdi
    jz      short loc_D25B
    cmp     dword ptr [rbx+6Ch], 0FFFFFFFCh
    jnz     loc_D2F8
    
loc_D253:
    mov     qword ptr [rbx+70h], 0
    
loc_D25B:
    test    esi, esi
    jz      short loc_D26A
    cmp     esi, 0FFFFFFFBh
    jz      short loc_D26A
    mov     dword ptr [rbx], 0
    
loc_D26A:
    cmp     esi, 0FFFFFFFCh
    mov     [rbx+6Ch], esi
    jz      short loc_D2E7
    test    rbp, rbp
    jz      short loc_D2E7
    mov     r13, [rbx+20h]
    mov     rdi, r13
    call    _strlen
    mov     rdi, rbp
    mov     r12, rax
    call    _strlen
    lea     rdi, [r12+rax+3]
    call    _malloc
    test    rax, rax
    mov     r12, rax
    mov     [rbx+70h], rax
    jz      short loc_D310
    mov     rdi, r13
    call    _strlen
    mov     rdi, rbp
    mov     rbx, rax
    call    _strlen
    lea     rsi, [rbx+rax+3]
    lea     rax, asc_13319
    push    rbp
    lea     r8, aSSS
    mov     edx, 1
    mov     r9, r13
    push    rax
    mov     rcx, 0FFFFFFFFFFFFFFFFh
    mov     rdi, r12
    xor     eax, eax
    call    ___snprintf_chk
    pop     rax
    pop     rdx
    
loc_D2E7:
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 8
    
loc_D2F8:
    mov     [rsp+38h+var_2C], esi
    call    _free
    mov     esi, [rsp+38h+var_2C]
    jmp     loc_D253
    align 10h
    
loc_D310:
    mov     dword ptr [rbx+6Ch], 0FFFFFFFCh
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    

<gz_open>:
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 8
    test    rdi, rdi
    jz      loc_D3F8
    mov     rbx, rdi
    mov     edi, 0E8h
    mov     ebp, esi
    mov     r15, rdx
    call    _malloc
    test    rax, rax
    mov     r13, rax
    jz      loc_D3F8
    mov     rax, 200000000000h
    xor     r12d, r12d
    xor     r14d, r14d
    mov     [r13+28h], rax
    mov     eax, 0FFFFFFFFh
    mov     qword ptr [r13+70h], 0
    mov     [r13+58h], rax
    movsx   eax, byte ptr [r15]
    lea     rcx, jpt_D3DC
    mov     dword ptr [r13+18h], 0
    mov     dword ptr [r13+40h], 0
    test    al, al
    jnz     short loc_D3C3
    jmp     short loc_D3F0
    align 10h
    
loc_D3B0:
    sub     eax, 30h
    mov     [r13+58h], eax
    
def_D3DC:
    add     r15, 1
    movsx   eax, byte ptr [r15]
    test    al, al
    jz      short loc_D410
    
loc_D3C3:
    lea     edx, [rax-30h]
    cmp     dl, 9
    jbe     short loc_D3B0
    sub     eax, 2Bh
    cmp     al, 4Dh
    ja      short def_D3DC
    movzx   eax, al
    movsxd  rax, ds:(jpt_D3DC - 13324h)[rcx+rax*4]
    add     rax, rcx
    jmp     rax
    
loc_D3DE:
    mov     rdi, [r13+20h]
    call    _free
    nop     word ptr [rax+rax+00000000h]
    
loc_D3F0:
    mov     rdi, r13
    call    _free
    
loc_D3F8:
    xor     r13d, r13d
    
loc_D3FB:
    add     rsp, 8
    mov     rax, r13
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_D410:
    mov     eax, [r13+18h]
    test    eax, eax
    jz      short loc_D3F0
    cmp     eax, 1C4Fh
    jnz     short loc_D42F
    mov     eax, [r13+40h]
    test    eax, eax
    jnz     short loc_D3F0
    mov     dword ptr [r13+40h], 1
    
loc_D42F:
    mov     rdi, rbx
    call    _strlen
    lea     r15, [rax+1]
    mov     rdi, r15
    call    _malloc
    test    rax, rax
    mov     [r13+20h], rax
    jz      short loc_D3F0
    lea     rdx, aSSS+4
    mov     rdi, rax
    mov     rcx, rbx
    xor     eax, eax
    mov     rsi, r15
    call    _snprintf
    mov     edx, [r13+18h]
    test    r14d, r14d
    mov     eax, 80000h
    cmovnz  r14d, eax
    cmp     edx, 1C4Fh
    jz      short loc_D4A2
    cmp     r12d, 1
    mov     ecx, 200h
    mov     esi, 400h
    sbb     eax, eax
    and     eax, 0FFFFFF80h
    add     eax, 0C1h
    cmp     edx, 79B1h
    cmovnz  ecx, esi
    or      r14d, eax
    or      r14d, ecx
    
loc_D4A2:
    test    ebp, ebp
    js      loc_D5A0
    cmp     edx, 1
    mov     [r13+1Ch], ebp
    jz      loc_D5CE
    
loc_D4B7:
    cmp     edx, 1C4Fh
    jz      loc_D5F8
    mov     dword ptr [r13+0], 0
    
loc_D4CB:
    mov     dword ptr [r13+68h], 0
    xor     edx, edx
    xor     esi, esi
    mov     rdi, r13
    call    gz_error
    mov     qword ptr [r13+10h], 0
    mov     dword ptr [r13+80h], 0
    jmp     loc_D3FB
    align 20h
    
loc_D500:
    mov     r14d, 1
    jmp     def_D3DC
    align 10h
    
loc_D510:
    mov     dword ptr [r13+5Ch], 1
    jmp     def_D3DC
    align 20h
    
loc_D520:
    mov     dword ptr [r13+18h], 1C4Fh
    jmp     def_D3DC
    align 10h
    
loc_D530:
    mov     dword ptr [r13+5Ch], 2
    jmp     def_D3DC
    align 20h
    
loc_D540:
    mov     dword ptr [r13+5Ch], 4
    jmp     def_D3DC
    align 10h
    
loc_D550:
    mov     dword ptr [r13+18h], 79B1h
    jmp     def_D3DC
    align 20h
    
loc_D560:
    mov     r12d, 1
    jmp     def_D3DC
    align 10h
    
loc_D570:
    mov     dword ptr [r13+18h], 1
    jmp     def_D3DC
    align 20h
    
loc_D580:
    mov     dword ptr [r13+40h], 1
    jmp     def_D3DC
    align 10h
    
loc_D590:
    mov     dword ptr [r13+5Ch], 3
    jmp     def_D3DC
    align 20h
    
loc_D5A0:
    xor     eax, eax
    mov     edx, 1B6h
    mov     esi, r14d
    mov     rdi, rbx
    call    _open
    cmp     eax, 0FFFFFFFFh
    mov     ebp, eax
    mov     [r13+1Ch], eax
    jz      loc_D3DE
    mov     edx, [r13+18h]
    cmp     edx, 1
    jnz     loc_D4B7
    
loc_D5CE:
    mov     edx, 2
    xor     esi, esi
    mov     edi, ebp
    call    _lseek64
    mov     dword ptr [r13+18h], 79B1h
    mov     dword ptr [r13+0], 0
    jmp     loc_D4CB
    align 8
    
loc_D5F8:
    mov     edi, [r13+1Ch]
    xor     esi, esi
    mov     edx, 1
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    mov     [r13+48h], rax
    jnz     short loc_D61A
    mov     qword ptr [r13+48h], 0
    
loc_D61A:
    mov     eax, [r13+18h]
    mov     dword ptr [r13+0], 0
    cmp     eax, 1C4Fh
    jnz     loc_D4CB
    mov     qword ptr [r13+50h], 0
    mov     dword ptr [r13+44h], 0
    jmp     loc_D4CB
    

<gzopen64_localalias_1>:
    
    mov     rdx, rsi
    mov     esi, 0FFFFFFFFh
    jmp     gz_open
    

<gzopen>:
    
    jmp     short gzopen64_localalias_1
    

<gzdopen>:
    
    cmp     edi, 0FFFFFFFFh
    push    r12
    push    rbp
    push    rbx
    jz      short loc_D6D8
    mov     ebx, edi
    mov     edi, 13h
    mov     r12, rsi
    call    _malloc
    test    rax, rax
    mov     rbp, rax
    jz      short loc_D6D8
    lea     r8, aFdD
    mov     r9d, ebx
    mov     ecx, 13h
    mov     rdi, rax
    mov     edx, 1
    mov     esi, 13h
    xor     eax, eax
    call    ___snprintf_chk
    mov     rdx, r12
    mov     esi, ebx
    mov     rdi, rbp
    call    gz_open
    mov     rdi, rbp
    mov     rbx, rax
    call    _free
    mov     rax, rbx
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_D6D8:
    xor     ebx, ebx
    mov     rax, rbx
    pop     rbx
    pop     rbp
    pop     r12
    retn
    

<gzclearerr>:
    
    test    rdi, rdi
    jz      short locret_D706
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_D710
    cmp     eax, 79B1h
    jz      short loc_D710
    
locret_D706:
    rep retn
    align 10h
    
loc_D710:
    cmp     eax, 1C4Fh
    jnz     short loc_D71F
    mov     qword ptr [rdi+50h], 0
    
loc_D71F:
    xor     edx, edx
    xor     esi, esi
    jmp     gz_error
    

<gzrewind>:
    
    test    rdi, rdi
    jz      loc_D7C0
    cmp     dword ptr [rdi+18h], 1C4Fh
    jnz     short loc_D7C0
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jz      short loc_D74E
    cmp     eax, 0FFFFFFFBh
    jnz     short loc_D7C0
    
loc_D74E:
    push    rbx
    mov     rbx, rdi
    mov     rsi, [rdi+48h]
    mov     edi, [rdi+1Ch]
    xor     edx, edx
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    jz      short loc_D7B0
    cmp     dword ptr [rbx+18h], 1C4Fh
    mov     dword ptr [rbx], 0
    jnz     short loc_D784
    mov     qword ptr [rbx+50h], 0
    mov     dword ptr [rbx+44h], 0
    
loc_D784:
    mov     dword ptr [rbx+68h], 0
    mov     rdi, rbx
    xor     edx, edx
    xor     esi, esi
    call    gz_error
    mov     qword ptr [rbx+10h], 0
    mov     dword ptr [rbx+80h], 0
    xor     eax, eax
    pop     rbx
    retn
    align 10h
    
loc_D7B0:
    mov     eax, 0FFFFFFFFh
    pop     rbx
    retn
    align 20h
    
loc_D7C0:
    mov     eax, 0FFFFFFFFh
    retn
    

<gzseek64>:
    
    test    rdi, rdi
    jz      loc_D946
    push    rbp
    push    rbx
    mov     rbp, rsi
    mov     rbx, rdi
    sub     rsp, 8
    mov     eax, [rdi+18h]
    cmp     eax, 1C4Fh
    jz      short loc_D7FA
    cmp     eax, 79B1h
    jnz     loc_D8DD
    
loc_D7FA:
    mov     ecx, [rbx+6Ch]
    test    ecx, ecx
    jz      short loc_D80A
    cmp     ecx, 0FFFFFFFBh
    jnz     loc_D8DD
    
loc_D80A:
    cmp     edx, 1
    ja      loc_D8DD
    test    edx, edx
    jz      short loc_D860
    mov     edx, [rbx+68h]
    test    edx, edx
    jz      short loc_D822
    add     rbp, [rbx+60h]
    
loc_D822:
    cmp     eax, 1C4Fh
    mov     dword ptr [rbx+68h], 0
    jz      short loc_D872
    
loc_D830:
    test    rbp, rbp
    js      loc_D8DD
    mov     rax, [rbx+10h]
    
loc_D83D:
    test    rbp, rbp
    jz      short loc_D84D
    mov     dword ptr [rbx+68h], 1
    mov     [rbx+60h], rbp
    
loc_D84D:
    add     rax, rbp
    
loc_D850:
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 20h
    
loc_D860:
    sub     rbp, [rbx+10h]
    cmp     eax, 1C4Fh
    mov     dword ptr [rbx+68h], 0
    jnz     short loc_D830
    
loc_D872:
    cmp     dword ptr [rbx+44h], 1
    mov     rax, [rbx+10h]
    jz      short loc_D8D0
    test    rbp, rbp
    jns     short loc_D8A0
    add     rbp, rax
    js      short loc_D8DD
    mov     rdi, rbx
    call    _gzrewind
    cmp     eax, 0FFFFFFFFh
    jz      short loc_D8DD
    cmp     dword ptr [rbx+18h], 1C4Fh
    mov     rax, [rbx+10h]
    jnz     short loc_D83D
    
loc_D8A0:
    mov     edx, [rbx]
    xor     esi, esi
    cmp     rdx, rbp
    mov     rcx, rdx
    jle     short loc_D8B5
    mov     esi, edx
    mov     rcx, rbp
    mov     edx, ebp
    sub     esi, ebp
    
loc_D8B5:
    add     rax, rcx
    mov     [rbx], esi
    add     [rbx+8], rdx
    mov     [rbx+10h], rax
    sub     rbp, rcx
    jmp     loc_D83D
    align 10h
    
loc_D8D0:
    mov     rdi, rbp
    add     rdi, rax
    jns     short loc_D8F0
    test    rbp, rbp
    jns     short loc_D8A0
    
loc_D8DD:
    add     rsp, 8
    mov     rax, 0FFFFFFFFFFFFFFFFh
    pop     rbx
    pop     rbp
    retn
    align 10h
    
loc_D8F0:
    mov     eax, [rbx]
    mov     edi, [rbx+1Ch]
    mov     rsi, rbp
    mov     edx, 1
    sub     rsi, rax
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    jz      short loc_D8DD
    mov     dword ptr [rbx], 0
    mov     qword ptr [rbx+50h], 0
    xor     edx, edx
    mov     dword ptr [rbx+68h], 0
    xor     esi, esi
    mov     rdi, rbx
    call    gz_error
    mov     rax, [rbx+10h]
    mov     dword ptr [rbx+80h], 0
    add     rax, rbp
    mov     [rbx+10h], rax
    jmp     loc_D850
    
loc_D946:
    or      rax, 0FFFFFFFFFFFFFFFFh
    retn
    

<gzseek>:
    
    jmp     _gzseek64
    

<gz_load>:
    
    push    r14
    mov     dword ptr [rcx], 0
    mov     r14, rcx
    push    r13
    xor     eax, eax
    push    r12
    mov     r13, rdi
    push    rbp
    mov     r12d, edx
    push    rbx
    mov     rbp, rsi
    mov     ebx, 40000000h
    jmp     short loc_D993
    align 8
    
loc_D988:
    add     eax, [r14]
    cmp     eax, r12d
    mov     [r14], eax
    jnb     short loc_D9D0
    
loc_D993:
    mov     edx, r12d
    mov     edi, [r13+1Ch]
    lea     rsi, [rbp+rax+0]
    sub     edx, eax
    cmp     edx, 40000000h
    cmova   rdx, rbx
    call    _read
    test    eax, eax
    mov     edx, eax
    jg      short loc_D988
    test    eax, eax
    jnz     short loc_D9DD
    mov     dword ptr [r13+50h], 1
    
loc_D9C2:
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    align 10h
    
loc_D9D0:
    xor     edx, edx
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    retn
    
loc_D9DD:
    call    ___errno_location
    mov     edi, [rax]
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r13
    call    gz_error
    mov     edx, 0FFFFFFFFh
    jmp     short loc_D9C2
    

<gz_avail>:
    
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    
    
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    mov     rax, fs:28h
    mov     [rsp+28h+var_20], rax
    xor     eax, eax
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jz      short loc_DA29
    cmp     eax, 0FFFFFFFBh
    jnz     loc_DAC0
    
loc_DA29:
    mov     ebp, [rbx+50h]
    test    ebp, ebp
    jnz     loc_DAB8
    mov     eax, [rbx+80h]
    mov     rdi, [rbx+30h]
    test    eax, eax
    jnz     short loc_DA90
    
loc_DA42:
    mov     edx, [rbx+28h]
    mov     esi, eax
    lea     rcx, [rsp+28h+var_24]
    add     rsi, rdi
    mov     rdi, rbx
    sub     edx, eax
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jz      short loc_DAC0
    mov     eax, [rsp+28h+var_24]
    add     [rbx+80h], eax
    mov     rax, [rbx+30h]
    mov     [rbx+78h], rax
    
loc_DA70:
    mov     rcx, [rsp+28h+var_20]
    xor     rcx, fs:28h
    mov     eax, ebp
    jnz     short loc_DAC7
    add     rsp, 18h
    pop     rbx
    pop     rbp
    retn
    align 10h
    
loc_DA90:
    mov     rsi, [rbx+78h]
    sub     eax, 1
    lea     rax, [rsi+rax+1]
    nop     dword ptr [rax+00h]
    
loc_DAA0:
    movsb
    cmp     rsi, rax
    jnz     short loc_DAA0
    mov     eax, [rbx+80h]
    mov     rdi, [rbx+30h]
    jmp     short loc_DA42
    align 8
    
loc_DAB8:
    xor     ebp, ebp
    jmp     short loc_DA70
    align 20h
    
loc_DAC0:
    mov     ebp, 0FFFFFFFFh
    jmp     short loc_DA70
    
loc_DAC7:
    call    ___stack_chk_fail
    

<gz_look>:
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    lea     rbp, [rdi+78h]
    mov     rbx, rdi
    sub     rsp, 8
    mov     ecx, [rdi+28h]
    test    ecx, ecx
    jz      short loc_DB38
    
loc_DAE8:
    mov     edx, [rbx+80h]
    cmp     edx, 1
    jbe     loc_DC00
    
loc_DAF7:
    mov     rsi, [rbx+78h]
    cmp     byte ptr [rsi], 1Fh
    jz      loc_DC80
    
loc_DB04:
    mov     eax, [rbx+40h]
    test    eax, eax
    jnz     loc_DCB0
    
loc_DB0F:
    mov     dword ptr [rbx+80h], 0
    mov     dword ptr [rbx+50h], 1
    xor     eax, eax
    mov     dword ptr [rbx], 0
    
loc_DB28:
    add     rsp, 8
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 8
    
loc_DB38:
    mov     edi, [rdi+2Ch]
    mov     r12, rdi
    call    _malloc
    lea     edi, [r12+r12]
    mov     [rbx+30h], rax
    mov     r13, rax
    call    _malloc
    test    rax, rax
    mov     [rbx+38h], rax
    jz      loc_DCBA
    test    r13, r13
    jz      loc_DCBA
    lea     rdx, a1211
    mov     [rbx+28h], r12d
    mov     qword ptr [rbx+0B8h], 0
    mov     qword ptr [rbx+0C0h], 0
    mov     qword ptr [rbx+0C8h], 0
    mov     ecx, 70h
    mov     dword ptr [rbx+80h], 0
    mov     qword ptr [rbx+78h], 0
    mov     esi, 1Fh
    mov     rdi, rbp
    call    _inflateInit2_
    test    eax, eax
    jz      loc_DAE8
    mov     rdi, [rbx+38h]
    call    _free
    mov     rdi, [rbx+30h]
    call    _free
    mov     dword ptr [rbx+28h], 0
    
loc_DBDA:
    lea     rdx, aOutOfMemory
    mov     esi, 0FFFFFFFCh
    mov     rdi, rbx
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     loc_DB28
    align 20h
    
loc_DC00:
    mov     rdi, rbx
    call    gz_avail
    cmp     eax, 0FFFFFFFFh
    jz      loc_DB28
    mov     edx, [rbx+80h]
    xor     eax, eax
    test    edx, edx
    jz      loc_DB28
    cmp     edx, 1
    ja      loc_DAF7
    mov     edx, [rbx+40h]
    test    edx, edx
    jz      loc_DB0F
    mov     rdi, [rbx+38h]
    mov     rsi, [rbx+78h]
    mov     edx, 1
    mov     [rbx+8], rdi
    
loc_DC46:
    call    _memcpy
    mov     eax, [rbx+80h]
    mov     dword ptr [rbx+80h], 0
    mov     [rbx], eax
    mov     rax, 100000001h
    mov     [rbx+40h], rax
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_DC80:
    cmp     byte ptr [rsi+1], 8Bh
    jnz     loc_DB04
    mov     rdi, rbp
    call    _inflateReset
    mov     rax, 200000000h
    mov     [rbx+40h], rax
    xor     eax, eax
    jmp     loc_DB28
    align 10h
    
loc_DCB0:
    mov     rdi, [rbx+38h]
    mov     [rbx+8], rdi
    jmp     short loc_DC46
    
loc_DCBA:
    mov     rdi, rax
    call    _free
    mov     rdi, r13
    call    _free
    jmp     loc_DBDA
    

<gz_decomp>:
    
    push    r12
    push    rbp
    lea     rbp, [rdi+78h]
    push    rbx
    mov     rbx, rdi
    mov     r12d, [rdi+98h]
    jmp     short loc_DD27
    align 8
    
loc_DCE8:
    xor     esi, esi
    mov     rdi, rbp
    call    _inflate
    lea     edx, [rax+2]
    and     edx, 0FFFFFFFBh
    jz      loc_DD80
    cmp     eax, 0FFFFFFFCh
    jz      loc_DDA0
    cmp     eax, 0FFFFFFFDh
    jz      loc_DDC0
    mov     edx, [rbx+98h]
    test    edx, edx
    jz      loc_DDF0
    cmp     eax, 1
    jz      loc_DE20
    
loc_DD27:
    mov     edx, [rbx+80h]
    test    edx, edx
    jnz     short loc_DCE8
    mov     rdi, rbx
    call    gz_avail
    cmp     eax, 0FFFFFFFFh
    mov     edx, eax
    jz      short loc_DD78
    mov     eax, [rbx+80h]
    test    eax, eax
    jnz     short loc_DCE8
    lea     rdx, aUnexpectedEndO
    mov     esi, 0FFFFFFFBh
    mov     rdi, rbx
    call    gz_error
    sub     r12d, [rbx+98h]
    mov     rax, [rbx+90h]
    xor     edx, edx
    sub     rax, r12
    mov     [rbx], r12d
    mov     [rbx+8], rax
    
loc_DD78:
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    retn
    align 20h
    
loc_DD80:
    lea     rdx, aInternalErrorI
    mov     rdi, rbx
    mov     esi, 0FFFFFFFEh
    call    gz_error
    mov     edx, 0FFFFFFFFh
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    retn
    
loc_DDA0:
    lea     rdx, aOutOfMemory
    mov     esi, eax
    mov     rdi, rbx
    call    gz_error
    mov     edx, 0FFFFFFFFh
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    retn
    align 20h
    
loc_DDC0:
    mov     rdx, [rbx+0A8h]
    lea     rcx, aCompressedData
    mov     esi, eax
    mov     rdi, rbx
    test    rdx, rdx
    cmovz   rdx, rcx
    call    gz_error
    mov     edx, 0FFFFFFFFh
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    retn
    align 10h
    
loc_DDF0:
    mov     rdx, [rbx+90h]
    mov     [rbx], r12d
    sub     rdx, r12
    mov     [rbx+8], rdx
    xor     edx, edx
    cmp     eax, 1
    jnz     loc_DD78
    mov     dword ptr [rbx+44h], 0
    xor     edx, edx
    
loc_DE15:
    pop     rbx
    mov     eax, edx
    pop     rbp
    pop     r12
    retn
    align 20h
    
loc_DE20:
    mov     rax, [rbx+90h]
    sub     r12d, edx
    mov     dword ptr [rbx+44h], 0
    mov     [rbx], r12d
    xor     edx, edx
    sub     rax, r12
    mov     [rbx+8], rax
    jmp     short loc_DE15
    

<gz_fetch>:
    
    push    rbx
    mov     rbx, rdi
    
loc_DE44:
    mov     eax, [rbx+44h]
    cmp     eax, 1
    jz      short loc_DEC0
    cmp     eax, 2
    jz      short loc_DE90
    test    eax, eax
    jz      short loc_DE70
    
loc_DE55:
    mov     ecx, [rbx]
    test    ecx, ecx
    jnz     short loc_DE6C
    mov     edx, [rbx+50h]
    test    edx, edx
    jz      short loc_DE44
    mov     eax, [rbx+80h]
    test    eax, eax
    jnz     short loc_DE44
    
loc_DE6C:
    xor     eax, eax
    
loc_DE6E:
    pop     rbx
    retn
    
loc_DE70:
    mov     rdi, rbx
    call    gz_look
    cmp     eax, 0FFFFFFFFh
    jz      short loc_DEB3
    mov     esi, [rbx+44h]
    test    esi, esi
    jnz     short loc_DE55
    xor     eax, eax
    jmp     short loc_DE6E
    align 10h
    
loc_DE90:
    mov     eax, [rbx+28h]
    mov     rdi, rbx
    add     eax, eax
    mov     [rbx+98h], eax
    mov     rax, [rbx+38h]
    mov     [rbx+90h], rax
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_DE55
    
loc_DEB3:
    mov     eax, 0FFFFFFFFh
    pop     rbx
    retn
    align 20h
    
loc_DEC0:
    mov     eax, [rbx+28h]
    mov     rsi, [rbx+38h]
    mov     rcx, rbx
    mov     rdi, rbx
    lea     edx, [rax+rax]
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jz      short loc_DEB3
    mov     rax, [rbx+38h]
    mov     [rbx+8], rax
    xor     eax, eax
    jmp     short loc_DE6E
    

<gz_skip>:
    
    push    rbp
    push    rbx
    mov     rbp, rsi
    mov     rbx, rdi
    sub     rsp, 8
    test    rsi, rsi
    jz      short loc_DF31
    nop     dword ptr [rax+00000000h]
    
loc_DF08:
    mov     eax, [rbx]
    test    eax, eax
    jz      short loc_DF40
    mov     ecx, eax
    xor     esi, esi
    cmp     rcx, rbp
    mov     rdx, rcx
    jle     short loc_DF22
    sub     eax, ebp
    mov     edx, ebp
    mov     ecx, ebp
    mov     esi, eax
    
loc_DF22:
    add     [rbx+8], rcx
    add     [rbx+10h], rdx
    sub     rbp, rdx
    mov     [rbx], esi
    jnz     short loc_DF08
    
loc_DF31:
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    retn
    align 20h
    
loc_DF40:
    mov     edx, [rbx+50h]
    test    edx, edx
    jz      short loc_DF51
    mov     eax, [rbx+80h]
    test    eax, eax
    jz      short loc_DF31
    
loc_DF51:
    mov     rdi, rbx
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_DF08
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    

<gz_read>:
    
    var_54= dword ptr -54h
    var_50= qword ptr -50h
    var_44= dword ptr -44h
    var_40= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 28h
    mov     rax, fs:28h
    mov     [rsp+58h+var_40], rax
    xor     eax, eax
    test    rdx, rdx
    jz      loc_E025
    mov     ecx, [rdi+68h]
    mov     rbx, rdi
    mov     rbp, rsi
    mov     r15, rdx
    test    ecx, ecx
    jnz     loc_E0B0
    
loc_DFAB:
    lea     rax, [rsp+58h+var_44]
    xor     r12d, r12d
    mov     r14d, 0FFFFFFFEh
    mov     [rsp+58h+var_50], rax
    xchg    ax, ax
    
loc_DFC0:
    mov     eax, [rbx]
    cmp     r15, r14
    mov     ecx, 0FFFFFFFFh
    cmovbe  ecx, r15d
    mov     [rsp+58h+var_44], ecx
    test    eax, eax
    jz      short loc_E050
    cmp     eax, ecx
    jnb     short loc_DFE0
    mov     [rsp+58h+var_44], eax
    mov     ecx, eax
    
loc_DFE0:
    mov     rsi, [rbx+8]
    mov     r13d, ecx
    mov     rdi, rbp
    mov     rdx, r13
    mov     [rsp+58h+var_54], ecx
    call    _memcpy
    mov     ecx, [rsp+58h+var_54]
    add     [rbx+8], r13
    sub     [rbx], ecx
    
loc_E000:
    add     rbp, r13
    add     r12, r13
    add     [rbx+10h], r13
    sub     r15, r13
    jnz     short loc_DFC0
    jmp     short loc_E028
    align 8
    
loc_E018:
    mov     rdi, rbx
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_DFC0
    
loc_E025:
    xor     r12d, r12d
    
loc_E028:
    mov     rdi, [rsp+58h+var_40]
    xor     rdi, fs:28h
    mov     rax, r12
    jnz     loc_E0FF
    add     rsp, 28h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 10h
    
loc_E050:
    mov     edx, [rbx+50h]
    test    edx, edx
    jz      short loc_E065
    mov     eax, [rbx+80h]
    test    eax, eax
    jz      loc_E0F3
    
loc_E065:
    mov     ecx, [rbx+44h]
    test    ecx, ecx
    jz      short loc_E018
    mov     eax, [rbx+28h]
    mov     edx, [rsp+58h+var_44]
    add     eax, eax
    cmp     eax, edx
    ja      short loc_E018
    cmp     ecx, 1
    jz      short loc_E0D0
    mov     [rbx+98h], edx
    mov     [rbx+90h], rbp
    mov     rdi, rbx
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jz      short loc_E025
    mov     r13d, [rbx]
    mov     dword ptr [rbx], 0
    mov     [rsp+58h+var_44], r13d
    jmp     loc_E000
    align 10h
    
loc_E0B0:
    mov     rsi, [rdi+60h]
    mov     dword ptr [rdi+68h], 0
    call    gz_skip
    cmp     eax, 0FFFFFFFFh
    jnz     loc_DFAB
    jmp     loc_E025
    align 10h
    
loc_E0D0:
    mov     rcx, [rsp+58h+var_50]
    mov     rsi, rbp
    mov     rdi, rbx
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jz      loc_E025
    mov     r13d, [rsp+58h+var_44]
    jmp     loc_E000
    
loc_E0F3:
    mov     dword ptr [rbx+54h], 1
    jmp     loc_E028
    
loc_E0FF:
    call    ___stack_chk_fail
    

<gzread>:
    
    test    rdi, rdi
    jz      short loc_E170
    cmp     dword ptr [rdi+18h], 1C4Fh
    jnz     short loc_E170
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jz      short loc_E12A
    cmp     eax, 0FFFFFFFBh
    jnz     short loc_E170
    
loc_E12A:
    test    edx, edx
    push    rbx
    mov     rbx, rdi
    js      short loc_E150
    mov     edx, edx
    call    gz_read
    test    eax, eax
    jnz     short loc_E149
    mov     edx, [rbx+6Ch]
    test    edx, edx
    jz      short loc_E149
    cmp     edx, 0FFFFFFFBh
    jnz     short loc_E161
    
loc_E149:
    pop     rbx
    retn
    align 10h
    
loc_E150:
    lea     rdx, aRequestDoesNot
    mov     esi, 0FFFFFFFEh
    call    gz_error
    
loc_E161:
    mov     eax, 0FFFFFFFFh
    pop     rbx
    retn
    align 10h
    
loc_E170:
    mov     eax, 0FFFFFFFFh
    retn
    

<gzfread>:
    
    xor     r8d, r8d
    test    rcx, rcx
    jz      short loc_E191
    cmp     dword ptr [rcx+18h], 1C4Fh
    jz      short loc_E198
    
loc_E191:
    mov     rax, r8
    retn
    align 8
    
loc_E198:
    mov     eax, [rcx+6Ch]
    test    eax, eax
    jz      short loc_E1A4
    cmp     eax, 0FFFFFFFBh
    jnz     short loc_E191
    
loc_E1A4:
    xor     r8d, r8d
    test    rsi, rsi
    jz      short loc_E191
    mov     r8, rdx
    mov     r9, rdx
    xor     edx, edx
    imul    r8, rsi
    push    rbx
    mov     rbx, rsi
    mov     rax, r8
    div     rsi
    cmp     rax, r9
    jnz     short loc_E1F0
    test    r8, r8
    jz      short loc_E1E2
    mov     rdx, r8
    mov     rsi, rdi
    mov     rdi, rcx
    call    gz_read
    xor     edx, edx
    div     rbx
    mov     r8, rax
    
loc_E1E2:
    mov     rax, r8
    pop     rbx
    retn
    align 10h
    
loc_E1F0:
    lea     rdx, aRequestDoesNot_0
    mov     esi, 0FFFFFFFEh
    mov     rdi, rcx
    call    gz_error
    xor     r8d, r8d
    jmp     short loc_E1E2
    

<gzgetc>:
    
    var_11= byte ptr -11h
    var_10= qword ptr -10h
    
    
    sub     rsp, 18h
    mov     rax, fs:28h
    mov     [rsp+18h+var_10], rax
    xor     eax, eax
    test    rdi, rdi
    jz      short loc_E298
    cmp     dword ptr [rdi+18h], 1C4Fh
    jnz     short loc_E298
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jz      short loc_E23E
    cmp     eax, 0FFFFFFFBh
    jnz     short loc_E298
    
loc_E23E:
    mov     eax, [rdi]
    test    eax, eax
    jz      short loc_E278
    sub     eax, 1
    add     qword ptr [rdi+10h], 1
    mov     [rdi], eax
    mov     rax, [rdi+8]
    lea     rdx, [rax+1]
    mov     [rdi+8], rdx
    movzx   eax, byte ptr [rax]
    
loc_E25D:
    mov     rcx, [rsp+18h+var_10]
    xor     rcx, fs:28h
    jnz     short loc_E29F
    add     rsp, 18h
    retn
    align 8
    
loc_E278:
    lea     rsi, [rsp+18h+var_11]
    mov     edx, 1
    call    gz_read
    test    eax, eax
    jle     short loc_E298
    movzx   eax, [rsp+18h+var_11]
    jmp     short loc_E25D
    align 8
    
loc_E298:
    mov     eax, 0FFFFFFFFh
    jmp     short loc_E25D
    
loc_E29F:
    call    ___stack_chk_fail
    

<gzgetc_>:
    
    jmp     _gzgetc
    

<gzungetc>:
    
    test    rsi, rsi
    jz      loc_E3E0
    cmp     dword ptr [rsi+18h], 1C4Fh
    jnz     loc_E3E0
    mov     edx, [rsi+6Ch]
    test    edx, edx
    jz      short loc_E2E6
    cmp     edx, 0FFFFFFFBh
    jnz     loc_E3E0
    
loc_E2E6:
    push    rbp
    push    rbx
    mov     ebp, edi
    mov     rbx, rsi
    sub     rsp, 8
    mov     eax, [rsi+68h]
    test    eax, eax
    jnz     loc_E380
    
loc_E2FC:
    test    ebp, ebp
    js      loc_E3A0
    mov     eax, [rbx]
    mov     ecx, [rbx+28h]
    test    eax, eax
    lea     edx, [rcx+rcx]
    jz      short loc_E350
    cmp     eax, edx
    jz      loc_E3F8
    mov     rsi, [rbx+8]
    cmp     rsi, [rbx+38h]
    jz      loc_E3B0
    
loc_E326:
    add     eax, 1
    mov     [rbx], eax
    lea     rax, [rsi-1]
    mov     [rbx+8], rax
    mov     [rsi-1], bpl
    mov     eax, ebp
    sub     qword ptr [rbx+10h], 1
    mov     dword ptr [rbx+54h], 0
    
loc_E345:
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 10h
    
loc_E350:
    mov     rax, [rbx+38h]
    mov     dword ptr [rbx], 1
    lea     rax, [rax+rdx-1]
    mov     [rbx+8], rax
    mov     [rax], bpl
    mov     eax, ebp
    sub     qword ptr [rbx+10h], 1
    mov     dword ptr [rbx+54h], 0
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 20h
    
loc_E380:
    mov     dword ptr [rsi+68h], 0
    mov     rsi, [rsi+60h]
    mov     rdi, rbx
    call    gz_skip
    cmp     eax, 0FFFFFFFFh
    jnz     loc_E2FC
    nop     dword ptr [rax+00h]
    
loc_E3A0:
    mov     eax, 0FFFFFFFFh
    jmp     short loc_E345
    align 10h
    
loc_E3B0:
    mov     ecx, eax
    add     rdx, rsi
    add     rcx, rsi
    cmp     rsi, rcx
    jnb     short loc_E3F0
    nop     dword ptr [rax]
    
loc_E3C0:
    sub     rcx, 1
    movzx   eax, byte ptr [rcx]
    sub     rdx, 1
    mov     [rdx], al
    cmp     [rbx+38h], rcx
    jb      short loc_E3C0
    mov     eax, [rbx]
    mov     rsi, rdx
    jmp     loc_E326
    align 20h
    
loc_E3E0:
    mov     eax, 0FFFFFFFFh
    retn
    align 10h
    
loc_E3F0:
    mov     rsi, rdx
    jmp     loc_E326
    
loc_E3F8:
    lea     rdx, aOutOfRoomToPus
    mov     esi, 0FFFFFFFDh
    mov     rdi, rbx
    call    gz_error
    jmp     short loc_E3A0
    

<gzgets>:
    
    src= qword ptr -48h
    dest= qword ptr -40h
    
    
    test    rsi, rsi
    setz    cl
    test    edx, edx
    setle   al
    or      cl, al
    jnz     loc_E558
    test    rdi, rdi
    jz      loc_E558
    cmp     dword ptr [rdi+18h], 1C4Fh
    jnz     loc_E558
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jz      short loc_E449
    cmp     eax, 0FFFFFFFBh
    jnz     loc_E558
    
loc_E449:
    push    r15
    push    r14
    push    r13
    push    r12
    mov     r12d, edx
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 18h
    mov     eax, [rdi+68h]
    mov     [rsp+48h+dest], rsi
    test    eax, eax
    jnz     loc_E528
    
loc_E46D:
    sub     r12d, 1
    jz      loc_E541
    mov     edx, [rbx]
    mov     r13, [rsp+48h+dest]
    jmp     short loc_E4E7
    
loc_E480:
    mov     rcx, [rbx+8]
    cmp     r12d, edx
    mov     esi, 0Ah
    cmovbe  edx, r12d
    mov     r15d, edx
    mov     rdi, rcx
    mov     rdx, r15
    mov     [rsp+48h+src], rcx
    call    _memchr
    test    rax, rax
    mov     rbp, r15
    mov     r14, rax
    mov     rcx, [rsp+48h+src]
    jz      short loc_E4BE
    mov     rbp, rax
    sub     rbp, rcx
    lea     r15d, [rbp+1]
    mov     rbp, r15
    
loc_E4BE:
    mov     rdx, r15
    mov     rdi, r13
    mov     rsi, rcx
    call    _memcpy
    mov     edx, [rbx]
    add     [rbx+8], r15
    add     r13, r15
    add     [rbx+10h], r15
    sub     edx, ebp
    sub     r12d, ebp
    mov     [rbx], edx
    jz      short loc_E505
    test    r14, r14
    jnz     short loc_E505
    
loc_E4E7:
    test    edx, edx
    jnz     short loc_E480
    mov     rdi, rbx
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jz      short loc_E541
    mov     edx, [rbx]
    test    edx, edx
    jnz     short loc_E480
    mov     dword ptr [rbx+54h], 1
    
loc_E505:
    mov     rax, [rsp+48h+dest]
    cmp     r13, rax
    jz      short loc_E541
    mov     byte ptr [r13+0], 0
    add     rsp, 18h
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_E528:
    mov     rsi, [rdi+60h]
    mov     dword ptr [rdi+68h], 0
    call    gz_skip
    cmp     eax, 0FFFFFFFFh
    jnz     loc_E46D
    
loc_E541:
    add     rsp, 18h
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_E558:
    xor     eax, eax
    retn
    

<gzdirect>:
    
    test    rdi, rdi
    jz      short loc_E598
    cmp     dword ptr [rdi+18h], 1C4Fh
    push    rbx
    mov     rbx, rdi
    jz      short loc_E580
    
loc_E572:
    mov     eax, [rbx+40h]
    pop     rbx
    retn
    align 20h
    
loc_E580:
    mov     edx, [rdi+44h]
    test    edx, edx
    jnz     short loc_E572
    mov     eax, [rdi]
    test    eax, eax
    jnz     short loc_E572
    call    gz_look
    jmp     short loc_E572
    align 8
    
loc_E598:
    xor     eax, eax
    retn
    

<gzclose_r>:
    
    test    rdi, rdi
    push    r12
    push    rbp
    push    rbx
    jz      short loc_E628
    cmp     dword ptr [rdi+18h], 1C4Fh
    jnz     short loc_E628
    mov     eax, [rdi+28h]
    mov     rbx, rdi
    test    eax, eax
    jnz     short loc_E608
    
loc_E5BC:
    mov     ebp, [rbx+6Ch]
    mov     eax, 0
    mov     rdi, rbx
    cmp     ebp, 0FFFFFFFBh
    cmovnz  ebp, eax
    xor     edx, edx
    xor     esi, esi
    call    gz_error
    mov     rdi, [rbx+20h]
    call    _free
    mov     edi, [rbx+1Ch]
    call    _close
    mov     rdi, rbx
    mov     r12d, eax
    call    _free
    test    r12d, r12d
    mov     eax, 0FFFFFFFFh
    cmovnz  ebp, eax
    
loc_E5FD:
    mov     eax, ebp
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_E608:
    lea     rdi, [rdi+78h]
    call    _inflateEnd
    mov     rdi, [rbx+38h]
    call    _free
    mov     rdi, [rbx+30h]
    call    _free
    jmp     short loc_E5BC
    align 8
    
loc_E628:
    mov     ebp, 0FFFFFFFEh
    jmp     short loc_E5FD
    

<gz_init>:
    
    push    r12
    push    rbp
    push    rbx
    mov     ebp, [rdi+2Ch]
    mov     rbx, rdi
    lea     edi, [rbp+rbp+0]
    call    _malloc
    test    rax, rax
    mov     [rbx+30h], rax
    jz      loc_E715
    mov     esi, [rbx+40h]
    test    esi, esi
    jz      short loc_E668
    mov     [rbx+28h], ebp
    
loc_E65A:
    xor     eax, eax
    
loc_E65C:
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 8
    
loc_E668:
    mov     edi, ebp
    mov     r12, rax
    call    _malloc
    test    rax, rax
    mov     [rbx+38h], rax
    jz      loc_E733
    lea     rax, a1211
    mov     esi, [rbx+58h]
    mov     r9d, [rbx+5Ch]
    push    70h
    lea     rdi, [rbx+78h]
    mov     ecx, 1Fh
    push    rax
    mov     edx, 8
    mov     qword ptr [rbx+0B8h], 0
    mov     qword ptr [rbx+0C0h], 0
    mov     qword ptr [rbx+0C8h], 0
    mov     r8d, 8
    call    _deflateInit2_
    test    eax, eax
    pop     rdx
    pop     rcx
    jnz     short loc_E703
    mov     eax, [rbx+40h]
    mov     edx, [rbx+2Ch]
    mov     qword ptr [rbx+78h], 0
    test    eax, eax
    mov     [rbx+28h], edx
    jnz     loc_E65A
    mov     [rbx+98h], edx
    mov     rdx, [rbx+38h]
    mov     [rbx+90h], rdx
    mov     [rbx+8], rdx
    pop     rbx
    pop     rbp
    pop     r12
    retn
    
loc_E703:
    mov     rdi, [rbx+38h]
    call    _free
    mov     rdi, [rbx+30h]
    
loc_E710:
    call    _free
    
loc_E715:
    lea     rdx, aOutOfMemory
    mov     esi, 0FFFFFFFCh
    mov     rdi, rbx
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     loc_E65C
    
loc_E733:
    mov     rdi, r12
    jmp     short loc_E710
    

<gz_comp>:
    
    push    r15
    push    r14
    mov     r14, rdi
    push    r13
    push    r12
    mov     r12d, esi
    push    rbp
    push    rbx
    sub     rsp, 8
    mov     eax, [rdi+28h]
    test    eax, eax
    jz      loc_E8F0
    
loc_E75F:
    mov     ebp, [r14+40h]
    test    ebp, ebp
    jnz     short loc_E7D8
    mov     ecx, [r14+98h]
    lea     r13, [r14+78h]
    xor     eax, eax
    mov     ebx, 40000000h
    
loc_E779:
    test    ecx, ecx
    jz      loc_E860
    test    r12d, r12d
    jz      short loc_E799
    cmp     r12d, 4
    jnz     loc_E908
    cmp     eax, 1
    jz      loc_E908
    
loc_E799:
    mov     r15d, ecx
    
loc_E79C:
    mov     esi, r12d
    mov     rdi, r13
    call    _deflate
    cmp     eax, 0FFFFFFFEh
    jz      loc_E928
    mov     ecx, [r14+98h]
    cmp     ecx, r15d
    jnz     short loc_E779
    cmp     r12d, 4
    jz      loc_E943
    db      2Eh
    nop     word ptr [rax+rax+00000000h]
    
loc_E7D0:
    xor     ebp, ebp
    jmp     short loc_E849
    align 8
    
loc_E7D8:
    mov     edx, [r14+80h]
    test    edx, edx
    jz      short loc_E7D0
    mov     rsi, [r14+78h]
    mov     ebx, 40000000h
    jmp     short loc_E811
    align 10h
    
loc_E7F0:
    mov     edx, [r14+80h]
    sub     edx, eax
    cdqe
    add     rax, [r14+78h]
    test    edx, edx
    mov     [r14+80h], edx
    mov     rsi, rax
    mov     [r14+78h], rax
    jz      short loc_E7D0
    
loc_E811:
    mov     edi, [r14+1Ch]
    cmp     edx, 40000000h
    cmova   rdx, rbx
    call    _write
    test    eax, eax
    jns     short loc_E7F0
    
loc_E828:
    call    ___errno_location
    mov     edi, [rax]
    mov     ebp, 0FFFFFFFFh
    call    _strerror
    mov     esi, 0FFFFFFFFh
    mov     rdx, rax
    mov     rdi, r14
    call    gz_error
    
loc_E849:
    add     rsp, 8
    mov     eax, ebp
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 20h
    
loc_E860:
    mov     rdx, [r14+90h]
    mov     rsi, [r14+8]
    cmp     rsi, rdx
    jb      short loc_E88F
    jmp     short loc_E8C8
    align 8
    
loc_E878:
    movsxd  rsi, eax
    add     rsi, [r14+8]
    mov     rdx, [r14+90h]
    cmp     rsi, rdx
    mov     [r14+8], rsi
    jnb     short loc_E8B8
    
loc_E88F:
    sub     rdx, rsi
    mov     edi, [r14+1Ch]
    cmp     rdx, 40000000h
    cmovg   rdx, rbx
    mov     edx, edx
    call    _write
    test    eax, eax
    jns     short loc_E878
    jmp     loc_E828
    align 8
    
loc_E8B8:
    mov     r15d, [r14+98h]
    
loc_E8BF:
    test    r15d, r15d
    jnz     loc_E79C
    
loc_E8C8:
    mov     rax, [r14+38h]
    mov     r15d, [r14+28h]
    mov     [r14+90h], rax
    mov     [r14+98h], r15d
    mov     [r14+8], rax
    jmp     loc_E79C
    align 10h
    
loc_E8F0:
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    mov     ebp, eax
    jnz     loc_E75F
    jmp     loc_E849
    align 8
    
loc_E908:
    mov     rdx, [r14+90h]
    mov     rsi, [r14+8]
    cmp     rsi, rdx
    jb      loc_E88F
    mov     r15d, ecx
    jmp     short loc_E8BF
    align 8
    
loc_E928:
    lea     rdx, aInternalErrorD
    mov     esi, eax
    mov     rdi, r14
    mov     ebp, 0FFFFFFFFh
    call    gz_error
    jmp     loc_E849
    
loc_E943:
    mov     rdi, r13
    call    _deflateReset
    jmp     loc_E849
    

<gz_zero>:
    
    push    r13
    push    r12
    mov     r12, rsi
    push    rbp
    push    rbx
    mov     rbx, rdi
    sub     rsp, 8
    mov     eax, [rdi+80h]
    test    eax, eax
    jnz     short loc_E9E0
    
loc_E96A:
    test    r12, r12
    mov     eax, 1
    jnz     short loc_E9A5
    jmp     short loc_E9D0
    align 20h
    
loc_E980:
    add     [rbx+10h], rbp
    mov     [rbx+78h], rdi
    xor     esi, esi
    mov     [rbx+80h], r13d
    mov     rdi, rbx
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jz      short loc_E9F0
    xor     eax, eax
    sub     r12, rbp
    jz      short loc_E9D0
    
loc_E9A5:
    mov     ebp, [rbx+28h]
    cmp     rbp, r12
    mov     r13, rbp
    jle     short loc_E9B6
    mov     r13d, r12d
    mov     ebp, r12d
    
loc_E9B6:
    test    eax, eax
    mov     rdi, [rbx+30h]
    jz      short loc_E980
    mov     edx, r13d
    xor     esi, esi
    call    _memset
    mov     rdi, [rbx+30h]
    jmp     short loc_E980
    align 10h
    
loc_E9D0:
    add     rsp, 8
    xor     eax, eax
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_E9E0:
    xor     esi, esi
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     loc_E96A
    
loc_E9F0:
    add     rsp, 8
    mov     eax, 0FFFFFFFFh
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    

<gz_write>:
    
    src= qword ptr -40h
    
    
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 18h
    test    rdx, rdx
    mov     [rsp+48h+src], rsi
    jz      loc_EAE0
    mov     r12, rdx
    mov     edx, [rdi+28h]
    mov     rbx, rdi
    test    edx, edx
    jz      loc_EAD0
    
loc_EA2D:
    mov     eax, [rbx+68h]
    test    eax, eax
    jnz     loc_EB78
    
loc_EA38:
    mov     eax, [rbx+28h]
    mov     edx, [rbx+80h]
    cmp     r12, rax
    mov     r13, rax
    jnb     loc_EAF8
    test    edx, edx
    mov     r14, r12
    mov     rdi, [rbx+30h]
    jz      short loc_EAC1
    
loc_EA58:
    mov     rax, [rbx+78h]
    
loc_EA5C:
    add     rax, rdx
    sub     rax, rdi
    sub     r13d, eax
    mov     ebp, r13d
    cmp     rbp, r14
    mov     r15, rbp
    jbe     short loc_EA79
    mov     ebp, r14d
    mov     r15, r14
    mov     r13, rbp
    
loc_EA79:
    mov     rsi, [rsp+48h+src]
    mov     eax, eax
    mov     rdx, r15
    add     rdi, rax
    call    _memcpy
    add     [rbx+80h], r13d
    add     [rbx+10h], rbp
    sub     r14, r15
    jz      short loc_EAE3
    xor     esi, esi
    mov     rdi, rbx
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jz      short loc_EAE0
    mov     edx, [rbx+80h]
    add     [rsp+48h+src], r15
    mov     r13d, [rbx+28h]
    mov     rdi, [rbx+30h]
    test    edx, edx
    jnz     short loc_EA58
    
loc_EAC1:
    mov     [rbx+78h], rdi
    mov     rax, rdi
    jmp     short loc_EA5C
    align 10h
    
loc_EAD0:
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_EA2D
    xchg    ax, ax
    
loc_EAE0:
    xor     r12d, r12d
    
loc_EAE3:
    add     rsp, 18h
    mov     rax, r12
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    retn
    align 8
    
loc_EAF8:
    test    edx, edx
    jnz     short loc_EB60
    
loc_EAFC:
    mov     rax, [rsp+48h+src]
    mov     r15, r12
    mov     r13d, 0FFFFFFFEh
    mov     r14d, 0FFFFFFFFh
    mov     [rbx+78h], rax
    jmp     short loc_EB47
    align 20h
    
loc_EB20:
    mov     ecx, r15d
    mov     rax, r15
    mov     rbp, r15
    
loc_EB29:
    add     [rbx+10h], rax
    xor     esi, esi
    mov     [rbx+80h], ecx
    mov     rdi, rbx
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jz      short loc_EAE0
    sub     r15, rbp
    jz      short loc_EAE3
    
loc_EB47:
    cmp     r15, r13
    jbe     short loc_EB20
    mov     rbp, r14
    mov     rax, r14
    mov     ecx, 0FFFFFFFFh
    jmp     short loc_EB29
    align 20h
    
loc_EB60:
    xor     esi, esi
    mov     rdi, rbx
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_EAFC
    jmp     loc_EAE0
    align 8
    
loc_EB78:
    mov     rsi, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     rdi, rbx
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     loc_EA38
    jmp     loc_EAE0
    

<gzwrite>:
    
    var_C= dword ptr -0Ch
    
    
    xor     eax, eax
    test    rdi, rdi
    jz      short locret_EBB0
    cmp     dword ptr [rdi+18h], 79B1h
    jz      short loc_EBB8
    
locret_EBB0:
    rep retn
    align 8
    
loc_EBB8:
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jnz     short loc_EBD8
    sub     rsp, 18h
    test    edx, edx
    js      short loc_EBE0
    mov     edx, edx
    call    gz_write
    
loc_EBCE:
    add     rsp, 18h
    retn
    align 8
    
loc_EBD8:
    xor     eax, eax
    retn
    align 20h
    
loc_EBE0:
    lea     rdx, aRequestedLengt
    mov     esi, 0FFFFFFFDh
    mov     [rsp+18h+var_C], eax
    call    gz_error
    mov     eax, [rsp+18h+var_C]
    jmp     short loc_EBCE
    

<gzfwrite>:
    
    xor     r8d, r8d
    test    rcx, rcx
    jz      short loc_EC11
    cmp     dword ptr [rcx+18h], 79B1h
    jz      short loc_EC18
    
loc_EC11:
    mov     rax, r8
    retn
    align 8
    
loc_EC18:
    mov     eax, [rcx+6Ch]
    test    eax, eax
    jnz     short loc_EC11
    test    rsi, rsi
    jz      short loc_EC11
    mov     r8, rdx
    mov     r9, rdx
    xor     edx, edx
    imul    r8, rsi
    push    rbx
    mov     rbx, rsi
    mov     rax, r8
    div     rsi
    cmp     rax, r9
    jnz     short loc_EC60
    test    r8, r8
    jz      short loc_EC5A
    mov     rdx, r8
    mov     rsi, rdi
    mov     rdi, rcx
    call    gz_write
    xor     edx, edx
    div     rbx
    mov     r8, rax
    
loc_EC5A:
    mov     rax, r8
    pop     rbx
    retn
    align 20h
    
loc_EC60:
    lea     rdx, aRequestDoesNot_0
    mov     esi, 0FFFFFFFEh
    mov     rdi, rcx
    call    gz_error
    xor     r8d, r8d
    jmp     short loc_EC5A
    

<gzputc>:
    
    var_21= byte ptr -21h
    var_20= qword ptr -20h
    
    
    push    rbp
    push    rbx
    sub     rsp, 18h
    mov     rax, fs:28h
    mov     [rsp+28h+var_20], rax
    xor     eax, eax
    test    rdi, rdi
    jz      loc_ED70
    cmp     dword ptr [rdi+18h], 79B1h
    mov     rbx, rdi
    jnz     loc_ED70
    mov     edx, [rdi+6Ch]
    test    edx, edx
    jnz     loc_ED70
    mov     eax, [rdi+68h]
    mov     ebp, esi
    test    eax, eax
    jnz     loc_ED50
    
loc_ECC7:
    mov     ecx, [rbx+28h]
    test    ecx, ecx
    jz      short loc_ED08
    mov     edx, [rbx+80h]
    mov     rsi, [rbx+30h]
    test    edx, edx
    jz      short loc_ED40
    mov     rax, [rbx+78h]
    
loc_ECE0:
    add     rax, rdx
    sub     rax, rsi
    cmp     ecx, eax
    jbe     short loc_ED08
    mov     eax, eax
    mov     [rsi+rax], bpl
    movzx   eax, bpl
    add     dword ptr [rbx+80h], 1
    add     qword ptr [rbx+10h], 1
    jmp     short loc_ED29
    align 8
    
loc_ED08:
    lea     rsi, [rsp+28h+var_21]
    mov     edx, 1
    mov     rdi, rbx
    mov     [rsp+28h+var_21], bpl
    call    gz_write
    cmp     rax, 1
    jnz     short loc_ED70
    movzx   eax, bpl
    
loc_ED29:
    mov     rdi, [rsp+28h+var_20]
    xor     rdi, fs:28h
    jnz     short loc_ED77
    add     rsp, 18h
    pop     rbx
    pop     rbp
    retn
    
loc_ED40:
    mov     [rbx+78h], rsi
    mov     rax, rsi
    jmp     short loc_ECE0
    align 10h
    
loc_ED50:
    mov     rsi, [rdi+60h]
    mov     dword ptr [rdi+68h], 0
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     loc_ECC7
    nop     dword ptr [rax+00000000h]
    
loc_ED70:
    mov     eax, 0FFFFFFFFh
    jmp     short loc_ED29
    
loc_ED77:
    call    ___stack_chk_fail
    

<gzputs>:
    
    test    rdi, rdi
    jz      short loc_EDE0
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     short loc_EDE0
    mov     eax, [rdi+6Ch]
    test    eax, eax
    jnz     short loc_EDE0
    push    r12
    push    rbp
    mov     rbp, rsi
    push    rbx
    mov     rbx, rdi
    mov     rdi, rsi
    call    _strlen
    mov     rsi, rbp
    mov     rdx, rax
    mov     rdi, rbx
    mov     r12, rax
    call    gz_write
    test    eax, eax
    jnz     short loc_EDC1
    test    r12, r12
    jnz     short loc_EDD0
    
loc_EDC1:
    pop     rbx
    pop     rbp
    pop     r12
    retn
    align 10h
    
loc_EDD0:
    mov     eax, 0FFFFFFFFh
    jmp     short loc_EDC1
    align 20h
    
loc_EDE0:
    mov     eax, 0FFFFFFFFh
    retn
    

<gzvprintf>:
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 8
    test    rdi, rdi
    jz      loc_EF60
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     loc_EF60
    mov     ecx, [rdi+6Ch]
    test    ecx, ecx
    jnz     loc_EF60
    mov     r13, rdx
    mov     edx, [rdi+28h]
    mov     r12, rsi
    mov     rbx, rdi
    test    edx, edx
    jz      loc_EF20
    
loc_EE2F:
    mov     eax, [rbx+68h]
    test    eax, eax
    jnz     loc_EF40
    
loc_EE3A:
    mov     eax, [rbx+80h]
    mov     rbp, [rbx+30h]
    test    eax, eax
    jz      loc_EEF8
    mov     rcx, [rbx+78h]
    sub     rcx, rbp
    
loc_EE53:
    add     rax, rcx
    mov     r8, r12
    mov     r9, r13
    add     rbp, rax
    mov     eax, [rbx+28h]
    mov     rcx, 0FFFFFFFFFFFFFFFFh
    mov     edx, 1
    mov     rdi, rbp
    sub     eax, 1
    mov     byte ptr [rbp+rax+0], 0
    mov     esi, [rbx+28h]
    call    ___vsnprintf_chk
    test    eax, eax
    mov     r12d, eax
    jz      loc_EF0B
    mov     r13d, [rbx+28h]
    cmp     r13d, eax
    jbe     short loc_EF08
    lea     eax, [r13-1]
    cmp     byte ptr [rbp+rax+0], 0
    jnz     short loc_EF08
    mov     ebp, [rbx+80h]
    movsxd  rax, r12d
    add     [rbx+10h], rax
    add     ebp, r12d
    cmp     r13d, ebp
    mov     [rbx+80h], ebp
    ja      short loc_EF0B
    xor     esi, esi
    mov     [rbx+80h], r13d
    mov     rdi, rbx
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jz      short loc_EF2E
    mov     esi, [rbx+28h]
    mov     rdi, [rbx+30h]
    sub     ebp, r13d
    mov     edx, ebp
    add     rsi, rdi
    call    _memcpy
    mov     rax, [rbx+30h]
    mov     [rbx+80h], ebp
    mov     [rbx+78h], rax
    jmp     short loc_EF0B
    align 8
    
loc_EEF8:
    mov     [rbx+78h], rbp
    xor     ecx, ecx
    jmp     loc_EE53
    align 8
    
loc_EF08:
    xor     r12d, r12d
    
loc_EF0B:
    add     rsp, 8
    mov     eax, r12d
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_EF20:
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     loc_EE2F
    
loc_EF2E:
    mov     r12d, [rbx+6Ch]
    add     rsp, 8
    pop     rbx
    pop     rbp
    mov     eax, r12d
    pop     r12
    pop     r13
    retn
    
loc_EF40:
    mov     rsi, [rbx+60h]
    mov     dword ptr [rbx+68h], 0
    mov     rdi, rbx
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     loc_EE3A
    jmp     short loc_EF2E
    align 20h
    
loc_EF60:
    mov     r12d, 0FFFFFFFEh
    jmp     short loc_EF0B
    

<gzprintf>:
    
    var_D8= dword ptr -0D8h
    var_D4= dword ptr -0D4h
    var_D0= qword ptr -0D0h
    var_C8= qword ptr -0C8h
    var_C0= qword ptr -0C0h
    var_B8= byte ptr -0B8h
    var_A8= qword ptr -0A8h
    var_A0= qword ptr -0A0h
    var_98= qword ptr -98h
    var_90= qword ptr -90h
    var_88= xmmword ptr -88h
    var_78= xmmword ptr -78h
    var_68= xmmword ptr -68h
    var_58= xmmword ptr -58h
    var_48= xmmword ptr -48h
    var_38= xmmword ptr -38h
    var_28= xmmword ptr -28h
    var_18= xmmword ptr -18h
    arg_0= byte ptr  8
    
    
    sub     rsp, 0D8h
    test    al, al
    mov     [rsp+0D8h+var_A8], rdx
    mov     [rsp+0D8h+var_A0], rcx
    mov     [rsp+0D8h+var_98], r8
    mov     [rsp+0D8h+var_90], r9
    jz      short loc_EFC6
    movaps  [rsp+0D8h+var_88], xmm0
    movaps  [rsp+0D8h+var_78], xmm1
    movaps  [rsp+0D8h+var_68], xmm2
    movaps  [rsp+0D8h+var_58], xmm3
    movaps  [rsp+0D8h+var_48], xmm4
    movaps  [rsp+0D8h+var_38], xmm5
    movaps  [rsp+0D8h+var_28], xmm6
    movaps  [rsp+0D8h+var_18], xmm7
    
loc_EFC6:
    mov     rax, fs:28h
    mov     [rsp+0D8h+var_C0], rax
    xor     eax, eax
    lea     rax, [rsp+0D8h+arg_0]
    mov     rdx, rsp
    mov     [rsp+0D8h+var_D0], rax
    lea     rax, [rsp+0D8h+var_B8]
    mov     [rsp+0D8h+var_D8], 10h
    mov     [rsp+0D8h+var_D4], 30h
    mov     [rsp+0D8h+var_C8], rax
    call    _gzvprintf
    mov     rcx, [rsp+0D8h+var_C0]
    xor     rcx, fs:28h
    jnz     short loc_F01C
    add     rsp, 0D8h
    retn
    
loc_F01C:
    call    ___stack_chk_fail
    

<gzflush>:
    
    test    rdi, rdi
    jz      short loc_F090
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     short loc_F090
    mov     edx, [rdi+6Ch]
    test    edx, edx
    jnz     short loc_F090
    cmp     esi, 4
    ja      short loc_F090
    push    rbp
    push    rbx
    mov     ebp, esi
    mov     rbx, rdi
    sub     rsp, 8
    mov     eax, [rdi+68h]
    test    eax, eax
    jnz     short loc_F070
    
loc_F05C:
    mov     esi, ebp
    mov     rdi, rbx
    call    gz_comp
    mov     eax, [rbx+6Ch]
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    
loc_F070:
    mov     rsi, [rdi+60h]
    mov     dword ptr [rdi+68h], 0
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_F05C
    mov     eax, [rbx+6Ch]
    add     rsp, 8
    pop     rbx
    pop     rbp
    retn
    align 10h
    
loc_F090:
    mov     eax, 0FFFFFFFEh
    retn
    

<gzsetparams>:
    
    push    r13
    push    r12
    push    rbp
    push    rbx
    sub     rsp, 8
    test    rdi, rdi
    jz      loc_F170
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     loc_F170
    mov     r13d, [rdi+6Ch]
    test    r13d, r13d
    jnz     loc_F170
    cmp     [rdi+58h], esi
    jz      short loc_F140
    mov     ecx, [rdi+68h]
    mov     r12d, edx
    mov     ebp, esi
    mov     rbx, rdi
    test    ecx, ecx
    jnz     short loc_F154
    
loc_F0E1:
    mov     edx, [rbx+28h]
    test    edx, edx
    jnz     short loc_F100
    
loc_F0E8:
    mov     [rbx+58h], ebp
    mov     [rbx+5Ch], r12d
    
loc_F0EF:
    add     rsp, 8
    mov     eax, r13d
    pop     rbx
    pop     rbp
    pop     r12
    pop     r13
    retn
    align 20h
    
loc_F100:
    mov     eax, [rbx+80h]
    test    eax, eax
    jz      short loc_F130
    mov     esi, 5
    mov     rdi, rbx
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_F130
    
loc_F11C:
    mov     r13d, [rbx+6Ch]
    add     rsp, 8
    pop     rbx
    pop     rbp
    mov     eax, r13d
    pop     r12
    pop     r13
    retn
    align 10h
    
loc_F130:
    lea     rdi, [rbx+78h]
    mov     edx, r12d
    mov     esi, ebp
    call    _deflateParams
    jmp     short loc_F0E8
    
loc_F140:
    cmp     [rdi+5Ch], edx
    jz      short loc_F0EF
    mov     ecx, [rdi+68h]
    mov     r12d, edx
    mov     ebp, esi
    mov     rbx, rdi
    test    ecx, ecx
    jz      short loc_F0E1
    
loc_F154:
    mov     rsi, [rdi+60h]
    mov     dword ptr [rdi+68h], 0
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     loc_F0E1
    jmp     short loc_F11C
    align 10h
    
loc_F170:
    mov     r13d, 0FFFFFFFEh
    jmp     loc_F0EF
    

<gzclose_w>:
    
    push    rbp
    push    rbx
    sub     rsp, 8
    test    rdi, rdi
    jz      loc_F248
    cmp     dword ptr [rdi+18h], 79B1h
    jnz     loc_F248
    mov     ecx, [rdi+68h]
    mov     rbx, rdi
    test    ecx, ecx
    jnz     short loc_F210
    
loc_F1A6:
    xor     ebp, ebp
    
loc_F1A8:
    mov     esi, 4
    mov     rdi, rbx
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_F1BD
    mov     ebp, [rbx+6Ch]
    
loc_F1BD:
    mov     edx, [rbx+28h]
    test    edx, edx
    jz      short loc_F1D4
    mov     eax, [rbx+40h]
    test    eax, eax
    jz      short loc_F230
    
loc_F1CB:
    mov     rdi, [rbx+30h]
    call    _free
    
loc_F1D4:
    xor     edx, edx
    xor     esi, esi
    mov     rdi, rbx
    call    gz_error
    mov     rdi, [rbx+20h]
    call    _free
    mov     edi, [rbx+1Ch]
    call    _close
    mov     rdi, rbx
    cmp     eax, 0FFFFFFFFh
    mov     eax, 0FFFFFFFFh
    cmovz   ebp, eax
    call    _free
    
loc_F204:
    add     rsp, 8
    mov     eax, ebp
    pop     rbx
    pop     rbp
    retn
    align 10h
    
loc_F210:
    mov     rsi, [rdi+60h]
    mov     dword ptr [rdi+68h], 0
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_F1A6
    mov     ebp, [rbx+6Ch]
    jmp     loc_F1A8
    align 10h
    
loc_F230:
    lea     rdi, [rbx+78h]
    call    _deflateEnd
    mov     rdi, [rbx+38h]
    call    _free
    jmp     short loc_F1CB
    align 8
    
loc_F248:
    mov     ebp, 0FFFFFFFEh
    jmp     short loc_F204
    

<_term_proc>:
    sub     rsp, 8
    add     rsp, 8
    retn

