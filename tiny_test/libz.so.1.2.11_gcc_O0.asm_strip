<_init_proc>:
    sub     rsp, 8
    mov     rax, cs:__gmon_start___ptr
    test    rax, rax
    jz      short loc_206A
    call    rax
    
loc_206A:
    add     rsp, 8
    retn

<sub_2070>:
    
    push    cs:qword_21D008
    jmp     cs:qword_21D010

<deregister_tm_clones>:
    lea     rdi, completed_7697
    push    rbp
    lea     rax, completed_7697
    cmp     rax, rdi
    mov     rbp, rsp
    jz      short loc_2380
    mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
    test    rax, rax
    jz      short loc_2380
    pop     rbp
    jmp     rax
    align 20h
    
loc_2380:
    pop     rbp
    retn

<register_tm_clones>:
    lea     rdi, completed_7697
    lea     rsi, completed_7697
    push    rbp
    sub     rsi, rdi
    mov     rbp, rsp
    sar     rsi, 3
    mov     rax, rsi
    shr     rax, 3Fh
    add     rsi, rax
    sar     rsi, 1
    jz      short loc_23D0
    mov     rax, cs:_ITM_registerTMCloneTable_ptr
    test    rax, rax
    jz      short loc_23D0
    pop     rbp
    jmp     rax
    align 10h
    
loc_23D0:
    pop     rbp
    retn

<__do_global_dtors_aux>:
    cmp     cs:completed_7697, 0
    jnz     short locret_2418
    cmp     cs:__cxa_finalize_ptr, 0
    push    rbp
    mov     rbp, rsp
    jz      short loc_2403
    mov     rdi, cs:__dso_handle
    call    __cxa_finalize
    
loc_2403:
    call    deregister_tm_clones
    mov     cs:completed_7697, 1
    pop     rbp
    retn
    align 8
    
locret_2418:
    rep retn

<frame_dummy>:
    push    rbp
    mov     rbp, rsp
    pop     rbp
    jmp     register_tm_clones

<adler32_z>:
    
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_28], rdx
    mov     rax, [rbp+var_18]
    shr     rax, 10h
    and     eax, 0FFFFh
    mov     [rbp+var_8], rax
    and     [rbp+var_18], 0FFFFh
    cmp     [rbp+var_28], 1
    jnz     short loc_24A5
    mov     rax, [rbp+var_20]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    cmp     [rbp+var_18], 0FFF0h
    jbe     short loc_247A
    sub     [rbp+var_18], 0FFF1h
    
loc_247A:
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    cmp     [rbp+var_8], 0FFF0h
    jbe     short loc_2494
    sub     [rbp+var_8], 0FFF1h
    
loc_2494:
    mov     rax, [rbp+var_8]
    shl     rax, 10h
    or      rax, [rbp+var_18]
    jmp     loc_29E8
    
loc_24A5:
    cmp     [rbp+var_20], 0
    jnz     short loc_24B6
    mov     eax, 1
    jmp     loc_29E8
    
loc_24B6:
    cmp     [rbp+var_28], 0Fh
    ja      loc_2772
    jmp     short loc_24E1
    
loc_24C3:
    mov     rax, [rbp+var_20]
    lea     rdx, [rax+1]
    mov     [rbp+var_20], rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    
loc_24E1:
    mov     rax, [rbp+var_28]
    lea     rdx, [rax-1]
    mov     [rbp+var_28], rdx
    test    rax, rax
    jnz     short loc_24C3
    cmp     [rbp+var_18], 0FFF0h
    jbe     short loc_2504
    sub     [rbp+var_18], 0FFF1h
    
loc_2504:
    mov     rcx, [rbp+var_8]
    mov     rdx, 0F00E10D2FC5CDh
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     rax, rcx
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    shl     rax, 10h
    or      rax, [rbp+var_18]
    jmp     loc_29E8
    
loc_254A:
    sub     [rbp+var_28], 15B0h
    mov     [rbp+var_C], 15Bh
    
loc_2559:
    mov     rax, [rbp+var_20]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 1
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 2
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 3
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 4
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 5
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 6
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 7
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 8
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 9
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Ah
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Bh
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Ch
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Dh
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Eh
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Fh
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    add     [rbp+var_20], 10h
    sub     [rbp+var_C], 1
    cmp     [rbp+var_C], 0
    jnz     loc_2559
    mov     rcx, [rbp+var_18]
    mov     rdx, 0F00E10D2FC5CDh
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     rax, rcx
    mov     [rbp+var_18], rax
    mov     rcx, [rbp+var_8]
    mov     rdx, 0F00E10D2FC5CDh
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     rax, rcx
    mov     [rbp+var_8], rax
    
loc_2772:
    cmp     [rbp+var_28], 15AFh
    ja      loc_254A
    cmp     [rbp+var_28], 0
    jz      loc_29DC
    jmp     loc_2936
    
loc_2790:
    sub     [rbp+var_28], 10h
    mov     rax, [rbp+var_20]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 1
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 2
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 3
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 4
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 5
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 6
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 7
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 8
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 9
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Ah
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Bh
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Ch
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Dh
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Eh
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    mov     rax, [rbp+var_20]
    add     rax, 0Fh
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    add     [rbp+var_20], 10h
    
loc_2936:
    cmp     [rbp+var_28], 0Fh
    ja      loc_2790
    jmp     short loc_2961
    
loc_2943:
    mov     rax, [rbp+var_20]
    lea     rdx, [rax+1]
    mov     [rbp+var_20], rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    add     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    add     [rbp+var_8], rax
    
loc_2961:
    mov     rax, [rbp+var_28]
    lea     rdx, [rax-1]
    mov     [rbp+var_28], rdx
    test    rax, rax
    jnz     short loc_2943
    mov     rcx, [rbp+var_18]
    mov     rdx, 0F00E10D2FC5CDh
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     rax, rcx
    mov     [rbp+var_18], rax
    mov     rcx, [rbp+var_8]
    mov     rdx, 0F00E10D2FC5CDh
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     rax, rcx
    mov     [rbp+var_8], rax
    
loc_29DC:
    mov     rax, [rbp+var_8]
    shl     rax, 10h
    or      rax, [rbp+var_18]
    
loc_29E8:
    pop     rbp
    retn
    

<adler32>:
    
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_14], edx
    mov     edx, [rbp+var_14]
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    _adler32_z
    leave
    retn
    

<adler32_combine_>:
    
    var_38= qword ptr -38h
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_28], rdi
    mov     [rbp+var_30], rsi
    mov     [rbp+var_38], rdx
    cmp     [rbp+var_38], 0
    jns     short loc_2A36
    mov     eax, 0FFFFFFFFh
    jmp     loc_2B65
    
loc_2A36:
    mov     rcx, [rbp+var_38]
    mov     rdx, 800780708697E2E7h
    mov     rax, rcx
    imul    rdx
    lea     rax, [rdx+rcx]
    sar     rax, 0Fh
    mov     rdx, rax
    mov     rax, rcx
    sar     rax, 3Fh
    sub     rdx, rax
    mov     rax, rdx
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     rax, rcx
    mov     [rbp+var_38], rax
    mov     rax, [rbp+var_38]
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_28]
    movzx   eax, ax
    mov     [rbp+var_10], rax
    mov     eax, [rbp+var_14]
    mov     rdx, [rbp+var_10]
    imul    rax, rdx
    mov     [rbp+var_8], rax
    mov     rcx, [rbp+var_8]
    mov     rdx, 0F00E10D2FC5CDh
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 0Fh
    imul    rax, 0FFF1h
    sub     rcx, rax
    mov     rax, rcx
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_30]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    add     rax, rdx
    add     rax, 0FFF0h
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_28]
    shr     rax, 10h
    movzx   edx, ax
    mov     rax, [rbp+var_30]
    shr     rax, 10h
    movzx   eax, ax
    add     rdx, rax
    mov     eax, [rbp+var_14]
    sub     rdx, rax
    mov     rax, [rbp+var_8]
    add     rax, rdx
    add     rax, 0FFF1h
    mov     [rbp+var_8], rax
    cmp     [rbp+var_10], 0FFF0h
    jbe     short loc_2B23
    sub     [rbp+var_10], 0FFF1h
    
loc_2B23:
    cmp     [rbp+var_10], 0FFF0h
    jbe     short loc_2B35
    sub     [rbp+var_10], 0FFF1h
    
loc_2B35:
    cmp     [rbp+var_8], 1FFE1h
    jbe     short loc_2B47
    sub     [rbp+var_8], 1FFE2h
    
loc_2B47:
    cmp     [rbp+var_8], 0FFF0h
    jbe     short loc_2B59
    sub     [rbp+var_8], 0FFF1h
    
loc_2B59:
    mov     rax, [rbp+var_8]
    shl     rax, 10h
    or      rax, [rbp+var_10]
    
loc_2B65:
    pop     rbp
    retn
    

<adler32_combine>:
    
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 18h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_18], rdx
    mov     rdx, [rbp+var_18]
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    adler32_combine_
    leave
    retn
    

<adler32_combine64>:
    
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 18h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_18], rdx
    mov     rdx, [rbp+var_18]
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    adler32_combine_
    leave
    retn
    

<get_crc_table>:
    
    push    rbp
    mov     rbp, rsp
    lea     rax, crc_table
    pop     rbp
    retn
    

<crc32_z>:
    
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_28], rdx
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    cmp     [rbp+var_20], 0
    jnz     short loc_2BFF
    mov     eax, 0
    jmp     short loc_2C41
    
loc_2BFF:
    mov     [rbp+var_C], 1
    lea     rax, [rbp+var_C]
    movzx   eax, byte ptr [rax]
    test    al, al
    jz      short loc_2C2A
    mov     rdx, [rbp+var_28]
    mov     rcx, [rbp+var_20]
    mov     rax, [rbp+var_18]
    mov     rsi, rcx
    mov     rdi, rax
    call    crc32_little
    jmp     short loc_2C41
    
loc_2C2A:
    mov     rdx, [rbp+var_28]
    mov     rcx, [rbp+var_20]
    mov     rax, [rbp+var_18]
    mov     rsi, rcx
    mov     rdi, rax
    call    crc32_big
    
loc_2C41:
    mov     rsi, [rbp+var_8]
    xor     rsi, fs:28h
    jz      short locret_2C55
    call    ___stack_chk_fail
    
locret_2C55:
    leave
    retn
    

<crc32>:
    
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_14], edx
    mov     edx, [rbp+var_14]
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32_z
    leave
    retn
    

<crc32_little>:
    
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    
    
    push    rbp
    mov     rbp, rsp
    push    r12
    push    rbx
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_28], rdx
    mov     rax, [rbp+var_18]
    mov     ebx, eax
    not     ebx
    jmp     short loc_2CD8
    
loc_2C9F:
    mov     rax, [rbp+var_20]
    lea     rdx, [rax+1]
    mov     [rbp+var_20], rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     eax, ebx
    movzx   eax, al
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    shr     ebx, 8
    mov     edx, ebx
    xor     eax, edx
    mov     ebx, eax
    sub     [rbp+var_28], 1
    
loc_2CD8:
    cmp     [rbp+var_28], 0
    jz      short loc_2CEB
    mov     rax, [rbp+var_20]
    and     eax, 3
    test    rax, rax
    jnz     short loc_2C9F
    
loc_2CEB:
    mov     r12, [rbp+var_20]
    jmp     loc_3171
    
loc_2CF4:
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     ebx, ecx
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     ebx, ecx
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    sub     [rbp+var_28], 20h
    
loc_3171:
    cmp     [rbp+var_28], 1Fh
    ja      loc_2CF4
    jmp     loc_3215
    
loc_3181:
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 300h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 200h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 100h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    sub     [rbp+var_28], 4
    
loc_3215:
    cmp     [rbp+var_28], 3
    ja      loc_3181
    mov     [rbp+var_20], r12
    cmp     [rbp+var_28], 0
    jz      short loc_326B
    
loc_322B:
    mov     rax, [rbp+var_20]
    lea     rdx, [rax+1]
    mov     [rbp+var_20], rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     eax, ebx
    movzx   eax, al
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     edx, ebx
    shr     edx, 8
    xor     eax, edx
    mov     ebx, eax
    sub     [rbp+var_28], 1
    cmp     [rbp+var_28], 0
    jnz     short loc_322B
    
loc_326B:
    not     ebx
    mov     eax, ebx
    pop     rbx
    pop     r12
    pop     rbp
    retn
    

<crc32_big>:
    
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    
    
    push    rbp
    mov     rbp, rsp
    push    r12
    push    rbx
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_28], rdx
    mov     rax, [rbp+var_18]
    shr     eax, 18h
    mov     edx, eax
    mov     rax, [rbp+var_18]
    shr     eax, 8
    and     eax, 0FF00h
    add     edx, eax
    mov     rax, [rbp+var_18]
    shl     eax, 8
    and     eax, 0FF0000h
    add     edx, eax
    mov     rax, [rbp+var_18]
    shl     eax, 18h
    lea     ebx, [rdx+rax]
    not     ebx
    jmp     short loc_32FB
    
loc_32BA:
    mov     ecx, ebx
    shr     ecx, 18h
    mov     rax, [rbp+var_20]
    lea     rdx, [rax+1]
    mov     [rbp+var_20], rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     eax, ecx
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    shl     ebx, 8
    mov     edx, ebx
    xor     eax, edx
    mov     ebx, eax
    sub     [rbp+var_28], 1
    
loc_32FB:
    cmp     [rbp+var_28], 0
    jz      short loc_330E
    mov     rax, [rbp+var_20]
    and     eax, 3
    test    rax, rax
    jnz     short loc_32BA
    
loc_330E:
    mov     r12, [rbp+var_20]
    jmp     loc_37C4
    
loc_3317:
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     ebx, ecx
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     ebx, ecx
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    sub     [rbp+var_28], 20h
    
loc_37C4:
    cmp     [rbp+var_28], 1Fh
    ja      loc_3317
    jmp     loc_386E
    
loc_37D4:
    mov     rax, r12
    lea     r12, [rax+4]
    mov     eax, [rax]
    xor     ebx, eax
    movzx   eax, bl
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     edx, [rdx+rax]
    mov     eax, ebx
    shr     eax, 8
    movzx   eax, al
    mov     eax, eax
    add     rax, 500h
    lea     rcx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rcx+rax]
    mov     ecx, edx
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 10h
    movzx   eax, al
    mov     eax, eax
    add     rax, 600h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    xor     ecx, eax
    mov     eax, ebx
    shr     eax, 18h
    mov     eax, eax
    add     rax, 700h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    mov     ebx, ecx
    xor     ebx, eax
    sub     [rbp+var_28], 4
    
loc_386E:
    cmp     [rbp+var_28], 3
    ja      loc_37D4
    mov     [rbp+var_20], r12
    cmp     [rbp+var_28], 0
    jz      short loc_38CC
    
loc_3884:
    mov     ecx, ebx
    shr     ecx, 18h
    mov     rax, [rbp+var_20]
    lea     rdx, [rax+1]
    mov     [rbp+var_20], rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     eax, ecx
    mov     eax, eax
    add     rax, 400h
    lea     rdx, ds:0[rax*4]
    lea     rax, crc_table
    mov     eax, [rdx+rax]
    shl     ebx, 8
    mov     edx, ebx
    xor     eax, edx
    mov     ebx, eax
    sub     [rbp+var_28], 1
    cmp     [rbp+var_28], 0
    jnz     short loc_3884
    
loc_38CC:
    not     ebx
    mov     edx, ebx
    shr     edx, 18h
    mov     eax, ebx
    shr     eax, 8
    and     eax, 0FF00h
    add     edx, eax
    mov     eax, ebx
    shl     eax, 8
    and     eax, 0FF0000h
    add     edx, eax
    mov     eax, ebx
    shl     eax, 18h
    add     eax, edx
    mov     eax, eax
    pop     rbx
    pop     r12
    pop     rbp
    retn
    

<gf2_matrix_times>:
    
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_8], 0
    jmp     short loc_392F
    
loc_390F:
    mov     rax, [rbp+var_20]
    and     eax, 1
    test    rax, rax
    jz      short loc_3926
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    xor     [rbp+var_8], rax
    
loc_3926:
    shr     [rbp+var_20], 1
    add     [rbp+var_18], 8
    
loc_392F:
    cmp     [rbp+var_20], 0
    jnz     short loc_390F
    mov     rax, [rbp+var_8]
    pop     rbp
    retn
    

<gf2_matrix_square>:
    
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_C= dword ptr -0Ch
    
    
    push    rbp
    mov     rbp, rsp
    push    rbx
    sub     rsp, 20h
    mov     [rbp+var_20], rdi
    mov     [rbp+var_28], rsi
    mov     [rbp+var_C], 0
    jmp     short loc_3998
    
loc_3956:
    mov     eax, [rbp+var_C]
    cdqe
    lea     rdx, ds:0[rax*8]
    mov     rax, [rbp+var_28]
    add     rax, rdx
    mov     rdx, [rax]
    mov     eax, [rbp+var_C]
    cdqe
    lea     rcx, ds:0[rax*8]
    mov     rax, [rbp+var_20]
    lea     rbx, [rcx+rax]
    mov     rax, [rbp+var_28]
    mov     rsi, rdx
    mov     rdi, rax
    call    gf2_matrix_times
    mov     [rbx], rax
    add     [rbp+var_C], 1
    
loc_3998:
    cmp     [rbp+var_C], 1Fh
    jle     short loc_3956
    nop
    add     rsp, 20h
    pop     rbx
    pop     rbp
    retn
    

<crc32_combine_>:
    
    var_238= qword ptr -238h
    var_230= qword ptr -230h
    var_228= qword ptr -228h
    var_21C= dword ptr -21Ch
    var_218= qword ptr -218h
    var_210= byte ptr -210h
    var_110= qword ptr -110h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 240h
    mov     [rbp+var_228], rdi
    mov     [rbp+var_230], rsi
    mov     [rbp+var_238], rdx
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    cmp     [rbp+var_238], 0
    jg      short loc_39EB
    mov     rax, [rbp+var_228]
    jmp     loc_3B3C
    
loc_39EB:
    mov     eax, 0EDB88320h
    mov     [rbp+var_110], rax
    mov     [rbp+var_218], 1
    mov     [rbp+var_21C], 1
    jmp     short loc_3A33
    
loc_3A0E:
    mov     eax, [rbp+var_21C]
    cdqe
    mov     rdx, [rbp+var_218]
    mov     [rbp+rax*8+var_110], rdx
    shl     [rbp+var_218], 1
    add     [rbp+var_21C], 1
    
loc_3A33:
    cmp     [rbp+var_21C], 1Fh
    jle     short loc_3A0E
    lea     rdx, [rbp+var_110]
    lea     rax, [rbp+var_210]
    mov     rsi, rdx
    mov     rdi, rax
    call    gf2_matrix_square
    lea     rdx, [rbp+var_210]
    lea     rax, [rbp+var_110]
    mov     rsi, rdx
    mov     rdi, rax
    call    gf2_matrix_square
    
loc_3A6E:
    lea     rdx, [rbp+var_110]
    lea     rax, [rbp+var_210]
    mov     rsi, rdx
    mov     rdi, rax
    call    gf2_matrix_square
    mov     rax, [rbp+var_238]
    and     eax, 1
    test    rax, rax
    jz      short loc_3AB6
    mov     rdx, [rbp+var_228]
    lea     rax, [rbp+var_210]
    mov     rsi, rdx
    mov     rdi, rax
    call    gf2_matrix_times
    mov     [rbp+var_228], rax
    
loc_3AB6:
    sar     [rbp+var_238], 1
    cmp     [rbp+var_238], 0
    jz      short loc_3B26
    lea     rdx, [rbp+var_210]
    lea     rax, [rbp+var_110]
    mov     rsi, rdx
    mov     rdi, rax
    call    gf2_matrix_square
    mov     rax, [rbp+var_238]
    and     eax, 1
    test    rax, rax
    jz      short loc_3B0F
    mov     rdx, [rbp+var_228]
    lea     rax, [rbp+var_110]
    mov     rsi, rdx
    mov     rdi, rax
    call    gf2_matrix_times
    mov     [rbp+var_228], rax
    
loc_3B0F:
    sar     [rbp+var_238], 1
    cmp     [rbp+var_238], 0
    jnz     loc_3A6E
    jmp     short loc_3B27
    
loc_3B26:
    nop
    
loc_3B27:
    mov     rax, [rbp+var_230]
    xor     [rbp+var_228], rax
    mov     rax, [rbp+var_228]
    
loc_3B3C:
    mov     rcx, [rbp+var_8]
    xor     rcx, fs:28h
    jz      short locret_3B50
    call    ___stack_chk_fail
    
locret_3B50:
    leave
    retn
    

<crc32_combine>:
    
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_18], rdx
    mov     rdx, [rbp+var_18]
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    crc32_combine_
    leave
    retn
    

<crc32_combine64>:
    
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_18], rdx
    mov     rdx, [rbp+var_18]
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    crc32_combine_
    leave
    retn
    

<slide_hash>:
    
    var_28= qword ptr -28h
    var_14= dword ptr -14h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_28], rdi
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    mov     [rbp+var_10], eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+84h]
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+78h]
    mov     edx, [rbp+var_14]
    add     rdx, rdx
    add     rax, rdx
    mov     [rbp+var_8], rax
    
loc_3BE0:
    sub     [rbp+var_8], 2
    mov     rax, [rbp+var_8]
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_C], eax
    mov     eax, [rbp+var_C]
    cmp     eax, [rbp+var_10]
    jb      short loc_3C04
    mov     eax, [rbp+var_C]
    sub     eax, [rbp+var_10]
    mov     edx, eax
    jmp     short loc_3C09
    
loc_3C04:
    mov     edx, 0
    
loc_3C09:
    mov     rax, [rbp+var_8]
    mov     [rax], dx
    sub     [rbp+var_14], 1
    cmp     [rbp+var_14], 0
    jnz     short loc_3BE0
    mov     eax, [rbp+var_10]
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+70h]
    mov     edx, [rbp+var_14]
    add     rdx, rdx
    add     rax, rdx
    mov     [rbp+var_8], rax
    
loc_3C35:
    sub     [rbp+var_8], 2
    mov     rax, [rbp+var_8]
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_C], eax
    mov     eax, [rbp+var_C]
    cmp     eax, [rbp+var_10]
    jb      short loc_3C59
    mov     eax, [rbp+var_C]
    sub     eax, [rbp+var_10]
    mov     edx, eax
    jmp     short loc_3C5E
    
loc_3C59:
    mov     edx, 0
    
loc_3C5E:
    mov     rax, [rbp+var_8]
    mov     [rax], dx
    sub     [rbp+var_14], 1
    cmp     [rbp+var_14], 0
    jnz     short loc_3C35
    nop
    pop     rbp
    retn
    

<deflateInit_>:
    
    var_18= qword ptr -18h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_C], esi
    mov     [rbp+var_18], rdx
    mov     [rbp+var_10], ecx
    mov     esi, [rbp+var_C]
    mov     rax, [rbp+var_8]
    mov     edx, [rbp+var_10]
    push    rdx
    push    [rbp+var_18]
    mov     r9d, 0
    mov     r8d, 8
    mov     ecx, 0Fh
    mov     edx, 8
    mov     rdi, rax
    call    _deflateInit2_
    add     rsp, 10h
    leave
    retn
    

<deflateInit2_>:
    
    var_3C= dword ptr -3Ch
    var_38= dword ptr -38h
    var_34= dword ptr -34h
    var_30= dword ptr -30h
    var_2C= dword ptr -2Ch
    var_28= qword ptr -28h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    arg_0= qword ptr  10h
    arg_8= dword ptr  18h
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_2C], esi
    mov     [rbp+var_30], edx
    mov     [rbp+var_34], ecx
    mov     [rbp+var_38], r8d
    mov     [rbp+var_3C], r9d
    mov     [rbp+var_14], 1
    cmp     [rbp+arg_0], 0
    jz      short loc_3CFD
    mov     rax, [rbp+arg_0]
    movzx   edx, byte ptr [rax]
    movzx   eax, cs:my_version_3734
    cmp     dl, al
    jnz     short loc_3CFD
    cmp     [rbp+arg_8], 70h
    jz      short loc_3D07
    
loc_3CFD:
    mov     eax, 0FFFFFFFAh
    jmp     locret_40E7
    
loc_3D07:
    cmp     [rbp+var_28], 0
    jnz     short loc_3D18
    mov     eax, 0FFFFFFFEh
    jmp     locret_40E7
    
loc_3D18:
    mov     rax, [rbp+var_28]
    mov     qword ptr [rax+30h], 0
    mov     rax, [rbp+var_28]
    mov     rax, [rax+40h]
    test    rax, rax
    jnz     short loc_3D4C
    mov     rax, [rbp+var_28]
    lea     rdx, zcalloc
    mov     [rax+40h], rdx
    mov     rax, [rbp+var_28]
    mov     qword ptr [rax+50h], 0
    
loc_3D4C:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+48h]
    test    rax, rax
    jnz     short loc_3D68
    mov     rax, [rbp+var_28]
    lea     rdx, zcfree
    mov     [rax+48h], rdx
    
loc_3D68:
    cmp     [rbp+var_2C], 0FFFFFFFFh
    jnz     short loc_3D75
    mov     [rbp+var_2C], 6
    
loc_3D75:
    cmp     [rbp+var_34], 0
    jns     short loc_3D87
    mov     [rbp+var_14], 0
    neg     [rbp+var_34]
    jmp     short loc_3D98
    
loc_3D87:
    cmp     [rbp+var_34], 0Fh
    jle     short loc_3D98
    mov     [rbp+var_14], 2
    sub     [rbp+var_34], 10h
    
loc_3D98:
    cmp     [rbp+var_38], 0
    jle     short loc_3DDA
    cmp     [rbp+var_38], 9
    jg      short loc_3DDA
    cmp     [rbp+var_30], 8
    jnz     short loc_3DDA
    cmp     [rbp+var_34], 7
    jle     short loc_3DDA
    cmp     [rbp+var_34], 0Fh
    jg      short loc_3DDA
    cmp     [rbp+var_2C], 0
    js      short loc_3DDA
    cmp     [rbp+var_2C], 9
    jg      short loc_3DDA
    cmp     [rbp+var_3C], 0
    js      short loc_3DDA
    cmp     [rbp+var_3C], 4
    jg      short loc_3DDA
    cmp     [rbp+var_34], 8
    jnz     short loc_3DE4
    cmp     [rbp+var_14], 1
    jz      short loc_3DE4
    
loc_3DDA:
    mov     eax, 0FFFFFFFEh
    jmp     locret_40E7
    
loc_3DE4:
    cmp     [rbp+var_34], 8
    jnz     short loc_3DF1
    mov     [rbp+var_34], 9
    
loc_3DF1:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_28]
    mov     rcx, [rdx+50h]
    mov     edx, 1740h
    mov     esi, 1
    mov     rdi, rcx
    call    rax
    mov     [rbp+var_10], rax
    cmp     [rbp+var_10], 0
    jnz     short loc_3E25
    mov     eax, 0FFFFFFFCh
    jmp     locret_40E7
    
loc_3E25:
    mov     rax, [rbp+var_28]
    mov     rdx, [rbp+var_10]
    mov     [rax+38h], rdx
    mov     rax, [rbp+var_10]
    mov     rdx, [rbp+var_28]
    mov     [rax], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 2Ah
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_14]
    mov     [rax+30h], edx
    mov     rax, [rbp+var_10]
    mov     qword ptr [rax+38h], 0
    mov     edx, [rbp+var_34]
    mov     rax, [rbp+var_10]
    mov     [rax+54h], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+54h]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+50h], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+50h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_10]
    mov     [rax+58h], edx
    mov     eax, [rbp+var_38]
    lea     edx, [rax+7]
    mov     rax, [rbp+var_10]
    mov     [rax+88h], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+88h]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+84h], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+84h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_10]
    mov     [rax+8Ch], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+88h]
    add     eax, 2
    mov     edx, 0AAAAAAABh
    mul     edx
    shr     edx, 1
    mov     rax, [rbp+var_10]
    mov     [rax+90h], edx
    mov     rax, [rbp+var_28]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     esi, [rdx+50h]
    mov     rdx, [rbp+var_28]
    mov     rcx, [rdx+50h]
    mov     edx, 2
    mov     rdi, rcx
    call    rax
    mov     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+60h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     esi, [rdx+50h]
    mov     rdx, [rbp+var_28]
    mov     rcx, [rdx+50h]
    mov     edx, 2
    mov     rdi, rcx
    call    rax
    mov     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+70h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     esi, [rdx+84h]
    mov     rdx, [rbp+var_28]
    mov     rcx, [rdx+50h]
    mov     edx, 2
    mov     rdi, rcx
    call    rax
    mov     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+78h], rdx
    mov     rax, [rbp+var_10]
    mov     qword ptr [rax+1738h], 0
    mov     eax, [rbp+var_38]
    add     eax, 6
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+1708h], edx
    mov     rax, [rbp+var_28]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     esi, [rdx+1708h]
    mov     rdx, [rbp+var_28]
    mov     rcx, [rdx+50h]
    mov     edx, 4
    mov     rdi, rcx
    call    rax
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_10]
    mov     rdx, [rbp+var_8]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+1708h]
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_10]
    mov     rax, [rax+60h]
    test    rax, rax
    jz      short loc_4032
    mov     rax, [rbp+var_10]
    mov     rax, [rax+70h]
    test    rax, rax
    jz      short loc_4032
    mov     rax, [rbp+var_10]
    mov     rax, [rax+78h]
    test    rax, rax
    jz      short loc_4032
    mov     rax, [rbp+var_10]
    mov     rax, [rax+10h]
    test    rax, rax
    jnz     short loc_4066
    
loc_4032:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 29Ah
    lea     rax, z_errmsg
    mov     rdx, [rax+30h]
    mov     rax, [rbp+var_28]
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    _deflateEnd
    mov     eax, 0FFFFFFFCh
    jmp     locret_40E7
    
loc_4066:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+1708h]
    shr     eax, 1
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_8]
    add     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+1710h], rdx
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+1708h]
    mov     ecx, eax
    mov     rax, rcx
    add     rax, rax
    add     rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+1700h], rdx
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_2C]
    mov     [rax+0C4h], edx
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_3C]
    mov     [rax+0C8h], edx
    mov     eax, [rbp+var_30]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+48h], dl
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    _deflateReset
    
locret_40E7:
    leave
    retn
    

<deflateStateCheck>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jz      short loc_4112
    mov     rax, [rbp+var_18]
    mov     rax, [rax+40h]
    test    rax, rax
    jz      short loc_4112
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    test    rax, rax
    jnz     short loc_411C
    
loc_4112:
    mov     eax, 1
    jmp     loc_41AA
    
loc_411C:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    cmp     [rbp+var_8], 0
    jz      short loc_419E
    mov     rax, [rbp+var_8]
    mov     rax, [rax]
    cmp     [rbp+var_18], rax
    jnz     short loc_419E
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 2Ah
    jz      short loc_41A5
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 39h
    jz      short loc_41A5
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 45h
    jz      short loc_41A5
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 49h
    jz      short loc_41A5
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 5Bh
    jz      short loc_41A5
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 67h
    jz      short loc_41A5
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 71h
    jz      short loc_41A5
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 29Ah
    jz      short loc_41A5
    
loc_419E:
    mov     eax, 1
    jmp     short loc_41AA
    
loc_41A5:
    mov     eax, 0
    
loc_41AA:
    pop     rbp
    retn
    

<deflateSetDictionary>:
    
    var_34= dword ptr -34h
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_30], rsi
    mov     [rbp+var_34], edx
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jnz     short loc_41D6
    cmp     [rbp+var_30], 0
    jnz     short loc_41E0
    
loc_41D6:
    mov     eax, 0FFFFFFFEh
    jmp     locret_44FE
    
loc_41E0:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+38h]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+30h]
    mov     [rbp+var_18], eax
    cmp     [rbp+var_18], 2
    jz      short loc_421C
    cmp     [rbp+var_18], 1
    jnz     short loc_420E
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    cmp     eax, 2Ah
    jnz     short loc_421C
    
loc_420E:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0B4h]
    test    eax, eax
    jz      short loc_4226
    
loc_421C:
    mov     eax, 0FFFFFFFEh
    jmp     locret_44FE
    
loc_4226:
    cmp     [rbp+var_18], 1
    jnz     short loc_4251
    mov     rax, [rbp+var_28]
    mov     rax, [rax+60h]
    mov     edx, [rbp+var_34]
    mov     rcx, [rbp+var_30]
    mov     rsi, rcx
    mov     rdi, rax
    call    _adler32
    mov     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+60h], rdx
    
loc_4251:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+30h], 0
    mov     rax, [rbp+var_10]
    mov     eax, [rax+50h]
    cmp     [rbp+var_34], eax
    jb      loc_4305
    cmp     [rbp+var_18], 0
    jnz     short loc_42E7
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+84h]
    sub     eax, 1
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    mov     rax, [rbp+var_10]
    mov     eax, [rax+84h]
    sub     eax, 1
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+78h]
    mov     esi, 0
    mov     rdi, rax
    call    _memset
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+0ACh], 0
    mov     rax, [rbp+var_10]
    mov     qword ptr [rax+98h], 0
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+172Ch], 0
    
loc_42E7:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+50h]
    mov     edx, [rbp+var_34]
    sub     edx, eax
    mov     eax, edx
    mov     eax, eax
    add     [rbp+var_30], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+50h]
    mov     [rbp+var_34], eax
    
loc_4305:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+8]
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_28]
    mov     edx, [rbp+var_34]
    mov     [rax+8], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rbp+var_30]
    mov     [rax], rdx
    mov     rax, [rbp+var_10]
    mov     rdi, rax
    call    fill_window
    jmp     loc_443E
    
loc_4340:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0ACh]
    mov     [rbp+var_20], eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0B4h]
    sub     eax, 2
    mov     [rbp+var_1C], eax
    
loc_435D:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+80h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+90h]
    mov     ecx, eax
    shl     edx, cl
    mov     ecx, edx
    mov     rax, [rbp+var_10]
    mov     rax, [rax+60h]
    mov     edx, [rbp+var_20]
    add     edx, 2
    mov     edx, edx
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     ecx, eax
    mov     edx, ecx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8Ch]
    and     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+70h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+58h]
    and     eax, [rbp+var_20]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    movzx   eax, word ptr [rcx]
    mov     [rdx], ax
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     edx, [rbp+var_20]
    mov     [rax], dx
    add     [rbp+var_20], 1
    sub     [rbp+var_1C], 1
    cmp     [rbp+var_1C], 0
    jnz     loc_435D
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_20]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+0B4h], 2
    mov     rax, [rbp+var_10]
    mov     rdi, rax
    call    fill_window
    
loc_443E:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0B4h]
    cmp     eax, 2
    ja      loc_4340
    mov     rax, [rbp+var_10]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0B4h]
    add     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_10]
    mov     edx, [rax+0B4h]
    mov     rax, [rbp+var_10]
    mov     [rax+172Ch], edx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+0B4h], 0
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+0B8h], 2
    mov     rax, [rbp+var_10]
    mov     edx, [rax+0B8h]
    mov     rax, [rbp+var_10]
    mov     [rax+0A0h], edx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+0A8h], 0
    mov     rax, [rbp+var_28]
    mov     rdx, [rbp+var_8]
    mov     [rax], rdx
    mov     rax, [rbp+var_28]
    mov     edx, [rbp+var_14]
    mov     [rax+8], edx
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_18]
    mov     [rax+30h], edx
    mov     eax, 0
    
locret_44FE:
    leave
    retn
    

<deflateGetDictionary>:
    
    var_28= qword ptr -28h
    dest= qword ptr -20h
    var_18= qword ptr -18h
    n= qword ptr -0Ch
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+dest], rsi
    mov     [rbp+var_28], rdx
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jz      short loc_452E
    mov     eax, 0FFFFFFFEh
    jmp     locret_45CC
    
loc_452E:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+n+4], rax
    mov     rax, [rbp+n+4]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+n+4]
    mov     eax, [rax+0B4h]
    add     eax, edx
    mov     dword ptr [rbp+n], eax
    mov     rax, [rbp+n+4]
    mov     eax, [rax+50h]
    cmp     dword ptr [rbp+n], eax
    jbe     short loc_4569
    mov     rax, [rbp+n+4]
    mov     eax, [rax+50h]
    mov     dword ptr [rbp+n], eax
    
loc_4569:
    cmp     [rbp+dest], 0
    jz      short loc_45B7
    cmp     dword ptr [rbp+n], 0
    jz      short loc_45B7
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+n+4]
    mov     rcx, [rax+60h]
    mov     rax, [rbp+n+4]
    mov     eax, [rax+0ACh]
    mov     esi, eax
    mov     rax, [rbp+n+4]
    mov     eax, [rax+0B4h]
    mov     eax, eax
    add     rsi, rax
    mov     eax, dword ptr [rbp+n]
    sub     rsi, rax
    mov     rax, rsi
    add     rcx, rax
    mov     rax, [rbp+dest]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    
loc_45B7:
    cmp     [rbp+var_28], 0
    jz      short loc_45C7
    mov     rax, [rbp+var_28]
    mov     edx, dword ptr [rbp+n]
    mov     [rax], edx
    
loc_45C7:
    mov     eax, 0
    
locret_45CC:
    leave
    retn
    

<deflateResetKeep>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jz      short loc_45F4
    mov     eax, 0FFFFFFFEh
    jmp     locret_46FD
    
loc_45F4:
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+28h], 0
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+28h]
    mov     rax, [rbp+var_18]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+30h], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+58h], 2
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+28h], 0
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    test    eax, eax
    jns     short loc_466C
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    neg     eax
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+30h], edx
    
loc_466C:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    cmp     eax, 2
    jz      short loc_4691
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    test    eax, eax
    jz      short loc_468A
    mov     eax, 2Ah
    jmp     short loc_4696
    
loc_468A:
    mov     eax, 71h
    jmp     short loc_4696
    
loc_4691:
    mov     eax, 39h
    
loc_4696:
    mov     rdx, [rbp+var_8]
    mov     [rdx+8], eax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    cmp     eax, 2
    jnz     short loc_46C2
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _crc32
    mov     rdx, rax
    jmp     short loc_46D9
    
loc_46C2:
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _adler32
    mov     rdx, rax
    
loc_46D9:
    mov     rax, [rbp+var_18]
    mov     [rax+60h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    _tr_init
    mov     eax, 0
    
locret_46FD:
    leave
    retn
    

<deflateReset>:
    
    var_18= qword ptr -18h
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    _deflateResetKeep
    mov     [rbp+var_4], eax
    cmp     [rbp+var_4], 0
    jnz     short loc_4730
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     rdi, rax
    call    lm_init
    
loc_4730:
    mov     eax, [rbp+var_4]
    leave
    retn
    

<deflateSetHeader>:
    
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jnz     short loc_4765
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+30h]
    cmp     eax, 2
    jz      short loc_476C
    
loc_4765:
    mov     eax, 0FFFFFFFEh
    jmp     short locret_4781
    
loc_476C:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rdx, [rbp+var_10]
    mov     [rax+38h], rdx
    mov     eax, 0
    
locret_4781:
    leave
    retn
    

<deflatePending>:
    
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 18h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_18], rdx
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jz      short loc_47AE
    mov     eax, 0FFFFFFFEh
    jmp     short locret_47E9
    
loc_47AE:
    cmp     [rbp+var_10], 0
    jz      short loc_47C9
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+28h]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax], edx
    
loc_47C9:
    cmp     [rbp+var_18], 0
    jz      short loc_47E4
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     edx, [rax+1734h]
    mov     rax, [rbp+var_18]
    mov     [rax], edx
    
loc_47E4:
    mov     eax, 0
    
locret_47E9:
    leave
    retn
    

<deflatePrime>:
    
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     [rbp+var_20], edx
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jz      short loc_4817
    mov     eax, 0FFFFFFFEh
    jmp     locret_48ED
    
loc_4817:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+20h]
    add     rax, 2
    cmp     rdx, rax
    jnb     short loc_4849
    mov     eax, 0FFFFFFFBh
    jmp     locret_48ED
    
loc_4849:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1734h]
    mov     edx, 10h
    sub     edx, eax
    mov     eax, edx
    mov     [rbp+var_C], eax
    mov     eax, [rbp+var_C]
    cmp     eax, [rbp+var_1C]
    jle     short loc_486D
    mov     eax, [rbp+var_1C]
    mov     [rbp+var_C], eax
    
loc_486D:
    mov     rax, [rbp+var_8]
    movzx   edx, word ptr [rax+1730h]
    mov     eax, [rbp+var_C]
    mov     esi, 1
    mov     ecx, eax
    shl     esi, cl
    mov     eax, esi
    sub     eax, 1
    and     eax, [rbp+var_20]
    mov     esi, eax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     esi, cl
    mov     eax, esi
    or      edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_8]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_C]
    add     edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+1734h], edx
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    _tr_flush_bits
    mov     eax, [rbp+var_C]
    mov     ecx, eax
    sar     [rbp+var_20], cl
    mov     eax, [rbp+var_C]
    sub     [rbp+var_1C], eax
    cmp     [rbp+var_1C], 0
    jnz     loc_4849
    mov     eax, 0
    
locret_48ED:
    leave
    retn
    

<deflateParams>:
    
    var_30= dword ptr -30h
    var_2C= dword ptr -2Ch
    var_28= qword ptr -28h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_2C], esi
    mov     [rbp+var_30], edx
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jz      short loc_491B
    mov     eax, 0FFFFFFFEh
    jmp     locret_4B42
    
loc_491B:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+38h]
    mov     [rbp+var_10], rax
    cmp     [rbp+var_2C], 0FFFFFFFFh
    jnz     short loc_4934
    mov     [rbp+var_2C], 6
    
loc_4934:
    cmp     [rbp+var_2C], 0
    js      short loc_494C
    cmp     [rbp+var_2C], 9
    jg      short loc_494C
    cmp     [rbp+var_30], 0
    js      short loc_494C
    cmp     [rbp+var_30], 4
    jle     short loc_4956
    
loc_494C:
    mov     eax, 0FFFFFFFEh
    jmp     locret_4B42
    
loc_4956:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0C4h]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, off_21CCA8
    mov     rax, [rdx+rax]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0C8h]
    cmp     [rbp+var_30], eax
    jnz     short loc_49A4
    mov     eax, [rbp+var_2C]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, off_21CCA8
    mov     rax, [rdx+rax]
    cmp     [rbp+var_8], rax
    jz      short loc_49EB
    
loc_49A4:
    mov     rax, [rbp+var_10]
    mov     rax, [rax+1738h]
    test    rax, rax
    jz      short loc_49EB
    mov     rax, [rbp+var_28]
    mov     esi, 5
    mov     rdi, rax
    call    _deflate
    mov     [rbp+var_14], eax
    cmp     [rbp+var_14], 0FFFFFFFEh
    jnz     short loc_49D6
    mov     eax, [rbp+var_14]
    jmp     locret_4B42
    
loc_49D6:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_49EB
    mov     eax, 0FFFFFFFBh
    jmp     locret_4B42
    
loc_49EB:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0C4h]
    cmp     [rbp+var_2C], eax
    jz      loc_4B30
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0C4h]
    test    eax, eax
    jnz     loc_4A93
    mov     rax, [rbp+var_10]
    mov     eax, [rax+1728h]
    test    eax, eax
    jz      short loc_4A93
    mov     rax, [rbp+var_10]
    mov     eax, [rax+1728h]
    cmp     eax, 1
    jnz     short loc_4A3B
    mov     rax, [rbp+var_10]
    mov     rdi, rax
    call    slide_hash
    jmp     short loc_4A5D
    
loc_4A3B:
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+84h]
    sub     eax, 1
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    
loc_4A5D:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+84h]
    sub     eax, 1
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+78h]
    mov     esi, 0
    mov     rdi, rax
    call    _memset
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+1728h], 0
    
loc_4A93:
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_2C]
    mov     [rax+0C4h], edx
    mov     eax, [rbp+var_2C]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, unk_21CCA2
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    mov     [rax+0C0h], edx
    mov     eax, [rbp+var_2C]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, configuration_table
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    mov     [rax+0CCh], edx
    mov     eax, [rbp+var_2C]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, unk_21CCA4
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    mov     [rax+0D0h], edx
    mov     eax, [rbp+var_2C]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, unk_21CCA6
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    mov     [rax+0BCh], edx
    
loc_4B30:
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_30]
    mov     [rax+0C8h], edx
    mov     eax, 0
    
locret_4B42:
    leave
    retn
    

<deflateTune>:
    
    var_28= dword ptr -28h
    var_24= dword ptr -24h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 28h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     [rbp+var_20], edx
    mov     [rbp+var_24], ecx
    mov     [rbp+var_28], r8d
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jz      short loc_4B74
    mov     eax, 0FFFFFFFEh
    jmp     short locret_4BB9
    
loc_4B74:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     edx, [rbp+var_1C]
    mov     rax, [rbp+var_8]
    mov     [rax+0CCh], edx
    mov     edx, [rbp+var_20]
    mov     rax, [rbp+var_8]
    mov     [rax+0C0h], edx
    mov     rax, [rbp+var_8]
    mov     edx, [rbp+var_24]
    mov     [rax+0D0h], edx
    mov     edx, [rbp+var_28]
    mov     rax, [rbp+var_8]
    mov     [rax+0BCh], edx
    mov     eax, 0
    
locret_4BB9:
    leave
    retn
    

<deflateBound>:
    
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_30], rsi
    mov     rax, [rbp+var_30]
    add     rax, 7
    shr     rax, 3
    mov     rdx, rax
    mov     rax, [rbp+var_30]
    add     rdx, rax
    mov     rax, [rbp+var_30]
    add     rax, 3Fh
    shr     rax, 6
    add     rax, rdx
    add     rax, 5
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jz      short loc_4C15
    mov     rax, [rbp+var_10]
    add     rax, 6
    jmp     locret_4D82
    
loc_4C15:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jz      short loc_4C47
    cmp     eax, 2
    jz      short loc_4C6A
    test    eax, eax
    jnz     loc_4D1C
    mov     [rbp+var_20], 0
    jmp     loc_4D27
    
loc_4C47:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0ACh]
    test    eax, eax
    jz      short loc_4C5C
    mov     eax, 0Ah
    jmp     short loc_4C61
    
loc_4C5C:
    mov     eax, 6
    
loc_4C61:
    mov     [rbp+var_20], rax
    jmp     loc_4D27
    
loc_4C6A:
    mov     [rbp+var_20], 12h
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    test    rax, rax
    jz      loc_4D26
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+18h]
    test    rax, rax
    jz      short loc_4CA8
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+20h]
    add     eax, 2
    mov     eax, eax
    add     [rbp+var_20], rax
    
loc_4CA8:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+28h]
    mov     [rbp+var_18], rax
    cmp     [rbp+var_18], 0
    jz      short loc_4CD7
    
loc_4CBF:
    add     [rbp+var_20], 1
    mov     rax, [rbp+var_18]
    lea     rdx, [rax+1]
    mov     [rbp+var_18], rdx
    movzx   eax, byte ptr [rax]
    test    al, al
    jnz     short loc_4CBF
    
loc_4CD7:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+38h]
    mov     [rbp+var_18], rax
    cmp     [rbp+var_18], 0
    jz      short loc_4D06
    
loc_4CEE:
    add     [rbp+var_20], 1
    mov     rax, [rbp+var_18]
    lea     rdx, [rax+1]
    mov     [rbp+var_18], rdx
    movzx   eax, byte ptr [rax]
    test    al, al
    jnz     short loc_4CEE
    
loc_4D06:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_4D26
    add     [rbp+var_20], 2
    jmp     short loc_4D26
    
loc_4D1C:
    mov     [rbp+var_20], 6
    jmp     short loc_4D27
    
loc_4D26:
    nop
    
loc_4D27:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+54h]
    cmp     eax, 0Fh
    jnz     short loc_4D42
    mov     rax, [rbp+var_8]
    mov     eax, [rax+88h]
    cmp     eax, 0Fh
    jz      short loc_4D4F
    
loc_4D42:
    mov     rdx, [rbp+var_10]
    mov     rax, [rbp+var_20]
    add     rax, rdx
    jmp     short locret_4D82
    
loc_4D4F:
    mov     rax, [rbp+var_30]
    shr     rax, 0Ch
    mov     rdx, rax
    mov     rax, [rbp+var_30]
    add     rdx, rax
    mov     rax, [rbp+var_30]
    shr     rax, 0Eh
    add     rdx, rax
    mov     rax, [rbp+var_30]
    shr     rax, 19h
    add     rdx, rax
    mov     rax, [rbp+var_20]
    add     rax, rdx
    add     rax, 7
    
locret_4D82:
    leave
    retn
    

<putShortMSB>:
    
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_8], rdi
    mov     [rbp+var_C], esi
    mov     eax, [rbp+var_C]
    shr     eax, 8
    mov     edi, eax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, [rbp+var_C]
    mov     [rax], dl
    nop
    pop     rbp
    retn
    

<flush_pending>:
    
    var_18= qword ptr -18h
    n= qword ptr -0Ch
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+n+4], rax
    mov     rax, [rbp+n+4]
    mov     rdi, rax
    call    _tr_flush_bits
    mov     rax, [rbp+n+4]
    mov     rax, [rax+28h]
    mov     dword ptr [rbp+n], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+20h]
    cmp     dword ptr [rbp+n], eax
    jbe     short loc_4E26
    mov     rax, [rbp+var_18]
    mov     eax, [rax+20h]
    mov     dword ptr [rbp+n], eax
    
loc_4E26:
    cmp     dword ptr [rbp+n], 0
    jz      loc_4ED8
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+n+4]
    mov     rcx, [rax+20h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+18h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+18h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+18h], rdx
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+20h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+n+4]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+28h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+20h]
    sub     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], edx
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+28h]
    mov     eax, dword ptr [rbp+n]
    sub     rdx, rax
    mov     rax, [rbp+n+4]
    mov     [rax+28h], rdx
    mov     rax, [rbp+n+4]
    mov     rax, [rax+28h]
    test    rax, rax
    jnz     short locret_4ED9
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+n+4]
    mov     [rax+20h], rdx
    jmp     short locret_4ED9
    
loc_4ED8:
    nop
    
locret_4ED9:
    leave
    retn
    

<deflate>:
    
    var_4C= dword ptr -4Ch
    var_48= qword ptr -48h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    var_38= qword ptr -38h
    n= qword ptr -30h
    var_28= dword ptr -28h
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 50h
    mov     [rbp+var_48], rdi
    mov     [rbp+var_4C], esi
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jnz     short loc_4F06
    cmp     [rbp+var_4C], 5
    jg      short loc_4F06
    cmp     [rbp+var_4C], 0
    jns     short loc_4F10
    
loc_4F06:
    mov     eax, 0FFFFFFFEh
    jmp     locret_61BE
    
loc_4F10:
    mov     rax, [rbp+var_48]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+18h]
    test    rax, rax
    jz      short loc_4F54
    mov     rax, [rbp+var_48]
    mov     eax, [rax+8]
    test    eax, eax
    jz      short loc_4F40
    mov     rax, [rbp+var_48]
    mov     rax, [rax]
    test    rax, rax
    jz      short loc_4F54
    
loc_4F40:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 29Ah
    jnz     short loc_4F71
    cmp     [rbp+var_4C], 4
    jz      short loc_4F71
    
loc_4F54:
    lea     rax, z_errmsg
    mov     rdx, [rax+20h]
    mov     rax, [rbp+var_48]
    mov     [rax+30h], rdx
    mov     eax, 0FFFFFFFEh
    jmp     locret_61BE
    
loc_4F71:
    mov     rax, [rbp+var_48]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_4F99
    lea     rax, z_errmsg
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_48]
    mov     [rax+30h], rdx
    mov     eax, 0FFFFFFFBh
    jmp     locret_61BE
    
loc_4F99:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+4Ch]
    mov     dword ptr [rbp+var_38+4], eax
    mov     rax, [rbp+var_8]
    mov     edx, [rbp+var_4C]
    mov     [rax+4Ch], edx
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      short loc_4FE6
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_48]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_504C
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_4FE6:
    mov     rax, [rbp+var_48]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_504C
    mov     eax, [rbp+var_4C]
    add     eax, eax
    cmp     [rbp+var_4C], 4
    jle     short loc_5003
    mov     edx, 9
    jmp     short loc_5008
    
loc_5003:
    mov     edx, 0
    
loc_5008:
    sub     eax, edx
    mov     edx, eax
    mov     eax, dword ptr [rbp+var_38+4]
    add     eax, eax
    cmp     dword ptr [rbp+var_38+4], 4
    jle     short loc_501E
    mov     ecx, 9
    jmp     short loc_5023
    
loc_501E:
    mov     ecx, 0
    
loc_5023:
    sub     eax, ecx
    cmp     edx, eax
    jg      short loc_504C
    cmp     [rbp+var_4C], 4
    jz      short loc_504C
    lea     rax, z_errmsg
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_48]
    mov     [rax+30h], rdx
    mov     eax, 0FFFFFFFBh
    jmp     locret_61BE
    
loc_504C:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 29Ah
    jnz     short loc_5082
    mov     rax, [rbp+var_48]
    mov     eax, [rax+8]
    test    eax, eax
    jz      short loc_5082
    lea     rax, z_errmsg
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_48]
    mov     [rax+30h], rdx
    mov     eax, 0FFFFFFFBh
    jmp     locret_61BE
    
loc_5082:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 2Ah
    jnz     loc_51FC
    mov     rax, [rbp+var_8]
    mov     eax, [rax+54h]
    sub     eax, 8
    shl     eax, 4
    add     eax, 8
    shl     eax, 8
    mov     [rbp+var_40], eax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C8h]
    cmp     eax, 1
    jg      short loc_50C6
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cmp     eax, 1
    jg      short loc_50CF
    
loc_50C6:
    mov     [rbp+var_3C], 0
    jmp     short loc_5106
    
loc_50CF:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cmp     eax, 5
    jg      short loc_50E7
    mov     [rbp+var_3C], 1
    jmp     short loc_5106
    
loc_50E7:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cmp     eax, 6
    jnz     short loc_50FF
    mov     [rbp+var_3C], 2
    jmp     short loc_5106
    
loc_50FF:
    mov     [rbp+var_3C], 3
    
loc_5106:
    mov     eax, [rbp+var_3C]
    shl     eax, 6
    or      [rbp+var_40], eax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0ACh]
    test    eax, eax
    jz      short loc_5121
    or      [rbp+var_40], 20h
    
loc_5121:
    mov     ecx, [rbp+var_40]
    mov     edx, 8421085h
    mov     eax, ecx
    mul     edx
    mov     eax, ecx
    sub     eax, edx
    shr     eax, 1
    add     eax, edx
    shr     eax, 4
    mov     edx, eax
    shl     edx, 5
    sub     edx, eax
    mov     eax, ecx
    sub     eax, edx
    mov     edx, [rbp+var_40]
    sub     edx, eax
    mov     eax, edx
    add     eax, 1Fh
    mov     [rbp+var_40], eax
    mov     edx, [rbp+var_40]
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    putShortMSB
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0ACh]
    test    eax, eax
    jz      short loc_51A4
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    shr     rax, 10h
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    putShortMSB
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    movzx   edx, ax
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    putShortMSB
    
loc_51A4:
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _adler32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 71h
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      short loc_51FC
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_51FC:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 39h
    jnz     loc_56EE
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 1Fh
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 8Bh
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 8
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    test    rax, rax
    jnz     loc_540C
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 0
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 0
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 0
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 0
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 0
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cmp     eax, 9
    jz      short loc_5387
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C8h]
    cmp     eax, 1
    jg      short loc_5379
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cmp     eax, 1
    jg      short loc_5380
    
loc_5379:
    mov     edx, 4
    jmp     short loc_538C
    
loc_5380:
    mov     edx, 0
    jmp     short loc_538C
    
loc_5387:
    mov     edx, 2
    
loc_538C:
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rsi, [rax+1]
    mov     rcx, [rbp+var_8]
    mov     [rcx+28h], rsi
    add     rax, rdi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     byte ptr [rax], 3
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 71h
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      loc_56EE
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_540C:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax]
    test    eax, eax
    jz      short loc_5421
    mov     edx, 1
    jmp     short loc_5426
    
loc_5421:
    mov     edx, 0
    
loc_5426:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_543C
    mov     eax, 2
    jmp     short loc_5441
    
loc_543C:
    mov     eax, 0
    
loc_5441:
    add     edx, eax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+18h]
    test    rax, rax
    jnz     short loc_545B
    mov     eax, 0
    jmp     short loc_5460
    
loc_545B:
    mov     eax, 4
    
loc_5460:
    add     edx, eax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+28h]
    test    rax, rax
    jnz     short loc_547A
    mov     eax, 0
    jmp     short loc_547F
    
loc_547A:
    mov     eax, 8
    
loc_547F:
    lea     edi, [rax+rdx]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+38h]
    test    rax, rax
    jnz     short loc_549B
    mov     r8d, 0
    jmp     short loc_54A1
    
loc_549B:
    mov     r8d, 10h
    
loc_54A1:
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    lea     edx, [r8+rdi]
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rsi, [rax+8]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+8]
    shr     rax, 8
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+8]
    shr     rax, 10h
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+8]
    shr     rax, 18h
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cmp     eax, 9
    jz      short loc_55D2
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C8h]
    cmp     eax, 1
    jg      short loc_55C4
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cmp     eax, 1
    jg      short loc_55CB
    
loc_55C4:
    mov     edx, 4
    jmp     short loc_55D7
    
loc_55CB:
    mov     edx, 0
    jmp     short loc_55D7
    
loc_55D2:
    mov     edx, 2
    
loc_55D7:
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rsi, [rax+1]
    mov     rcx, [rbp+var_8]
    mov     [rcx+28h], rsi
    add     rax, rdi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     esi, [rax+14h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+18h]
    test    rax, rax
    jz      short loc_5698
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     esi, [rax+20h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+20h]
    shr     eax, 8
    mov     edi, eax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    
loc_5698:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_56D7
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     rcx, [rax+10h]
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    
loc_56D7:
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+40h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 45h
    
loc_56EE:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 45h
    jnz     loc_592E
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+18h]
    test    rax, rax
    jz      loc_5923
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     [rbp+var_20], rax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+20h]
    movzx   edx, ax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+40h]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+var_38], eax
    jmp     loc_584F
    
loc_5741:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+18h]
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+n], eax
    mov     eax, dword ptr [rbp+n]
    mov     rdx, [rbp+var_8]
    mov     rdx, [rdx+38h]
    mov     rcx, [rdx+18h]
    mov     rdx, [rbp+var_8]
    mov     rdx, [rdx+40h]
    lea     rsi, [rcx+rdx]
    mov     rdx, [rbp+var_8]
    mov     rcx, [rdx+10h]
    mov     rdx, [rbp+var_8]
    mov     rdx, [rdx+28h]
    add     rcx, rdx
    mov     rdx, rax
    mov     rdi, rcx
    call    _memcpy
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+18h]
    mov     rax, [rbp+var_8]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_57FD
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    cmp     [rbp+var_20], rax
    jnb     short loc_57FD
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     edx, eax
    mov     rax, [rbp+var_20]
    sub     edx, eax
    mov     rax, [rbp+var_8]
    mov     rcx, [rax+10h]
    mov     rax, [rbp+var_20]
    add     rcx, rax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    
loc_57FD:
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+40h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     [rax+40h], rdx
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      short loc_5841
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_5841:
    mov     [rbp+var_20], 0
    mov     eax, dword ptr [rbp+n]
    sub     dword ptr [rbp+var_38], eax
    
loc_584F:
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+28h]
    mov     eax, dword ptr [rbp+var_38]
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+18h]
    cmp     rdx, rax
    ja      loc_5741
    mov     eax, dword ptr [rbp+var_38]
    mov     rdx, [rbp+var_8]
    mov     rdx, [rdx+38h]
    mov     rcx, [rdx+18h]
    mov     rdx, [rbp+var_8]
    mov     rdx, [rdx+40h]
    lea     rsi, [rcx+rdx]
    mov     rdx, [rbp+var_8]
    mov     rcx, [rdx+10h]
    mov     rdx, [rbp+var_8]
    mov     rdx, [rdx+28h]
    add     rcx, rdx
    mov     rdx, rax
    mov     rdi, rcx
    call    _memcpy
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+28h]
    mov     eax, dword ptr [rbp+var_38]
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_5917
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    cmp     [rbp+var_20], rax
    jnb     short loc_5917
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     edx, eax
    mov     rax, [rbp+var_20]
    sub     edx, eax
    mov     rax, [rbp+var_8]
    mov     rcx, [rax+10h]
    mov     rax, [rbp+var_20]
    add     rcx, rax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    
loc_5917:
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+40h], 0
    
loc_5923:
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 49h
    
loc_592E:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 49h
    jnz     loc_5AD3
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      loc_5AC8
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     [rbp+var_18], rax
    
loc_595F:
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+28h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+18h]
    cmp     rdx, rax
    jnz     loc_5A08
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_59D2
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    cmp     [rbp+var_18], rax
    jnb     short loc_59D2
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    sub     edx, eax
    mov     rax, [rbp+var_8]
    mov     rcx, [rax+10h]
    mov     rax, [rbp+var_18]
    add     rcx, rax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    
loc_59D2:
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      short loc_5A00
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_5A00:
    mov     [rbp+var_18], 0
    
loc_5A08:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rsi, [rax+28h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+40h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+40h], rcx
    add     rax, rsi
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, dword ptr [rbp+n+4]
    mov     [rax], dl
    cmp     dword ptr [rbp+n+4], 0
    jnz     loc_595F
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_5ABC
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    cmp     [rbp+var_18], rax
    jnb     short loc_5ABC
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    sub     edx, eax
    mov     rax, [rbp+var_8]
    mov     rcx, [rax+10h]
    mov     rax, [rbp+var_18]
    add     rcx, rax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    
loc_5ABC:
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+40h], 0
    
loc_5AC8:
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 5Bh
    
loc_5AD3:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 5Bh
    jnz     loc_5C6C
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rax, [rax+38h]
    test    rax, rax
    jz      loc_5C61
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     [rbp+var_10], rax
    
loc_5B04:
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+28h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+18h]
    cmp     rdx, rax
    jnz     loc_5BAD
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_5B77
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    cmp     [rbp+var_10], rax
    jnb     short loc_5B77
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    sub     edx, eax
    mov     rax, [rbp+var_8]
    mov     rcx, [rax+10h]
    mov     rax, [rbp+var_10]
    add     rcx, rax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    
loc_5B77:
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      short loc_5BA5
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_5BA5:
    mov     [rbp+var_10], 0
    
loc_5BAD:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     rsi, [rax+38h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+40h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+40h], rcx
    add     rax, rsi
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    mov     [rbp+var_28], eax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, [rbp+var_28]
    mov     [rax], dl
    cmp     [rbp+var_28], 0
    jnz     loc_5B04
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_5C61
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    cmp     [rbp+var_10], rax
    jnb     short loc_5C61
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    sub     edx, eax
    mov     rax, [rbp+var_8]
    mov     rcx, [rax+10h]
    mov     rax, [rbp+var_10]
    add     rcx, rax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    
loc_5C61:
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 67h
    
loc_5C6C:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 67h
    jnz     loc_5D8B
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      loc_5D52
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rdx, [rax+2]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+18h]
    cmp     rdx, rax
    jbe     short loc_5CD6
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      short loc_5CD6
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_5CD6:
    mov     rax, [rbp+var_48]
    mov     rsi, [rax+60h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    shr     rax, 8
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+60h], rdx
    
loc_5D52:
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 71h
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      short loc_5D8B
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_5D8B:
    mov     rax, [rbp+var_48]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_5DC0
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0B4h]
    test    eax, eax
    jnz     short loc_5DC0
    cmp     [rbp+var_4C], 0
    jz      loc_5F96
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 29Ah
    jz      loc_5F96
    
loc_5DC0:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    test    eax, eax
    jnz     short loc_5DE1
    mov     edx, [rbp+var_4C]
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    deflate_stored
    jmp     short loc_5E51
    
loc_5DE1:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C8h]
    cmp     eax, 2
    jnz     short loc_5E03
    mov     edx, [rbp+var_4C]
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    deflate_huff
    jmp     short loc_5E51
    
loc_5E03:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C8h]
    cmp     eax, 3
    jnz     short loc_5E25
    mov     edx, [rbp+var_4C]
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    deflate_rle
    jmp     short loc_5E51
    
loc_5E25:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, off_21CCA8
    mov     rax, [rdx+rax]
    mov     ecx, [rbp+var_4C]
    mov     rdx, [rbp+var_8]
    mov     esi, ecx
    mov     rdi, rdx
    call    rax
    
loc_5E51:
    mov     [rbp+var_24], eax
    cmp     [rbp+var_24], 2
    jz      short loc_5E60
    cmp     [rbp+var_24], 3
    jnz     short loc_5E6B
    
loc_5E60:
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 29Ah
    
loc_5E6B:
    cmp     [rbp+var_24], 0
    jz      short loc_5E77
    cmp     [rbp+var_24], 2
    jnz     short loc_5E97
    
loc_5E77:
    mov     rax, [rbp+var_48]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_5E8D
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    
loc_5E8D:
    mov     eax, 0
    jmp     locret_61BE
    
loc_5E97:
    cmp     [rbp+var_24], 1
    jnz     loc_5F96
    cmp     [rbp+var_4C], 1
    jnz     short loc_5EB8
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    _tr_align
    jmp     loc_5F6A
    
loc_5EB8:
    cmp     [rbp+var_4C], 5
    jz      loc_5F6A
    mov     rax, [rbp+var_8]
    mov     ecx, 0
    mov     edx, 0
    mov     esi, 0
    mov     rdi, rax
    call    _tr_stored_block
    cmp     [rbp+var_4C], 3
    jnz     loc_5F6A
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+84h]
    sub     eax, 1
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    mov     rax, [rbp+var_8]
    mov     eax, [rax+84h]
    sub     eax, 1
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+78h]
    mov     esi, 0
    mov     rdi, rax
    call    _memset
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0B4h]
    test    eax, eax
    jnz     short loc_5F6A
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+0ACh], 0
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+98h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+172Ch], 0
    
loc_5F6A:
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_48]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_5F96
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+4Ch], 0FFFFFFFFh
    mov     eax, 0
    jmp     locret_61BE
    
loc_5F96:
    cmp     [rbp+var_4C], 4
    jz      short loc_5FA6
    mov     eax, 0
    jmp     locret_61BE
    
loc_5FA6:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    test    eax, eax
    jg      short loc_5FBB
    mov     eax, 1
    jmp     locret_61BE
    
loc_5FBB:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    cmp     eax, 2
    jnz     loc_614F
    mov     rax, [rbp+var_48]
    mov     rsi, [rax+60h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    shr     rax, 8
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    shr     rax, 10h
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    shr     rax, 18h
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    mov     rax, [rax+10h]
    shr     rax, 8
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    mov     rax, [rax+10h]
    shr     rax, 10h
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    mov     rax, [rax+10h]
    shr     rax, 18h
    mov     rdi, rax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    jmp     short loc_6184
    
loc_614F:
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    shr     rax, 10h
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    putShortMSB
    mov     rax, [rbp+var_48]
    mov     rax, [rax+60h]
    movzx   edx, ax
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    putShortMSB
    
loc_6184:
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    test    eax, eax
    jle     short loc_61AD
    mov     rax, [rbp+var_8]
    mov     eax, [rax+30h]
    neg     eax
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+30h], edx
    
loc_61AD:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    test    rax, rax
    setz    al
    movzx   eax, al
    
locret_61BE:
    leave
    retn
    

<deflateEnd>:
    
    var_18= qword ptr -18h
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jz      short loc_61E6
    mov     eax, 0FFFFFFFEh
    jmp     locret_6306
    
loc_61E6:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     eax, [rax+8]
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     rax, [rax+10h]
    test    rax, rax
    jz      short loc_6229
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+38h]
    mov     rcx, [rdx+10h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    
loc_6229:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     rax, [rax+78h]
    test    rax, rax
    jz      short loc_625E
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+38h]
    mov     rcx, [rdx+78h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    
loc_625E:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     rax, [rax+70h]
    test    rax, rax
    jz      short loc_6293
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+38h]
    mov     rcx, [rdx+70h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    
loc_6293:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     rax, [rax+60h]
    test    rax, rax
    jz      short loc_62C8
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+38h]
    mov     rcx, [rdx+60h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    
loc_62C8:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_18]
    mov     rcx, [rdx+38h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+38h], 0
    cmp     [rbp+var_4], 71h
    jnz     short loc_6301
    mov     eax, 0FFFFFFFDh
    jmp     short locret_6306
    
loc_6301:
    mov     eax, 0
    
locret_6306:
    leave
    retn
    

<deflateCopy>:
    
    src= qword ptr -30h
    dest= qword ptr -28h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+dest], rdi
    mov     [rbp+src], rsi
    mov     rax, [rbp+src]
    mov     rdi, rax
    call    deflateStateCheck
    test    eax, eax
    jnz     short loc_632F
    cmp     [rbp+dest], 0
    jnz     short loc_6339
    
loc_632F:
    mov     eax, 0FFFFFFFEh
    jmp     locret_6625
    
loc_6339:
    mov     rax, [rbp+src]
    mov     rax, [rax+38h]
    mov     [rbp+var_18], rax
    mov     rcx, [rbp+src]
    mov     rax, [rbp+dest]
    mov     edx, 70h
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+dest]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+dest]
    mov     rcx, [rdx+50h]
    mov     edx, 1740h
    mov     esi, 1
    mov     rdi, rcx
    call    rax
    mov     [rbp+var_10], rax
    cmp     [rbp+var_10], 0
    jnz     short loc_6391
    mov     eax, 0FFFFFFFCh
    jmp     locret_6625
    
loc_6391:
    mov     rax, [rbp+dest]
    mov     rdx, [rbp+var_10]
    mov     [rax+38h], rdx
    mov     rcx, [rbp+var_18]
    mov     rax, [rbp+var_10]
    mov     edx, 1740h
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_10]
    mov     rdx, [rbp+dest]
    mov     [rax], rdx
    mov     rax, [rbp+dest]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     esi, [rdx+50h]
    mov     rdx, [rbp+dest]
    mov     rcx, [rdx+50h]
    mov     edx, 2
    mov     rdi, rcx
    call    rax
    mov     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+60h], rdx
    mov     rax, [rbp+dest]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     esi, [rdx+50h]
    mov     rdx, [rbp+dest]
    mov     rcx, [rdx+50h]
    mov     edx, 2
    mov     rdi, rcx
    call    rax
    mov     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+70h], rdx
    mov     rax, [rbp+dest]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     esi, [rdx+84h]
    mov     rdx, [rbp+dest]
    mov     rcx, [rdx+50h]
    mov     edx, 2
    mov     rdi, rcx
    call    rax
    mov     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+78h], rdx
    mov     rax, [rbp+dest]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     esi, [rdx+1708h]
    mov     rdx, [rbp+dest]
    mov     rcx, [rdx+50h]
    mov     edx, 4
    mov     rdi, rcx
    call    rax
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_10]
    mov     rdx, [rbp+var_8]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_10]
    mov     rax, [rax+60h]
    test    rax, rax
    jz      short loc_64AF
    mov     rax, [rbp+var_10]
    mov     rax, [rax+70h]
    test    rax, rax
    jz      short loc_64AF
    mov     rax, [rbp+var_10]
    mov     rax, [rax+78h]
    test    rax, rax
    jz      short loc_64AF
    mov     rax, [rbp+var_10]
    mov     rax, [rax+10h]
    test    rax, rax
    jnz     short loc_64C5
    
loc_64AF:
    mov     rax, [rbp+dest]
    mov     rdi, rax
    call    _deflateEnd
    mov     eax, 0FFFFFFFCh
    jmp     locret_6625
    
loc_64C5:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+50h]
    add     eax, eax
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+60h]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+60h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_10]
    mov     eax, [rax+50h]
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+70h]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+70h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_10]
    mov     eax, [rax+84h]
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+78h]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+78h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_10]
    mov     rax, [rax+18h]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+10h]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+10h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     rcx, rax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+10h]
    sub     rcx, rax
    mov     rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+1708h]
    shr     eax, 1
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_8]
    add     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+1710h], rdx
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+1708h]
    mov     ecx, eax
    mov     rax, rcx
    add     rax, rax
    add     rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+1700h], rdx
    mov     rax, [rbp+var_10]
    lea     rdx, [rax+0D4h]
    mov     rax, [rbp+var_10]
    mov     [rax+0B58h], rdx
    mov     rax, [rbp+var_10]
    lea     rdx, [rax+9C8h]
    mov     rax, [rbp+var_10]
    mov     [rax+0B70h], rdx
    mov     rax, [rbp+var_10]
    lea     rdx, [rax+0ABCh]
    mov     rax, [rbp+var_10]
    mov     [rax+0B88h], rdx
    mov     eax, 0
    
locret_6625:
    leave
    retn
    

<read_buf>:
    
    var_24= dword ptr -24h
    dest= qword ptr -20h
    var_18= qword ptr -18h
    n= qword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+dest], rsi
    mov     [rbp+var_24], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    mov     dword ptr [rbp+n], eax
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_24]
    jbe     short loc_6652
    mov     eax, [rbp+var_24]
    mov     dword ptr [rbp+n], eax
    
loc_6652:
    cmp     dword ptr [rbp+n], 0
    jnz     short loc_6662
    mov     eax, 0
    jmp     locret_6727
    
loc_6662:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    sub     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+8], edx
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_18]
    mov     rcx, [rax]
    mov     rax, [rbp+dest]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     eax, [rax+30h]
    cmp     eax, 1
    jnz     short loc_66C5
    mov     rax, [rbp+var_18]
    mov     rax, [rax+60h]
    mov     edx, dword ptr [rbp+n]
    mov     rcx, [rbp+dest]
    mov     rsi, rcx
    mov     rdi, rax
    call    _adler32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+60h], rdx
    jmp     short loc_66FA
    
loc_66C5:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     eax, [rax+30h]
    cmp     eax, 2
    jnz     short loc_66FA
    mov     rax, [rbp+var_18]
    mov     rax, [rax+60h]
    mov     edx, dword ptr [rbp+n]
    mov     rcx, [rbp+dest]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+60h], rdx
    
loc_66FA:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+10h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+10h], rdx
    mov     eax, dword ptr [rbp+n]
    
locret_6727:
    leave
    retn
    

<lm_init>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    mov     eax, [rax+50h]
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_8]
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+84h]
    sub     eax, 1
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    mov     rax, [rbp+var_8]
    mov     eax, [rax+84h]
    sub     eax, 1
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+78h]
    mov     esi, 0
    mov     rdi, rax
    call    _memset
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, unk_21CCA2
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_8]
    mov     [rax+0C0h], edx
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, configuration_table
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_8]
    mov     [rax+0CCh], edx
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, unk_21CCA4
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_8]
    mov     [rax+0D0h], edx
    mov     rax, [rbp+var_8]
    mov     eax, [rax+0C4h]
    cdqe
    shl     rax, 4
    mov     rdx, rax
    lea     rax, unk_21CCA6
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_8]
    mov     [rax+0BCh], edx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+0ACh], 0
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+98h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+0B4h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+172Ch], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+0B8h], 2
    mov     rax, [rbp+var_8]
    mov     edx, [rax+0B8h]
    mov     rax, [rbp+var_8]
    mov     [rax+0A0h], edx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+0A8h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+80h], 0
    nop
    leave
    retn
    

<longest_match>:
    
    var_54= dword ptr -54h
    var_50= qword ptr -50h
    var_44= dword ptr -44h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    var_38= dword ptr -38h
    var_34= dword ptr -34h
    var_30= qword ptr -30h
    
    
    push    rbp
    mov     rbp, rsp
    push    r15
    push    r14
    push    r13
    push    r12
    push    rbx
    mov     [rbp+var_50], rdi
    mov     [rbp+var_54], esi
    mov     rax, [rbp+var_50]
    mov     eax, [rax+0BCh]
    mov     [rbp+var_44], eax
    mov     rax, [rbp+var_50]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_50]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    lea     rbx, [rdx+rax]
    mov     rax, [rbp+var_50]
    mov     eax, [rax+0B8h]
    mov     [rbp+var_40], eax
    mov     rax, [rbp+var_50]
    mov     eax, [rax+0D0h]
    mov     [rbp+var_3C], eax
    mov     rax, [rbp+var_50]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_50]
    mov     eax, [rax+50h]
    sub     eax, 106h
    cmp     edx, eax
    jbe     short loc_6943
    mov     rax, [rbp+var_50]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_50]
    mov     eax, [rax+50h]
    sub     edx, eax
    mov     eax, edx
    add     eax, 106h
    jmp     short loc_6948
    
loc_6943:
    mov     eax, 0
    
loc_6948:
    mov     [rbp+var_38], eax
    mov     rax, [rbp+var_50]
    mov     rax, [rax+70h]
    mov     [rbp+var_30], rax
    mov     rax, [rbp+var_50]
    mov     eax, [rax+58h]
    mov     [rbp+var_34], eax
    mov     rax, [rbp+var_50]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_50]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    add     rax, 102h
    lea     r13, [rdx+rax]
    mov     eax, [rbp+var_40]
    cdqe
    sub     rax, 1
    add     rax, rbx
    movzx   r14d, byte ptr [rax]
    mov     eax, [rbp+var_40]
    cdqe
    add     rax, rbx
    movzx   r15d, byte ptr [rax]
    mov     rax, [rbp+var_50]
    mov     edx, [rax+0B8h]
    mov     rax, [rbp+var_50]
    mov     eax, [rax+0CCh]
    cmp     edx, eax
    jb      short loc_69B7
    shr     [rbp+var_44], 2
    
loc_69B7:
    mov     rax, [rbp+var_50]
    mov     edx, [rax+0B4h]
    mov     eax, [rbp+var_3C]
    cmp     edx, eax
    jnb     short loc_69D5
    mov     rax, [rbp+var_50]
    mov     eax, [rax+0B4h]
    mov     [rbp+var_3C], eax
    
loc_69D5:
    mov     rax, [rbp+var_50]
    mov     rdx, [rax+60h]
    mov     eax, [rbp+var_54]
    lea     r12, [rdx+rax]
    mov     eax, [rbp+var_40]
    cdqe
    add     rax, r12
    movzx   eax, byte ptr [rax]
    cmp     r15b, al
    jnz     loc_6B49
    mov     eax, [rbp+var_40]
    cdqe
    sub     rax, 1
    add     rax, r12
    movzx   eax, byte ptr [rax]
    cmp     r14b, al
    jnz     loc_6B49
    movzx   edx, byte ptr [r12]
    movzx   eax, byte ptr [rbx]
    cmp     dl, al
    jnz     loc_6B49
    add     r12, 1
    movzx   edx, byte ptr [r12]
    lea     rax, [rbx+1]
    movzx   eax, byte ptr [rax]
    cmp     dl, al
    jnz     loc_6B49
    add     rbx, 2
    add     r12, 1
    
loc_6A40:
    add     rbx, 1
    movzx   edx, byte ptr [rbx]
    add     r12, 1
    movzx   eax, byte ptr [r12]
    cmp     dl, al
    jnz     loc_6AF1
    add     rbx, 1
    movzx   edx, byte ptr [rbx]
    add     r12, 1
    movzx   eax, byte ptr [r12]
    cmp     dl, al
    jnz     loc_6AF1
    add     rbx, 1
    movzx   edx, byte ptr [rbx]
    add     r12, 1
    movzx   eax, byte ptr [r12]
    cmp     dl, al
    jnz     short loc_6AF1
    add     rbx, 1
    movzx   edx, byte ptr [rbx]
    add     r12, 1
    movzx   eax, byte ptr [r12]
    cmp     dl, al
    jnz     short loc_6AF1
    add     rbx, 1
    movzx   edx, byte ptr [rbx]
    add     r12, 1
    movzx   eax, byte ptr [r12]
    cmp     dl, al
    jnz     short loc_6AF1
    add     rbx, 1
    movzx   edx, byte ptr [rbx]
    add     r12, 1
    movzx   eax, byte ptr [r12]
    cmp     dl, al
    jnz     short loc_6AF1
    add     rbx, 1
    movzx   edx, byte ptr [rbx]
    add     r12, 1
    movzx   eax, byte ptr [r12]
    cmp     dl, al
    jnz     short loc_6AF1
    add     rbx, 1
    movzx   edx, byte ptr [rbx]
    add     r12, 1
    movzx   eax, byte ptr [r12]
    cmp     dl, al
    jnz     short loc_6AF1
    cmp     rbx, r13
    jb      loc_6A40
    
loc_6AF1:
    mov     rdx, r13
    mov     rax, rbx
    sub     rdx, rax
    mov     rax, rdx
    mov     edx, 102h
    sub     edx, eax
    mov     r12d, edx
    lea     rbx, [r13-102h]
    cmp     r12d, [rbp+var_40]
    jle     short loc_6B4A
    mov     rax, [rbp+var_50]
    mov     edx, [rbp+var_54]
    mov     [rax+0B0h], edx
    mov     [rbp+var_40], r12d
    cmp     r12d, [rbp+var_3C]
    jge     short loc_6B7E
    mov     eax, [rbp+var_40]
    cdqe
    sub     rax, 1
    add     rax, rbx
    movzx   r14d, byte ptr [rax]
    mov     eax, [rbp+var_40]
    cdqe
    add     rax, rbx
    movzx   r15d, byte ptr [rax]
    jmp     short loc_6B4A
    
loc_6B49:
    nop
    
loc_6B4A:
    mov     eax, [rbp+var_54]
    and     eax, [rbp+var_34]
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_30]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_54], eax
    mov     eax, [rbp+var_54]
    cmp     eax, [rbp+var_38]
    jbe     short loc_6B7F
    sub     [rbp+var_44], 1
    cmp     [rbp+var_44], 0
    jnz     loc_69D5
    jmp     short loc_6B7F
    
loc_6B7E:
    nop
    
loc_6B7F:
    mov     rax, [rbp+var_50]
    mov     edx, [rax+0B4h]
    mov     eax, [rbp+var_40]
    cmp     edx, eax
    jb      short loc_6B95
    mov     eax, [rbp+var_40]
    jmp     short loc_6B9F
    
loc_6B95:
    mov     rax, [rbp+var_50]
    mov     eax, [rax+0B4h]
    
loc_6B9F:
    pop     rbx
    pop     r12
    pop     r13
    pop     r14
    pop     r15
    pop     rbp
    retn
    

<fill_window>:
    
    var_28= qword ptr -28h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    var_14= dword ptr -14h
    n= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    mov     [rbp+var_18], eax
    
loc_6BC0:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+68h]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    sub     edx, eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    sub     edx, eax
    mov     eax, edx
    mov     [rbp+var_20], eax
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     ecx, [rax+50h]
    mov     eax, [rbp+var_18]
    add     eax, ecx
    sub     eax, 106h
    cmp     edx, eax
    jb      loc_6C97
    mov     eax, [rbp+var_18]
    sub     eax, [rbp+var_20]
    mov     esi, eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     eax, [rbp+var_18]
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+60h]
    mov     rdx, rsi
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B0h]
    sub     eax, [rbp+var_18]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0B0h], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    sub     eax, [rbp+var_18]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+98h]
    mov     eax, [rbp+var_18]
    sub     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    slide_hash
    mov     eax, [rbp+var_18]
    add     [rbp+var_20], eax
    
loc_6C97:
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    test    eax, eax
    jz      loc_6EC3
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     ecx, eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    mov     eax, eax
    add     rax, rcx
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     edx, [rbp+var_20]
    mov     rsi, rcx
    mov     rdi, rax
    call    read_buf
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0B4h]
    mov     eax, [rbp+var_14]
    add     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0B4h], edx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0B4h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+172Ch]
    add     eax, edx
    cmp     eax, 2
    jbe     loc_6E9E
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+172Ch]
    sub     edx, eax
    mov     eax, edx
    mov     [rbp+var_1C], eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     eax, [rbp+var_1C]
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     rax, [rbp+var_28]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+80h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+90h]
    mov     ecx, eax
    shl     edx, cl
    mov     ecx, edx
    mov     rax, [rbp+var_28]
    mov     rax, [rax+60h]
    mov     edx, [rbp+var_1C]
    add     edx, 1
    mov     edx, edx
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     ecx, eax
    mov     edx, ecx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+8Ch]
    and     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+80h], edx
    jmp     loc_6E89
    
loc_6DAB:
    mov     rax, [rbp+var_28]
    mov     edx, [rax+80h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+90h]
    mov     ecx, eax
    shl     edx, cl
    mov     ecx, edx
    mov     rax, [rbp+var_28]
    mov     rax, [rax+60h]
    mov     edx, [rbp+var_1C]
    add     edx, 2
    mov     edx, edx
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     ecx, eax
    mov     edx, ecx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+8Ch]
    and     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+70h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+58h]
    and     eax, [rbp+var_1C]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    movzx   eax, word ptr [rcx]
    mov     [rdx], ax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     edx, [rbp+var_1C]
    mov     [rax], dx
    add     [rbp+var_1C], 1
    mov     rax, [rbp+var_28]
    mov     eax, [rax+172Ch]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_28]
    mov     [rax+172Ch], edx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0B4h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+172Ch]
    add     eax, edx
    cmp     eax, 2
    jbe     short loc_6E9D
    
loc_6E89:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+172Ch]
    test    eax, eax
    jnz     loc_6DAB
    jmp     short loc_6E9E
    
loc_6E9D:
    nop
    
loc_6E9E:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    cmp     eax, 105h
    ja      short loc_6EC4
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     loc_6BC0
    jmp     short loc_6EC4
    
loc_6EC3:
    nop
    
loc_6EC4:
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1738h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+68h]
    cmp     rdx, rax
    jnb     loc_7035
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    mov     eax, eax
    add     rax, rdx
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+1738h]
    cmp     [rbp+var_8], rax
    jbe     short loc_6F72
    mov     rax, [rbp+var_28]
    mov     rax, [rax+68h]
    sub     rax, [rbp+var_8]
    mov     [rbp+n], rax
    cmp     [rbp+n], 102h
    jbe     short loc_6F32
    mov     [rbp+n], 102h
    
loc_6F32:
    mov     rax, [rbp+n]
    mov     ecx, eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_8]
    add     rax, rdx
    mov     rdx, rcx
    mov     esi, 0
    mov     rdi, rax
    call    _memset
    mov     rdx, [rbp+var_8]
    mov     rax, [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+1738h], rdx
    jmp     loc_7035
    
loc_6F72:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+1738h]
    mov     rdx, [rbp+var_8]
    add     rdx, 102h
    cmp     rax, rdx
    jnb     loc_7035
    mov     rax, [rbp+var_28]
    mov     rax, [rax+1738h]
    mov     rdx, [rbp+var_8]
    sub     rdx, rax
    mov     rax, rdx
    add     rax, 102h
    mov     [rbp+n], rax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+68h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+1738h]
    sub     rdx, rax
    mov     rax, rdx
    cmp     [rbp+n], rax
    jbe     short loc_6FEC
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+68h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+1738h]
    sub     rdx, rax
    mov     rax, rdx
    mov     [rbp+n], rax
    
loc_6FEC:
    mov     rax, [rbp+n]
    mov     ecx, eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+1738h]
    add     rax, rdx
    mov     rdx, rcx
    mov     esi, 0
    mov     rdi, rax
    call    _memset
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1738h]
    mov     rax, [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+1738h], rdx
    
loc_7035:
    nop
    leave
    retn
    

<deflate_stored>:
    
    var_2C= dword ptr -2Ch
    var_28= qword ptr -28h
    var_18= dword ptr -18h
    n= qword ptr -14h
    var_C= dword ptr -0Ch
    var_8= dword ptr -8
    var_4= qword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_2C], esi
    mov     rax, [rbp+var_28]
    mov     rax, [rax+18h]
    sub     rax, 5
    mov     rdx, [rbp+var_28]
    mov     edx, [rdx+50h]
    mov     edx, edx
    cmp     rax, rdx
    cmova   rax, rdx
    mov     [rbp+var_8], eax
    mov     [rbp+var_C], 0
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    mov     dword ptr [rbp+var_4], eax
    
loc_707A:
    mov     [rbp+var_18], 0FFFFh
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1734h]
    add     eax, 2Ah
    sar     eax, 3
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    cmp     dword ptr [rbp+n+4], eax
    ja      loc_7359
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    sub     eax, dword ptr [rbp+n+4]
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+n], eax
    mov     edx, [rbp+var_18]
    mov     ecx, dword ptr [rbp+n]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    mov     eax, eax
    add     rax, rcx
    cmp     rdx, rax
    jbe     short loc_70FF
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     edx, [rax+8]
    mov     eax, dword ptr [rbp+n]
    add     eax, edx
    mov     [rbp+var_18], eax
    
loc_70FF:
    mov     eax, [rbp+var_18]
    cmp     eax, dword ptr [rbp+n+4]
    jbe     short loc_710D
    mov     eax, dword ptr [rbp+n+4]
    mov     [rbp+var_18], eax
    
loc_710D:
    mov     eax, [rbp+var_18]
    cmp     eax, [rbp+var_8]
    jnb     short loc_7147
    cmp     [rbp+var_18], 0
    jnz     short loc_7125
    cmp     [rbp+var_2C], 4
    jnz     loc_735A
    
loc_7125:
    cmp     [rbp+var_2C], 0
    jz      loc_735A
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     edx, [rax+8]
    mov     eax, dword ptr [rbp+n]
    add     eax, edx
    cmp     [rbp+var_18], eax
    jnz     loc_735A
    
loc_7147:
    cmp     [rbp+var_2C], 4
    jnz     short loc_7168
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     edx, [rax+8]
    mov     eax, dword ptr [rbp+n]
    add     eax, edx
    cmp     [rbp+var_18], eax
    jnz     short loc_7168
    mov     eax, 1
    jmp     short loc_716D
    
loc_7168:
    mov     eax, 0
    
loc_716D:
    mov     [rbp+var_C], eax
    mov     edx, [rbp+var_C]
    mov     rax, [rbp+var_28]
    mov     ecx, edx
    mov     edx, 0
    mov     esi, 0
    mov     rdi, rax
    call    _tr_stored_block
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+28h]
    sub     rax, 4
    add     rax, rdx
    mov     edx, [rbp+var_18]
    mov     [rax], dl
    mov     eax, [rbp+var_18]
    shr     eax, 8
    mov     ecx, eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+28h]
    sub     rax, 3
    add     rax, rdx
    mov     edx, ecx
    mov     [rax], dl
    mov     eax, [rbp+var_18]
    mov     ecx, eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+28h]
    sub     rax, 2
    add     rax, rdx
    not     ecx
    mov     edx, ecx
    mov     [rax], dl
    mov     eax, [rbp+var_18]
    not     eax
    shr     eax, 8
    mov     ecx, eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+28h]
    sub     rax, 1
    add     rax, rdx
    mov     edx, ecx
    mov     [rax], dl
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    cmp     dword ptr [rbp+n], 0
    jz      loc_72D8
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_18]
    jbe     short loc_7238
    mov     eax, [rbp+var_18]
    mov     dword ptr [rbp+n], eax
    
loc_7238:
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    add     rcx, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rax, [rax+18h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rcx, [rax+18h]
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    add     rdx, rcx
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     edx, [rax+20h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    sub     edx, dword ptr [rbp+n]
    mov     [rax+20h], edx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rcx, [rax+28h]
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    add     rdx, rcx
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+98h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_18], eax
    
loc_72D8:
    cmp     [rbp+var_18], 0
    jz      short loc_734D
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rcx, [rax+18h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     edx, [rbp+var_18]
    mov     rsi, rcx
    mov     rdi, rax
    call    read_buf
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rcx, [rax+18h]
    mov     edx, [rbp+var_18]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    add     rdx, rcx
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     edx, [rax+20h]
    
loc_7324:
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    sub     edx, [rbp+var_18]
    mov     [rax+20h], edx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rcx, [rax+28h]
    mov     edx, [rbp+var_18]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    add     rdx, rcx
    mov     [rax+28h], rdx
    
loc_734D:
    cmp     [rbp+var_C], 0
    jz      loc_707A
    jmp     short loc_735A
    
loc_7359:
    nop
    
loc_735A:
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    sub     dword ptr [rbp+var_4], eax
    cmp     dword ptr [rbp+var_4], 0
    jz      loc_750E
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    cmp     dword ptr [rbp+var_4], eax
    jb      short loc_73DA
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+1728h], 2
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    mov     esi, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdx, [rax]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    mov     eax, eax
    neg     rax
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+60h]
    mov     rdx, rsi
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_28]
    mov     edx, [rax+50h]
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    jmp     loc_74C5
    
loc_73DA:
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+68h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    sub     rdx, rax
    mov     eax, dword ptr [rbp+var_4]
    cmp     rdx, rax
    ja      short loc_7473
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    sub     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     esi, eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    mov     eax, eax
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+60h]
    mov     rdx, rsi
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1728h]
    cmp     eax, 1
    ja      short loc_7473
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1728h]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+1728h], edx
    
loc_7473:
    mov     eax, dword ptr [rbp+var_4]
    mov     rdx, [rbp+var_28]
    mov     rdx, [rdx]
    mov     rdx, [rdx]
    mov     ecx, dword ptr [rbp+var_4]
    neg     rcx
    lea     rsi, [rdx+rcx]
    mov     rdx, [rbp+var_28]
    mov     rcx, [rdx+60h]
    mov     rdx, [rbp+var_28]
    mov     edx, [rdx+0ACh]
    mov     edx, edx
    add     rcx, rdx
    mov     rdx, rax
    mov     rdi, rcx
    call    _memcpy
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     eax, dword ptr [rbp+var_4]
    add     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    
loc_74C5:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+172Ch]
    mov     rax, [rbp+var_28]
    mov     ecx, [rax+50h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+172Ch]
    sub     ecx, eax
    mov     eax, ecx
    cmp     dword ptr [rbp+var_4], eax
    cmovbe  eax, dword ptr [rbp+var_4]
    add     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+172Ch], edx
    
loc_750E:
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1738h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    cmp     rdx, rax
    jnb     short loc_7541
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+1738h], rdx
    
loc_7541:
    cmp     [rbp+var_C], 0
    jz      short loc_7551
    mov     eax, 3
    jmp     locret_7860
    
loc_7551:
    cmp     [rbp+var_2C], 0
    jz      short loc_7591
    cmp     [rbp+var_2C], 4
    jz      short loc_7591
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_7591
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    cmp     rdx, rax
    jnz     short loc_7591
    mov     eax, 1
    jmp     locret_7860
    
loc_7591:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+68h]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    sub     edx, eax
    mov     eax, edx
    sub     eax, 1
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    cmp     dword ptr [rbp+n+4], eax
    jnb     loc_7685
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+98h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    mov     eax, eax
    cmp     rdx, rax
    jl      loc_7685
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+98h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    mov     eax, eax
    sub     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    sub     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     esi, eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    mov     eax, eax
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+60h]
    mov     rdx, rsi
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1728h]
    cmp     eax, 1
    ja      short loc_767B
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1728h]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+1728h], edx
    
loc_767B:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    add     dword ptr [rbp+n+4], eax
    
loc_7685:
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    cmp     dword ptr [rbp+n+4], eax
    jbe     short loc_76A1
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    mov     dword ptr [rbp+n+4], eax
    
loc_76A1:
    cmp     dword ptr [rbp+n+4], 0
    jz      short loc_76ED
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     edx, dword ptr [rbp+n+4]
    mov     rsi, rcx
    mov     rdi, rax
    call    read_buf
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     eax, dword ptr [rbp+n+4]
    add     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    
loc_76ED:
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1738h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    cmp     rdx, rax
    jnb     short loc_7720
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+1738h], rdx
    
loc_7720:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1734h]
    add     eax, 2Ah
    sar     eax, 3
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+18h]
    mov     eax, dword ptr [rbp+n+4]
    sub     rdx, rax
    mov     rax, rdx
    mov     edx, 0FFFFh
    cmp     rax, 0FFFFh
    cmova   rax, rdx
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    cmp     dword ptr [rbp+n+4], eax
    cmovbe  eax, dword ptr [rbp+n+4]
    mov     [rbp+var_8], eax
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+n], eax
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_8]
    jnb     short loc_77C3
    cmp     dword ptr [rbp+n], 0
    jnz     short loc_779B
    cmp     [rbp+var_2C], 4
    jnz     loc_784E
    
loc_779B:
    cmp     [rbp+var_2C], 0
    jz      loc_784E
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     loc_784E
    mov     eax, dword ptr [rbp+n]
    cmp     eax, dword ptr [rbp+n+4]
    ja      loc_784E
    
loc_77C3:
    mov     eax, dword ptr [rbp+n+4]
    cmp     dword ptr [rbp+n], eax
    cmovbe  eax, dword ptr [rbp+n]
    mov     [rbp+var_18], eax
    cmp     [rbp+var_2C], 4
    jnz     short loc_77F3
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_77F3
    mov     eax, [rbp+var_18]
    cmp     eax, dword ptr [rbp+n]
    jnz     short loc_77F3
    mov     eax, 1
    jmp     short loc_77F8
    
loc_77F3:
    mov     eax, 0
    
loc_77F8:
    mov     [rbp+var_C], eax
    mov     ecx, [rbp+var_C]
    mov     edx, [rbp+var_18]
    mov     rax, [rbp+var_28]
    mov     rsi, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    add     rsi, rax
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    _tr_stored_block
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+98h]
    mov     eax, [rbp+var_18]
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    
loc_784E:
    cmp     [rbp+var_C], 0
    jz      short loc_785B
    mov     eax, 2
    jmp     short locret_7860
    
loc_785B:
    mov     eax, 0
    
locret_7860:
    leave
    retn
    

<deflate_fast>:
    
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_C= byte ptr -0Ch
    var_B= byte ptr -0Bh
    var_A= word ptr -0Ah
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    
loc_7871:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    cmp     eax, 105h
    ja      short loc_78C1
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    fill_window
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    cmp     eax, 105h
    ja      short loc_78AF
    cmp     [rbp+var_1C], 0
    jnz     short loc_78AF
    mov     eax, 0
    jmp     locret_809D
    
loc_78AF:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    test    eax, eax
    jz      loc_7F11
    
loc_78C1:
    mov     [rbp+var_8], 0
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    cmp     eax, 2
    jbe     loc_79A2
    mov     rax, [rbp+var_18]
    mov     edx, [rax+80h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+90h]
    mov     ecx, eax
    shl     edx, cl
    mov     ecx, edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    add     eax, 2
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     ecx, eax
    mov     edx, ecx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    and     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+70h]
    mov     rax, [rbp+var_18]
    mov     esi, [rax+0ACh]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+58h]
    and     eax, esi
    mov     eax, eax
    add     rax, rax
    add     rax, rcx
    movzx   edx, word ptr [rdx]
    mov     [rax], dx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_8], eax
    mov     rax, [rbp+var_18]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+78h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rax, rcx
    mov     [rax], dx
    
loc_79A2:
    cmp     [rbp+var_8], 0
    jz      short loc_79E4
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    sub     eax, [rbp+var_8]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+50h]
    sub     eax, 106h
    cmp     edx, eax
    ja      short loc_79E4
    mov     edx, [rbp+var_8]
    mov     rax, [rbp+var_18]
    mov     esi, edx
    mov     rdi, rax
    call    longest_match
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+0A0h], edx
    
loc_79E4:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0A0h]
    cmp     eax, 2
    jbe     loc_7D7E
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0A0h]
    sub     eax, 3
    mov     [rbp+var_B], al
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B0h]
    sub     edx, eax
    mov     eax, edx
    mov     [rbp+var_A], ax
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    movzx   eax, [rbp+var_A]
    mov     [rdx], ax
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    lea     rdx, [rsi+rax]
    movzx   eax, [rbp+var_B]
    mov     [rdx], al
    movzx   eax, [rbp+var_A]
    sub     eax, 1
    mov     [rbp+var_A], ax
    movzx   eax, [rbp+var_B]
    movsxd  rdx, eax
    lea     rax, _length_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    add     eax, 101h
    mov     rdx, [rbp+var_18]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_18]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    cmp     [rbp+var_A], 0FFh
    ja      short loc_7ADD
    movzx   eax, [rbp+var_A]
    movsxd  rdx, eax
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    jmp     short loc_7AFE
    
loc_7ADD:
    movzx   eax, [rbp+var_A]
    shr     ax, 7
    movzx   eax, ax
    add     eax, 100h
    movsxd  rdx, eax
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    
loc_7AFE:
    mov     rdx, [rbp+var_18]
    movsxd  rcx, eax
    add     rcx, 270h
    movzx   edx, word ptr [rdx+rcx*4+8]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_18]
    cdqe
    add     rax, 270h
    mov     [rdx+rax*4+8], cx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_18]
    mov     edx, [rax+0B4h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0A0h]
    sub     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+0B4h], edx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+0A0h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0C0h]
    cmp     edx, eax
    ja      loc_7CD0
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    cmp     eax, 2
    jbe     loc_7CD0
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0A0h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_18]
    mov     [rax+0A0h], edx
    
loc_7BAD:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+80h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+90h]
    mov     ecx, eax
    shl     edx, cl
    mov     ecx, edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    add     eax, 2
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     ecx, eax
    mov     edx, ecx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    and     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+70h]
    mov     rax, [rbp+var_18]
    mov     esi, [rax+0ACh]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+58h]
    and     eax, esi
    mov     eax, eax
    add     rax, rax
    add     rax, rcx
    movzx   edx, word ptr [rdx]
    mov     [rax], dx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_8], eax
    mov     rax, [rbp+var_18]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+78h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rax, rcx
    mov     [rax], dx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0A0h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_18]
    mov     [rax+0A0h], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0A0h]
    test    eax, eax
    jnz     loc_7BAD
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    mov     [rax+0ACh], edx
    jmp     loc_7E61
    
loc_7CD0:
    mov     rax, [rbp+var_18]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0A0h]
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+0A0h], 0
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     rax, [rbp+var_18]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+80h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+90h]
    mov     ecx, eax
    shl     edx, cl
    mov     ecx, edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    add     eax, 1
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     ecx, eax
    mov     edx, ecx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    and     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+80h], edx
    jmp     loc_7E61
    
loc_7D7E:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    mov     [rbp+var_C], al
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    lea     rdx, [rsi+rax]
    movzx   eax, [rbp+var_C]
    mov     [rdx], al
    movzx   eax, [rbp+var_C]
    mov     rdx, [rbp+var_18]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_18]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_18]
    mov     [rax+0B4h], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    mov     [rax+0ACh], edx
    
loc_7E61:
    cmp     [rbp+var_4], 0
    jz      loc_7871
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_7EB6
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_7EBB
    
loc_7EB6:
    mov     esi, 0
    
loc_7EBB:
    mov     rax, [rbp+var_18]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     loc_7871
    mov     eax, 0
    jmp     locret_809D
    
loc_7F11:
    nop
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, 2
    cmp     eax, 2
    cmovbe  edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+172Ch], edx
    cmp     [rbp+var_1C], 4
    jnz     loc_7FE7
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_7F86
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_7F8B
    
loc_7F86:
    mov     esi, 0
    
loc_7F8B:
    mov     rax, [rbp+var_18]
    mov     ecx, 1
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_7FDD
    mov     eax, 2
    jmp     locret_809D
    
loc_7FDD:
    mov     eax, 3
    jmp     locret_809D
    
loc_7FE7:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+170Ch]
    test    eax, eax
    jz      loc_8098
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_8044
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_8049
    
loc_8044:
    mov     esi, 0
    
loc_8049:
    mov     rax, [rbp+var_18]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_8098
    mov     eax, 0
    jmp     short locret_809D
    
loc_8098:
    mov     eax, 1
    
locret_809D:
    leave
    retn
    

<deflate_slow>:
    
    var_2C= dword ptr -2Ch
    var_28= qword ptr -28h
    var_11= byte ptr -11h
    var_10= byte ptr -10h
    var_F= byte ptr -0Fh
    var_E= word ptr -0Eh
    var_C= dword ptr -0Ch
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_2C], esi
    
loc_80AE:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    cmp     eax, 105h
    ja      short loc_80FE
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    fill_window
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    cmp     eax, 105h
    ja      short loc_80EC
    cmp     [rbp+var_2C], 0
    jnz     short loc_80EC
    mov     eax, 0
    jmp     locret_8AFB
    
loc_80EC:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    test    eax, eax
    jz      loc_8897
    
loc_80FE:
    mov     [rbp+var_C], 0
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    cmp     eax, 2
    jbe     loc_81DF
    mov     rax, [rbp+var_28]
    mov     edx, [rax+80h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+90h]
    mov     ecx, eax
    shl     edx, cl
    mov     ecx, edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    add     eax, 2
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     ecx, eax
    mov     edx, ecx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+8Ch]
    and     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+70h]
    mov     rax, [rbp+var_28]
    mov     esi, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+58h]
    and     eax, esi
    mov     eax, eax
    add     rax, rax
    add     rax, rcx
    movzx   edx, word ptr [rdx]
    mov     [rax], dx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_C], eax
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+78h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rax, rcx
    mov     [rax], dx
    
loc_81DF:
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0A0h]
    mov     rax, [rbp+var_28]
    mov     [rax+0B8h], edx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0B0h]
    mov     rax, [rbp+var_28]
    mov     [rax+0A4h], edx
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+0A0h], 2
    cmp     [rbp+var_C], 0
    jz      loc_82D1
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0B8h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0C0h]
    cmp     edx, eax
    jnb     loc_82D1
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    sub     eax, [rbp+var_C]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    sub     eax, 106h
    cmp     edx, eax
    ja      short loc_82D1
    mov     edx, [rbp+var_C]
    mov     rax, [rbp+var_28]
    mov     esi, edx
    mov     rdi, rax
    call    longest_match
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0A0h], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A0h]
    cmp     eax, 5
    ja      short loc_82D1
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0C8h]
    cmp     eax, 1
    jz      short loc_82C3
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A0h]
    cmp     eax, 3
    jnz     short loc_82D1
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B0h]
    sub     edx, eax
    mov     eax, edx
    cmp     eax, 1000h
    jbe     short loc_82D1
    
loc_82C3:
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+0A0h], 2
    
loc_82D1:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B8h]
    cmp     eax, 2
    jbe     loc_86A8
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0A0h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B8h]
    cmp     edx, eax
    ja      loc_86A8
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    add     eax, edx
    sub     eax, 3
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B8h]
    sub     eax, 3
    mov     [rbp+var_10], al
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A4h]
    sub     edx, eax
    mov     eax, edx
    sub     eax, 1
    mov     [rbp+var_E], ax
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    movzx   eax, [rbp+var_E]
    mov     [rdx], ax
    mov     rax, [rbp+var_28]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_28]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    lea     rdx, [rsi+rax]
    movzx   eax, [rbp+var_10]
    mov     [rdx], al
    movzx   eax, [rbp+var_E]
    sub     eax, 1
    mov     [rbp+var_E], ax
    movzx   eax, [rbp+var_10]
    movsxd  rdx, eax
    lea     rax, _length_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    add     eax, 101h
    mov     rdx, [rbp+var_28]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_28]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    cmp     [rbp+var_E], 0FFh
    ja      short loc_8405
    movzx   eax, [rbp+var_E]
    movsxd  rdx, eax
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    jmp     short loc_8426
    
loc_8405:
    movzx   eax, [rbp+var_E]
    shr     ax, 7
    movzx   eax, ax
    add     eax, 100h
    movsxd  rdx, eax
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    
loc_8426:
    mov     rdx, [rbp+var_28]
    movsxd  rcx, eax
    add     rcx, 270h
    movzx   edx, word ptr [rdx+rcx*4+8]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_28]
    cdqe
    add     rax, 270h
    mov     [rdx+rax*4+8], cx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    mov     [rbp+var_8], eax
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0B4h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B8h]
    sub     edx, eax
    mov     eax, edx
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0B4h], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B8h]
    lea     edx, [rax-2]
    mov     rax, [rbp+var_28]
    mov     [rax+0B8h], edx
    
loc_84AB:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    cmp     [rbp+var_4], eax
    jb      loc_859C
    mov     rax, [rbp+var_28]
    mov     edx, [rax+80h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+90h]
    mov     ecx, eax
    shl     edx, cl
    mov     ecx, edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    add     eax, 2
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    xor     ecx, eax
    mov     edx, ecx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+8Ch]
    and     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+70h]
    mov     rax, [rbp+var_28]
    mov     esi, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+58h]
    and     eax, esi
    mov     eax, eax
    add     rax, rax
    add     rax, rcx
    movzx   edx, word ptr [rdx]
    mov     [rax], dx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_C], eax
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+78h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rax
    add     rax, rcx
    mov     [rax], dx
    
loc_859C:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B8h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_28]
    mov     [rax+0B8h], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B8h]
    test    eax, eax
    jnz     loc_84AB
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+0A8h], 0
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+0A0h], 2
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    cmp     [rbp+var_8], 0
    jz      loc_8891
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_864D
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_8652
    
loc_864D:
    mov     esi, 0
    
loc_8652:
    mov     rax, [rbp+var_28]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     loc_8891
    mov     eax, 0
    jmp     locret_8AFB
    
loc_86A8:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A8h]
    test    eax, eax
    jz      loc_8850
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    sub     eax, 1
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    mov     [rbp+var_F], al
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    mov     rax, [rbp+var_28]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_28]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    lea     rdx, [rsi+rax]
    movzx   eax, [rbp+var_F]
    mov     [rdx], al
    movzx   eax, [rbp+var_F]
    mov     rdx, [rbp+var_28]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_28]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    mov     [rbp+var_8], eax
    cmp     [rbp+var_8], 0
    jz      loc_8806
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_87C7
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_87CC
    
loc_87C7:
    mov     esi, 0
    
loc_87CC:
    mov     rax, [rbp+var_28]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    
loc_8806:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_28]
    mov     [rax+0B4h], edx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     loc_80AE
    mov     eax, 0
    jmp     locret_8AFB
    
loc_8850:
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+0A8h], 1
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_28]
    mov     [rax+0B4h], edx
    jmp     loc_80AE
    
loc_8891:
    nop
    jmp     loc_80AE
    
loc_8897:
    nop
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A8h]
    test    eax, eax
    jz      loc_8970
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    sub     eax, 1
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    mov     [rbp+var_11], al
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    mov     rax, [rbp+var_28]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_28]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    lea     rdx, [rsi+rax]
    movzx   eax, [rbp+var_11]
    mov     [rdx], al
    movzx   eax, [rbp+var_11]
    mov     rdx, [rbp+var_28]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_28]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    mov     [rbp+var_8], eax
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+0A8h], 0
    
loc_8970:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, 2
    cmp     eax, 2
    cmovbe  edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+172Ch], edx
    cmp     [rbp+var_2C], 4
    jnz     loc_8A45
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_89E4
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_89E9
    
loc_89E4:
    mov     esi, 0
    
loc_89E9:
    mov     rax, [rbp+var_28]
    mov     ecx, 1
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_8A3B
    mov     eax, 2
    jmp     locret_8AFB
    
loc_8A3B:
    mov     eax, 3
    jmp     locret_8AFB
    
loc_8A45:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    test    eax, eax
    jz      loc_8AF6
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_8AA2
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_8AA7
    
loc_8AA2:
    mov     esi, 0
    
loc_8AA7:
    mov     rax, [rbp+var_28]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_8AF6
    mov     eax, 0
    jmp     short locret_8AFB
    
loc_8AF6:
    mov     eax, 1
    
locret_8AFB:
    leave
    retn
    

<deflate_rle>:
    
    var_2C= dword ptr -2Ch
    var_28= qword ptr -28h
    var_1C= byte ptr -1Ch
    var_1B= byte ptr -1Bh
    var_1A= word ptr -1Ah
    var_18= dword ptr -18h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_2C], esi
    
loc_8B0C:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    cmp     eax, 102h
    ja      short loc_8B5C
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    fill_window
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    cmp     eax, 102h
    ja      short loc_8B4A
    cmp     [rbp+var_2C], 0
    jnz     short loc_8B4A
    mov     eax, 0
    jmp     locret_91D1
    
loc_8B4A:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    test    eax, eax
    jz      loc_9056
    
loc_8B5C:
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+0A0h], 0
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    cmp     eax, 2
    jbe     loc_8D25
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    test    eax, eax
    jz      loc_8D25
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    sub     rax, 1
    add     rax, rdx
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    mov     [rbp+var_14], eax
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     loc_8D25
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     loc_8D25
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     loc_8D25
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    add     rax, 102h
    add     rax, rdx
    mov     [rbp+var_8], rax
    
loc_8C24:
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     loc_8CDA
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     loc_8CDA
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     short loc_8CDA
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     short loc_8CDA
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     short loc_8CDA
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     short loc_8CDA
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     short loc_8CDA
    add     [rbp+var_10], 1
    mov     rax, [rbp+var_10]
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_14], eax
    jnz     short loc_8CDA
    mov     rax, [rbp+var_10]
    cmp     rax, [rbp+var_8]
    jb      loc_8C24
    
loc_8CDA:
    mov     rdx, [rbp+var_8]
    mov     rax, [rbp+var_10]
    sub     rdx, rax
    mov     rax, rdx
    mov     edx, 102h
    sub     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0A0h], edx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0A0h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    cmp     edx, eax
    jbe     short loc_8D25
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0B4h]
    mov     rax, [rbp+var_28]
    mov     [rax+0A0h], edx
    
loc_8D25:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A0h]
    cmp     eax, 2
    jbe     loc_8EC3
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A0h]
    sub     eax, 3
    mov     [rbp+var_1B], al
    mov     [rbp+var_1A], 1
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rdx, rax
    movzx   eax, [rbp+var_1A]
    mov     [rdx], ax
    mov     rax, [rbp+var_28]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_28]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    lea     rdx, [rsi+rax]
    movzx   eax, [rbp+var_1B]
    mov     [rdx], al
    movzx   eax, [rbp+var_1A]
    sub     eax, 1
    mov     [rbp+var_1A], ax
    movzx   eax, [rbp+var_1B]
    movsxd  rdx, eax
    lea     rax, _length_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    add     eax, 101h
    mov     rdx, [rbp+var_28]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_28]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    cmp     [rbp+var_1A], 0FFh
    ja      short loc_8E06
    movzx   eax, [rbp+var_1A]
    movsxd  rdx, eax
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    jmp     short loc_8E27
    
loc_8E06:
    movzx   eax, [rbp+var_1A]
    shr     ax, 7
    movzx   eax, ax
    add     eax, 100h
    movsxd  rdx, eax
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    
loc_8E27:
    mov     rdx, [rbp+var_28]
    movsxd  rcx, eax
    add     rcx, 270h
    movzx   edx, word ptr [rdx+rcx*4+8]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_28]
    cdqe
    add     rax, 270h
    mov     [rdx+rax*4+8], cx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    mov     [rbp+var_18], eax
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0B4h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A0h]
    sub     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0B4h], edx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+0ACh]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0A0h]
    add     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+0A0h], 0
    jmp     loc_8FA6
    
loc_8EC3:
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    mov     [rbp+var_1C], al
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    mov     rax, [rbp+var_28]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_28]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    lea     rdx, [rsi+rax]
    movzx   eax, [rbp+var_1C]
    mov     [rdx], al
    movzx   eax, [rbp+var_1C]
    mov     rdx, [rbp+var_28]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_28]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    mov     rax, [rbp+var_28]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    mov     [rbp+var_18], eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0B4h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_28]
    mov     [rax+0B4h], edx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0ACh], edx
    
loc_8FA6:
    cmp     [rbp+var_18], 0
    jz      loc_8B0C
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_8FFB
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_9000
    
loc_8FFB:
    mov     esi, 0
    
loc_9000:
    mov     rax, [rbp+var_28]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     loc_8B0C
    mov     eax, 0
    jmp     locret_91D1
    
loc_9056:
    nop
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+172Ch], 0
    cmp     [rbp+var_2C], 4
    jnz     loc_911B
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_90BA
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_90BF
    
loc_90BA:
    mov     esi, 0
    
loc_90BF:
    mov     rax, [rbp+var_28]
    mov     ecx, 1
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_9111
    mov     eax, 2
    jmp     locret_91D1
    
loc_9111:
    mov     eax, 3
    jmp     locret_91D1
    
loc_911B:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+170Ch]
    test    eax, eax
    jz      loc_91CC
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_9178
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_917D
    
loc_9178:
    mov     esi, 0
    
loc_917D:
    mov     rax, [rbp+var_28]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_28]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_28]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_91CC
    mov     eax, 0
    jmp     short locret_91D1
    
loc_91CC:
    mov     eax, 1
    
locret_91D1:
    leave
    retn
    

<deflate_huff>:
    
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_5= byte ptr -5
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    
loc_91E2:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    test    eax, eax
    jnz     short loc_921E
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    fill_window
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    test    eax, eax
    jnz     short loc_921E
    cmp     [rbp+var_1C], 0
    jnz     loc_93BF
    mov     eax, 0
    jmp     locret_953A
    
loc_921E:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+0A0h], 0
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     eax, eax
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    mov     [rbp+var_5], al
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     word ptr [rax], 0
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    lea     rdx, [rsi+rax]
    movzx   eax, [rbp+var_5]
    mov     [rdx], al
    movzx   eax, [rbp+var_5]
    mov     rdx, [rbp+var_18]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_18]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0B4h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_18]
    mov     [rax+0B4h], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    mov     [rax+0ACh], edx
    cmp     [rbp+var_4], 0
    jz      loc_91E2
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_9364
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_9369
    
loc_9364:
    mov     esi, 0
    
loc_9369:
    mov     rax, [rbp+var_18]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     loc_91E2
    mov     eax, 0
    jmp     locret_953A
    
loc_93BF:
    nop
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+172Ch], 0
    cmp     [rbp+var_1C], 4
    jnz     loc_9484
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_9423
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_9428
    
loc_9423:
    mov     esi, 0
    
loc_9428:
    mov     rax, [rbp+var_18]
    mov     ecx, 1
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_947A
    mov     eax, 2
    jmp     locret_953A
    
loc_947A:
    mov     eax, 3
    jmp     locret_953A
    
loc_9484:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+170Ch]
    test    eax, eax
    jz      loc_9535
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    sub     rdx, rax
    mov     rax, rdx
    mov     rdi, rax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    test    rax, rax
    js      short loc_94E1
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+98h]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    jmp     short loc_94E6
    
loc_94E1:
    mov     esi, 0
    
loc_94E6:
    mov     rax, [rbp+var_18]
    mov     ecx, 0
    mov     rdx, rdi
    mov     rdi, rax
    call    _tr_flush_block
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0ACh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+98h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     rdi, rax
    call    flush_pending
    mov     rax, [rbp+var_18]
    mov     rax, [rax]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_9535
    mov     eax, 0
    jmp     short locret_953A
    
loc_9535:
    mov     eax, 1
    
locret_953A:
    leave
    retn
    

<inflateBackInit_>:
    
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     [rbp+var_28], rdx
    mov     [rbp+var_30], rcx
    mov     [rbp+var_20], r8d
    cmp     [rbp+var_30], 0
    jz      short loc_9574
    mov     rax, [rbp+var_30]
    movzx   eax, byte ptr [rax]
    mov     edx, 31h
    cmp     al, dl
    jnz     short loc_9574
    cmp     [rbp+var_20], 70h
    jz      short loc_957E
    
loc_9574:
    mov     eax, 0FFFFFFFAh
    jmp     locret_967E
    
loc_957E:
    cmp     [rbp+var_18], 0
    jz      short loc_9598
    cmp     [rbp+var_28], 0
    jz      short loc_9598
    cmp     [rbp+var_1C], 7
    jle     short loc_9598
    cmp     [rbp+var_1C], 0Fh
    jle     short loc_95A2
    
loc_9598:
    mov     eax, 0FFFFFFFEh
    jmp     locret_967E
    
loc_95A2:
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+30h], 0
    mov     rax, [rbp+var_18]
    mov     rax, [rax+40h]
    test    rax, rax
    jnz     short loc_95D6
    mov     rax, [rbp+var_18]
    lea     rdx, zcalloc
    mov     [rax+40h], rdx
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+50h], 0
    
loc_95D6:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    test    rax, rax
    jnz     short loc_95F2
    mov     rax, [rbp+var_18]
    lea     rdx, zcfree
    mov     [rax+48h], rdx
    
loc_95F2:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_18]
    mov     rcx, [rdx+50h]
    mov     edx, 1BF8h
    mov     esi, 1
    mov     rdi, rcx
    call    rax
    mov     [rbp+var_8], rax
    cmp     [rbp+var_8], 0
    jnz     short loc_9623
    mov     eax, 0FFFFFFFCh
    jmp     short locret_967E
    
loc_9623:
    mov     rax, [rbp+var_18]
    mov     rdx, [rbp+var_8]
    mov     [rax+38h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+1Ch], 8000h
    mov     edx, [rbp+var_1C]
    mov     rax, [rbp+var_8]
    mov     [rax+38h], edx
    mov     eax, [rbp+var_1C]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     rax, [rbp+var_8]
    mov     [rax+3Ch], edx
    mov     rax, [rbp+var_8]
    mov     rdx, [rbp+var_28]
    mov     [rax+48h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+44h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+40h], 0
    mov     eax, 0
    
locret_967E:
    leave
    retn
    

<fixedtables>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    lea     rdx, lenfix_3653
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+78h], 9
    mov     rax, [rbp+var_8]
    lea     rdx, distfix_3654
    mov     [rax+70h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+7Ch], 5
    nop
    pop     rbp
    retn
    

<inflateBack>:
    
    var_78= qword ptr -78h
    var_70= qword ptr -70h
    var_68= qword ptr -68h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= dword ptr -50h
    var_4C= dword ptr -4Ch
    var_48= dword ptr -48h
    n= qword ptr -44h
    var_3C= dword ptr -3Ch
    var_38= dword ptr -38h
    var_34= dword ptr -34h
    src= qword ptr -30h
    dest= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    add     rsp, 0FFFFFFFFFFFFFF80h
    mov     [rbp+var_58], rdi
    mov     [rbp+var_60], rsi
    mov     [rbp+var_68], rdx
    mov     [rbp+var_70], rcx
    mov     [rbp+var_78], r8
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    cmp     [rbp+var_58], 0
    jz      short loc_96FE
    mov     rax, [rbp+var_58]
    mov     rax, [rax+38h]
    test    rax, rax
    jnz     short loc_9708
    
loc_96FE:
    mov     eax, 0FFFFFFFEh
    jmp     loc_AC08
    
loc_9708:
    mov     rax, [rbp+var_58]
    mov     rax, [rax+38h]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_58]
    mov     qword ptr [rax+30h], 0
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F3Fh
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+0Ch], 0
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+40h], 0
    mov     rax, [rbp+var_58]
    mov     rax, [rax]
    mov     [rbp+src], rax
    mov     rax, [rbp+src]
    test    rax, rax
    jz      short loc_975E
    mov     rax, [rbp+var_58]
    mov     eax, [rax+8]
    jmp     short loc_9763
    
loc_975E:
    mov     eax, 0
    
loc_9763:
    mov     [rbp+var_50], eax
    mov     [rbp+var_20], 0
    mov     [rbp+var_48], 0
    mov     rax, [rbp+var_10]
    mov     rax, [rax+48h]
    mov     [rbp+dest], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    mov     [rbp+var_4C], eax
    
loc_978B:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    sub     eax, 3F3Fh
    cmp     eax, 12h
    ja      def_97C1
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, jpt_97C1
    mov     eax, ds:(jpt_97C1 - 18690h)[rdx+rax]
    movsxd  rdx, eax
    lea     rax, jpt_97C1
    add     rax, rdx
    jmp     rax
    
loc_97C3:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+0Ch]
    test    eax, eax
    jz      loc_9852
    mov     eax, [rbp+var_48]
    and     eax, 7
    mov     ecx, eax
    shr     [rbp+var_20], cl
    and     [rbp+var_48], 0FFFFFFF8h
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F50h
    jmp     loc_ABEA
    
loc_97F2:
    cmp     [rbp+var_50], 0
    jnz     short loc_9829
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_9829
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_9829:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_9852:
    cmp     [rbp+var_48], 2
    jbe     short loc_97F2
    mov     rax, [rbp+var_20]
    and     eax, 1
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+0Ch], edx
    shr     [rbp+var_20], 1
    sub     [rbp+var_48], 1
    mov     rax, [rbp+var_20]
    and     eax, 3
    cmp     eax, 1
    jz      short loc_989A
    cmp     eax, 1
    jb      short loc_988D
    cmp     eax, 2
    jz      short loc_98B3
    cmp     eax, 3
    jz      short loc_98C0
    jmp     short loc_98DA
    
loc_988D:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F41h
    jmp     short loc_98DA
    
loc_989A:
    mov     rax, [rbp+var_10]
    mov     rdi, rax
    call    fixedtables
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F48h
    jmp     short loc_98DA
    
loc_98B3:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F44h
    jmp     short loc_98DA
    
loc_98C0:
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidBlockTy
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    
loc_98DA:
    shr     [rbp+var_20], 2
    sub     [rbp+var_48], 2
    jmp     loc_ABEA
    
loc_98E8:
    mov     eax, [rbp+var_48]
    and     eax, 7
    mov     ecx, eax
    shr     [rbp+var_20], cl
    and     [rbp+var_48], 0FFFFFFF8h
    jmp     short loc_995A
    
loc_98FA:
    cmp     [rbp+var_50], 0
    jnz     short loc_9931
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_9931
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_9931:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_995A:
    cmp     [rbp+var_48], 1Fh
    jbe     short loc_98FA
    mov     rax, [rbp+var_20]
    movzx   eax, ax
    mov     rdx, [rbp+var_20]
    shr     rdx, 10h
    xor     rdx, 0FFFFh
    cmp     rax, rdx
    jz      short loc_999A
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidStoredB
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_999A:
    mov     rax, [rbp+var_20]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    mov     [rax+5Ch], edx
    mov     [rbp+var_20], 0
    mov     [rbp+var_48], 0
    jmp     loc_9AAD
    
loc_99BC:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+5Ch]
    mov     dword ptr [rbp+n], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_99FD
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_99FD
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_99FD:
    cmp     [rbp+var_4C], 0
    jnz     short loc_9A47
    mov     rax, [rbp+var_10]
    mov     rax, [rax+48h]
    mov     [rbp+dest], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    mov     [rbp+var_4C], eax
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_4C]
    mov     [rax+40h], edx
    mov     edx, [rbp+var_4C]
    mov     rsi, [rbp+dest]
    mov     rcx, [rbp+var_78]
    mov     rax, [rbp+var_70]
    mov     rdi, rcx
    call    rax
    test    eax, eax
    jz      short loc_9A47
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_9A47:
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_50]
    jbe     short loc_9A55
    mov     eax, [rbp+var_50]
    mov     dword ptr [rbp+n], eax
    
loc_9A55:
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_4C]
    jbe     short loc_9A63
    mov     eax, [rbp+var_4C]
    mov     dword ptr [rbp+n], eax
    
loc_9A63:
    mov     edx, dword ptr [rbp+n]
    mov     rcx, [rbp+src]
    mov     rax, [rbp+dest]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_50], eax
    mov     rdx, [rbp+src]
    mov     eax, dword ptr [rbp+n]
    add     rax, rdx
    mov     [rbp+src], rax
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_4C], eax
    mov     eax, dword ptr [rbp+n]
    add     [rbp+dest], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+5Ch]
    sub     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+5Ch], edx
    
loc_9AAD:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+5Ch]
    test    eax, eax
    jnz     loc_99BC
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F3Fh
    jmp     loc_ABEA
    
loc_9ACC:
    cmp     [rbp+var_50], 0
    jnz     short loc_9B03
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_9B03
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_9B03:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_9B2C:
    cmp     [rbp+var_48], 0Dh
    jbe     short loc_9ACC
    mov     rax, [rbp+var_20]
    and     eax, 1Fh
    lea     edx, [rax+101h]
    mov     rax, [rbp+var_10]
    mov     [rax+84h], edx
    shr     [rbp+var_20], 5
    sub     [rbp+var_48], 5
    mov     rax, [rbp+var_20]
    and     eax, 1Fh
    lea     edx, [rax+1]
    mov     rax, [rbp+var_10]
    mov     [rax+88h], edx
    shr     [rbp+var_20], 5
    sub     [rbp+var_48], 5
    mov     rax, [rbp+var_20]
    and     eax, 0Fh
    lea     edx, [rax+4]
    mov     rax, [rbp+var_10]
    mov     [rax+80h], edx
    shr     [rbp+var_20], 4
    sub     [rbp+var_48], 4
    mov     rax, [rbp+var_10]
    mov     eax, [rax+84h]
    cmp     eax, 11Eh
    ja      short loc_9BAC
    mov     rax, [rbp+var_10]
    mov     eax, [rax+88h]
    cmp     eax, 1Eh
    jbe     short loc_9BCB
    
loc_9BAC:
    mov     rax, [rbp+var_58]
    lea     rdx, aTooManyLengthO
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_9BCB:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8Ch], 0
    jmp     loc_9C93
    
loc_9BDE:
    cmp     [rbp+var_50], 0
    jnz     short loc_9C15
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_9C15
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_9C15:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_9C3E:
    cmp     [rbp+var_48], 2
    jbe     short loc_9BDE
    mov     rax, [rbp+var_20]
    mov     esi, eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_10]
    mov     [rdx+8Ch], ecx
    mov     eax, eax
    lea     rdx, [rax+rax]
    lea     rax, order_3675
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    and     esi, 7
    mov     ecx, esi
    mov     rax, [rbp+var_10]
    movsxd  rdx, edx
    add     rdx, 48h
    mov     [rax+rdx*2+8], cx
    shr     [rbp+var_20], 3
    sub     [rbp+var_48], 3
    
loc_9C93:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+8Ch]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+80h]
    cmp     edx, eax
    jb      short loc_9C3E
    jmp     short loc_9CEA
    
loc_9CAD:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_10]
    mov     [rdx+8Ch], ecx
    mov     eax, eax
    lea     rdx, [rax+rax]
    lea     rax, order_3675
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    movsxd  rdx, edx
    add     rdx, 48h
    mov     word ptr [rax+rdx*2+8], 0
    
loc_9CEA:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8Ch]
    cmp     eax, 12h
    jbe     short loc_9CAD
    mov     rax, [rbp+var_10]
    lea     rdx, [rax+558h]
    mov     rax, [rbp+var_10]
    mov     [rax+90h], rdx
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+90h]
    mov     rax, [rbp+var_10]
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+78h], 7
    mov     rax, [rbp+var_10]
    lea     rsi, [rax+318h]
    mov     rax, [rbp+var_10]
    lea     rcx, [rax+78h]
    mov     rax, [rbp+var_10]
    lea     rdx, [rax+90h]
    mov     rax, [rbp+var_10]
    add     rax, 98h
    mov     r9, rsi
    mov     r8, rcx
    mov     rcx, rdx
    mov     edx, 13h
    mov     rsi, rax
    mov     edi, 0
    call    inflate_table
    mov     [rbp+var_3C], eax
    cmp     [rbp+var_3C], 0
    jz      short loc_9D98
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidCodeLen
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_9D98:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8Ch], 0
    jmp     loc_A178
    
loc_9DAB:
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+68h]
    mov     rax, [rbp+var_20]
    mov     esi, eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+78h]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_38], eax
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    cmp     [rbp+var_48], eax
    jnb     short loc_9E4E
    cmp     [rbp+var_50], 0
    jnz     short loc_9E20
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_9E20
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_9E20:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    jmp     loc_9DAB
    
loc_9E4E:
    nop
    movzx   eax, word ptr [rbp+var_38+2]
    cmp     ax, 0Fh
    ja      short loc_9E9F
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_20], cl
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    sub     [rbp+var_48], eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_10]
    mov     [rdx+8Ch], ecx
    movzx   ecx, word ptr [rbp+var_38+2]
    mov     rdx, [rbp+var_10]
    mov     eax, eax
    add     rax, 48h
    mov     [rdx+rax*2+8], cx
    jmp     loc_A178
    
loc_9E9F:
    movzx   eax, word ptr [rbp+var_38+2]
    cmp     ax, 10h
    jnz     loc_9F9F
    jmp     short loc_9F0F
    
loc_9EAF:
    cmp     [rbp+var_50], 0
    jnz     short loc_9EE6
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_9EE6
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_9EE6:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_9F0F:
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    add     eax, 2
    cmp     [rbp+var_48], eax
    jb      short loc_9EAF
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_20], cl
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    sub     [rbp+var_48], eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8Ch]
    test    eax, eax
    jnz     short loc_9F62
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidBitLeng
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_A1A0
    
loc_9F62:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8Ch]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_10]
    mov     edx, edx
    add     rdx, 48h
    movzx   eax, word ptr [rax+rdx*2+8]
    movzx   eax, ax
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_20]
    and     eax, 3
    add     eax, 3
    mov     dword ptr [rbp+n], eax
    shr     [rbp+var_20], 2
    sub     [rbp+var_48], 2
    jmp     loc_A0FA
    
loc_9F9F:
    movzx   eax, word ptr [rbp+var_38+2]
    cmp     ax, 11h
    jnz     loc_A0B7
    jmp     short loc_A00F
    
loc_9FAF:
    cmp     [rbp+var_50], 0
    jnz     short loc_9FE6
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_9FE6
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_9FE6:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_A00F:
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    add     eax, 3
    cmp     [rbp+var_48], eax
    jb      short loc_9FAF
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_20], cl
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    sub     [rbp+var_48], eax
    mov     dword ptr [rbp+n+4], 0
    mov     rax, [rbp+var_20]
    and     eax, 7
    add     eax, 3
    mov     dword ptr [rbp+n], eax
    shr     [rbp+var_20], 3
    sub     [rbp+var_48], 3
    jmp     loc_A0FA
    
loc_A057:
    cmp     [rbp+var_50], 0
    jnz     short loc_A08E
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_A08E
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_A08E:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_A0B7:
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    add     eax, 7
    cmp     [rbp+var_48], eax
    jb      short loc_A057
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_20], cl
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    sub     [rbp+var_48], eax
    mov     dword ptr [rbp+n+4], 0
    mov     rax, [rbp+var_20]
    and     eax, 7Fh
    add     eax, 0Bh
    mov     dword ptr [rbp+n], eax
    shr     [rbp+var_20], 7
    sub     [rbp+var_48], 7
    
loc_A0FA:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+8Ch]
    mov     eax, dword ptr [rbp+n]
    lea     ecx, [rdx+rax]
    mov     rax, [rbp+var_10]
    mov     edx, [rax+84h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+88h]
    add     eax, edx
    cmp     ecx, eax
    jbe     short loc_A16B
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidBitLeng
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     short loc_A1A0
    
loc_A140:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_10]
    mov     [rdx+8Ch], ecx
    mov     edx, dword ptr [rbp+n+4]
    mov     ecx, edx
    mov     rdx, [rbp+var_10]
    mov     eax, eax
    add     rax, 48h
    mov     [rdx+rax*2+8], cx
    
loc_A16B:
    mov     eax, dword ptr [rbp+n]
    lea     edx, [rax-1]
    mov     dword ptr [rbp+n], edx
    test    eax, eax
    jnz     short loc_A140
    
loc_A178:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+8Ch]
    mov     rax, [rbp+var_10]
    mov     ecx, [rax+84h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+88h]
    add     eax, ecx
    cmp     edx, eax
    jb      loc_9DAB
    
loc_A1A0:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    cmp     eax, 3F51h
    jz      loc_ABE9
    mov     rax, [rbp+var_10]
    movzx   eax, word ptr [rax+298h]
    test    ax, ax
    jnz     short loc_A1E1
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidCodeMis
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_A1E1:
    mov     rax, [rbp+var_10]
    lea     rdx, [rax+558h]
    mov     rax, [rbp+var_10]
    mov     [rax+90h], rdx
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+90h]
    mov     rax, [rbp+var_10]
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+78h], 9
    mov     rax, [rbp+var_10]
    lea     r8, [rax+318h]
    mov     rax, [rbp+var_10]
    lea     rdi, [rax+78h]
    mov     rax, [rbp+var_10]
    lea     rdx, [rax+90h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+84h]
    mov     rcx, [rbp+var_10]
    lea     rsi, [rcx+98h]
    mov     r9, r8
    mov     r8, rdi
    mov     rcx, rdx
    mov     edx, eax
    mov     edi, 1
    call    inflate_table
    mov     [rbp+var_3C], eax
    cmp     [rbp+var_3C], 0
    jz      short loc_A285
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidLiteral
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_A285:
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+90h]
    mov     rax, [rbp+var_10]
    mov     [rax+70h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+7Ch], 6
    mov     rax, [rbp+var_10]
    lea     r8, [rax+318h]
    mov     rax, [rbp+var_10]
    lea     rdi, [rax+7Ch]
    mov     rax, [rbp+var_10]
    lea     rcx, [rax+90h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+88h]
    mov     rdx, [rbp+var_10]
    lea     rsi, [rdx+98h]
    mov     rdx, [rbp+var_10]
    mov     edx, [rdx+84h]
    mov     edx, edx
    add     rdx, rdx
    add     rsi, rdx
    mov     r9, r8
    mov     r8, rdi
    mov     edx, eax
    mov     edi, 2
    call    inflate_table
    mov     [rbp+var_3C], eax
    cmp     [rbp+var_3C], 0
    jz      short loc_A322
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidDistanc
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_A322:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F48h
    
loc_A32D:
    cmp     [rbp+var_50], 5
    jbe     loc_A405
    cmp     [rbp+var_4C], 101h
    jbe     loc_A405
    mov     rax, [rbp+var_58]
    mov     rdx, [rbp+dest]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_58]
    mov     edx, [rbp+var_4C]
    mov     [rax+20h], edx
    mov     rdx, [rbp+src]
    mov     rax, [rbp+var_58]
    mov     [rax], rdx
    mov     rax, [rbp+var_58]
    mov     edx, [rbp+var_50]
    mov     [rax+8], edx
    mov     rax, [rbp+var_10]
    mov     rdx, [rbp+var_20]
    mov     [rax+50h], rdx
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_48]
    mov     [rax+58h], edx
    mov     rax, [rbp+var_10]
    mov     edx, [rax+40h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    cmp     edx, eax
    jnb     short loc_A3AA
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    sub     eax, [rbp+var_4C]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+40h], edx
    
loc_A3AA:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+3Ch]
    mov     rax, [rbp+var_58]
    mov     esi, edx
    mov     rdi, rax
    call    inflate_fast
    mov     rax, [rbp+var_58]
    mov     rax, [rax+18h]
    mov     [rbp+dest], rax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+20h]
    mov     [rbp+var_4C], eax
    mov     rax, [rbp+var_58]
    mov     rax, [rax]
    mov     [rbp+src], rax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+8]
    mov     [rbp+var_50], eax
    mov     rax, [rbp+var_10]
    mov     rax, [rax+50h]
    mov     [rbp+var_20], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+58h]
    mov     [rbp+var_48], eax
    jmp     loc_ABEA
    
loc_A405:
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+68h]
    mov     rax, [rbp+var_20]
    mov     esi, eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+78h]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_38], eax
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    cmp     [rbp+var_48], eax
    jnb     short loc_A4A8
    cmp     [rbp+var_50], 0
    jnz     short loc_A47A
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_A47A
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_A47A:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    jmp     loc_A405
    
loc_A4A8:
    nop
    movzx   eax, byte ptr [rbp+var_38]
    test    al, al
    jz      loc_A5B5
    movzx   eax, byte ptr [rbp+var_38]
    movzx   eax, al
    and     eax, 0F0h
    test    eax, eax
    jnz     loc_A5B5
    mov     eax, [rbp+var_38]
    mov     [rbp+var_34], eax
    
loc_A4CF:
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+68h]
    movzx   eax, word ptr [rbp+var_34+2]
    movzx   esi, ax
    mov     rax, [rbp+var_20]
    mov     edi, eax
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   ecx, al
    movzx   eax, byte ptr [rbp+var_34]
    movzx   eax, al
    add     eax, ecx
    mov     r8d, 0FFFFFFFFh
    mov     ecx, eax
    shl     r8d, cl
    mov     eax, r8d
    not     eax
    and     edi, eax
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   eax, al
    mov     ecx, eax
    shr     edi, cl
    mov     eax, edi
    add     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_38], eax
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   edx, al
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    add     eax, edx
    cmp     [rbp+var_48], eax
    jnb     short loc_A59D
    cmp     [rbp+var_50], 0
    jnz     short loc_A56F
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_A56F
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_A56F:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    jmp     loc_A4CF
    
loc_A59D:
    nop
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_20], cl
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   eax, al
    sub     [rbp+var_48], eax
    
loc_A5B5:
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_20], cl
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    sub     [rbp+var_48], eax
    movzx   eax, word ptr [rbp+var_38+2]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    mov     [rax+5Ch], edx
    movzx   eax, byte ptr [rbp+var_38]
    test    al, al
    jnz     short loc_A657
    cmp     [rbp+var_4C], 0
    jnz     short loc_A62C
    mov     rax, [rbp+var_10]
    mov     rax, [rax+48h]
    mov     [rbp+dest], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    mov     [rbp+var_4C], eax
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_4C]
    mov     [rax+40h], edx
    mov     edx, [rbp+var_4C]
    mov     rsi, [rbp+dest]
    mov     rcx, [rbp+var_78]
    mov     rax, [rbp+var_70]
    mov     rdi, rcx
    call    rax
    test    eax, eax
    jz      short loc_A62C
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_A62C:
    mov     rax, [rbp+var_10]
    mov     ecx, [rax+5Ch]
    mov     rax, [rbp+dest]
    lea     rdx, [rax+1]
    mov     [rbp+dest], rdx
    mov     edx, ecx
    mov     [rax], dl
    sub     [rbp+var_4C], 1
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F48h
    jmp     loc_ABEA
    
loc_A657:
    movzx   eax, byte ptr [rbp+var_38]
    movzx   eax, al
    and     eax, 20h
    test    eax, eax
    jz      short loc_A675
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F3Fh
    jmp     loc_ABEA
    
loc_A675:
    movzx   eax, byte ptr [rbp+var_38]
    movzx   eax, al
    and     eax, 40h
    test    eax, eax
    jz      short loc_A6A2
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidLiteral_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_A6A2:
    movzx   eax, byte ptr [rbp+var_38]
    movzx   eax, al
    and     eax, 0Fh
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+64h], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    test    eax, eax
    jz      loc_A775
    jmp     short loc_A726
    
loc_A6C6:
    cmp     [rbp+var_50], 0
    jnz     short loc_A6FD
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_A6FD
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_A6FD:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_A726:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    cmp     [rbp+var_48], eax
    jb      short loc_A6C6
    mov     rax, [rbp+var_10]
    mov     edx, [rax+5Ch]
    mov     rax, [rbp+var_20]
    mov     esi, eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    add     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+5Ch], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    mov     ecx, eax
    shr     [rbp+var_20], cl
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    sub     [rbp+var_48], eax
    
loc_A775:
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+70h]
    mov     rax, [rbp+var_20]
    mov     esi, eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+7Ch]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_38], eax
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    cmp     [rbp+var_48], eax
    jnb     short loc_A818
    cmp     [rbp+var_50], 0
    jnz     short loc_A7EA
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_A7EA
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_A7EA:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    jmp     loc_A775
    
loc_A818:
    nop
    movzx   eax, byte ptr [rbp+var_38]
    movzx   eax, al
    and     eax, 0F0h
    test    eax, eax
    jnz     loc_A919
    mov     eax, [rbp+var_38]
    mov     [rbp+var_34], eax
    
loc_A833:
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+70h]
    movzx   eax, word ptr [rbp+var_34+2]
    movzx   esi, ax
    mov     rax, [rbp+var_20]
    mov     edi, eax
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   ecx, al
    movzx   eax, byte ptr [rbp+var_34]
    movzx   eax, al
    add     eax, ecx
    mov     r8d, 0FFFFFFFFh
    mov     ecx, eax
    shl     r8d, cl
    mov     eax, r8d
    not     eax
    and     edi, eax
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   eax, al
    mov     ecx, eax
    shr     edi, cl
    mov     eax, edi
    add     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_38], eax
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   edx, al
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    add     eax, edx
    cmp     [rbp+var_48], eax
    jnb     short loc_A901
    cmp     [rbp+var_50], 0
    jnz     short loc_A8D3
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_A8D3
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_A8D3:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    jmp     loc_A833
    
loc_A901:
    nop
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_20], cl
    movzx   eax, byte ptr [rbp+var_34+1]
    movzx   eax, al
    sub     [rbp+var_48], eax
    
loc_A919:
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_20], cl
    movzx   eax, byte ptr [rbp+var_38+1]
    movzx   eax, al
    sub     [rbp+var_48], eax
    movzx   eax, byte ptr [rbp+var_38]
    movzx   eax, al
    and     eax, 40h
    test    eax, eax
    jz      short loc_A95D
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidDistanc_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_A95D:
    movzx   eax, word ptr [rbp+var_38+2]
    movzx   edx, ax
    mov     rax, [rbp+var_10]
    mov     [rax+60h], edx
    movzx   eax, byte ptr [rbp+var_38]
    movzx   eax, al
    and     eax, 0Fh
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+64h], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    test    eax, eax
    jz      loc_AA3E
    jmp     short loc_A9EF
    
loc_A98F:
    cmp     [rbp+var_50], 0
    jnz     short loc_A9C6
    lea     rcx, [rbp+src]
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_60]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     [rbp+var_50], eax
    cmp     [rbp+var_50], 0
    jnz     short loc_A9C6
    mov     [rbp+src], 0
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_A9C6:
    sub     [rbp+var_50], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_48]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_20], rax
    add     [rbp+var_48], 8
    
loc_A9EF:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    cmp     [rbp+var_48], eax
    jb      short loc_A98F
    mov     rax, [rbp+var_10]
    mov     edx, [rax+60h]
    mov     rax, [rbp+var_20]
    mov     esi, eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    add     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+60h], edx
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    mov     ecx, eax
    shr     [rbp+var_20], cl
    mov     rax, [rbp+var_10]
    mov     eax, [rax+64h]
    sub     [rbp+var_48], eax
    
loc_AA3E:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+60h]
    mov     rax, [rbp+var_10]
    mov     ecx, [rax+3Ch]
    mov     rax, [rbp+var_10]
    mov     esi, [rax+40h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    cmp     esi, eax
    jnb     short loc_AA63
    mov     eax, [rbp+var_4C]
    jmp     short loc_AA68
    
loc_AA63:
    mov     eax, 0
    
loc_AA68:
    sub     ecx, eax
    mov     eax, ecx
    cmp     edx, eax
    jbe     short loc_AA8F
    mov     rax, [rbp+var_58]
    lea     rdx, aInvalidDistanc_1
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_ABEA
    
loc_AA8F:
    cmp     [rbp+var_4C], 0
    jnz     short loc_AAD9
    mov     rax, [rbp+var_10]
    mov     rax, [rax+48h]
    mov     [rbp+dest], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    mov     [rbp+var_4C], eax
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_4C]
    mov     [rax+40h], edx
    mov     edx, [rbp+var_4C]
    mov     rsi, [rbp+dest]
    mov     rcx, [rbp+var_78]
    mov     rax, [rbp+var_70]
    mov     rdi, rcx
    call    rax
    test    eax, eax
    jz      short loc_AAD9
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     loc_ABF0
    
loc_AAD9:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+3Ch]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+60h]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+n], eax
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_4C]
    jnb     short loc_AB0F
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+dest]
    add     rax, rdx
    mov     [rbp+var_18], rax
    mov     eax, [rbp+var_4C]
    sub     eax, dword ptr [rbp+n]
    mov     dword ptr [rbp+n], eax
    jmp     short loc_AB2F
    
loc_AB0F:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+60h]
    mov     eax, eax
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+dest]
    add     rax, rdx
    mov     [rbp+var_18], rax
    mov     eax, [rbp+var_4C]
    mov     dword ptr [rbp+n], eax
    
loc_AB2F:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+5Ch]
    cmp     dword ptr [rbp+n], eax
    jbe     short loc_AB45
    mov     rax, [rbp+var_10]
    mov     eax, [rax+5Ch]
    mov     dword ptr [rbp+n], eax
    
loc_AB45:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+5Ch]
    sub     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+5Ch], edx
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_4C], eax
    
loc_AB5E:
    mov     rdx, [rbp+var_18]
    lea     rax, [rdx+1]
    mov     [rbp+var_18], rax
    mov     rax, [rbp+dest]
    lea     rcx, [rax+1]
    mov     [rbp+dest], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     dword ptr [rbp+n], 1
    cmp     dword ptr [rbp+n], 0
    jnz     short loc_AB5E
    mov     rax, [rbp+var_10]
    mov     eax, [rax+5Ch]
    test    eax, eax
    jnz     loc_AA8F
    jmp     short loc_ABEA
    
loc_AB96:
    mov     [rbp+var_3C], 1
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    cmp     [rbp+var_4C], eax
    jnb     short loc_ABEF
    mov     rax, [rbp+var_10]
    mov     eax, [rax+3Ch]
    sub     eax, [rbp+var_4C]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     rsi, [rax+48h]
    mov     rcx, [rbp+var_78]
    mov     rax, [rbp+var_70]
    mov     rdi, rcx
    call    rax
    test    eax, eax
    jz      short loc_ABEF
    mov     [rbp+var_3C], 0FFFFFFFBh
    jmp     short loc_ABEF
    
loc_ABD7:
    mov     [rbp+var_3C], 0FFFFFFFDh
    jmp     short loc_ABF0
    
def_97C1:
    mov     [rbp+var_3C], 0FFFFFFFEh
    jmp     short loc_ABF0
    
loc_ABE9:
    nop
    
loc_ABEA:
    jmp     loc_978B
    
loc_ABEF:
    nop
    
loc_ABF0:
    mov     rdx, [rbp+src]
    mov     rax, [rbp+var_58]
    mov     [rax], rdx
    mov     rax, [rbp+var_58]
    mov     edx, [rbp+var_50]
    mov     [rax+8], edx
    mov     eax, [rbp+var_3C]
    
loc_AC08:
    mov     rsi, [rbp+var_8]
    xor     rsi, fs:28h
    jz      short locret_AC1C
    call    ___stack_chk_fail
    
locret_AC1C:
    leave
    retn
    

<inflateBackEnd>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    cmp     [rbp+var_8], 0
    jz      short loc_AC4B
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    test    rax, rax
    jz      short loc_AC4B
    mov     rax, [rbp+var_8]
    mov     rax, [rax+48h]
    test    rax, rax
    jnz     short loc_AC52
    
loc_AC4B:
    mov     eax, 0FFFFFFFEh
    jmp     short locret_AC83
    
loc_AC52:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_8]
    mov     rcx, [rdx+38h]
    mov     rdx, [rbp+var_8]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+38h], 0
    mov     eax, 0
    
locret_AC83:
    leave
    retn
    

<inflate_fast>:
    
    var_8C= dword ptr -8Ch
    var_88= qword ptr -88h
    var_80= dword ptr -80h
    var_7C= dword ptr -7Ch
    var_78= dword ptr -78h
    var_74= dword ptr -74h
    var_70= dword ptr -70h
    var_6C= dword ptr -6Ch
    var_68= dword ptr -68h
    var_64= dword ptr -64h
    var_60= dword ptr -60h
    var_5C= dword ptr -5Ch
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_40= qword ptr -40h
    var_38= qword ptr -38h
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 18h
    mov     [rbp+var_88], rdi
    mov     [rbp+var_8C], esi
    mov     rax, [rbp+var_88]
    mov     rax, [rax+38h]
    mov     [rbp+var_38], rax
    mov     rax, [rbp+var_88]
    mov     rax, [rax]
    mov     [rbp+var_58], rax
    mov     rax, [rbp+var_88]
    mov     eax, [rax+8]
    sub     eax, 5
    mov     edx, eax
    mov     rax, [rbp+var_58]
    add     rax, rdx
    mov     [rbp+var_30], rax
    mov     rax, [rbp+var_88]
    mov     rax, [rax+18h]
    mov     [rbp+var_50], rax
    mov     rax, [rbp+var_88]
    mov     eax, [rax+20h]
    mov     edx, [rbp+var_8C]
    sub     edx, eax
    mov     eax, edx
    mov     eax, eax
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+var_50]
    add     rax, rdx
    mov     [rbp+var_28], rax
    mov     rax, [rbp+var_88]
    mov     eax, [rax+20h]
    sub     eax, 101h
    mov     edx, eax
    mov     rax, [rbp+var_50]
    add     rax, rdx
    mov     [rbp+var_20], rax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+3Ch]
    mov     [rbp+var_74], eax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+40h]
    mov     [rbp+var_70], eax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+44h]
    mov     [rbp+var_6C], eax
    mov     rax, [rbp+var_38]
    mov     rax, [rax+48h]
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_38]
    mov     rax, [rax+50h]
    mov     [rbp+var_48], rax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+58h]
    mov     [rbp+var_80], eax
    mov     rax, [rbp+var_38]
    mov     rax, [rax+68h]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_38]
    mov     rax, [rax+70h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+78h]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    sub     eax, 1
    mov     [rbp+var_68], eax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+7Ch]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    sub     eax, 1
    mov     [rbp+var_64], eax
    
loc_ADAB:
    cmp     [rbp+var_80], 0Eh
    ja      short loc_ADFB
    mov     rax, [rbp+var_58]
    lea     rdx, [rax+1]
    mov     [rbp+var_58], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_80]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_48], rax
    add     [rbp+var_80], 8
    mov     rax, [rbp+var_58]
    lea     rdx, [rax+1]
    mov     [rbp+var_58], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_80]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_48], rax
    add     [rbp+var_80], 8
    
loc_ADFB:
    mov     eax, [rbp+var_68]
    and     rax, [rbp+var_48]
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_5C], eax
    
loc_AE16:
    movzx   eax, byte ptr [rbp+var_5C+1]
    movzx   eax, al
    mov     [rbp+var_7C], eax
    mov     eax, [rbp+var_7C]
    mov     ecx, eax
    shr     [rbp+var_48], cl
    mov     eax, [rbp+var_7C]
    sub     [rbp+var_80], eax
    movzx   eax, byte ptr [rbp+var_5C]
    movzx   eax, al
    mov     [rbp+var_7C], eax
    cmp     [rbp+var_7C], 0
    jnz     short loc_AE58
    movzx   ecx, word ptr [rbp+var_5C+2]
    mov     rax, [rbp+var_50]
    lea     rdx, [rax+1]
    mov     [rbp+var_50], rdx
    mov     edx, ecx
    mov     [rax], dl
    jmp     loc_B43C
    
loc_AE58:
    mov     eax, [rbp+var_7C]
    and     eax, 10h
    test    eax, eax
    jz      loc_B3C2
    movzx   eax, word ptr [rbp+var_5C+2]
    movzx   eax, ax
    mov     [rbp+var_78], eax
    and     [rbp+var_7C], 0Fh
    cmp     [rbp+var_7C], 0
    jz      short loc_AED1
    mov     eax, [rbp+var_80]
    cmp     eax, [rbp+var_7C]
    jnb     short loc_AEA7
    mov     rax, [rbp+var_58]
    lea     rdx, [rax+1]
    mov     [rbp+var_58], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_80]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_48], rax
    add     [rbp+var_80], 8
    
loc_AEA7:
    mov     rax, [rbp+var_48]
    mov     edx, eax
    mov     eax, [rbp+var_7C]
    mov     esi, 0FFFFFFFFh
    mov     ecx, eax
    shl     esi, cl
    mov     eax, esi
    not     eax
    and     eax, edx
    add     [rbp+var_78], eax
    mov     eax, [rbp+var_7C]
    mov     ecx, eax
    shr     [rbp+var_48], cl
    mov     eax, [rbp+var_7C]
    sub     [rbp+var_80], eax
    
loc_AED1:
    cmp     [rbp+var_80], 0Eh
    ja      short loc_AF21
    mov     rax, [rbp+var_58]
    lea     rdx, [rax+1]
    mov     [rbp+var_58], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_80]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_48], rax
    add     [rbp+var_80], 8
    mov     rax, [rbp+var_58]
    lea     rdx, [rax+1]
    mov     [rbp+var_58], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_80]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_48], rax
    add     [rbp+var_80], 8
    
loc_AF21:
    mov     eax, [rbp+var_64]
    and     rax, [rbp+var_48]
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_8]
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_5C], eax
    
loc_AF3C:
    movzx   eax, byte ptr [rbp+var_5C+1]
    movzx   eax, al
    mov     [rbp+var_7C], eax
    mov     eax, [rbp+var_7C]
    mov     ecx, eax
    shr     [rbp+var_48], cl
    mov     eax, [rbp+var_7C]
    sub     [rbp+var_80], eax
    movzx   eax, byte ptr [rbp+var_5C]
    movzx   eax, al
    mov     [rbp+var_7C], eax
    mov     eax, [rbp+var_7C]
    and     eax, 10h
    test    eax, eax
    jz      loc_B35C
    movzx   eax, word ptr [rbp+var_5C+2]
    movzx   eax, ax
    mov     [rbp+var_60], eax
    and     [rbp+var_7C], 0Fh
    mov     eax, [rbp+var_80]
    cmp     eax, [rbp+var_7C]
    jnb     short loc_AFD5
    mov     rax, [rbp+var_58]
    lea     rdx, [rax+1]
    mov     [rbp+var_58], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_80]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_48], rax
    add     [rbp+var_80], 8
    mov     eax, [rbp+var_80]
    cmp     eax, [rbp+var_7C]
    jnb     short loc_AFD5
    mov     rax, [rbp+var_58]
    lea     rdx, [rax+1]
    mov     [rbp+var_58], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_80]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_48], rax
    add     [rbp+var_80], 8
    
loc_AFD5:
    mov     rax, [rbp+var_48]
    mov     edx, eax
    mov     eax, [rbp+var_7C]
    mov     esi, 0FFFFFFFFh
    mov     ecx, eax
    shl     esi, cl
    mov     eax, esi
    not     eax
    and     eax, edx
    add     [rbp+var_60], eax
    mov     eax, [rbp+var_7C]
    mov     ecx, eax
    shr     [rbp+var_48], cl
    mov     eax, [rbp+var_7C]
    sub     [rbp+var_80], eax
    mov     rdx, [rbp+var_50]
    mov     rax, [rbp+var_28]
    sub     rdx, rax
    mov     rax, rdx
    mov     [rbp+var_7C], eax
    mov     eax, [rbp+var_60]
    cmp     eax, [rbp+var_7C]
    jbe     loc_B294
    mov     eax, [rbp+var_60]
    sub     eax, [rbp+var_7C]
    mov     [rbp+var_7C], eax
    mov     eax, [rbp+var_7C]
    cmp     eax, [rbp+var_70]
    jbe     short loc_B05D
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1BE8h]
    test    eax, eax
    jz      short loc_B05D
    mov     rax, [rbp+var_88]
    lea     rdx, aInvalidDistanc_2
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_38]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_B454
    
loc_B05D:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_40], rax
    cmp     [rbp+var_6C], 0
    jnz     short loc_B0C9
    mov     eax, [rbp+var_74]
    sub     eax, [rbp+var_7C]
    mov     eax, eax
    add     [rbp+var_40], rax
    mov     eax, [rbp+var_7C]
    cmp     eax, [rbp+var_78]
    jnb     loc_B23B
    mov     eax, [rbp+var_7C]
    sub     [rbp+var_78], eax
    
loc_B089:
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     [rbp+var_7C], 1
    cmp     [rbp+var_7C], 0
    jnz     short loc_B089
    mov     eax, [rbp+var_60]
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+var_50]
    add     rax, rdx
    mov     [rbp+var_40], rax
    jmp     loc_B23B
    
loc_B0C9:
    mov     eax, [rbp+var_6C]
    cmp     eax, [rbp+var_7C]
    jnb     loc_B185
    mov     edx, [rbp+var_74]
    mov     eax, [rbp+var_6C]
    add     eax, edx
    sub     eax, [rbp+var_7C]
    mov     eax, eax
    add     [rbp+var_40], rax
    mov     eax, [rbp+var_6C]
    sub     [rbp+var_7C], eax
    mov     eax, [rbp+var_7C]
    cmp     eax, [rbp+var_78]
    jnb     loc_B23B
    mov     eax, [rbp+var_7C]
    sub     [rbp+var_78], eax
    
loc_B0FE:
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     [rbp+var_7C], 1
    cmp     [rbp+var_7C], 0
    jnz     short loc_B0FE
    mov     rax, [rbp+var_18]
    mov     [rbp+var_40], rax
    mov     eax, [rbp+var_6C]
    cmp     eax, [rbp+var_78]
    jnb     loc_B23B
    mov     eax, [rbp+var_6C]
    mov     [rbp+var_7C], eax
    mov     eax, [rbp+var_7C]
    sub     [rbp+var_78], eax
    
loc_B145:
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     [rbp+var_7C], 1
    cmp     [rbp+var_7C], 0
    jnz     short loc_B145
    mov     eax, [rbp+var_60]
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+var_50]
    add     rax, rdx
    mov     [rbp+var_40], rax
    jmp     loc_B23B
    
loc_B185:
    mov     eax, [rbp+var_6C]
    sub     eax, [rbp+var_7C]
    mov     eax, eax
    add     [rbp+var_40], rax
    mov     eax, [rbp+var_7C]
    cmp     eax, [rbp+var_78]
    jnb     loc_B23B
    mov     eax, [rbp+var_7C]
    sub     [rbp+var_78], eax
    
loc_B1A3:
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     [rbp+var_7C], 1
    cmp     [rbp+var_7C], 0
    jnz     short loc_B1A3
    mov     eax, [rbp+var_60]
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+var_50]
    add     rax, rdx
    mov     [rbp+var_40], rax
    jmp     short loc_B23B
    
loc_B1E0:
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     [rbp+var_78], 3
    
loc_B23B:
    cmp     [rbp+var_78], 2
    ja      short loc_B1E0
    cmp     [rbp+var_78], 0
    jz      loc_B43C
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    cmp     [rbp+var_78], 1
    jbe     loc_B43C
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    jmp     loc_B43C
    
loc_B294:
    mov     eax, [rbp+var_60]
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+var_50]
    add     rax, rdx
    mov     [rbp+var_40], rax
    
loc_B2A8:
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     [rbp+var_78], 3
    cmp     [rbp+var_78], 2
    ja      short loc_B2A8
    cmp     [rbp+var_78], 0
    jz      loc_B43C
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    cmp     [rbp+var_78], 1
    jbe     loc_B43C
    mov     rdx, [rbp+var_40]
    lea     rax, [rdx+1]
    mov     [rbp+var_40], rax
    mov     rax, [rbp+var_50]
    lea     rcx, [rax+1]
    mov     [rbp+var_50], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    jmp     loc_B43C
    
loc_B35C:
    mov     eax, [rbp+var_7C]
    and     eax, 40h
    test    eax, eax
    jnz     short loc_B3A0
    movzx   eax, word ptr [rbp+var_5C+2]
    movzx   edx, ax
    mov     eax, [rbp+var_7C]
    mov     esi, 1
    mov     ecx, eax
    shl     esi, cl
    mov     eax, esi
    sub     eax, 1
    mov     eax, eax
    and     rax, [rbp+var_48]
    add     rax, rdx
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_8]
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_5C], eax
    jmp     loc_AF3C
    
loc_B3A0:
    mov     rax, [rbp+var_88]
    lea     rdx, aInvalidDistanc_3
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_38]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_B454
    
loc_B3C2:
    mov     eax, [rbp+var_7C]
    and     eax, 40h
    test    eax, eax
    jnz     short loc_B406
    movzx   eax, word ptr [rbp+var_5C+2]
    movzx   edx, ax
    mov     eax, [rbp+var_7C]
    mov     esi, 1
    mov     ecx, eax
    shl     esi, cl
    mov     eax, esi
    sub     eax, 1
    mov     eax, eax
    and     rax, [rbp+var_48]
    add     rax, rdx
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_5C], eax
    jmp     loc_AE16
    
loc_B406:
    mov     eax, [rbp+var_7C]
    and     eax, 20h
    test    eax, eax
    jz      short loc_B41D
    mov     rax, [rbp+var_38]
    mov     dword ptr [rax+8], 3F3Fh
    jmp     short loc_B454
    
loc_B41D:
    mov     rax, [rbp+var_88]
    lea     rdx, aInvalidLiteral_1
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_38]
    mov     dword ptr [rax+8], 3F51h
    jmp     short loc_B454
    
loc_B43C:
    mov     rax, [rbp+var_58]
    cmp     rax, [rbp+var_30]
    jnb     short loc_B454
    mov     rax, [rbp+var_50]
    cmp     rax, [rbp+var_20]
    jb      loc_ADAB
    
loc_B454:
    mov     eax, [rbp+var_80]
    shr     eax, 3
    mov     [rbp+var_78], eax
    mov     eax, [rbp+var_78]
    neg     rax
    add     [rbp+var_58], rax
    mov     eax, [rbp+var_78]
    shl     eax, 3
    sub     [rbp+var_80], eax
    mov     eax, [rbp+var_80]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    sub     eax, 1
    mov     eax, eax
    and     [rbp+var_48], rax
    mov     rax, [rbp+var_88]
    mov     rdx, [rbp+var_58]
    mov     [rax], rdx
    mov     rax, [rbp+var_88]
    mov     rdx, [rbp+var_50]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_58]
    cmp     rax, [rbp+var_30]
    jnb     short loc_B4C1
    mov     rdx, [rbp+var_30]
    mov     rax, [rbp+var_58]
    sub     rdx, rax
    mov     rax, rdx
    add     eax, 5
    jmp     short loc_B4D8
    
loc_B4C1:
    mov     rdx, [rbp+var_58]
    mov     rax, [rbp+var_30]
    sub     rdx, rax
    mov     rax, rdx
    mov     edx, 5
    sub     edx, eax
    mov     eax, edx
    
loc_B4D8:
    mov     rdx, [rbp+var_88]
    mov     [rdx+8], eax
    mov     rax, [rbp+var_50]
    cmp     rax, [rbp+var_20]
    jnb     short loc_B501
    mov     rdx, [rbp+var_20]
    mov     rax, [rbp+var_50]
    sub     rdx, rax
    mov     rax, rdx
    add     eax, 101h
    jmp     short loc_B518
    
loc_B501:
    mov     rdx, [rbp+var_50]
    mov     rax, [rbp+var_20]
    sub     rdx, rax
    mov     rax, rdx
    mov     edx, 101h
    sub     edx, eax
    mov     eax, edx
    
loc_B518:
    mov     rdx, [rbp+var_88]
    mov     [rdx+20h], eax
    mov     rax, [rbp+var_38]
    mov     rdx, [rbp+var_48]
    mov     [rax+50h], rdx
    mov     rax, [rbp+var_38]
    mov     edx, [rbp+var_80]
    mov     [rax+58h], edx
    nop
    leave
    retn
    

<inflateStateCheck>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jz      short loc_B564
    mov     rax, [rbp+var_18]
    mov     rax, [rax+40h]
    test    rax, rax
    jz      short loc_B564
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    test    rax, rax
    jnz     short loc_B56B
    
loc_B564:
    mov     eax, 1
    jmp     short loc_B5B3
    
loc_B56B:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    cmp     [rbp+var_8], 0
    jz      short loc_B5A7
    mov     rax, [rbp+var_8]
    mov     rax, [rax]
    cmp     [rbp+var_18], rax
    jnz     short loc_B5A7
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 3F33h
    jbe     short loc_B5A7
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 3F53h
    jbe     short loc_B5AE
    
loc_B5A7:
    mov     eax, 1
    jmp     short loc_B5B3
    
loc_B5AE:
    mov     eax, 0
    
loc_B5B3:
    pop     rbp
    retn
    

<inflateResetKeep>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 18h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_B5DB
    mov     eax, 0FFFFFFFEh
    jmp     locret_B6EA
    
loc_B5DB:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+28h], 0
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+28h]
    mov     rax, [rbp+var_18]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+28h]
    mov     rax, [rbp+var_18]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+30h], 0
    mov     rax, [rbp+var_8]
    mov     eax, [rax+10h]
    test    eax, eax
    jz      short loc_B641
    mov     rax, [rbp+var_8]
    mov     eax, [rax+10h]
    cdqe
    and     eax, 1
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+60h], rdx
    
loc_B641:
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 3F34h
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+0Ch], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+14h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+1Ch], 8000h
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+30h], 0
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+50h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+58h], 0
    mov     rax, [rbp+var_8]
    lea     rdx, [rax+558h]
    mov     rax, [rbp+var_8]
    mov     [rax+90h], rdx
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+90h]
    mov     rax, [rbp+var_8]
    mov     [rax+70h], rdx
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+70h]
    mov     rax, [rbp+var_8]
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+1BE8h], 1
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+1BECh], 0FFFFFFFFh
    mov     eax, 0
    
locret_B6EA:
    leave
    retn
    

<inflateReset>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_B70F
    mov     eax, 0FFFFFFFEh
    jmp     short locret_B748
    
loc_B70F:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+3Ch], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+40h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+44h], 0
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    _inflateResetKeep
    
locret_B748:
    leave
    retn
    

<inflateReset2>:
    
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_B773
    mov     eax, 0FFFFFFFEh
    jmp     locret_B827
    
loc_B773:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    cmp     [rbp+var_1C], 0
    jns     short loc_B791
    mov     [rbp+var_C], 0
    neg     [rbp+var_1C]
    jmp     short loc_B7A7
    
loc_B791:
    mov     eax, [rbp+var_1C]
    sar     eax, 4
    add     eax, 5
    mov     [rbp+var_C], eax
    cmp     [rbp+var_1C], 2Fh
    jg      short loc_B7A7
    and     [rbp+var_1C], 0Fh
    
loc_B7A7:
    cmp     [rbp+var_1C], 0
    jz      short loc_B7C0
    cmp     [rbp+var_1C], 7
    jle     short loc_B7B9
    cmp     [rbp+var_1C], 0Fh
    jle     short loc_B7C0
    
loc_B7B9:
    mov     eax, 0FFFFFFFEh
    jmp     short locret_B827
    
loc_B7C0:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+48h]
    test    rax, rax
    jz      short loc_B807
    mov     rax, [rbp+var_8]
    mov     edx, [rax+38h]
    mov     eax, [rbp+var_1C]
    cmp     edx, eax
    jz      short loc_B807
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_8]
    mov     rcx, [rdx+48h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+48h], 0
    
loc_B807:
    mov     rax, [rbp+var_8]
    mov     edx, [rbp+var_C]
    mov     [rax+10h], edx
    mov     edx, [rbp+var_1C]
    mov     rax, [rbp+var_8]
    mov     [rax+38h], edx
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    _inflateReset
    
locret_B827:
    leave
    retn
    

<inflateInit2_>:
    
    var_28= qword ptr -28h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     [rbp+var_28], rdx
    mov     [rbp+var_20], ecx
    cmp     [rbp+var_28], 0
    jz      short loc_B85C
    mov     rax, [rbp+var_28]
    movzx   eax, byte ptr [rax]
    mov     edx, 31h
    cmp     al, dl
    jnz     short loc_B85C
    cmp     [rbp+var_20], 70h
    jz      short loc_B866
    
loc_B85C:
    mov     eax, 0FFFFFFFAh
    jmp     locret_B96B
    
loc_B866:
    cmp     [rbp+var_18], 0
    jnz     short loc_B877
    mov     eax, 0FFFFFFFEh
    jmp     locret_B96B
    
loc_B877:
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+30h], 0
    mov     rax, [rbp+var_18]
    mov     rax, [rax+40h]
    test    rax, rax
    jnz     short loc_B8AB
    mov     rax, [rbp+var_18]
    lea     rdx, zcalloc
    mov     [rax+40h], rdx
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+50h], 0
    
loc_B8AB:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    test    rax, rax
    jnz     short loc_B8C7
    mov     rax, [rbp+var_18]
    lea     rdx, zcfree
    mov     [rax+48h], rdx
    
loc_B8C7:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_18]
    mov     rcx, [rdx+50h]
    mov     edx, 1BF8h
    mov     esi, 1
    mov     rdi, rcx
    call    rax
    mov     [rbp+var_8], rax
    cmp     [rbp+var_8], 0
    jnz     short loc_B8F8
    mov     eax, 0FFFFFFFCh
    jmp     short locret_B96B
    
loc_B8F8:
    mov     rax, [rbp+var_18]
    mov     rdx, [rbp+var_8]
    mov     [rax+38h], rdx
    mov     rax, [rbp+var_8]
    mov     rdx, [rbp+var_18]
    mov     [rax], rdx
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+48h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 3F34h
    mov     edx, [rbp+var_1C]
    mov     rax, [rbp+var_18]
    mov     esi, edx
    mov     rdi, rax
    call    _inflateReset2
    mov     [rbp+var_C], eax
    cmp     [rbp+var_C], 0
    jz      short loc_B968
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rcx, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+38h], 0
    
loc_B968:
    mov     eax, [rbp+var_C]
    
locret_B96B:
    leave
    retn
    

<inflateInit_>:
    
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_14], edx
    mov     ecx, [rbp+var_14]
    mov     rdx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     esi, 0Fh
    mov     rdi, rax
    call    _inflateInit2_
    leave
    retn
    

<inflatePrime>:
    
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     [rbp+var_20], edx
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_B9C6
    mov     eax, 0FFFFFFFEh
    jmp     locret_BA67
    
loc_B9C6:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    cmp     [rbp+var_1C], 0
    jns     short loc_B9F6
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+50h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+58h], 0
    mov     eax, 0
    jmp     short locret_BA67
    
loc_B9F6:
    cmp     [rbp+var_1C], 10h
    jg      short loc_BA0D
    mov     rax, [rbp+var_8]
    mov     edx, [rax+58h]
    mov     eax, [rbp+var_1C]
    add     eax, edx
    cmp     eax, 20h
    jbe     short loc_BA14
    
loc_BA0D:
    mov     eax, 0FFFFFFFEh
    jmp     short locret_BA67
    
loc_BA14:
    mov     eax, [rbp+var_1C]
    mov     edx, 1
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    sub     eax, 1
    and     [rbp+var_20], eax
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+50h]
    mov     esi, [rbp+var_20]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+58h]
    mov     ecx, eax
    shl     esi, cl
    mov     eax, esi
    mov     eax, eax
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     [rax+50h], rdx
    mov     rax, [rbp+var_8]
    mov     edx, [rax+58h]
    mov     eax, [rbp+var_1C]
    add     edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+58h], edx
    mov     eax, 0
    
locret_BA67:
    leave
    retn
    

<fixedtables_0>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    lea     rdx, lenfix_3692
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+78h], 9
    mov     rax, [rbp+var_8]
    lea     rdx, distfix_3693
    mov     [rax+70h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+7Ch], 5
    nop
    pop     rbp
    retn
    

<updatewindow>:
    
    var_24= qword ptr -24h
    var_18= qword ptr -18h
    n= qword ptr -0Ch
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_24+4], rsi
    mov     dword ptr [rbp+var_24], edx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+n+4], rax
    mov     rax, [rbp+n+4]
    mov     rax, [rax+48h]
    test    rax, rax
    jnz     short loc_BB20
    mov     rax, [rbp+var_18]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+n+4]
    mov     edx, [rdx+38h]
    mov     esi, 1
    mov     ecx, edx
    shl     esi, cl
    mov     rdx, [rbp+var_18]
    mov     rcx, [rdx+50h]
    mov     edx, 1
    mov     rdi, rcx
    call    rax
    mov     rdx, rax
    mov     rax, [rbp+n+4]
    mov     [rax+48h], rdx
    mov     rax, [rbp+n+4]
    mov     rax, [rax+48h]
    test    rax, rax
    jnz     short loc_BB20
    mov     eax, 1
    jmp     locret_BCB4
    
loc_BB20:
    mov     rax, [rbp+n+4]
    mov     eax, [rax+3Ch]
    test    eax, eax
    jnz     short loc_BB58
    mov     rax, [rbp+n+4]
    mov     eax, [rax+38h]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     rax, [rbp+n+4]
    mov     [rax+3Ch], edx
    mov     rax, [rbp+n+4]
    mov     dword ptr [rax+44h], 0
    mov     rax, [rbp+n+4]
    mov     dword ptr [rax+40h], 0
    
loc_BB58:
    mov     rax, [rbp+n+4]
    mov     eax, [rax+3Ch]
    cmp     dword ptr [rbp+var_24], eax
    jb      short loc_BBB8
    mov     rax, [rbp+n+4]
    mov     eax, [rax+3Ch]
    mov     esi, eax
    mov     rax, [rbp+n+4]
    mov     eax, [rax+3Ch]
    mov     eax, eax
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+var_24+4]
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+n+4]
    mov     rax, [rax+48h]
    mov     rdx, rsi
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+n+4]
    mov     dword ptr [rax+44h], 0
    mov     rax, [rbp+n+4]
    mov     edx, [rax+3Ch]
    mov     rax, [rbp+n+4]
    mov     [rax+40h], edx
    jmp     loc_BCAF
    
loc_BBB8:
    mov     rax, [rbp+n+4]
    mov     edx, [rax+3Ch]
    mov     rax, [rbp+n+4]
    mov     eax, [rax+44h]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+n], eax
    mov     eax, dword ptr [rbp+n]
    cmp     eax, dword ptr [rbp+var_24]
    jbe     short loc_BBDB
    mov     eax, dword ptr [rbp+var_24]
    mov     dword ptr [rbp+n], eax
    
loc_BBDB:
    mov     eax, dword ptr [rbp+n]
    mov     edx, dword ptr [rbp+var_24]
    mov     rcx, rdx
    neg     rcx
    mov     rdx, [rbp+var_24+4]
    lea     rsi, [rcx+rdx]
    mov     rdx, [rbp+n+4]
    mov     rcx, [rdx+48h]
    mov     rdx, [rbp+n+4]
    mov     edx, [rdx+44h]
    mov     edx, edx
    add     rcx, rdx
    mov     rdx, rax
    mov     rdi, rcx
    call    _memcpy
    mov     eax, dword ptr [rbp+n]
    sub     dword ptr [rbp+var_24], eax
    cmp     dword ptr [rbp+var_24], 0
    jz      short loc_BC5A
    mov     edx, dword ptr [rbp+var_24]
    mov     eax, dword ptr [rbp+var_24]
    neg     rax
    mov     rcx, rax
    mov     rax, [rbp+var_24+4]
    add     rcx, rax
    mov     rax, [rbp+n+4]
    mov     rax, [rax+48h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+n+4]
    mov     edx, dword ptr [rbp+var_24]
    mov     [rax+44h], edx
    mov     rax, [rbp+n+4]
    mov     edx, [rax+3Ch]
    mov     rax, [rbp+n+4]
    mov     [rax+40h], edx
    jmp     short loc_BCAF
    
loc_BC5A:
    mov     rax, [rbp+n+4]
    mov     edx, [rax+44h]
    mov     eax, dword ptr [rbp+n]
    add     edx, eax
    mov     rax, [rbp+n+4]
    mov     [rax+44h], edx
    mov     rax, [rbp+n+4]
    mov     edx, [rax+44h]
    mov     rax, [rbp+n+4]
    mov     eax, [rax+3Ch]
    cmp     edx, eax
    jnz     short loc_BC8A
    mov     rax, [rbp+n+4]
    mov     dword ptr [rax+44h], 0
    
loc_BC8A:
    mov     rax, [rbp+n+4]
    mov     edx, [rax+40h]
    mov     rax, [rbp+n+4]
    mov     eax, [rax+3Ch]
    cmp     edx, eax
    jnb     short loc_BCAF
    mov     rax, [rbp+n+4]
    mov     edx, [rax+40h]
    mov     eax, dword ptr [rbp+n]
    add     edx, eax
    mov     rax, [rbp+n+4]
    mov     [rax+40h], edx
    
loc_BCAF:
    mov     eax, 0
    
locret_BCB4:
    leave
    retn
    

<inflate>:
    
    var_6C= dword ptr -6Ch
    var_68= qword ptr -68h
    var_60= dword ptr -60h
    var_5C= dword ptr -5Ch
    var_58= dword ptr -58h
    var_54= dword ptr -54h
    n= qword ptr -50h
    var_48= dword ptr -48h
    var_44= dword ptr -44h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    src= qword ptr -38h
    dest= qword ptr -30h
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_C= byte ptr -0Ch
    var_B= byte ptr -0Bh
    var_A= byte ptr -0Ah
    var_9= byte ptr -9
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 70h
    mov     [rbp+var_68], rdi
    mov     [rbp+var_6C], esi
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    mov     rax, [rbp+var_68]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jnz     short loc_BD08
    mov     rax, [rbp+var_68]
    mov     rax, [rax+18h]
    test    rax, rax
    jz      short loc_BD08
    mov     rax, [rbp+var_68]
    mov     rax, [rax]
    test    rax, rax
    jnz     short loc_BD12
    mov     rax, [rbp+var_68]
    mov     eax, [rax+8]
    test    eax, eax
    jz      short loc_BD12
    
loc_BD08:
    mov     eax, 0FFFFFFFEh
    jmp     loc_E184
    
loc_BD12:
    mov     rax, [rbp+var_68]
    mov     rax, [rax+38h]
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    cmp     eax, 3F3Fh
    jnz     short loc_BD37
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F40h
    
loc_BD37:
    mov     rax, [rbp+var_68]
    mov     rax, [rax+18h]
    mov     [rbp+dest], rax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+20h]
    mov     [rbp+var_5C], eax
    mov     rax, [rbp+var_68]
    mov     rax, [rax]
    mov     [rbp+src], rax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+8]
    mov     [rbp+var_60], eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+50h]
    mov     [rbp+var_28], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+58h]
    mov     [rbp+var_58], eax
    mov     eax, [rbp+var_60]
    mov     [rbp+var_44], eax
    mov     eax, [rbp+var_5C]
    mov     [rbp+var_54], eax
    mov     [rbp+var_48], 0
    
loc_BD8B:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    sub     eax, 3F34h
    cmp     eax, 1Eh
    ja      def_BDC1
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, jpt_BDC1
    mov     eax, ds:(jpt_BDC1 - 191B4h)[rdx+rax]
    movsxd  rdx, eax
    lea     rax, jpt_BDC1
    add     rax, rdx
    jmp     rax
    
loc_BDC3:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    test    eax, eax
    jnz     short loc_BE11
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F40h
    jmp     loc_DEF1
    
loc_BDDE:
    cmp     [rbp+var_60], 0
    jz      loc_DEF6
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_BE11:
    cmp     [rbp+var_58], 0Fh
    jbe     short loc_BDDE
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 2
    test    eax, eax
    jz      loc_BEC4
    cmp     [rbp+var_28], 8B1Fh
    jnz     loc_BEC4
    mov     rax, [rbp+var_18]
    mov     eax, [rax+38h]
    test    eax, eax
    jnz     short loc_BE4D
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+38h], 0Fh
    
loc_BE4D:
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_28]
    mov     [rbp+var_C], al
    mov     rax, [rbp+var_28]
    shr     rax, 8
    mov     [rbp+var_B], al
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    lea     rcx, [rbp+var_C]
    mov     edx, 2
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F35h
    jmp     loc_DEF1
    
loc_BEC4:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+18h], 0
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_BEEB
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     dword ptr [rax+48h], 0FFFFFFFFh
    
loc_BEEB:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 1
    test    eax, eax
    jz      short loc_BF46
    mov     rax, [rbp+var_28]
    shl     eax, 8
    mov     eax, eax
    movzx   eax, ax
    mov     rdx, [rbp+var_28]
    shr     rdx, 8
    lea     rcx, [rax+rdx]
    mov     rdx, 842108421084211h
    mov     rax, rcx
    mul     rdx
    mov     rax, rcx
    sub     rax, rdx
    shr     rax, 1
    add     rax, rdx
    shr     rax, 4
    mov     rdx, rax
    shl     rdx, 5
    sub     rdx, rax
    mov     rax, rcx
    sub     rax, rdx
    test    rax, rax
    jz      short loc_BF65
    
loc_BF46:
    mov     rax, [rbp+var_68]
    lea     rdx, aIncorrectHeade
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_BF65:
    mov     rax, [rbp+var_28]
    and     eax, 0Fh
    cmp     eax, 8
    jz      short loc_BF90
    mov     rax, [rbp+var_68]
    lea     rdx, aUnknownCompres
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_BF90:
    shr     [rbp+var_28], 4
    sub     [rbp+var_58], 4
    mov     rax, [rbp+var_28]
    and     eax, 0Fh
    add     eax, 8
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+38h]
    test    eax, eax
    jnz     short loc_BFBB
    mov     rax, [rbp+var_18]
    mov     edx, dword ptr [rbp+n+4]
    mov     [rax+38h], edx
    
loc_BFBB:
    cmp     dword ptr [rbp+n+4], 0Fh
    ja      short loc_BFCD
    mov     rax, [rbp+var_18]
    mov     eax, [rax+38h]
    cmp     dword ptr [rbp+n+4], eax
    jbe     short loc_BFEC
    
loc_BFCD:
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidWindowS
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_BFEC:
    mov     eax, dword ptr [rbp+n+4]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     rax, [rbp+var_18]
    mov     [rax+1Ch], edx
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _adler32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+20h]
    mov     rax, [rbp+var_68]
    mov     [rax+60h], rdx
    mov     rax, [rbp+var_28]
    and     eax, 200h
    test    rax, rax
    jz      short loc_C043
    mov     edx, 3F3Dh
    jmp     short loc_C048
    
loc_C043:
    mov     edx, 3F3Fh
    
loc_C048:
    mov     rax, [rbp+var_18]
    mov     [rax+8], edx
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    jmp     loc_DEF1
    
loc_C063:
    cmp     [rbp+var_60], 0
    jz      loc_DEF9
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_C096:
    cmp     [rbp+var_58], 0Fh
    jbe     short loc_C063
    mov     rax, [rbp+var_28]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+18h], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    movzx   eax, al
    cmp     eax, 8
    jz      short loc_C0D7
    mov     rax, [rbp+var_68]
    lea     rdx, aUnknownCompres
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_C0D7:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 0E000h
    test    eax, eax
    jz      short loc_C106
    mov     rax, [rbp+var_68]
    lea     rdx, aUnknownHeaderF
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_C106:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C12A
    mov     rax, [rbp+var_28]
    shr     rax, 8
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    and     edx, 1
    mov     [rax], edx
    
loc_C12A:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 200h
    test    eax, eax
    jz      short loc_C181
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_C181
    mov     rax, [rbp+var_28]
    mov     [rbp+var_C], al
    mov     rax, [rbp+var_28]
    shr     rax, 8
    mov     [rbp+var_B], al
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    lea     rcx, [rbp+var_C]
    mov     edx, 2
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    
loc_C181:
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F36h
    jmp     short loc_C1D0
    
loc_C19D:
    cmp     [rbp+var_60], 0
    jz      loc_DEFC
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_C1D0:
    cmp     [rbp+var_58], 1Fh
    jbe     short loc_C19D
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C1F3
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rdx, [rbp+var_28]
    mov     [rax+8], rdx
    
loc_C1F3:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 200h
    test    eax, eax
    jz      short loc_C260
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_C260
    mov     rax, [rbp+var_28]
    mov     [rbp+var_C], al
    mov     rax, [rbp+var_28]
    shr     rax, 8
    mov     [rbp+var_B], al
    mov     rax, [rbp+var_28]
    shr     rax, 10h
    mov     [rbp+var_A], al
    mov     rax, [rbp+var_28]
    shr     rax, 18h
    mov     [rbp+var_9], al
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    lea     rcx, [rbp+var_C]
    mov     edx, 4
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    
loc_C260:
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F37h
    jmp     short loc_C2AF
    
loc_C27C:
    cmp     [rbp+var_60], 0
    jz      loc_DEFF
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_C2AF:
    cmp     [rbp+var_58], 0Fh
    jbe     short loc_C27C
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C2EC
    mov     rax, [rbp+var_28]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    movzx   edx, dl
    mov     [rax+10h], edx
    mov     rax, [rbp+var_28]
    shr     rax, 8
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     [rax+14h], edx
    
loc_C2EC:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 200h
    test    eax, eax
    jz      short loc_C343
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_C343
    mov     rax, [rbp+var_28]
    mov     [rbp+var_C], al
    mov     rax, [rbp+var_28]
    shr     rax, 8
    mov     [rbp+var_B], al
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    lea     rcx, [rbp+var_C]
    mov     edx, 2
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    
loc_C343:
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F38h
    
loc_C35D:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 400h
    test    eax, eax
    jz      loc_C43D
    jmp     short loc_C3A6
    
loc_C373:
    cmp     [rbp+var_60], 0
    jz      loc_DF02
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_C3A6:
    cmp     [rbp+var_58], 0Fh
    jbe     short loc_C373
    mov     rax, [rbp+var_28]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+5Ch], edx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C3D5
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rdx, [rbp+var_28]
    mov     [rax+20h], edx
    
loc_C3D5:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 200h
    test    eax, eax
    jz      short loc_C42C
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_C42C
    mov     rax, [rbp+var_28]
    mov     [rbp+var_C], al
    mov     rax, [rbp+var_28]
    shr     rax, 8
    mov     [rbp+var_B], al
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    lea     rcx, [rbp+var_C]
    mov     edx, 2
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    
loc_C42C:
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    jmp     short loc_C45A
    
loc_C43D:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C45A
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     qword ptr [rax+18h], 0
    
loc_C45A:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F39h
    
loc_C465:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 400h
    test    eax, eax
    jz      loc_C592
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    mov     dword ptr [rbp+n], eax
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_60]
    jbe     short loc_C491
    mov     eax, [rbp+var_60]
    mov     dword ptr [rbp+n], eax
    
loc_C491:
    cmp     dword ptr [rbp+n], 0
    jz      loc_C583
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C520
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rax, [rax+18h]
    test    rax, rax
    jz      short loc_C520
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     edx, [rax+20h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+n+4], eax
    mov     edx, dword ptr [rbp+n+4]
    mov     eax, dword ptr [rbp+n]
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     eax, [rax+24h]
    cmp     edx, eax
    jbe     short loc_C4FB
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     eax, [rax+24h]
    sub     eax, dword ptr [rbp+n+4]
    mov     eax, eax
    jmp     short loc_C4FE
    
loc_C4FB:
    mov     eax, dword ptr [rbp+n]
    
loc_C4FE:
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+30h]
    mov     rcx, [rdx+18h]
    mov     edx, dword ptr [rbp+n+4]
    lea     rdi, [rcx+rdx]
    mov     rcx, [rbp+src]
    mov     rdx, rax
    mov     rsi, rcx
    call    _memcpy
    
loc_C520:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 200h
    test    eax, eax
    jz      short loc_C563
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_C563
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     edx, dword ptr [rbp+n]
    mov     rcx, [rbp+src]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    
loc_C563:
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_60], eax
    mov     eax, dword ptr [rbp+n]
    add     [rbp+src], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    sub     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+5Ch], edx
    
loc_C583:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    test    eax, eax
    jnz     loc_DF05
    
loc_C592:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+5Ch], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F3Ah
    
loc_C5A8:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 800h
    test    eax, eax
    jz      loc_C6B0
    cmp     [rbp+var_60], 0
    jz      loc_DF08
    mov     dword ptr [rbp+n], 0
    
loc_C5CD:
    mov     eax, dword ptr [rbp+n]
    lea     edx, [rax+1]
    mov     dword ptr [rbp+n], edx
    mov     edx, eax
    mov     rax, [rbp+src]
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C643
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rax, [rax+28h]
    test    rax, rax
    jz      short loc_C643
    mov     rax, [rbp+var_18]
    mov     edx, [rax+5Ch]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     eax, [rax+30h]
    cmp     edx, eax
    jnb     short loc_C643
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rsi, [rax+28h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+5Ch], ecx
    mov     eax, eax
    add     rax, rsi
    mov     edx, dword ptr [rbp+n+4]
    mov     [rax], dl
    
loc_C643:
    cmp     dword ptr [rbp+n+4], 0
    jz      short loc_C655
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_60]
    jb      loc_C5CD
    
loc_C655:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 200h
    test    eax, eax
    jz      short loc_C698
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_C698
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     edx, dword ptr [rbp+n]
    mov     rcx, [rbp+src]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    
loc_C698:
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_60], eax
    mov     eax, dword ptr [rbp+n]
    add     [rbp+src], rax
    cmp     dword ptr [rbp+n+4], 0
    jz      short loc_C6CD
    jmp     loc_DF54
    
loc_C6B0:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C6CD
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     qword ptr [rax+28h], 0
    
loc_C6CD:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+5Ch], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F3Bh
    
loc_C6E3:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 1000h
    test    eax, eax
    jz      loc_C7EB
    cmp     [rbp+var_60], 0
    jz      loc_DF0B
    mov     dword ptr [rbp+n], 0
    
loc_C708:
    mov     eax, dword ptr [rbp+n]
    lea     edx, [rax+1]
    mov     dword ptr [rbp+n], edx
    mov     edx, eax
    mov     rax, [rbp+src]
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C77E
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rax, [rax+38h]
    test    rax, rax
    jz      short loc_C77E
    mov     rax, [rbp+var_18]
    mov     edx, [rax+5Ch]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     eax, [rax+40h]
    cmp     edx, eax
    jnb     short loc_C77E
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rsi, [rax+38h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+5Ch], ecx
    mov     eax, eax
    add     rax, rsi
    mov     edx, dword ptr [rbp+n+4]
    mov     [rax], dl
    
loc_C77E:
    cmp     dword ptr [rbp+n+4], 0
    jz      short loc_C790
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_60]
    jb      loc_C708
    
loc_C790:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 200h
    test    eax, eax
    jz      short loc_C7D3
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_C7D3
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     edx, dword ptr [rbp+n]
    mov     rcx, [rbp+src]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    
loc_C7D3:
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_60], eax
    mov     eax, dword ptr [rbp+n]
    add     [rbp+src], rax
    cmp     dword ptr [rbp+n+4], 0
    jz      short loc_C808
    jmp     loc_DF54
    
loc_C7EB:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C808
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     qword ptr [rax+38h], 0
    
loc_C808:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F3Ch
    
loc_C813:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    and     eax, 200h
    test    eax, eax
    jz      loc_C8AF
    jmp     short loc_C85C
    
loc_C829:
    cmp     [rbp+var_60], 0
    jz      loc_DF0E
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_C85C:
    cmp     [rbp+var_58], 0Fh
    jbe     short loc_C829
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_C8A0
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    movzx   eax, ax
    cmp     [rbp+var_28], rax
    jz      short loc_C8A0
    mov     rax, [rbp+var_68]
    lea     rdx, aHeaderCrcMisma
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_C8A0:
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    
loc_C8AF:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_C8E5
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    sar     eax, 9
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    and     edx, 1
    mov     [rax+44h], edx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     dword ptr [rax+48h], 1
    
loc_C8E5:
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _crc32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+20h]
    mov     rax, [rbp+var_68]
    mov     [rax+60h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F3Fh
    jmp     loc_DEF1
    
loc_C924:
    cmp     [rbp+var_60], 0
    jz      loc_DF11
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_C957:
    cmp     [rbp+var_58], 1Fh
    jbe     short loc_C924
    mov     rax, [rbp+var_28]
    shr     rax, 18h
    movzx   eax, al
    mov     rdx, [rbp+var_28]
    shr     rdx, 8
    and     edx, 0FF00h
    or      rdx, rax
    mov     rax, [rbp+var_28]
    shl     rax, 8
    and     eax, 0FF0000h
    add     rdx, rax
    mov     rax, [rbp+var_28]
    shl     rax, 18h
    mov     eax, eax
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+20h]
    mov     rax, [rbp+var_68]
    mov     [rax+60h], rdx
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F3Eh
    
loc_C9C8:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+14h]
    test    eax, eax
    jnz     short loc_CA1E
    mov     rax, [rbp+var_68]
    mov     rdx, [rbp+dest]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_5C]
    mov     [rax+20h], edx
    mov     rax, [rbp+var_68]
    mov     rdx, [rbp+src]
    mov     [rax], rdx
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_60]
    mov     [rax+8], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rbp+var_28]
    mov     [rax+50h], rdx
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_58]
    mov     [rax+58h], edx
    mov     eax, 2
    jmp     loc_E184
    
loc_CA1E:
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _adler32
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+20h]
    mov     rax, [rbp+var_68]
    mov     [rax+60h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F3Fh
    
loc_CA58:
    cmp     [rbp+var_6C], 5
    jz      loc_DF14
    cmp     [rbp+var_6C], 6
    jz      loc_DF14
    
loc_CA6C:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0Ch]
    test    eax, eax
    jz      short loc_CACA
    mov     eax, [rbp+var_58]
    and     eax, 7
    mov     ecx, eax
    shr     [rbp+var_28], cl
    and     [rbp+var_58], 0FFFFFFF8h
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F4Eh
    jmp     loc_DEF1
    
loc_CA97:
    cmp     [rbp+var_60], 0
    jz      loc_DF17
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_CACA:
    cmp     [rbp+var_58], 2
    jbe     short loc_CA97
    mov     rax, [rbp+var_28]
    and     eax, 1
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+0Ch], edx
    shr     [rbp+var_28], 1
    sub     [rbp+var_58], 1
    mov     rax, [rbp+var_28]
    and     eax, 3
    cmp     eax, 1
    jz      short loc_CB12
    cmp     eax, 1
    jb      short loc_CB05
    cmp     eax, 2
    jz      short loc_CB3D
    cmp     eax, 3
    jz      short loc_CB4A
    jmp     short loc_CB67
    
loc_CB05:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F41h
    jmp     short loc_CB67
    
loc_CB12:
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    fixedtables_0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F47h
    cmp     [rbp+var_6C], 6
    jnz     short loc_CB66
    shr     [rbp+var_28], 2
    sub     [rbp+var_58], 2
    jmp     loc_DF54
    
loc_CB3D:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F44h
    jmp     short loc_CB67
    
loc_CB4A:
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidBlockTy_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     short loc_CB67
    
loc_CB66:
    nop
    
loc_CB67:
    shr     [rbp+var_28], 2
    sub     [rbp+var_58], 2
    jmp     loc_DEF1
    
loc_CB75:
    mov     eax, [rbp+var_58]
    and     eax, 7
    mov     ecx, eax
    shr     [rbp+var_28], cl
    and     [rbp+var_58], 0FFFFFFF8h
    jmp     short loc_CBBA
    
loc_CB87:
    cmp     [rbp+var_60], 0
    jz      loc_DF1A
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_CBBA:
    cmp     [rbp+var_58], 1Fh
    jbe     short loc_CB87
    mov     rax, [rbp+var_28]
    movzx   eax, ax
    mov     rdx, [rbp+var_28]
    shr     rdx, 10h
    xor     rdx, 0FFFFh
    cmp     rax, rdx
    jz      short loc_CBFA
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidStoredB_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_CBFA:
    mov     rax, [rbp+var_28]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     [rax+5Ch], edx
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F42h
    cmp     [rbp+var_6C], 6
    jz      loc_DF1D
    
loc_CC2C:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F43h
    
loc_CC37:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    mov     dword ptr [rbp+n], eax
    cmp     dword ptr [rbp+n], 0
    jz      short loc_CCB5
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_60]
    jbe     short loc_CC55
    mov     eax, [rbp+var_60]
    mov     dword ptr [rbp+n], eax
    
loc_CC55:
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_5C]
    jbe     short loc_CC63
    mov     eax, [rbp+var_5C]
    mov     dword ptr [rbp+n], eax
    
loc_CC63:
    cmp     dword ptr [rbp+n], 0
    jz      loc_DF20
    mov     edx, dword ptr [rbp+n]
    mov     rcx, [rbp+src]
    mov     rax, [rbp+dest]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_60], eax
    mov     eax, dword ptr [rbp+n]
    add     [rbp+src], rax
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_5C], eax
    mov     eax, dword ptr [rbp+n]
    add     [rbp+dest], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    sub     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+5Ch], edx
    jmp     loc_DEF1
    
loc_CCB5:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F3Fh
    jmp     loc_DEF1
    
loc_CCC5:
    cmp     [rbp+var_60], 0
    jz      loc_DF23
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_CCF8:
    cmp     [rbp+var_58], 0Dh
    jbe     short loc_CCC5
    mov     rax, [rbp+var_28]
    and     eax, 1Fh
    lea     edx, [rax+101h]
    mov     rax, [rbp+var_18]
    mov     [rax+84h], edx
    shr     [rbp+var_28], 5
    sub     [rbp+var_58], 5
    mov     rax, [rbp+var_28]
    and     eax, 1Fh
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    mov     [rax+88h], edx
    shr     [rbp+var_28], 5
    sub     [rbp+var_58], 5
    mov     rax, [rbp+var_28]
    and     eax, 0Fh
    lea     edx, [rax+4]
    mov     rax, [rbp+var_18]
    mov     [rax+80h], edx
    shr     [rbp+var_28], 4
    sub     [rbp+var_58], 4
    mov     rax, [rbp+var_18]
    mov     eax, [rax+84h]
    cmp     eax, 11Eh
    ja      short loc_CD78
    mov     rax, [rbp+var_18]
    mov     eax, [rax+88h]
    cmp     eax, 1Eh
    jbe     short loc_CD97
    
loc_CD78:
    mov     rax, [rbp+var_68]
    lea     rdx, aTooManyLengthO_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_CD97:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8Ch], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F45h
    jmp     loc_CE3D
    
loc_CDB5:
    cmp     [rbp+var_60], 0
    jz      loc_DF26
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_CDE8:
    cmp     [rbp+var_58], 2
    jbe     short loc_CDB5
    mov     rax, [rbp+var_28]
    mov     esi, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+8Ch], ecx
    mov     eax, eax
    lea     rdx, [rax+rax]
    lea     rax, order_3721
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    and     esi, 7
    mov     ecx, esi
    mov     rax, [rbp+var_18]
    movsxd  rdx, edx
    add     rdx, 48h
    mov     [rax+rdx*2+8], cx
    shr     [rbp+var_28], 3
    sub     [rbp+var_58], 3
    
loc_CE3D:
    mov     rax, [rbp+var_18]
    mov     edx, [rax+8Ch]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+80h]
    cmp     edx, eax
    jb      short loc_CDE8
    jmp     short loc_CE94
    
loc_CE57:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+8Ch], ecx
    mov     eax, eax
    lea     rdx, [rax+rax]
    lea     rax, order_3721
    movzx   eax, word ptr [rdx+rax]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    movsxd  rdx, edx
    add     rdx, 48h
    mov     word ptr [rax+rdx*2+8], 0
    
loc_CE94:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    cmp     eax, 12h
    jbe     short loc_CE57
    mov     rax, [rbp+var_18]
    lea     rdx, [rax+558h]
    mov     rax, [rbp+var_18]
    mov     [rax+90h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+90h]
    mov     rax, [rbp+var_18]
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+78h], 7
    mov     rax, [rbp+var_18]
    lea     rsi, [rax+318h]
    mov     rax, [rbp+var_18]
    lea     rcx, [rax+78h]
    mov     rax, [rbp+var_18]
    lea     rdx, [rax+90h]
    mov     rax, [rbp+var_18]
    add     rax, 98h
    mov     r9, rsi
    mov     r8, rcx
    mov     rcx, rdx
    mov     edx, 13h
    mov     rsi, rax
    mov     edi, 0
    call    inflate_table
    mov     [rbp+var_48], eax
    cmp     [rbp+var_48], 0
    jz      short loc_CF42
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidCodeLen_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_CF42:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8Ch], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F46h
    jmp     loc_D273
    
loc_CF60:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+68h]
    mov     rax, [rbp+var_28]
    mov     esi, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+78h]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_40], eax
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    cmp     [rbp+var_58], eax
    jnb     short loc_CFD3
    cmp     [rbp+var_60], 0
    jz      loc_DF29
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    jmp     short loc_CF60
    
loc_CFD3:
    nop
    movzx   eax, word ptr [rbp+var_40+2]
    cmp     ax, 0Fh
    ja      short loc_D024
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_28], cl
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    sub     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+8Ch], ecx
    movzx   ecx, word ptr [rbp+var_40+2]
    mov     rdx, [rbp+var_18]
    mov     eax, eax
    add     rax, 48h
    mov     [rdx+rax*2+8], cx
    jmp     loc_D273
    
loc_D024:
    movzx   eax, word ptr [rbp+var_40+2]
    cmp     ax, 10h
    jnz     loc_D0F7
    jmp     short loc_D067
    
loc_D034:
    cmp     [rbp+var_60], 0
    jz      loc_DF2C
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_D067:
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    add     eax, 2
    cmp     [rbp+var_58], eax
    jb      short loc_D034
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_28], cl
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    sub     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    test    eax, eax
    jnz     short loc_D0BA
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidBitLeng_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_D29B
    
loc_D0BA:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_18]
    mov     edx, edx
    add     rdx, 48h
    movzx   eax, word ptr [rax+rdx*2+8]
    movzx   eax, ax
    mov     dword ptr [rbp+n+4], eax
    mov     rax, [rbp+var_28]
    and     eax, 3
    add     eax, 3
    mov     dword ptr [rbp+n], eax
    shr     [rbp+var_28], 2
    sub     [rbp+var_58], 2
    jmp     loc_D1F5
    
loc_D0F7:
    movzx   eax, word ptr [rbp+var_40+2]
    cmp     ax, 11h
    jnz     loc_D1B2
    jmp     short loc_D13A
    
loc_D107:
    cmp     [rbp+var_60], 0
    jz      loc_DF2F
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_D13A:
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    add     eax, 3
    cmp     [rbp+var_58], eax
    jb      short loc_D107
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_28], cl
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    sub     [rbp+var_58], eax
    mov     dword ptr [rbp+n+4], 0
    mov     rax, [rbp+var_28]
    and     eax, 7
    add     eax, 3
    mov     dword ptr [rbp+n], eax
    shr     [rbp+var_28], 3
    sub     [rbp+var_58], 3
    jmp     short loc_D1F5
    
loc_D17F:
    cmp     [rbp+var_60], 0
    jz      loc_DF32
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_D1B2:
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    add     eax, 7
    cmp     [rbp+var_58], eax
    jb      short loc_D17F
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_28], cl
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    sub     [rbp+var_58], eax
    mov     dword ptr [rbp+n+4], 0
    mov     rax, [rbp+var_28]
    and     eax, 7Fh
    add     eax, 0Bh
    mov     dword ptr [rbp+n], eax
    shr     [rbp+var_28], 7
    sub     [rbp+var_58], 7
    
loc_D1F5:
    mov     rax, [rbp+var_18]
    mov     edx, [rax+8Ch]
    mov     eax, dword ptr [rbp+n]
    lea     ecx, [rdx+rax]
    mov     rax, [rbp+var_18]
    mov     edx, [rax+84h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+88h]
    add     eax, edx
    cmp     ecx, eax
    jbe     short loc_D266
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidBitLeng_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     short loc_D29B
    
loc_D23B:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+8Ch], ecx
    mov     edx, dword ptr [rbp+n+4]
    mov     ecx, edx
    mov     rdx, [rbp+var_18]
    mov     eax, eax
    add     rax, 48h
    mov     [rdx+rax*2+8], cx
    
loc_D266:
    mov     eax, dword ptr [rbp+n]
    lea     edx, [rax-1]
    mov     dword ptr [rbp+n], edx
    test    eax, eax
    jnz     short loc_D23B
    
loc_D273:
    mov     rax, [rbp+var_18]
    mov     edx, [rax+8Ch]
    mov     rax, [rbp+var_18]
    mov     ecx, [rax+84h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+88h]
    add     eax, ecx
    cmp     edx, eax
    jb      loc_CF60
    
loc_D29B:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    cmp     eax, 3F51h
    jz      loc_DEE4
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+298h]
    test    ax, ax
    jnz     short loc_D2DC
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidCodeMis_0
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_D2DC:
    mov     rax, [rbp+var_18]
    lea     rdx, [rax+558h]
    mov     rax, [rbp+var_18]
    mov     [rax+90h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+90h]
    mov     rax, [rbp+var_18]
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+78h], 9
    mov     rax, [rbp+var_18]
    lea     r8, [rax+318h]
    mov     rax, [rbp+var_18]
    lea     rdi, [rax+78h]
    mov     rax, [rbp+var_18]
    lea     rdx, [rax+90h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+84h]
    mov     rcx, [rbp+var_18]
    lea     rsi, [rcx+98h]
    mov     r9, r8
    mov     r8, rdi
    mov     rcx, rdx
    mov     edx, eax
    mov     edi, 1
    call    inflate_table
    mov     [rbp+var_48], eax
    cmp     [rbp+var_48], 0
    jz      short loc_D380
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidLiteral_2
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_D380:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+90h]
    mov     rax, [rbp+var_18]
    mov     [rax+70h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+7Ch], 6
    mov     rax, [rbp+var_18]
    lea     r8, [rax+318h]
    mov     rax, [rbp+var_18]
    lea     rdi, [rax+7Ch]
    mov     rax, [rbp+var_18]
    lea     rcx, [rax+90h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+88h]
    mov     rdx, [rbp+var_18]
    lea     rsi, [rdx+98h]
    mov     rdx, [rbp+var_18]
    mov     edx, [rdx+84h]
    mov     edx, edx
    add     rdx, rdx
    add     rsi, rdx
    mov     r9, r8
    mov     r8, rdi
    mov     edx, eax
    mov     edi, 2
    call    inflate_table
    mov     [rbp+var_48], eax
    cmp     [rbp+var_48], 0
    jz      short loc_D41D
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidDistanc_4
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_D41D:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F47h
    cmp     [rbp+var_6C], 6
    jz      loc_DF35
    
loc_D432:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F48h
    
loc_D43D:
    cmp     [rbp+var_60], 5
    jbe     loc_D50C
    cmp     [rbp+var_5C], 101h
    jbe     loc_D50C
    mov     rax, [rbp+var_68]
    mov     rdx, [rbp+dest]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_5C]
    mov     [rax+20h], edx
    mov     rax, [rbp+var_68]
    mov     rdx, [rbp+src]
    mov     [rax], rdx
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_60]
    mov     [rax+8], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rbp+var_28]
    mov     [rax+50h], rdx
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_58]
    mov     [rax+58h], edx
    mov     edx, [rbp+var_54]
    mov     rax, [rbp+var_68]
    mov     esi, edx
    mov     rdi, rax
    call    inflate_fast
    mov     rax, [rbp+var_68]
    mov     rax, [rax+18h]
    mov     [rbp+dest], rax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+20h]
    mov     [rbp+var_5C], eax
    mov     rax, [rbp+var_68]
    mov     rax, [rax]
    mov     [rbp+src], rax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+8]
    mov     [rbp+var_60], eax
    mov     rax, [rbp+var_18]
    mov     rax, [rax+50h]
    mov     [rbp+var_28], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+58h]
    mov     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    cmp     eax, 3F3Fh
    jnz     loc_DEEA
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+1BECh], 0FFFFFFFFh
    jmp     loc_DEEA
    
loc_D50C:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+1BECh], 0
    
loc_D51A:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+68h]
    mov     rax, [rbp+var_28]
    mov     esi, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+78h]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_40], eax
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    cmp     [rbp+var_58], eax
    jnb     short loc_D58D
    cmp     [rbp+var_60], 0
    jz      loc_DF38
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    jmp     short loc_D51A
    
loc_D58D:
    nop
    movzx   eax, byte ptr [rbp+var_40]
    test    al, al
    jz      loc_D68A
    movzx   eax, byte ptr [rbp+var_40]
    movzx   eax, al
    and     eax, 0F0h
    test    eax, eax
    jnz     loc_D68A
    mov     eax, [rbp+var_40]
    mov     [rbp+var_3C], eax
    
loc_D5B4:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+68h]
    movzx   eax, word ptr [rbp+var_3C+2]
    movzx   esi, ax
    mov     rax, [rbp+var_28]
    mov     edi, eax
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   ecx, al
    movzx   eax, byte ptr [rbp+var_3C]
    movzx   eax, al
    add     eax, ecx
    mov     r8d, 0FFFFFFFFh
    mov     ecx, eax
    shl     r8d, cl
    mov     eax, r8d
    not     eax
    and     edi, eax
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   eax, al
    mov     ecx, eax
    shr     edi, cl
    mov     eax, edi
    add     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_40], eax
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   edx, al
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    add     eax, edx
    cmp     [rbp+var_58], eax
    jnb     short loc_D655
    cmp     [rbp+var_60], 0
    jz      loc_DF3B
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    jmp     loc_D5B4
    
loc_D655:
    nop
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_28], cl
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   eax, al
    sub     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1BECh]
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   eax, al
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1BECh], edx
    
loc_D68A:
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_28], cl
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    sub     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1BECh]
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1BECh], edx
    movzx   eax, word ptr [rbp+var_40+2]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     [rax+5Ch], edx
    movzx   eax, byte ptr [rbp+var_40]
    test    al, al
    jnz     short loc_D6E4
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F4Dh
    jmp     loc_DEF1
    
loc_D6E4:
    movzx   eax, byte ptr [rbp+var_40]
    movzx   eax, al
    and     eax, 20h
    test    eax, eax
    jz      short loc_D710
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+1BECh], 0FFFFFFFFh
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F3Fh
    jmp     loc_DEF1
    
loc_D710:
    movzx   eax, byte ptr [rbp+var_40]
    movzx   eax, al
    and     eax, 40h
    test    eax, eax
    jz      short loc_D73D
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidLiteral_3
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_D73D:
    movzx   eax, byte ptr [rbp+var_40]
    movzx   eax, al
    and     eax, 0Fh
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+64h], edx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F49h
    
loc_D75B:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    test    eax, eax
    jz      loc_D80F
    jmp     short loc_D79F
    
loc_D76C:
    cmp     [rbp+var_60], 0
    jz      loc_DF3E
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_D79F:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    cmp     [rbp+var_58], eax
    jb      short loc_D76C
    mov     rax, [rbp+var_18]
    mov     edx, [rax+5Ch]
    mov     rax, [rbp+var_28]
    mov     esi, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+5Ch], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    mov     ecx, eax
    shr     [rbp+var_28], cl
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    sub     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1BECh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    add     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1BECh], edx
    
loc_D80F:
    mov     rax, [rbp+var_18]
    mov     edx, [rax+5Ch]
    mov     rax, [rbp+var_18]
    mov     [rax+1BF0h], edx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F4Ah
    
loc_D82B:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+70h]
    mov     rax, [rbp+var_28]
    mov     esi, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+7Ch]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_40], eax
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    cmp     [rbp+var_58], eax
    jnb     short loc_D89E
    cmp     [rbp+var_60], 0
    jz      loc_DF41
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    jmp     short loc_D82B
    
loc_D89E:
    nop
    movzx   eax, byte ptr [rbp+var_40]
    movzx   eax, al
    and     eax, 0F0h
    test    eax, eax
    jnz     loc_D98F
    mov     eax, [rbp+var_40]
    mov     [rbp+var_3C], eax
    
loc_D8B9:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+70h]
    movzx   eax, word ptr [rbp+var_3C+2]
    movzx   esi, ax
    mov     rax, [rbp+var_28]
    mov     edi, eax
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   ecx, al
    movzx   eax, byte ptr [rbp+var_3C]
    movzx   eax, al
    add     eax, ecx
    mov     r8d, 0FFFFFFFFh
    mov     ecx, eax
    shl     r8d, cl
    mov     eax, r8d
    not     eax
    and     edi, eax
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   eax, al
    mov     ecx, eax
    shr     edi, cl
    mov     eax, edi
    add     eax, esi
    mov     eax, eax
    shl     rax, 2
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_40], eax
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   edx, al
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    add     eax, edx
    cmp     [rbp+var_58], eax
    jnb     short loc_D95A
    cmp     [rbp+var_60], 0
    jz      loc_DF44
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    jmp     loc_D8B9
    
loc_D95A:
    nop
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_28], cl
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   eax, al
    sub     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1BECh]
    movzx   eax, byte ptr [rbp+var_3C+1]
    movzx   eax, al
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1BECh], edx
    
loc_D98F:
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    mov     ecx, eax
    shr     [rbp+var_28], cl
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    sub     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1BECh]
    movzx   eax, byte ptr [rbp+var_40+1]
    movzx   eax, al
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1BECh], edx
    movzx   eax, byte ptr [rbp+var_40]
    movzx   eax, al
    and     eax, 40h
    test    eax, eax
    jz      short loc_D9F0
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidDistanc_5
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_D9F0:
    movzx   eax, word ptr [rbp+var_40+2]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     [rax+60h], edx
    movzx   eax, byte ptr [rbp+var_40]
    movzx   eax, al
    and     eax, 0Fh
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+64h], edx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F4Bh
    
loc_DA1C:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    test    eax, eax
    jz      loc_DAD0
    jmp     short loc_DA60
    
loc_DA2D:
    cmp     [rbp+var_60], 0
    jz      loc_DF47
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_DA60:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    cmp     [rbp+var_58], eax
    jb      short loc_DA2D
    mov     rax, [rbp+var_18]
    mov     edx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     esi, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    mov     edi, 0FFFFFFFFh
    mov     ecx, eax
    shl     edi, cl
    mov     eax, edi
    not     eax
    and     eax, esi
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+60h], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    mov     ecx, eax
    shr     [rbp+var_28], cl
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    sub     [rbp+var_58], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1BECh]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+64h]
    add     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1BECh], edx
    
loc_DAD0:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F4Ch
    
loc_DADB:
    cmp     [rbp+var_5C], 0
    jz      loc_DF4A
    mov     eax, [rbp+var_54]
    sub     eax, [rbp+var_5C]
    mov     dword ptr [rbp+n], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+60h]
    cmp     dword ptr [rbp+n], eax
    jnb     loc_DBAA
    mov     rax, [rbp+var_18]
    mov     eax, [rax+60h]
    sub     eax, dword ptr [rbp+n]
    mov     dword ptr [rbp+n], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+40h]
    cmp     dword ptr [rbp+n], eax
    jbe     short loc_DB44
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1BE8h]
    test    eax, eax
    jz      short loc_DB44
    mov     rax, [rbp+var_68]
    lea     rdx, aInvalidDistanc_6
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_DB44:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+44h]
    cmp     dword ptr [rbp+n], eax
    jbe     short loc_DB77
    mov     rax, [rbp+var_18]
    mov     eax, [rax+44h]
    sub     dword ptr [rbp+n], eax
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+48h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+3Ch]
    sub     eax, dword ptr [rbp+n]
    mov     eax, eax
    add     rax, rdx
    mov     [rbp+var_20], rax
    jmp     short loc_DB92
    
loc_DB77:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+48h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+44h]
    sub     eax, dword ptr [rbp+n]
    mov     eax, eax
    add     rax, rdx
    mov     [rbp+var_20], rax
    
loc_DB92:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    cmp     dword ptr [rbp+n], eax
    jbe     short loc_DBCE
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    mov     dword ptr [rbp+n], eax
    jmp     short loc_DBCE
    
loc_DBAA:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+60h]
    mov     eax, eax
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+dest]
    add     rax, rdx
    mov     [rbp+var_20], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    mov     dword ptr [rbp+n], eax
    
loc_DBCE:
    mov     eax, dword ptr [rbp+n]
    cmp     eax, [rbp+var_5C]
    jbe     short loc_DBDC
    mov     eax, [rbp+var_5C]
    mov     dword ptr [rbp+n], eax
    
loc_DBDC:
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_5C], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    sub     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+5Ch], edx
    
loc_DBF5:
    mov     rdx, [rbp+var_20]
    lea     rax, [rdx+1]
    mov     [rbp+var_20], rax
    mov     rax, [rbp+dest]
    lea     rcx, [rax+1]
    mov     [rbp+dest], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     dword ptr [rbp+n], 1
    cmp     dword ptr [rbp+n], 0
    jnz     short loc_DBF5
    mov     rax, [rbp+var_18]
    mov     eax, [rax+5Ch]
    test    eax, eax
    jnz     loc_DEF0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F48h
    jmp     loc_DEF0
    
loc_DC3B:
    cmp     [rbp+var_5C], 0
    jz      loc_DF4D
    mov     rax, [rbp+var_18]
    mov     ecx, [rax+5Ch]
    mov     rax, [rbp+dest]
    lea     rdx, [rax+1]
    mov     [rbp+dest], rdx
    mov     edx, ecx
    mov     [rax], dl
    sub     [rbp+var_5C], 1
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F48h
    jmp     loc_DEF1
    
loc_DC70:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    test    eax, eax
    jz      loc_DE12
    jmp     short loc_DCB4
    
loc_DC81:
    cmp     [rbp+var_60], 0
    jz      loc_DF50
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_DCB4:
    cmp     [rbp+var_58], 1Fh
    jbe     short loc_DC81
    mov     eax, [rbp+var_5C]
    sub     [rbp+var_54], eax
    mov     rax, [rbp+var_68]
    mov     rdx, [rax+28h]
    mov     eax, [rbp+var_54]
    add     rdx, rax
    mov     rax, [rbp+var_68]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+28h]
    mov     eax, [rbp+var_54]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_DD79
    cmp     [rbp+var_54], 0
    jz      short loc_DD79
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    test    eax, eax
    jz      short loc_DD37
    mov     eax, [rbp+var_54]
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+dest]
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     edx, [rbp+var_54]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    jmp     short loc_DD61
    
loc_DD37:
    mov     eax, [rbp+var_54]
    neg     rax
    mov     rdx, rax
    mov     rax, [rbp+dest]
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     edx, [rbp+var_54]
    mov     rsi, rcx
    mov     rdi, rax
    call    _adler32
    mov     rdx, rax
    
loc_DD61:
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+20h]
    mov     rax, [rbp+var_68]
    mov     [rax+60h], rdx
    
loc_DD79:
    mov     eax, [rbp+var_5C]
    mov     [rbp+var_54], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      short loc_DE03
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    test    eax, eax
    jnz     short loc_DDD3
    mov     rax, [rbp+var_28]
    shr     rax, 18h
    movzx   eax, al
    mov     rdx, [rbp+var_28]
    shr     rdx, 8
    and     edx, 0FF00h
    or      rdx, rax
    mov     rax, [rbp+var_28]
    shl     rax, 8
    and     eax, 0FF0000h
    add     rdx, rax
    mov     rax, [rbp+var_28]
    shl     rax, 18h
    mov     eax, eax
    add     rax, rdx
    jmp     short loc_DDD7
    
loc_DDD3:
    mov     rax, [rbp+var_28]
    
loc_DDD7:
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+20h]
    cmp     rax, rdx
    jz      short loc_DE03
    mov     rax, [rbp+var_68]
    lea     rdx, aIncorrectDataC
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     loc_DEF1
    
loc_DE03:
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    
loc_DE12:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F4Fh
    
loc_DE1D:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    test    eax, eax
    jz      loc_DEAD
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    test    eax, eax
    jz      short loc_DEAD
    jmp     short loc_DE6C
    
loc_DE39:
    cmp     [rbp+var_60], 0
    jz      loc_DF53
    sub     [rbp+var_60], 1
    mov     rax, [rbp+src]
    lea     rdx, [rax+1]
    mov     [rbp+src], rdx
    movzx   eax, byte ptr [rax]
    movzx   edx, al
    mov     eax, [rbp+var_58]
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, rdx
    add     [rbp+var_28], rax
    add     [rbp+var_58], 8
    
loc_DE6C:
    cmp     [rbp+var_58], 1Fh
    jbe     short loc_DE39
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    mov     eax, eax
    cmp     [rbp+var_28], rax
    jz      short loc_DE9E
    mov     rax, [rbp+var_68]
    lea     rdx, aIncorrectLengt
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F51h
    jmp     short loc_DEF1
    
loc_DE9E:
    mov     [rbp+var_28], 0
    mov     [rbp+var_58], 0
    
loc_DEAD:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F50h
    
loc_DEB8:
    mov     [rbp+var_48], 1
    jmp     loc_DF54
    
loc_DEC4:
    mov     [rbp+var_48], 0FFFFFFFDh
    jmp     loc_DF54
    
loc_DED0:
    mov     eax, 0FFFFFFFCh
    jmp     loc_E184
    
def_BDC1:
    mov     eax, 0FFFFFFFEh
    jmp     loc_E184
    
loc_DEE4:
    nop
    jmp     loc_BD8B
    
loc_DEEA:
    nop
    jmp     loc_BD8B
    
loc_DEF0:
    nop
    
loc_DEF1:
    jmp     loc_BD8B
    
loc_DEF6:
    nop
    jmp     short loc_DF54
    
loc_DEF9:
    nop
    jmp     short loc_DF54
    
loc_DEFC:
    nop
    jmp     short loc_DF54
    
loc_DEFF:
    nop
    jmp     short loc_DF54
    
loc_DF02:
    nop
    jmp     short loc_DF54
    
loc_DF05:
    nop
    jmp     short loc_DF54
    
loc_DF08:
    nop
    jmp     short loc_DF54
    
loc_DF0B:
    nop
    jmp     short loc_DF54
    
loc_DF0E:
    nop
    jmp     short loc_DF54
    
loc_DF11:
    nop
    jmp     short loc_DF54
    
loc_DF14:
    nop
    jmp     short loc_DF54
    
loc_DF17:
    nop
    jmp     short loc_DF54
    
loc_DF1A:
    nop
    jmp     short loc_DF54
    
loc_DF1D:
    nop
    jmp     short loc_DF54
    
loc_DF20:
    nop
    jmp     short loc_DF54
    
loc_DF23:
    nop
    jmp     short loc_DF54
    
loc_DF26:
    nop
    jmp     short loc_DF54
    
loc_DF29:
    nop
    jmp     short loc_DF54
    
loc_DF2C:
    nop
    jmp     short loc_DF54
    
loc_DF2F:
    nop
    jmp     short loc_DF54
    
loc_DF32:
    nop
    jmp     short loc_DF54
    
loc_DF35:
    nop
    jmp     short loc_DF54
    
loc_DF38:
    nop
    jmp     short loc_DF54
    
loc_DF3B:
    nop
    jmp     short loc_DF54
    
loc_DF3E:
    nop
    jmp     short loc_DF54
    
loc_DF41:
    nop
    jmp     short loc_DF54
    
loc_DF44:
    nop
    jmp     short loc_DF54
    
loc_DF47:
    nop
    jmp     short loc_DF54
    
loc_DF4A:
    nop
    jmp     short loc_DF54
    
loc_DF4D:
    nop
    jmp     short loc_DF54
    
loc_DF50:
    nop
    jmp     short loc_DF54
    
loc_DF53:
    nop
    
loc_DF54:
    mov     rax, [rbp+var_68]
    mov     rdx, [rbp+dest]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_5C]
    mov     [rax+20h], edx
    mov     rax, [rbp+var_68]
    mov     rdx, [rbp+src]
    mov     [rax], rdx
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_60]
    mov     [rax+8], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rbp+var_28]
    mov     [rax+50h], rdx
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_58]
    mov     [rax+58h], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+3Ch]
    test    eax, eax
    jnz     short loc_DFCE
    mov     rax, [rbp+var_68]
    mov     eax, [rax+20h]
    cmp     [rbp+var_54], eax
    jz      short loc_E00A
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    cmp     eax, 3F50h
    ja      short loc_E00A
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    cmp     eax, 3F4Dh
    jbe     short loc_DFCE
    cmp     [rbp+var_6C], 4
    jz      short loc_E00A
    
loc_DFCE:
    mov     rax, [rbp+var_68]
    mov     eax, [rax+20h]
    mov     edx, [rbp+var_54]
    sub     edx, eax
    mov     rax, [rbp+var_68]
    mov     rcx, [rax+18h]
    mov     rax, [rbp+var_68]
    mov     rsi, rcx
    mov     rdi, rax
    call    updatewindow
    test    eax, eax
    jz      short loc_E00A
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+8], 3F52h
    mov     eax, 0FFFFFFFCh
    jmp     loc_E184
    
loc_E00A:
    mov     rax, [rbp+var_68]
    mov     eax, [rax+8]
    sub     [rbp+var_44], eax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+20h]
    sub     [rbp+var_54], eax
    mov     rax, [rbp+var_68]
    mov     rdx, [rax+10h]
    mov     eax, [rbp+var_44]
    add     rdx, rax
    mov     rax, [rbp+var_68]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_68]
    mov     rdx, [rax+28h]
    mov     eax, [rbp+var_54]
    add     rdx, rax
    mov     rax, [rbp+var_68]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+28h]
    mov     eax, [rbp+var_54]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+10h]
    and     eax, 4
    test    eax, eax
    jz      loc_E0F3
    cmp     [rbp+var_54], 0
    jz      short loc_E0F3
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    test    eax, eax
    jz      short loc_E0B0
    mov     rax, [rbp+var_68]
    mov     rax, [rax+18h]
    mov     edx, [rbp+var_54]
    neg     rdx
    lea     rcx, [rax+rdx]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     edx, [rbp+var_54]
    mov     rsi, rcx
    mov     rdi, rax
    call    _crc32
    mov     rdx, rax
    jmp     short loc_E0DB
    
loc_E0B0:
    mov     rax, [rbp+var_68]
    mov     rax, [rax+18h]
    mov     edx, [rbp+var_54]
    neg     rdx
    lea     rcx, [rax+rdx]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     edx, [rbp+var_54]
    mov     rsi, rcx
    mov     rdi, rax
    call    _adler32
    mov     rdx, rax
    
loc_E0DB:
    mov     rax, [rbp+var_18]
    mov     [rax+20h], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+20h]
    mov     rax, [rbp+var_68]
    mov     [rax+60h], rdx
    
loc_E0F3:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+58h]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+0Ch]
    test    eax, eax
    jz      short loc_E10E
    mov     eax, 40h
    jmp     short loc_E113
    
loc_E10E:
    mov     eax, 0
    
loc_E113:
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    cmp     eax, 3F3Fh
    jnz     short loc_E12A
    mov     eax, 80h
    jmp     short loc_E12F
    
loc_E12A:
    mov     eax, 0
    
loc_E12F:
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    cmp     eax, 3F47h
    jz      short loc_E14D
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    cmp     eax, 3F42h
    jnz     short loc_E154
    
loc_E14D:
    mov     eax, 100h
    jmp     short loc_E159
    
loc_E154:
    mov     eax, 0
    
loc_E159:
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+58h], edx
    cmp     [rbp+var_44], 0
    jnz     short loc_E16E
    cmp     [rbp+var_54], 0
    jz      short loc_E174
    
loc_E16E:
    cmp     [rbp+var_6C], 4
    jnz     short loc_E181
    
loc_E174:
    cmp     [rbp+var_48], 0
    jnz     short loc_E181
    mov     [rbp+var_48], 0FFFFFFFBh
    
loc_E181:
    mov     eax, [rbp+var_48]
    
loc_E184:
    mov     rsi, [rbp+var_8]
    xor     rsi, fs:28h
    jz      short locret_E198
    call    ___stack_chk_fail
    
locret_E198:
    leave
    retn
    

<inflateEnd>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_E1BD
    mov     eax, 0FFFFFFFEh
    jmp     short locret_E227
    
loc_E1BD:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+48h]
    test    rax, rax
    jz      short loc_E1F6
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_8]
    mov     rcx, [rdx+48h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    
loc_E1F6:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_18]
    mov     rcx, [rdx+38h]
    mov     rdx, [rbp+var_18]
    mov     rdx, [rdx+50h]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+38h], 0
    mov     eax, 0
    
locret_E227:
    leave
    retn
    

<inflateGetDictionary>:
    
    var_28= qword ptr -28h
    dest= qword ptr -20h
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+dest], rsi
    mov     [rbp+var_28], rdx
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_E257
    mov     eax, 0FFFFFFFEh
    jmp     locret_E304
    
loc_E257:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+40h]
    test    eax, eax
    jz      short loc_E2EB
    cmp     [rbp+dest], 0
    jz      short loc_E2EB
    mov     rax, [rbp+var_8]
    mov     edx, [rax+40h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+44h]
    sub     edx, eax
    mov     eax, edx
    mov     esi, eax
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+48h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+44h]
    mov     eax, eax
    lea     rcx, [rdx+rax]
    mov     rax, [rbp+dest]
    mov     rdx, rsi
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_8]
    mov     eax, [rax+44h]
    mov     esi, eax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+var_8]
    mov     edx, [rdx+40h]
    mov     ecx, edx
    mov     rdx, [rbp+var_8]
    mov     edx, [rdx+44h]
    mov     edx, edx
    sub     rcx, rdx
    mov     rdx, [rbp+dest]
    add     rcx, rdx
    mov     rdx, rsi
    mov     rsi, rax
    mov     rdi, rcx
    call    _memcpy
    
loc_E2EB:
    cmp     [rbp+var_28], 0
    jz      short loc_E2FF
    mov     rax, [rbp+var_8]
    mov     edx, [rax+40h]
    mov     rax, [rbp+var_28]
    mov     [rax], edx
    
loc_E2FF:
    mov     eax, 0
    
locret_E304:
    leave
    retn
    

<inflateSetDictionary>:
    
    var_34= dword ptr -34h
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_30], rsi
    mov     [rbp+var_34], edx
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_E333
    mov     eax, 0FFFFFFFEh
    jmp     locret_E3FF
    
loc_E333:
    mov     rax, [rbp+var_28]
    mov     rax, [rax+38h]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+10h]
    test    eax, eax
    jz      short loc_E362
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    cmp     eax, 3F3Eh
    jz      short loc_E362
    mov     eax, 0FFFFFFFEh
    jmp     locret_E3FF
    
loc_E362:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    cmp     eax, 3F3Eh
    jnz     short loc_E3B7
    mov     edx, 0
    mov     esi, 0
    mov     edi, 0
    call    _adler32
    mov     [rbp+var_8], rax
    mov     edx, [rbp+var_34]
    mov     rcx, [rbp+var_30]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    _adler32
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_10]
    mov     rax, [rax+20h]
    cmp     [rbp+var_8], rax
    jz      short loc_E3B7
    mov     eax, 0FFFFFFFDh
    jmp     short locret_E3FF
    
loc_E3B7:
    mov     edx, [rbp+var_34]
    mov     rax, [rbp+var_30]
    lea     rcx, [rdx+rax]
    mov     edx, [rbp+var_34]
    mov     rax, [rbp+var_28]
    mov     rsi, rcx
    mov     rdi, rax
    call    updatewindow
    mov     [rbp+var_14], eax
    cmp     [rbp+var_14], 0
    jz      short loc_E3EF
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+8], 3F52h
    mov     eax, 0FFFFFFFCh
    jmp     short locret_E3FF
    
loc_E3EF:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+14h], 1
    mov     eax, 0
    
locret_E3FF:
    leave
    retn
    

<inflateGetHeader>:
    
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_E428
    mov     eax, 0FFFFFFFEh
    jmp     short locret_E465
    
loc_E428:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+10h]
    and     eax, 2
    test    eax, eax
    jnz     short loc_E449
    mov     eax, 0FFFFFFFEh
    jmp     short locret_E465
    
loc_E449:
    mov     rax, [rbp+var_8]
    mov     rdx, [rbp+var_20]
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_20]
    mov     dword ptr [rax+48h], 0
    mov     eax, 0
    
locret_E465:
    leave
    retn
    

<syncsearch>:
    
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_24], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    mov     [rbp+var_8], eax
    mov     [rbp+var_4], 0
    jmp     short loc_E4DD
    
loc_E488:
    mov     edx, [rbp+var_4]
    mov     rax, [rbp+var_20]
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    cmp     [rbp+var_8], 1
    ja      short loc_E4A5
    mov     edx, 0
    jmp     short loc_E4AA
    
loc_E4A5:
    mov     edx, 0FFh
    
loc_E4AA:
    cmp     edx, eax
    jnz     short loc_E4B4
    add     [rbp+var_8], 1
    jmp     short loc_E4D9
    
loc_E4B4:
    mov     edx, [rbp+var_4]
    mov     rax, [rbp+var_20]
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    test    al, al
    jz      short loc_E4CE
    mov     [rbp+var_8], 0
    jmp     short loc_E4D9
    
loc_E4CE:
    mov     eax, 4
    sub     eax, [rbp+var_8]
    mov     [rbp+var_8], eax
    
loc_E4D9:
    add     [rbp+var_4], 1
    
loc_E4DD:
    mov     eax, [rbp+var_4]
    cmp     eax, [rbp+var_24]
    jnb     short loc_E4EB
    cmp     [rbp+var_8], 3
    jbe     short loc_E488
    
loc_E4EB:
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_8]
    mov     [rax], edx
    mov     eax, [rbp+var_4]
    pop     rbp
    retn
    

<inflateSync>:
    
    var_38= qword ptr -38h
    var_2C= dword ptr -2Ch
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_C= byte ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_38], rdi
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    mov     rax, [rbp+var_38]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_E52E
    mov     eax, 0FFFFFFFEh
    jmp     loc_E6F1
    
loc_E52E:
    mov     rax, [rbp+var_38]
    mov     rax, [rax+38h]
    mov     [rbp+var_28], rax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_E55B
    mov     rax, [rbp+var_28]
    mov     eax, [rax+58h]
    cmp     eax, 7
    ja      short loc_E55B
    mov     eax, 0FFFFFFFBh
    jmp     loc_E6F1
    
loc_E55B:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+8]
    cmp     eax, 3F53h
    jz      loc_E62B
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+8], 3F53h
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+50h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+58h]
    and     eax, 7
    mov     ecx, eax
    shl     rdx, cl
    mov     rax, [rbp+var_28]
    mov     [rax+50h], rdx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+58h]
    and     eax, 0FFFFFFF8h
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+58h], edx
    mov     [rbp+var_2C], 0
    jmp     short loc_E5F4
    
loc_E5B3:
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+50h]
    mov     eax, [rbp+var_2C]
    lea     edx, [rax+1]
    mov     [rbp+var_2C], edx
    mov     edx, ecx
    mov     eax, eax
    mov     [rbp+rax+var_C], dl
    mov     rax, [rbp+var_28]
    mov     rax, [rax+50h]
    shr     rax, 8
    mov     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+50h], rdx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+58h]
    lea     edx, [rax-8]
    mov     rax, [rbp+var_28]
    mov     [rax+58h], edx
    
loc_E5F4:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+58h]
    cmp     eax, 7
    ja      short loc_E5B3
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+8Ch], 0
    mov     rax, [rbp+var_28]
    lea     rcx, [rax+8Ch]
    mov     edx, [rbp+var_2C]
    lea     rax, [rbp+var_C]
    mov     rsi, rax
    mov     rdi, rcx
    call    syncsearch
    
loc_E62B:
    mov     rax, [rbp+var_38]
    mov     edx, [rax+8]
    mov     rax, [rbp+var_38]
    mov     rax, [rax]
    mov     rcx, [rbp+var_28]
    add     rcx, 8Ch
    mov     rsi, rax
    mov     rdi, rcx
    call    syncsearch
    mov     [rbp+var_2C], eax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+8]
    sub     eax, [rbp+var_2C]
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+8], edx
    mov     rax, [rbp+var_38]
    mov     rdx, [rax]
    mov     eax, [rbp+var_2C]
    add     rdx, rax
    mov     rax, [rbp+var_38]
    mov     [rax], rdx
    mov     rax, [rbp+var_38]
    mov     rdx, [rax+10h]
    mov     eax, [rbp+var_2C]
    add     rdx, rax
    mov     rax, [rbp+var_38]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_28]
    mov     eax, [rax+8Ch]
    cmp     eax, 4
    jz      short loc_E6A5
    mov     eax, 0FFFFFFFDh
    jmp     short loc_E6F1
    
loc_E6A5:
    mov     rax, [rbp+var_38]
    mov     rax, [rax+10h]
    mov     [rbp+var_20], rax
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_38]
    mov     rdi, rax
    call    _inflateReset
    mov     rax, [rbp+var_38]
    mov     rdx, [rbp+var_20]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_38]
    mov     rdx, [rbp+var_18]
    mov     [rax+28h], rdx
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+8], 3F3Fh
    mov     eax, 0
    
loc_E6F1:
    mov     rsi, [rbp+var_8]
    xor     rsi, fs:28h
    jz      short locret_E705
    call    ___stack_chk_fail
    
locret_E705:
    leave
    retn
    

<inflateSyncPoint>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 18h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_E72A
    mov     eax, 0FFFFFFFEh
    jmp     short locret_E75B
    
loc_E72A:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 3F41h
    jnz     short loc_E756
    mov     rax, [rbp+var_8]
    mov     eax, [rax+58h]
    test    eax, eax
    jnz     short loc_E756
    mov     eax, 1
    jmp     short locret_E75B
    
loc_E756:
    mov     eax, 0
    
locret_E75B:
    leave
    retn
    

<inflateCopy>:
    
    src= qword ptr -30h
    dest= qword ptr -28h
    n= qword ptr -1Ch
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+dest], rdi
    mov     [rbp+src], rsi
    mov     rax, [rbp+src]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jnz     short loc_E784
    cmp     [rbp+dest], 0
    jnz     short loc_E78E
    
loc_E784:
    mov     eax, 0FFFFFFFEh
    jmp     locret_E9A0
    
loc_E78E:
    mov     rax, [rbp+src]
    mov     rax, [rax+38h]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+src]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+src]
    mov     rcx, [rdx+50h]
    mov     edx, 1BF8h
    mov     esi, 1
    mov     rdi, rcx
    call    rax
    mov     [rbp+var_8], rax
    cmp     [rbp+var_8], 0
    jnz     short loc_E7CE
    mov     eax, 0FFFFFFFCh
    jmp     locret_E9A0
    
loc_E7CE:
    mov     [rbp+n+4], 0
    mov     rax, [rbp+var_10]
    mov     rax, [rax+48h]
    test    rax, rax
    jz      short loc_E83E
    mov     rax, [rbp+src]
    mov     rax, [rax+40h]
    mov     rdx, [rbp+var_10]
    mov     edx, [rdx+38h]
    mov     esi, 1
    mov     ecx, edx
    shl     esi, cl
    mov     rdx, [rbp+src]
    mov     rcx, [rdx+50h]
    mov     edx, 1
    mov     rdi, rcx
    call    rax
    mov     [rbp+n+4], rax
    cmp     [rbp+n+4], 0
    jnz     short loc_E83E
    mov     rax, [rbp+src]
    mov     rax, [rax+48h]
    mov     rdx, [rbp+src]
    mov     rdx, [rdx+50h]
    mov     rcx, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rdx
    call    rax
    mov     eax, 0FFFFFFFCh
    jmp     locret_E9A0
    
loc_E83E:
    mov     rcx, [rbp+src]
    mov     rax, [rbp+dest]
    mov     edx, 70h
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     edx, 1BF8h
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_8]
    mov     rdx, [rbp+dest]
    mov     [rax], rdx
    mov     rax, [rbp+var_10]
    mov     rax, [rax+68h]
    mov     rdx, [rbp+var_10]
    add     rdx, 558h
    cmp     rax, rdx
    jb      loc_E916
    mov     rax, [rbp+var_10]
    mov     rax, [rax+68h]
    mov     rdx, [rbp+var_10]
    add     rdx, 558h
    add     rdx, 168Ch
    cmp     rax, rdx
    ja      short loc_E916
    mov     rax, [rbp+var_8]
    lea     rdx, [rax+558h]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+68h]
    mov     rcx, rax
    mov     rax, [rbp+var_10]
    add     rax, 558h
    sub     rcx, rax
    mov     rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     [rax+68h], rdx
    mov     rax, [rbp+var_8]
    lea     rdx, [rax+558h]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+70h]
    mov     rcx, rax
    mov     rax, [rbp+var_10]
    add     rax, 558h
    sub     rcx, rax
    mov     rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     [rax+70h], rdx
    
loc_E916:
    mov     rax, [rbp+var_8]
    lea     rdx, [rax+558h]
    mov     rax, [rbp+var_10]
    mov     rax, [rax+90h]
    mov     rcx, rax
    mov     rax, [rbp+var_10]
    add     rax, 558h
    sub     rcx, rax
    mov     rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     [rax+90h], rdx
    cmp     [rbp+n+4], 0
    jz      short loc_E983
    mov     rax, [rbp+var_10]
    mov     eax, [rax+38h]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     dword ptr [rbp+n], eax
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_10]
    mov     rcx, [rax+48h]
    mov     rax, [rbp+n+4]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    
loc_E983:
    mov     rax, [rbp+var_8]
    mov     rdx, [rbp+n+4]
    mov     [rax+48h], rdx
    mov     rax, [rbp+dest]
    mov     rdx, [rbp+var_8]
    mov     [rax+38h], rdx
    mov     eax, 0
    
locret_E9A0:
    leave
    retn
    

<inflateUndermine>:
    
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_E9C8
    mov     eax, 0FFFFFFFEh
    jmp     short locret_E9E7
    
loc_E9C8:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+1BE8h], 1
    mov     eax, 0FFFFFFFDh
    
locret_E9E7:
    leave
    retn
    

<inflateValidate>:
    
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_EA0F
    mov     eax, 0FFFFFFFEh
    jmp     short locret_EA4E
    
loc_EA0F:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    cmp     [rbp+var_1C], 0
    jz      short loc_EA36
    mov     rax, [rbp+var_8]
    mov     eax, [rax+10h]
    or      eax, 4
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+10h], edx
    jmp     short loc_EA49
    
loc_EA36:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+10h]
    and     eax, 0FFFFFFFBh
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+10h], edx
    
loc_EA49:
    mov     eax, 0
    
locret_EA4E:
    leave
    retn
    

<inflateMark>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 18h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_EA75
    mov     rax, 0FFFFFFFFFFFF0000h
    jmp     short locret_EADC
    
loc_EA75:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1BECh]
    cdqe
    shl     rax, 10h
    mov     rcx, rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 3F43h
    jnz     short loc_EAAD
    mov     rax, [rbp+var_8]
    mov     eax, [rax+5Ch]
    mov     eax, eax
    jmp     short loc_EAD9
    
loc_EAAD:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 3F4Ch
    jnz     short loc_EAD4
    mov     rax, [rbp+var_8]
    mov     edx, [rax+1BF0h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+5Ch]
    sub     edx, eax
    mov     eax, edx
    mov     eax, eax
    jmp     short loc_EAD9
    
loc_EAD4:
    mov     eax, 0
    
loc_EAD9:
    add     rax, rcx
    
locret_EADC:
    leave
    retn
    

<inflateCodesUsed>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 18h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    inflateStateCheck
    test    eax, eax
    jz      short loc_EB03
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     short locret_EB31
    
loc_EB03:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     rax, [rax+90h]
    mov     rdx, rax
    mov     rax, [rbp+var_8]
    add     rax, 558h
    sub     rdx, rax
    mov     rax, rdx
    sar     rax, 2
    
locret_EB31:
    leave
    retn
    

<inflate_table>:
    
    var_D8= qword ptr -0D8h
    var_D0= qword ptr -0D0h
    var_C8= qword ptr -0C8h
    var_C0= qword ptr -0C0h
    var_B8= dword ptr -0B8h
    var_B4= dword ptr -0B4h
    var_A8= dword ptr -0A8h
    var_A4= dword ptr -0A4h
    var_A0= dword ptr -0A0h
    var_9C= dword ptr -9Ch
    var_98= dword ptr -98h
    var_94= dword ptr -94h
    var_90= dword ptr -90h
    var_8C= dword ptr -8Ch
    var_88= dword ptr -88h
    var_84= dword ptr -84h
    var_80= dword ptr -80h
    var_7C= dword ptr -7Ch
    var_78= dword ptr -78h
    var_74= dword ptr -74h
    var_70= dword ptr -70h
    var_6C= dword ptr -6Ch
    var_68= qword ptr -68h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_50= word ptr -50h
    var_30= word ptr -30h
    var_2E= word ptr -2Eh
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 0E0h
    mov     [rbp+var_B4], edi
    mov     [rbp+var_C0], rsi
    mov     [rbp+var_B8], edx
    mov     [rbp+var_C8], rcx
    mov     [rbp+var_D0], r8
    mov     [rbp+var_D8], r9
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    mov     [rbp+var_A8], 0
    jmp     short loc_EB95
    
loc_EB81:
    mov     eax, [rbp+var_A8]
    mov     [rbp+rax*2+var_50], 0
    add     [rbp+var_A8], 1
    
loc_EB95:
    cmp     [rbp+var_A8], 0Fh
    jbe     short loc_EB81
    mov     [rbp+var_A4], 0
    jmp     short loc_EBDD
    
loc_EBAA:
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_C0]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    movsxd  rdx, eax
    movzx   edx, [rbp+rdx*2+var_50]
    add     edx, 1
    cdqe
    mov     [rbp+rax*2+var_50], dx
    add     [rbp+var_A4], 1
    
loc_EBDD:
    mov     eax, [rbp+var_A4]
    cmp     eax, [rbp+var_B8]
    jb      short loc_EBAA
    mov     rax, [rbp+var_D0]
    mov     eax, [rax]
    mov     [rbp+var_98], eax
    mov     [rbp+var_9C], 0Fh
    jmp     short loc_EC1D
    
loc_EC06:
    mov     eax, [rbp+var_9C]
    movzx   eax, [rbp+rax*2+var_50]
    test    ax, ax
    jnz     short loc_EC28
    sub     [rbp+var_9C], 1
    
loc_EC1D:
    cmp     [rbp+var_9C], 0
    jnz     short loc_EC06
    jmp     short loc_EC29
    
loc_EC28:
    nop
    
loc_EC29:
    mov     eax, [rbp+var_98]
    cmp     eax, [rbp+var_9C]
    jbe     short loc_EC43
    mov     eax, [rbp+var_9C]
    mov     [rbp+var_98], eax
    
loc_EC43:
    cmp     [rbp+var_9C], 0
    jnz     short loc_ECAB
    mov     byte ptr [rbp+var_6C], 40h
    mov     byte ptr [rbp+var_6C+1], 1
    mov     word ptr [rbp+var_6C+2], 0
    mov     rax, [rbp+var_C8]
    mov     rax, [rax]
    lea     rcx, [rax+4]
    mov     rdx, [rbp+var_C8]
    mov     [rdx], rcx
    mov     edx, [rbp+var_6C]
    mov     [rax], edx
    mov     rax, [rbp+var_C8]
    mov     rax, [rax]
    lea     rcx, [rax+4]
    mov     rdx, [rbp+var_C8]
    mov     [rdx], rcx
    mov     edx, [rbp+var_6C]
    mov     [rax], edx
    mov     rax, [rbp+var_D0]
    mov     dword ptr [rax], 1
    mov     eax, 0
    jmp     loc_F366
    
loc_ECAB:
    mov     [rbp+var_A0], 1
    jmp     short loc_ECCE
    
loc_ECB7:
    mov     eax, [rbp+var_A0]
    movzx   eax, [rbp+rax*2+var_50]
    test    ax, ax
    jnz     short loc_ECDE
    add     [rbp+var_A0], 1
    
loc_ECCE:
    mov     eax, [rbp+var_A0]
    cmp     eax, [rbp+var_9C]
    jb      short loc_ECB7
    jmp     short loc_ECDF
    
loc_ECDE:
    nop
    
loc_ECDF:
    mov     eax, [rbp+var_98]
    cmp     eax, [rbp+var_A0]
    jnb     short loc_ECF9
    mov     eax, [rbp+var_A0]
    mov     [rbp+var_98], eax
    
loc_ECF9:
    mov     [rbp+var_8C], 1
    mov     [rbp+var_A8], 1
    jmp     short loc_ED43
    
loc_ED0F:
    shl     [rbp+var_8C], 1
    mov     eax, [rbp+var_A8]
    movzx   eax, [rbp+rax*2+var_50]
    movzx   eax, ax
    sub     [rbp+var_8C], eax
    cmp     [rbp+var_8C], 0
    jns     short loc_ED3C
    mov     eax, 0FFFFFFFFh
    jmp     loc_F366
    
loc_ED3C:
    add     [rbp+var_A8], 1
    
loc_ED43:
    cmp     [rbp+var_A8], 0Fh
    jbe     short loc_ED0F
    cmp     [rbp+var_8C], 0
    jle     short loc_ED71
    cmp     [rbp+var_B4], 0
    jz      short loc_ED67
    cmp     [rbp+var_9C], 1
    jz      short loc_ED71
    
loc_ED67:
    mov     eax, 0FFFFFFFFh
    jmp     loc_F366
    
loc_ED71:
    mov     [rbp+var_2E], 0
    mov     [rbp+var_A8], 1
    jmp     short loc_EDB2
    
loc_ED83:
    mov     eax, [rbp+var_A8]
    movzx   edx, [rbp+rax*2+var_30]
    mov     eax, [rbp+var_A8]
    movzx   eax, [rbp+rax*2+var_50]
    mov     ecx, [rbp+var_A8]
    add     ecx, 1
    add     eax, edx
    mov     edx, ecx
    mov     [rbp+rdx*2+var_30], ax
    add     [rbp+var_A8], 1
    
loc_EDB2:
    cmp     [rbp+var_A8], 0Eh
    jbe     short loc_ED83
    mov     [rbp+var_A4], 0
    jmp     short loc_EE31
    
loc_EDC7:
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_C0]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    test    ax, ax
    jz      short loc_EE2A
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_C0]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   edx, ax
    movsxd  rax, edx
    movzx   eax, [rbp+rax*2+var_30]
    lea     ecx, [rax+1]
    movsxd  rdx, edx
    mov     [rbp+rdx*2+var_30], cx
    movzx   eax, ax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_D8]
    add     rax, rdx
    mov     edx, [rbp+var_A4]
    mov     [rax], dx
    
loc_EE2A:
    add     [rbp+var_A4], 1
    
loc_EE31:
    mov     eax, [rbp+var_A4]
    cmp     eax, [rbp+var_B8]
    jb      short loc_EDC7
    mov     eax, [rbp+var_B4]
    test    eax, eax
    jz      short loc_EE50
    cmp     eax, 1
    jz      short loc_EE6C
    jmp     short loc_EE8B
    
loc_EE50:
    mov     rax, [rbp+var_D8]
    mov     [rbp+var_58], rax
    mov     rax, [rbp+var_58]
    mov     [rbp+var_60], rax
    mov     [rbp+var_74], 14h
    jmp     short loc_EEA8
    
loc_EE6C:
    lea     rax, lbase_3597
    mov     [rbp+var_60], rax
    lea     rax, lext_3598
    mov     [rbp+var_58], rax
    mov     [rbp+var_74], 101h
    jmp     short loc_EEA8
    
loc_EE8B:
    lea     rax, dbase_3599
    mov     [rbp+var_60], rax
    lea     rax, dext_3600
    mov     [rbp+var_58], rax
    mov     [rbp+var_74], 0
    
loc_EEA8:
    mov     [rbp+var_84], 0
    mov     [rbp+var_A4], 0
    mov     eax, [rbp+var_A0]
    mov     [rbp+var_A8], eax
    mov     rax, [rbp+var_C8]
    mov     rax, [rax]
    mov     [rbp+var_68], rax
    mov     eax, [rbp+var_98]
    mov     [rbp+var_94], eax
    mov     [rbp+var_90], 0
    mov     [rbp+var_78], 0FFFFFFFFh
    mov     eax, [rbp+var_98]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     [rbp+var_88], eax
    mov     eax, [rbp+var_88]
    sub     eax, 1
    mov     [rbp+var_70], eax
    cmp     [rbp+var_B4], 1
    jnz     short loc_EF2B
    cmp     [rbp+var_88], 354h
    ja      short loc_EF40
    
loc_EF2B:
    cmp     [rbp+var_B4], 2
    jnz     short loc_EF4A
    cmp     [rbp+var_88], 250h
    jbe     short loc_EF4A
    
loc_EF40:
    mov     eax, 1
    jmp     loc_F366
    
loc_EF4A:
    mov     eax, [rbp+var_A8]
    mov     edx, eax
    mov     eax, [rbp+var_90]
    sub     edx, eax
    mov     eax, edx
    mov     byte ptr [rbp+var_6C+1], al
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_D8]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    add     eax, 1
    cmp     [rbp+var_74], eax
    jbe     short loc_EFA5
    mov     byte ptr [rbp+var_6C], 0
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_D8]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    mov     word ptr [rbp+var_6C+2], ax
    jmp     loc_F031
    
loc_EFA5:
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_D8]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    cmp     [rbp+var_74], eax
    ja      short loc_F027
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_D8]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    sub     eax, [rbp+var_74]
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_58]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    mov     byte ptr [rbp+var_6C], al
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_D8]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    sub     eax, [rbp+var_74]
    mov     eax, eax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_60]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    mov     word ptr [rbp+var_6C+2], ax
    jmp     short loc_F031
    
loc_F027:
    mov     byte ptr [rbp+var_6C], 60h
    mov     word ptr [rbp+var_6C+2], 0
    
loc_F031:
    mov     eax, [rbp+var_A8]
    sub     eax, [rbp+var_90]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     [rbp+var_80], eax
    mov     eax, [rbp+var_94]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     [rbp+var_7C], eax
    mov     eax, [rbp+var_7C]
    mov     [rbp+var_A0], eax
    
loc_F068:
    mov     eax, [rbp+var_80]
    sub     [rbp+var_7C], eax
    mov     eax, [rbp+var_90]
    mov     edx, [rbp+var_84]
    mov     ecx, eax
    shr     edx, cl
    mov     eax, [rbp+var_7C]
    add     eax, edx
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_68]
    add     rdx, rax
    mov     eax, [rbp+var_6C]
    mov     [rdx], eax
    cmp     [rbp+var_7C], 0
    jnz     short loc_F068
    mov     eax, [rbp+var_A8]
    sub     eax, 1
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     [rbp+var_80], eax
    jmp     short loc_F0BB
    
loc_F0B8:
    shr     [rbp+var_80], 1
    
loc_F0BB:
    mov     eax, [rbp+var_84]
    and     eax, [rbp+var_80]
    test    eax, eax
    jnz     short loc_F0B8
    cmp     [rbp+var_80], 0
    jz      short loc_F0E5
    mov     eax, [rbp+var_80]
    sub     eax, 1
    and     [rbp+var_84], eax
    mov     eax, [rbp+var_80]
    add     [rbp+var_84], eax
    jmp     short loc_F0EF
    
loc_F0E5:
    mov     [rbp+var_84], 0
    
loc_F0EF:
    add     [rbp+var_A4], 1
    mov     eax, [rbp+var_A8]
    movzx   eax, [rbp+rax*2+var_50]
    lea     edx, [rax-1]
    mov     eax, [rbp+var_A8]
    mov     [rbp+rax*2+var_50], dx
    mov     eax, [rbp+var_A8]
    movzx   eax, [rbp+rax*2+var_50]
    test    ax, ax
    jnz     short loc_F165
    mov     eax, [rbp+var_A8]
    cmp     eax, [rbp+var_9C]
    jz      loc_F2EE
    mov     eax, [rbp+var_A4]
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_D8]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    lea     rdx, [rax+rax]
    mov     rax, [rbp+var_C0]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_A8], eax
    
loc_F165:
    mov     eax, [rbp+var_A8]
    cmp     eax, [rbp+var_98]
    jbe     loc_EF4A
    mov     eax, [rbp+var_84]
    and     eax, [rbp+var_70]
    cmp     [rbp+var_78], eax
    jz      loc_EF4A
    cmp     [rbp+var_90], 0
    jnz     short loc_F19E
    mov     eax, [rbp+var_98]
    mov     [rbp+var_90], eax
    
loc_F19E:
    mov     eax, [rbp+var_A0]
    shl     rax, 2
    add     [rbp+var_68], rax
    mov     eax, [rbp+var_A8]
    sub     eax, [rbp+var_90]
    mov     [rbp+var_94], eax
    mov     eax, [rbp+var_94]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    mov     [rbp+var_8C], eax
    jmp     short loc_F20B
    
loc_F1D7:
    mov     edx, [rbp+var_94]
    mov     eax, [rbp+var_90]
    add     eax, edx
    mov     eax, eax
    movzx   eax, [rbp+rax*2+var_50]
    movzx   eax, ax
    sub     [rbp+var_8C], eax
    cmp     [rbp+var_8C], 0
    jle     short loc_F223
    add     [rbp+var_94], 1
    shl     [rbp+var_8C], 1
    
loc_F20B:
    mov     edx, [rbp+var_94]
    mov     eax, [rbp+var_90]
    add     eax, edx
    cmp     [rbp+var_9C], eax
    ja      short loc_F1D7
    jmp     short loc_F224
    
loc_F223:
    nop
    
loc_F224:
    mov     eax, [rbp+var_94]
    mov     edx, 1
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    add     [rbp+var_88], eax
    cmp     [rbp+var_B4], 1
    jnz     short loc_F250
    cmp     [rbp+var_88], 354h
    ja      short loc_F265
    
loc_F250:
    cmp     [rbp+var_B4], 2
    jnz     short loc_F26F
    cmp     [rbp+var_88], 250h
    jbe     short loc_F26F
    
loc_F265:
    mov     eax, 1
    jmp     loc_F366
    
loc_F26F:
    mov     eax, [rbp+var_84]
    and     eax, [rbp+var_70]
    mov     [rbp+var_78], eax
    mov     rax, [rbp+var_C8]
    mov     rax, [rax]
    mov     edx, [rbp+var_78]
    shl     rdx, 2
    add     rax, rdx
    mov     edx, [rbp+var_94]
    mov     [rax], dl
    mov     rax, [rbp+var_C8]
    mov     rax, [rax]
    mov     edx, [rbp+var_78]
    shl     rdx, 2
    add     rax, rdx
    mov     edx, [rbp+var_98]
    mov     [rax+1], dl
    mov     rdx, [rbp+var_68]
    mov     rax, [rbp+var_C8]
    mov     rax, [rax]
    sub     rdx, rax
    mov     rax, rdx
    sar     rax, 2
    mov     rcx, rax
    mov     rax, [rbp+var_C8]
    mov     rax, [rax]
    mov     edx, [rbp+var_78]
    shl     rdx, 2
    add     rax, rdx
    mov     edx, ecx
    mov     [rax+2], dx
    jmp     loc_EF4A
    
loc_F2EE:
    nop
    cmp     [rbp+var_84], 0
    jz      short loc_F331
    mov     byte ptr [rbp+var_6C], 40h
    mov     eax, [rbp+var_A8]
    mov     edx, eax
    mov     eax, [rbp+var_90]
    sub     edx, eax
    mov     eax, edx
    mov     byte ptr [rbp+var_6C+1], al
    mov     word ptr [rbp+var_6C+2], 0
    mov     eax, [rbp+var_84]
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_68]
    add     rdx, rax
    mov     eax, [rbp+var_6C]
    mov     [rdx], eax
    
loc_F331:
    mov     rax, [rbp+var_C8]
    mov     rax, [rax]
    mov     edx, [rbp+var_88]
    shl     rdx, 2
    add     rdx, rax
    mov     rax, [rbp+var_C8]
    mov     [rax], rdx
    mov     rax, [rbp+var_D0]
    mov     edx, [rbp+var_98]
    mov     [rax], edx
    mov     eax, 0
    
loc_F366:
    mov     rsi, [rbp+var_8]
    xor     rsi, fs:28h
    jz      short locret_F37A
    call    ___stack_chk_fail
    
locret_F37A:
    leave
    retn
    

<tr_static_init>:
    
    push    rbp
    mov     rbp, rsp
    nop
    pop     rbp
    retn
    

<_tr_init>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    call    tr_static_init
    mov     rax, [rbp+var_8]
    lea     rdx, [rax+0D4h]
    mov     rax, [rbp+var_8]
    mov     [rax+0B58h], rdx
    mov     rax, [rbp+var_8]
    lea     rdx, static_l_desc
    mov     [rax+0B68h], rdx
    mov     rax, [rbp+var_8]
    lea     rdx, [rax+9C8h]
    mov     rax, [rbp+var_8]
    mov     [rax+0B70h], rdx
    mov     rax, [rbp+var_8]
    lea     rdx, static_d_desc
    mov     [rax+0B80h], rdx
    mov     rax, [rbp+var_8]
    lea     rdx, [rax+0ABCh]
    mov     rax, [rbp+var_8]
    mov     [rax+0B88h], rdx
    mov     rax, [rbp+var_8]
    lea     rdx, static_bl_desc
    mov     [rax+0B98h], rdx
    mov     rax, [rbp+var_8]
    mov     word ptr [rax+1730h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+1734h], 0
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    init_block
    nop
    leave
    retn
    

<init_block>:
    
    var_18= qword ptr -18h
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    mov     [rbp+var_4], 0
    jmp     short loc_F460
    
loc_F447:
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_4]
    movsxd  rdx, edx
    add     rdx, 34h
    mov     word ptr [rax+rdx*4+4], 0
    add     [rbp+var_4], 1
    
loc_F460:
    cmp     [rbp+var_4], 11Dh
    jle     short loc_F447
    mov     [rbp+var_4], 0
    jmp     short loc_F48E
    
loc_F472:
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_4]
    movsxd  rdx, edx
    add     rdx, 270h
    mov     word ptr [rax+rdx*4+8], 0
    add     [rbp+var_4], 1
    
loc_F48E:
    cmp     [rbp+var_4], 1Dh
    jle     short loc_F472
    mov     [rbp+var_4], 0
    jmp     short loc_F4B9
    
loc_F49D:
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_4]
    movsxd  rdx, edx
    add     rdx, 2ACh
    mov     word ptr [rax+rdx*4+0Ch], 0
    add     [rbp+var_4], 1
    
loc_F4B9:
    cmp     [rbp+var_4], 12h
    jle     short loc_F49D
    mov     rax, [rbp+var_18]
    mov     word ptr [rax+4D4h], 1
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+1720h], 0
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+1720h]
    mov     rax, [rbp+var_18]
    mov     [rax+1718h], rdx
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+1728h], 0
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1728h]
    mov     rax, [rbp+var_18]
    mov     [rax+170Ch], edx
    nop
    pop     rbp
    retn
    

<pqdownheap>:
    
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_24], edx
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_24]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    mov     [rbp+var_4], eax
    mov     eax, [rbp+var_24]
    add     eax, eax
    mov     [rbp+var_8], eax
    jmp     loc_F753
    
loc_F549:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+14B4h]
    cmp     [rbp+var_8], eax
    jge     loc_F65F
    mov     eax, [rbp+var_8]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_20]
    add     rax, rdx
    movzx   edx, word ptr [rax]
    mov     rax, [rbp+var_18]
    mov     ecx, [rbp+var_8]
    movsxd  rcx, ecx
    add     rcx, 2F0h
    mov     eax, [rax+rcx*4]
    cdqe
    lea     rcx, ds:0[rax*4]
    mov     rax, [rbp+var_20]
    add     rax, rcx
    movzx   eax, word ptr [rax]
    cmp     dx, ax
    jb      loc_F65B
    mov     eax, [rbp+var_8]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_20]
    add     rax, rdx
    movzx   edx, word ptr [rax]
    mov     rax, [rbp+var_18]
    mov     ecx, [rbp+var_8]
    movsxd  rcx, ecx
    add     rcx, 2F0h
    mov     eax, [rax+rcx*4]
    cdqe
    lea     rcx, ds:0[rax*4]
    mov     rax, [rbp+var_20]
    add     rax, rcx
    movzx   eax, word ptr [rax]
    cmp     dx, ax
    jnz     short loc_F65F
    mov     eax, [rbp+var_8]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    mov     rdx, [rbp+var_18]
    cdqe
    movzx   ecx, byte ptr [rdx+rax+14BCh]
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_8]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    mov     rdx, [rbp+var_18]
    cdqe
    movzx   eax, byte ptr [rdx+rax+14BCh]
    cmp     cl, al
    ja      short loc_F65F
    
loc_F65B:
    add     [rbp+var_8], 1
    
loc_F65F:
    mov     eax, [rbp+var_4]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_20]
    add     rax, rdx
    movzx   edx, word ptr [rax]
    mov     rax, [rbp+var_18]
    mov     ecx, [rbp+var_8]
    movsxd  rcx, ecx
    add     rcx, 2F0h
    mov     eax, [rax+rcx*4]
    cdqe
    lea     rcx, ds:0[rax*4]
    mov     rax, [rbp+var_20]
    add     rax, rcx
    movzx   eax, word ptr [rax]
    cmp     dx, ax
    jb      loc_F766
    mov     eax, [rbp+var_4]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_20]
    add     rax, rdx
    movzx   edx, word ptr [rax]
    mov     rax, [rbp+var_18]
    mov     ecx, [rbp+var_8]
    movsxd  rcx, ecx
    add     rcx, 2F0h
    mov     eax, [rax+rcx*4]
    cdqe
    lea     rcx, ds:0[rax*4]
    mov     rax, [rbp+var_20]
    add     rax, rcx
    movzx   eax, word ptr [rax]
    cmp     dx, ax
    jnz     short loc_F722
    mov     rdx, [rbp+var_18]
    mov     eax, [rbp+var_4]
    cdqe
    movzx   ecx, byte ptr [rdx+rax+14BCh]
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_8]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    mov     rdx, [rbp+var_18]
    cdqe
    movzx   eax, byte ptr [rdx+rax+14BCh]
    cmp     cl, al
    jbe     short loc_F766
    
loc_F722:
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_8]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     edx, [rax+rdx*4]
    mov     rax, [rbp+var_18]
    mov     ecx, [rbp+var_24]
    movsxd  rcx, ecx
    add     rcx, 2F0h
    mov     [rax+rcx*4], edx
    mov     eax, [rbp+var_8]
    mov     [rbp+var_24], eax
    shl     [rbp+var_8], 1
    
loc_F753:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+14B4h]
    cmp     [rbp+var_8], eax
    jle     loc_F549
    
loc_F766:
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_24]
    movsxd  rdx, edx
    lea     rcx, [rdx+2F0h]
    mov     edx, [rbp+var_4]
    mov     [rax+rcx*4], edx
    nop
    pop     rbp
    retn
    

<gen_bitlen>:
    
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_3E= word ptr -3Eh
    var_3C= dword ptr -3Ch
    var_38= dword ptr -38h
    var_34= dword ptr -34h
    var_30= dword ptr -30h
    var_2C= dword ptr -2Ch
    var_28= dword ptr -28h
    var_24= dword ptr -24h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_48], rdi
    mov     [rbp+var_50], rsi
    mov     rax, [rbp+var_50]
    mov     rax, [rax]
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_50]
    mov     eax, [rax+8]
    mov     [rbp+var_28], eax
    mov     rax, [rbp+var_50]
    mov     rax, [rax+10h]
    mov     rax, [rax]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_50]
    mov     rax, [rax+10h]
    mov     rax, [rax+8]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_50]
    mov     rax, [rax+10h]
    mov     eax, [rax+10h]
    mov     [rbp+var_24], eax
    mov     rax, [rbp+var_50]
    mov     rax, [rax+10h]
    mov     eax, [rax+18h]
    mov     [rbp+var_20], eax
    mov     [rbp+var_2C], 0
    mov     [rbp+var_34], 0
    jmp     short loc_F807
    
loc_F7EC:
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_34]
    movsxd  rdx, edx
    add     rdx, 5D0h
    mov     word ptr [rax+rdx*2], 0
    add     [rbp+var_34], 1
    
loc_F807:
    cmp     [rbp+var_34], 0Fh
    jle     short loc_F7EC
    mov     rax, [rbp+var_48]
    mov     edx, [rax+14B8h]
    mov     rax, [rbp+var_48]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rdx
    mov     word ptr [rax+2], 0
    mov     rax, [rbp+var_48]
    mov     eax, [rax+14B8h]
    add     eax, 1
    mov     [rbp+var_3C], eax
    jmp     loc_F9CB
    
loc_F854:
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_3C]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    mov     [rbp+var_38], eax
    mov     eax, [rbp+var_38]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    add     eax, 1
    mov     [rbp+var_34], eax
    mov     eax, [rbp+var_34]
    cmp     eax, [rbp+var_20]
    jle     short loc_F8B4
    mov     eax, [rbp+var_20]
    mov     [rbp+var_34], eax
    add     [rbp+var_2C], 1
    
loc_F8B4:
    mov     eax, [rbp+var_38]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rdx
    mov     edx, [rbp+var_34]
    mov     [rax+2], dx
    mov     eax, [rbp+var_38]
    cmp     eax, [rbp+var_28]
    jg      loc_F9C6
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_34]
    movsxd  rdx, edx
    add     rdx, 5D0h
    movzx   eax, word ptr [rax+rdx*2]
    lea     ecx, [rax+1]
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_34]
    movsxd  rdx, edx
    add     rdx, 5D0h
    mov     [rax+rdx*2], cx
    mov     [rbp+var_30], 0
    mov     eax, [rbp+var_38]
    cmp     eax, [rbp+var_24]
    jl      short loc_F933
    mov     eax, [rbp+var_38]
    sub     eax, [rbp+var_24]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_8]
    add     rax, rdx
    mov     eax, [rax]
    mov     [rbp+var_30], eax
    
loc_F933:
    mov     eax, [rbp+var_38]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    mov     [rbp+var_3E], ax
    mov     rax, [rbp+var_48]
    mov     rdx, [rax+1718h]
    movzx   eax, [rbp+var_3E]
    mov     esi, [rbp+var_34]
    mov     ecx, [rbp+var_30]
    add     ecx, esi
    mov     ecx, ecx
    imul    rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+1718h], rdx
    cmp     [rbp+var_10], 0
    jz      short loc_F9C7
    mov     rax, [rbp+var_48]
    mov     rdx, [rax+1720h]
    movzx   eax, [rbp+var_3E]
    mov     ecx, [rbp+var_38]
    movsxd  rcx, ecx
    lea     rsi, ds:0[rcx*4]
    mov     rcx, [rbp+var_10]
    add     rcx, rsi
    movzx   ecx, word ptr [rcx+2]
    movzx   esi, cx
    mov     ecx, [rbp+var_30]
    add     ecx, esi
    mov     ecx, ecx
    imul    rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+1720h], rdx
    jmp     short loc_F9C7
    
loc_F9C6:
    nop
    
loc_F9C7:
    add     [rbp+var_3C], 1
    
loc_F9CB:
    cmp     [rbp+var_3C], 23Ch
    jle     loc_F854
    cmp     [rbp+var_2C], 0
    jz      loc_FBAF
    
loc_F9E2:
    mov     eax, [rbp+var_20]
    sub     eax, 1
    mov     [rbp+var_34], eax
    jmp     short loc_F9F1
    
loc_F9ED:
    sub     [rbp+var_34], 1
    
loc_F9F1:
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_34]
    movsxd  rdx, edx
    add     rdx, 5D0h
    movzx   eax, word ptr [rax+rdx*2]
    test    ax, ax
    jz      short loc_F9ED
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_34]
    movsxd  rdx, edx
    add     rdx, 5D0h
    movzx   eax, word ptr [rax+rdx*2]
    lea     ecx, [rax-1]
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_34]
    movsxd  rdx, edx
    add     rdx, 5D0h
    mov     [rax+rdx*2], cx
    mov     eax, [rbp+var_34]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_48]
    movsxd  rdx, edx
    add     rdx, 5D0h
    movzx   eax, word ptr [rax+rdx*2]
    mov     edx, [rbp+var_34]
    add     edx, 1
    lea     ecx, [rax+2]
    mov     rax, [rbp+var_48]
    movsxd  rdx, edx
    add     rdx, 5D0h
    mov     [rax+rdx*2], cx
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_20]
    movsxd  rdx, edx
    add     rdx, 5D0h
    movzx   eax, word ptr [rax+rdx*2]
    lea     ecx, [rax-1]
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_20]
    movsxd  rdx, edx
    add     rdx, 5D0h
    mov     [rax+rdx*2], cx
    sub     [rbp+var_2C], 2
    cmp     [rbp+var_2C], 0
    jg      loc_F9E2
    mov     eax, [rbp+var_20]
    mov     [rbp+var_34], eax
    jmp     loc_FBA3
    
loc_FAB1:
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_34]
    movsxd  rdx, edx
    add     rdx, 5D0h
    movzx   eax, word ptr [rax+rdx*2]
    movzx   eax, ax
    mov     [rbp+var_38], eax
    jmp     loc_FB95
    
loc_FAD1:
    sub     [rbp+var_3C], 1
    mov     rax, [rbp+var_48]
    mov     edx, [rbp+var_3C]
    movsxd  rdx, edx
    add     rdx, 2F0h
    mov     eax, [rax+rdx*4]
    mov     [rbp+var_1C], eax
    mov     eax, [rbp+var_1C]
    cmp     eax, [rbp+var_28]
    jle     short loc_FAF9
    jmp     loc_FB95
    
loc_FAF9:
    mov     eax, [rbp+var_1C]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   edx, ax
    mov     eax, [rbp+var_34]
    cmp     edx, eax
    jz      short loc_FB91
    mov     rax, [rbp+var_48]
    mov     rdx, [rax+1718h]
    mov     eax, [rbp+var_34]
    movsxd  rcx, eax
    mov     eax, [rbp+var_1C]
    cdqe
    lea     rsi, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rsi
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    sub     rcx, rax
    mov     eax, [rbp+var_1C]
    cdqe
    lea     rsi, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rsi
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    imul    rax, rcx
    add     rdx, rax
    mov     rax, [rbp+var_48]
    mov     [rax+1718h], rdx
    mov     eax, [rbp+var_1C]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_18]
    add     rax, rdx
    mov     edx, [rbp+var_34]
    mov     [rax+2], dx
    
loc_FB91:
    sub     [rbp+var_38], 1
    
loc_FB95:
    cmp     [rbp+var_38], 0
    jnz     loc_FAD1
    sub     [rbp+var_34], 1
    
loc_FBA3:
    cmp     [rbp+var_34], 0
    jnz     loc_FAB1
    jmp     short loc_FBB0
    
loc_FBAF:
    nop
    
loc_FBB0:
    pop     rbp
    retn
    

<gen_codes>:
    
    var_58= qword ptr -58h
    var_4C= dword ptr -4Ch
    var_48= qword ptr -48h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    var_38= dword ptr -38h
    var_34= dword ptr -34h
    var_30= word ptr -30h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 60h
    mov     [rbp+var_48], rdi
    mov     [rbp+var_4C], esi
    mov     [rbp+var_58], rdx
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    mov     [rbp+var_40], 0
    mov     [rbp+var_3C], 1
    jmp     short loc_FC1A
    
loc_FBE4:
    mov     eax, [rbp+var_3C]
    cdqe
    add     rax, rax
    lea     rdx, [rax-2]
    mov     rax, [rbp+var_58]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   edx, ax
    mov     eax, [rbp+var_40]
    add     eax, edx
    add     eax, eax
    mov     [rbp+var_40], eax
    mov     eax, [rbp+var_40]
    mov     edx, eax
    mov     eax, [rbp+var_3C]
    cdqe
    mov     [rbp+rax*2+var_30], dx
    add     [rbp+var_3C], 1
    
loc_FC1A:
    cmp     [rbp+var_3C], 0Fh
    jle     short loc_FBE4
    mov     [rbp+var_38], 0
    jmp     short loc_FC96
    
loc_FC29:
    mov     eax, [rbp+var_38]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_48]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_34], eax
    cmp     [rbp+var_34], 0
    jz      short loc_FC91
    mov     eax, [rbp+var_34]
    cdqe
    movzx   eax, [rbp+rax*2+var_30]
    lea     ecx, [rax+1]
    mov     edx, [rbp+var_34]
    movsxd  rdx, edx
    mov     [rbp+rdx*2+var_30], cx
    movzx   eax, ax
    mov     edx, [rbp+var_34]
    mov     esi, edx
    mov     edi, eax
    call    bi_reverse
    mov     ecx, eax
    mov     eax, [rbp+var_38]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_48]
    add     rax, rdx
    mov     edx, ecx
    mov     [rax], dx
    jmp     short loc_FC92
    
loc_FC91:
    nop
    
loc_FC92:
    add     [rbp+var_38], 1
    
loc_FC96:
    mov     eax, [rbp+var_38]
    cmp     eax, [rbp+var_4C]
    jle     short loc_FC29
    nop
    mov     rax, [rbp+var_8]
    xor     rax, fs:28h
    jz      short locret_FCB3
    call    ___stack_chk_fail
    
locret_FCB3:
    leave
    retn
    

<build_tree>:
    
    var_40= qword ptr -40h
    var_38= qword ptr -38h
    var_24= dword ptr -24h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_38], rdi
    mov     [rbp+var_40], rsi
    mov     rax, [rbp+var_40]
    mov     rax, [rax]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_40]
    mov     rax, [rax+10h]
    mov     rax, [rax]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_40]
    mov     rax, [rax+10h]
    mov     eax, [rax+14h]
    mov     [rbp+var_18], eax
    mov     [rbp+var_20], 0FFFFFFFFh
    mov     rax, [rbp+var_38]
    mov     dword ptr [rax+14B4h], 0
    mov     rax, [rbp+var_38]
    mov     dword ptr [rax+14B8h], 23Dh
    mov     [rbp+var_24], 0
    jmp     loc_FDA4
    
loc_FD1C:
    mov     eax, [rbp+var_24]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    test    ax, ax
    jz      short loc_FD86
    mov     eax, [rbp+var_24]
    mov     [rbp+var_20], eax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B4h]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_38]
    mov     [rax+14B4h], edx
    mov     rax, [rbp+var_38]
    mov     edx, [rax+14B4h]
    mov     rax, [rbp+var_38]
    movsxd  rdx, edx
    lea     rcx, [rdx+2F0h]
    mov     edx, [rbp+var_20]
    mov     [rax+rcx*4], edx
    mov     rdx, [rbp+var_38]
    mov     eax, [rbp+var_24]
    cdqe
    mov     byte ptr [rdx+rax+14BCh], 0
    jmp     short loc_FDA0
    
loc_FD86:
    mov     eax, [rbp+var_24]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rdx
    mov     word ptr [rax+2], 0
    
loc_FDA0:
    add     [rbp+var_24], 1
    
loc_FDA4:
    mov     eax, [rbp+var_24]
    cmp     eax, [rbp+var_18]
    jl      loc_FD1C
    jmp     loc_FE8C
    
loc_FDB5:
    cmp     [rbp+var_20], 1
    jg      short loc_FDC4
    add     [rbp+var_20], 1
    mov     edx, [rbp+var_20]
    jmp     short loc_FDC9
    
loc_FDC4:
    mov     edx, 0
    
loc_FDC9:
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B4h]
    lea     ecx, [rax+1]
    mov     rax, [rbp+var_38]
    mov     [rax+14B4h], ecx
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B4h]
    mov     rcx, [rbp+var_38]
    movsxd  rsi, eax
    add     rsi, 2F0h
    mov     [rcx+rsi*4], edx
    mov     rdx, [rbp+var_38]
    cdqe
    add     rax, 2F0h
    mov     eax, [rdx+rax*4]
    mov     [rbp+var_1C], eax
    mov     eax, [rbp+var_1C]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rdx
    mov     word ptr [rax], 1
    mov     rdx, [rbp+var_38]
    mov     eax, [rbp+var_1C]
    cdqe
    mov     byte ptr [rdx+rax+14BCh], 0
    mov     rax, [rbp+var_38]
    mov     rax, [rax+1718h]
    lea     rdx, [rax-1]
    mov     rax, [rbp+var_38]
    mov     [rax+1718h], rdx
    cmp     [rbp+var_8], 0
    jz      short loc_FE8C
    mov     rax, [rbp+var_38]
    mov     rdx, [rax+1720h]
    mov     eax, [rbp+var_1C]
    cdqe
    lea     rcx, ds:0[rax*4]
    mov     rax, [rbp+var_8]
    add     rax, rcx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    sub     rdx, rax
    mov     rax, [rbp+var_38]
    mov     [rax+1720h], rdx
    
loc_FE8C:
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B4h]
    cmp     eax, 1
    jle     loc_FDB5
    mov     rax, [rbp+var_40]
    mov     edx, [rbp+var_20]
    mov     [rax+8], edx
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B4h]
    mov     edx, eax
    shr     edx, 1Fh
    add     eax, edx
    sar     eax, 1
    mov     [rbp+var_24], eax
    jmp     short loc_FEDB
    
loc_FEC1:
    mov     edx, [rbp+var_24]
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_38]
    mov     rsi, rcx
    mov     rdi, rax
    call    pqdownheap
    sub     [rbp+var_24], 1
    
loc_FEDB:
    cmp     [rbp+var_24], 0
    jg      short loc_FEC1
    mov     eax, [rbp+var_18]
    mov     [rbp+var_1C], eax
    
loc_FEE7:
    mov     rax, [rbp+var_38]
    mov     eax, [rax+0BC4h]
    mov     [rbp+var_24], eax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B4h]
    lea     ecx, [rax-1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+14B4h], ecx
    mov     rdx, [rbp+var_38]
    cdqe
    add     rax, 2F0h
    mov     edx, [rdx+rax*4]
    mov     rax, [rbp+var_38]
    mov     [rax+0BC4h], edx
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_38]
    mov     edx, 1
    mov     rsi, rcx
    mov     rdi, rax
    call    pqdownheap
    mov     rax, [rbp+var_38]
    mov     eax, [rax+0BC4h]
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B8h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_38]
    mov     [rax+14B8h], edx
    mov     rax, [rbp+var_38]
    mov     edx, [rax+14B8h]
    mov     rax, [rbp+var_38]
    movsxd  rdx, edx
    lea     rcx, [rdx+2F0h]
    mov     edx, [rbp+var_24]
    mov     [rax+rcx*4], edx
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B8h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_38]
    mov     [rax+14B8h], edx
    mov     rax, [rbp+var_38]
    mov     edx, [rax+14B8h]
    mov     rax, [rbp+var_38]
    movsxd  rdx, edx
    lea     rcx, [rdx+2F0h]
    mov     edx, [rbp+var_14]
    mov     [rax+rcx*4], edx
    mov     eax, [rbp+var_24]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rdx
    movzx   ecx, word ptr [rax]
    mov     eax, [rbp+var_14]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rdx
    movzx   edx, word ptr [rax]
    mov     eax, [rbp+var_1C]
    cdqe
    lea     rsi, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rsi
    add     edx, ecx
    mov     [rax], dx
    mov     rdx, [rbp+var_38]
    mov     eax, [rbp+var_24]
    cdqe
    movzx   ecx, byte ptr [rdx+rax+14BCh]
    mov     rdx, [rbp+var_38]
    mov     eax, [rbp+var_14]
    cdqe
    movzx   eax, byte ptr [rdx+rax+14BCh]
    cmp     cl, al
    jb      short loc_10036
    mov     rdx, [rbp+var_38]
    mov     eax, [rbp+var_24]
    cdqe
    movzx   eax, byte ptr [rdx+rax+14BCh]
    add     eax, 1
    jmp     short loc_1004A
    
loc_10036:
    mov     rdx, [rbp+var_38]
    mov     eax, [rbp+var_14]
    cdqe
    movzx   eax, byte ptr [rdx+rax+14BCh]
    add     eax, 1
    
loc_1004A:
    mov     rcx, [rbp+var_38]
    mov     edx, [rbp+var_1C]
    movsxd  rdx, edx
    mov     [rcx+rdx+14BCh], al
    mov     eax, [rbp+var_14]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_10]
    add     rax, rdx
    mov     edx, [rbp+var_1C]
    mov     [rax+2], dx
    mov     edx, [rbp+var_24]
    movsxd  rdx, edx
    lea     rcx, ds:0[rdx*4]
    mov     rdx, [rbp+var_10]
    add     rdx, rcx
    movzx   eax, word ptr [rax+2]
    mov     [rdx+2], ax
    mov     eax, [rbp+var_1C]
    lea     edx, [rax+1]
    mov     [rbp+var_1C], edx
    mov     rdx, [rbp+var_38]
    mov     [rdx+0BC4h], eax
    mov     rcx, [rbp+var_10]
    mov     rax, [rbp+var_38]
    mov     edx, 1
    mov     rsi, rcx
    mov     rdi, rax
    call    pqdownheap
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B4h]
    cmp     eax, 1
    jg      loc_FEE7
    mov     rax, [rbp+var_38]
    mov     eax, [rax+14B8h]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_38]
    mov     [rax+14B8h], edx
    mov     rax, [rbp+var_38]
    mov     ecx, [rax+14B8h]
    mov     rax, [rbp+var_38]
    mov     edx, [rax+0BC4h]
    mov     rax, [rbp+var_38]
    movsxd  rcx, ecx
    add     rcx, 2F0h
    mov     [rax+rcx*4], edx
    mov     rdx, [rbp+var_40]
    mov     rax, [rbp+var_38]
    mov     rsi, rdx
    mov     rdi, rax
    call    gen_bitlen
    mov     rax, [rbp+var_38]
    lea     rdx, [rax+0BA0h]
    mov     ecx, [rbp+var_20]
    mov     rax, [rbp+var_10]
    mov     esi, ecx
    mov     rdi, rax
    call    gen_codes
    nop
    leave
    retn
    

<scan_tree>:
    
    var_34= dword ptr -34h
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    var_14= dword ptr -14h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_28], rdi
    mov     [rbp+var_30], rsi
    mov     [rbp+var_34], edx
    mov     [rbp+var_18], 0FFFFFFFFh
    mov     rax, [rbp+var_30]
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_14], eax
    mov     [rbp+var_10], 0
    mov     [rbp+var_C], 7
    mov     [rbp+var_8], 4
    cmp     [rbp+var_14], 0
    jnz     short loc_1018C
    mov     [rbp+var_C], 8Ah
    mov     [rbp+var_8], 3
    
loc_1018C:
    mov     eax, [rbp+var_34]
    cdqe
    add     rax, 1
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_30]
    add     rax, rdx
    mov     word ptr [rax+2], 0FFFFh
    mov     [rbp+var_1C], 0
    jmp     loc_10317
    
loc_101B6:
    mov     eax, [rbp+var_14]
    mov     [rbp+var_4], eax
    mov     eax, [rbp+var_1C]
    cdqe
    add     rax, 1
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_30]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_14], eax
    add     [rbp+var_10], 1
    mov     eax, [rbp+var_10]
    cmp     eax, [rbp+var_C]
    jge     short loc_101F6
    mov     eax, [rbp+var_4]
    cmp     eax, [rbp+var_14]
    jz      loc_10312
    
loc_101F6:
    mov     eax, [rbp+var_10]
    cmp     eax, [rbp+var_8]
    jge     short loc_10235
    mov     rax, [rbp+var_28]
    mov     edx, [rbp+var_4]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Ch]
    mov     edx, [rbp+var_10]
    lea     ecx, [rax+rdx]
    mov     rax, [rbp+var_28]
    mov     edx, [rbp+var_4]
    movsxd  rdx, edx
    add     rdx, 2ACh
    mov     [rax+rdx*4+0Ch], cx
    jmp     loc_102C7
    
loc_10235:
    cmp     [rbp+var_4], 0
    jz      short loc_1028D
    mov     eax, [rbp+var_4]
    cmp     eax, [rbp+var_18]
    jz      short loc_10272
    mov     rax, [rbp+var_28]
    mov     edx, [rbp+var_4]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Ch]
    lea     ecx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     edx, [rbp+var_4]
    movsxd  rdx, edx
    add     rdx, 2ACh
    mov     [rax+rdx*4+0Ch], cx
    
loc_10272:
    mov     rax, [rbp+var_28]
    movzx   eax, word ptr [rax+0AFCh]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0AFCh], dx
    jmp     short loc_102C7
    
loc_1028D:
    cmp     [rbp+var_10], 0Ah
    jg      short loc_102AE
    mov     rax, [rbp+var_28]
    movzx   eax, word ptr [rax+0B00h]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0B00h], dx
    jmp     short loc_102C7
    
loc_102AE:
    mov     rax, [rbp+var_28]
    movzx   eax, word ptr [rax+0B04h]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_28]
    mov     [rax+0B04h], dx
    
loc_102C7:
    mov     [rbp+var_10], 0
    mov     eax, [rbp+var_4]
    mov     [rbp+var_18], eax
    cmp     [rbp+var_14], 0
    jnz     short loc_102EA
    mov     [rbp+var_C], 8Ah
    mov     [rbp+var_8], 3
    jmp     short loc_10313
    
loc_102EA:
    mov     eax, [rbp+var_4]
    cmp     eax, [rbp+var_14]
    jnz     short loc_10302
    mov     [rbp+var_C], 6
    mov     [rbp+var_8], 3
    jmp     short loc_10313
    
loc_10302:
    mov     [rbp+var_C], 7
    mov     [rbp+var_8], 4
    jmp     short loc_10313
    
loc_10312:
    nop
    
loc_10313:
    add     [rbp+var_1C], 1
    
loc_10317:
    mov     eax, [rbp+var_1C]
    cmp     eax, [rbp+var_34]
    jle     loc_101B6
    nop
    pop     rbp
    retn
    

<send_tree>:
    
    var_74= dword ptr -74h
    var_70= qword ptr -70h
    var_68= qword ptr -68h
    var_5C= dword ptr -5Ch
    var_58= dword ptr -58h
    var_54= dword ptr -54h
    var_50= dword ptr -50h
    var_4C= dword ptr -4Ch
    var_48= dword ptr -48h
    var_44= dword ptr -44h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    var_38= dword ptr -38h
    var_34= dword ptr -34h
    var_30= dword ptr -30h
    var_2C= dword ptr -2Ch
    var_28= dword ptr -28h
    var_24= dword ptr -24h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    var_14= dword ptr -14h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_68], rdi
    mov     [rbp+var_70], rsi
    mov     [rbp+var_74], edx
    mov     [rbp+var_58], 0FFFFFFFFh
    mov     rax, [rbp+var_70]
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_54], eax
    mov     [rbp+var_50], 0
    mov     [rbp+var_4C], 7
    mov     [rbp+var_48], 4
    cmp     [rbp+var_54], 0
    jnz     short loc_10373
    mov     [rbp+var_4C], 8Ah
    mov     [rbp+var_48], 3
    
loc_10373:
    mov     [rbp+var_5C], 0
    jmp     loc_10FC7
    
loc_1037F:
    mov     eax, [rbp+var_54]
    mov     [rbp+var_44], eax
    mov     eax, [rbp+var_5C]
    cdqe
    add     rax, 1
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_70]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_54], eax
    add     [rbp+var_50], 1
    mov     eax, [rbp+var_50]
    cmp     eax, [rbp+var_4C]
    jge     short loc_103BF
    mov     eax, [rbp+var_44]
    cmp     eax, [rbp+var_54]
    jz      loc_10FC2
    
loc_103BF:
    mov     eax, [rbp+var_50]
    cmp     eax, [rbp+var_48]
    jge     loc_1056C
    
loc_103CB:
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_44]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Eh]
    movzx   eax, ax
    mov     [rbp+var_8], eax
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_8]
    cmp     edx, eax
    jle     loc_104FB
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_44]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Ch]
    movzx   eax, ax
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_68]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_68]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_8]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     short loc_10559
    
loc_104FB:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_44]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Ch]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_8]
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    
loc_10559:
    sub     [rbp+var_50], 1
    cmp     [rbp+var_50], 0
    jnz     loc_103CB
    jmp     loc_10F77
    
loc_1056C:
    cmp     [rbp+var_44], 0
    jz      loc_109DF
    mov     eax, [rbp+var_44]
    cmp     eax, [rbp+var_58]
    jz      loc_10714
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_44]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Eh]
    movzx   eax, ax
    mov     [rbp+var_20], eax
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_20]
    cmp     edx, eax
    jle     loc_106B2
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_44]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Ch]
    movzx   eax, ax
    mov     [rbp+var_1C], eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_1C]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_68]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_68]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_1C]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_20]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     short loc_10710
    
loc_106B2:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     rax, [rbp+var_68]
    mov     edx, [rbp+var_44]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Ch]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_20]
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    
loc_10710:
    sub     [rbp+var_50], 1
    
loc_10714:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0AFEh]
    movzx   eax, ax
    mov     [rbp+var_18], eax
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_18]
    cmp     edx, eax
    jle     loc_1082E
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0AFCh]
    movzx   eax, ax
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_14]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_68]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_68]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_14]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_18]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     short loc_10881
    
loc_1082E:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0AFCh]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_18]
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    
loc_10881:
    mov     [rbp+var_10], 2
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_10]
    cmp     edx, eax
    jle     loc_1098C
    mov     eax, [rbp+var_50]
    sub     eax, 3
    mov     [rbp+var_C], eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_C]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_68]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_68]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_C]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_10]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     loc_10F77
    
loc_1098C:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_50]
    sub     eax, 3
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_10]
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     loc_10F77
    
loc_109DF:
    cmp     [rbp+var_50], 0Ah
    jg      loc_10CB4
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0B02h]
    movzx   eax, ax
    mov     [rbp+var_30], eax
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_30]
    cmp     edx, eax
    jle     loc_10B03
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0B00h]
    movzx   eax, ax
    mov     [rbp+var_2C], eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_2C]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_68]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_68]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_2C]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_30]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     short loc_10B56
    
loc_10B03:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0B00h]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_30]
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    
loc_10B56:
    mov     [rbp+var_28], 3
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_28]
    cmp     edx, eax
    jle     loc_10C61
    mov     eax, [rbp+var_50]
    sub     eax, 3
    mov     [rbp+var_24], eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_24]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_68]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_68]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_24]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_28]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     loc_10F77
    
loc_10C61:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_50]
    sub     eax, 3
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_28]
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     loc_10F77
    
loc_10CB4:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0B06h]
    movzx   eax, ax
    mov     [rbp+var_40], eax
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_40]
    cmp     edx, eax
    jle     loc_10DCE
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0B04h]
    movzx   eax, ax
    mov     [rbp+var_3C], eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_3C]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_68]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_68]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_3C]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_40]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     short loc_10E21
    
loc_10DCE:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+0B04h]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_40]
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    
loc_10E21:
    mov     [rbp+var_38], 7
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_38]
    cmp     edx, eax
    jle     loc_10F29
    mov     eax, [rbp+var_50]
    sub     eax, 0Bh
    mov     [rbp+var_34], eax
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_34]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_68]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_68]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_68]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_68]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_34]
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_38]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    jmp     short loc_10F77
    
loc_10F29:
    mov     rax, [rbp+var_68]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_50]
    sub     eax, 0Bh
    movzx   edx, ax
    mov     rax, [rbp+var_68]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_68]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_38]
    add     edx, eax
    mov     rax, [rbp+var_68]
    mov     [rax+1734h], edx
    
loc_10F77:
    mov     [rbp+var_50], 0
    mov     eax, [rbp+var_44]
    mov     [rbp+var_58], eax
    cmp     [rbp+var_54], 0
    jnz     short loc_10F9A
    mov     [rbp+var_4C], 8Ah
    mov     [rbp+var_48], 3
    jmp     short loc_10FC3
    
loc_10F9A:
    mov     eax, [rbp+var_44]
    cmp     eax, [rbp+var_54]
    jnz     short loc_10FB2
    mov     [rbp+var_4C], 6
    mov     [rbp+var_48], 3
    jmp     short loc_10FC3
    
loc_10FB2:
    mov     [rbp+var_4C], 7
    mov     [rbp+var_48], 4
    jmp     short loc_10FC3
    
loc_10FC2:
    nop
    
loc_10FC3:
    add     [rbp+var_5C], 1
    
loc_10FC7:
    mov     eax, [rbp+var_5C]
    cmp     eax, [rbp+var_74]
    jle     loc_1037F
    nop
    pop     rbp
    retn
    

<build_bl_tree>:
    
    var_18= qword ptr -18h
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     edx, [rax+0B60h]
    mov     rax, [rbp+var_18]
    lea     rcx, [rax+0D4h]
    mov     rax, [rbp+var_18]
    mov     rsi, rcx
    mov     rdi, rax
    call    scan_tree
    mov     rax, [rbp+var_18]
    mov     edx, [rax+0B78h]
    mov     rax, [rbp+var_18]
    lea     rcx, [rax+9C8h]
    mov     rax, [rbp+var_18]
    mov     rsi, rcx
    mov     rdi, rax
    call    scan_tree
    mov     rax, [rbp+var_18]
    lea     rdx, [rax+0B88h]
    mov     rax, [rbp+var_18]
    mov     rsi, rdx
    mov     rdi, rax
    call    build_tree
    mov     [rbp+var_4], 12h
    jmp     short loc_1107D
    
loc_1104D:
    mov     eax, [rbp+var_4]
    movsxd  rdx, eax
    lea     rax, bl_order
    movzx   eax, byte ptr [rdx+rax]
    movzx   edx, al
    mov     rax, [rbp+var_18]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Eh]
    test    ax, ax
    jnz     short loc_11085
    sub     [rbp+var_4], 1
    
loc_1107D:
    cmp     [rbp+var_4], 2
    jg      short loc_1104D
    jmp     short loc_11086
    
loc_11085:
    nop
    
loc_11086:
    mov     rax, [rbp+var_18]
    mov     rcx, [rax+1718h]
    mov     eax, [rbp+var_4]
    cdqe
    lea     rdx, [rax+1]
    mov     rax, rdx
    add     rax, rax
    add     rax, rdx
    add     rax, rcx
    lea     rdx, [rax+0Eh]
    mov     rax, [rbp+var_18]
    mov     [rax+1718h], rdx
    mov     eax, [rbp+var_4]
    leave
    retn
    

<send_all_trees>:
    
    var_44= dword ptr -44h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    var_38= qword ptr -38h
    var_24= dword ptr -24h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    var_14= dword ptr -14h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 48h
    mov     [rbp+var_38], rdi
    mov     [rbp+var_3C], esi
    mov     [rbp+var_40], edx
    mov     [rbp+var_44], ecx
    mov     [rbp+var_20], 5
    mov     rax, [rbp+var_38]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_20]
    cmp     edx, eax
    jle     loc_111D9
    mov     eax, [rbp+var_3C]
    sub     eax, 101h
    mov     [rbp+var_1C], eax
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_1C]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_38]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_38]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_1C]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_20]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1734h], edx
    jmp     short loc_11228
    
loc_111D9:
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_3C]
    sub     ax, 101h
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_20]
    add     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1734h], edx
    
loc_11228:
    mov     [rbp+var_18], 5
    mov     rax, [rbp+var_38]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_18]
    cmp     edx, eax
    jle     loc_11330
    mov     eax, [rbp+var_40]
    sub     eax, 1
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_14]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_38]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_38]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_14]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_18]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1734h], edx
    jmp     short loc_1137E
    
loc_11330:
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_40]
    sub     eax, 1
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_18]
    add     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1734h], edx
    
loc_1137E:
    mov     [rbp+var_10], 4
    mov     rax, [rbp+var_38]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_10]
    cmp     edx, eax
    jle     loc_11486
    mov     eax, [rbp+var_44]
    sub     eax, 4
    mov     [rbp+var_C], eax
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_C]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_38]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_38]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_C]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_10]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1734h], edx
    jmp     short loc_114D4
    
loc_11486:
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_44]
    sub     eax, 4
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_10]
    add     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1734h], edx
    
loc_114D4:
    mov     [rbp+var_24], 0
    jmp     loc_1167F
    
loc_114E0:
    mov     [rbp+var_8], 3
    mov     rax, [rbp+var_38]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_8]
    cmp     edx, eax
    jle     loc_1160C
    mov     eax, [rbp+var_24]
    movsxd  rdx, eax
    lea     rax, bl_order
    movzx   eax, byte ptr [rdx+rax]
    movzx   edx, al
    mov     rax, [rbp+var_38]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Eh]
    movzx   eax, ax
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_38]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_38]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_38]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_38]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_8]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1734h], edx
    jmp     short loc_1167B
    
loc_1160C:
    mov     rax, [rbp+var_38]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_24]
    movsxd  rdx, eax
    lea     rax, bl_order
    movzx   eax, byte ptr [rdx+rax]
    movzx   edx, al
    mov     rax, [rbp+var_38]
    movsxd  rdx, edx
    add     rdx, 2ACh
    movzx   eax, word ptr [rax+rdx*4+0Eh]
    movzx   edx, ax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_38]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_8]
    add     edx, eax
    mov     rax, [rbp+var_38]
    mov     [rax+1734h], edx
    
loc_1167B:
    add     [rbp+var_24], 1
    
loc_1167F:
    mov     eax, [rbp+var_24]
    cmp     eax, [rbp+var_44]
    jl      loc_114E0
    mov     eax, [rbp+var_3C]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_38]
    lea     rcx, [rax+0D4h]
    mov     rax, [rbp+var_38]
    mov     rsi, rcx
    mov     rdi, rax
    call    send_tree
    mov     eax, [rbp+var_40]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_38]
    lea     rcx, [rax+9C8h]
    mov     rax, [rbp+var_38]
    mov     rsi, rcx
    mov     rdi, rax
    call    send_tree
    nop
    leave
    retn
    

<_tr_stored_block>:
    
    var_2C= dword ptr -2Ch
    n= qword ptr -28h
    src= qword ptr -20h
    var_18= qword ptr -18h
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+src], rsi
    mov     [rbp+n], rdx
    mov     [rbp+var_2C], ecx
    mov     [rbp+var_8], 3
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_8]
    cmp     edx, eax
    jle     loc_117EA
    mov     eax, [rbp+var_2C]
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_18]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_8]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1734h], edx
    jmp     short loc_11835
    
loc_117EA:
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_2C]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_8]
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1734h], edx
    
loc_11835:
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    bi_windup
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     rdx, [rbp+n]
    mov     [rax], dl
    mov     rax, [rbp+n]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+n]
    mov     edi, eax
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rsi
    not     edi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+n]
    not     eax
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rdx+rax]
    mov     rdx, [rbp+n]
    mov     rax, [rbp+src]
    mov     rsi, rax
    mov     rdi, rcx
    call    _memcpy
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+28h]
    mov     rax, [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+28h], rdx
    nop
    leave
    retn
    

<_tr_flush_bits>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    bi_flush
    nop
    leave
    retn
    

<_tr_align>:
    
    var_18= qword ptr -18h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_10], 3
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_10]
    cmp     edx, eax
    jle     loc_11A5B
    mov     [rbp+var_C], 2
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_C]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_18]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_C]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_10]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1734h], edx
    jmp     short loc_11AA5
    
loc_11A5B:
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     esi, 2
    mov     ecx, eax
    shl     esi, cl
    mov     eax, esi
    or      eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_10]
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1734h], edx
    
loc_11AA5:
    mov     eax, 7
    movzx   eax, ax
    mov     [rbp+var_8], eax
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_8]
    cmp     edx, eax
    jle     loc_11BB3
    mov     eax, 0
    movzx   eax, ax
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_18]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_8]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1734h], edx
    jmp     short loc_11C00
    
loc_11BB3:
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, 0
    movzx   edx, ax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_18]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_8]
    add     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax+1734h], edx
    
loc_11C00:
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    bi_flush
    nop
    leave
    retn
    

<_tr_flush_block>:
    
    var_5C= dword ptr -5Ch
    var_58= qword ptr -58h
    var_50= qword ptr -50h
    var_48= qword ptr -48h
    var_34= dword ptr -34h
    var_30= dword ptr -30h
    var_2C= dword ptr -2Ch
    var_28= dword ptr -28h
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    
    
    push    rbp
    mov     rbp, rsp
    push    rbx
    sub     rsp, 58h
    mov     [rbp+var_48], rdi
    mov     [rbp+var_50], rsi
    mov     [rbp+var_58], rdx
    mov     [rbp+var_5C], ecx
    mov     [rbp+var_34], 0
    mov     rax, [rbp+var_48]
    mov     eax, [rax+0C4h]
    test    eax, eax
    jle     loc_11CEA
    mov     rax, [rbp+var_48]
    mov     rax, [rax]
    mov     eax, [rax+58h]
    cmp     eax, 2
    jnz     short loc_11C65
    mov     rax, [rbp+var_48]
    mov     rbx, [rax]
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    detect_data_type
    mov     [rbx+58h], eax
    
loc_11C65:
    mov     rax, [rbp+var_48]
    lea     rdx, [rax+0B58h]
    mov     rax, [rbp+var_48]
    mov     rsi, rdx
    mov     rdi, rax
    call    build_tree
    mov     rax, [rbp+var_48]
    lea     rdx, [rax+0B70h]
    mov     rax, [rbp+var_48]
    mov     rsi, rdx
    mov     rdi, rax
    call    build_tree
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    build_bl_tree
    mov     [rbp+var_34], eax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+1718h]
    add     rax, 0Ah
    shr     rax, 3
    mov     [rbp+var_20], rax
    mov     rax, [rbp+var_48]
    mov     rax, [rax+1720h]
    add     rax, 0Ah
    shr     rax, 3
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    cmp     rax, [rbp+var_20]
    ja      short loc_11CFE
    mov     rax, [rbp+var_18]
    mov     [rbp+var_20], rax
    jmp     short loc_11CFE
    
loc_11CEA:
    mov     rax, [rbp+var_58]
    add     rax, 5
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    mov     [rbp+var_20], rax
    
loc_11CFE:
    mov     rax, [rbp+var_58]
    add     rax, 4
    cmp     [rbp+var_20], rax
    jb      short loc_11D2F
    cmp     [rbp+var_50], 0
    jz      short loc_11D2F
    mov     ecx, [rbp+var_5C]
    mov     rdx, [rbp+var_58]
    mov     rsi, [rbp+var_50]
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    _tr_stored_block
    jmp     loc_12068
    
loc_11D2F:
    mov     rax, [rbp+var_48]
    mov     eax, [rax+0C8h]
    cmp     eax, 4
    jz      short loc_11D4C
    mov     rax, [rbp+var_18]
    cmp     rax, [rbp+var_20]
    jnz     loc_11EC1
    
loc_11D4C:
    mov     [rbp+var_28], 3
    mov     rax, [rbp+var_48]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_28]
    cmp     edx, eax
    jle     loc_11E54
    mov     eax, [rbp+var_5C]
    add     eax, 2
    mov     [rbp+var_24], eax
    mov     rax, [rbp+var_48]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_24]
    movzx   edx, ax
    mov     rax, [rbp+var_48]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_48]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_48]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_48]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_48]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_48]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_48]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_48]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_24]
    movzx   edx, ax
    mov     rax, [rbp+var_48]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_48]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_28]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1734h], edx
    jmp     short loc_11EA2
    
loc_11E54:
    mov     rax, [rbp+var_48]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_5C]
    add     eax, 2
    movzx   edx, ax
    mov     rax, [rbp+var_48]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_48]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_28]
    add     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1734h], edx
    
loc_11EA2:
    mov     rax, [rbp+var_48]
    lea     rdx, static_dtree
    lea     rsi, static_ltree
    mov     rdi, rax
    call    compress_block
    jmp     loc_12068
    
loc_11EC1:
    mov     [rbp+var_30], 3
    mov     rax, [rbp+var_48]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_30]
    cmp     edx, eax
    jle     loc_11FC9
    mov     eax, [rbp+var_5C]
    add     eax, 4
    mov     [rbp+var_2C], eax
    mov     rax, [rbp+var_48]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_2C]
    movzx   edx, ax
    mov     rax, [rbp+var_48]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_48]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_48]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_48]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_48]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_48]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_48]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_48]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_48]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_2C]
    movzx   edx, ax
    mov     rax, [rbp+var_48]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_48]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_30]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1734h], edx
    jmp     short loc_12017
    
loc_11FC9:
    mov     rax, [rbp+var_48]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_5C]
    add     eax, 4
    movzx   edx, ax
    mov     rax, [rbp+var_48]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_48]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_30]
    add     edx, eax
    mov     rax, [rbp+var_48]
    mov     [rax+1734h], edx
    
loc_12017:
    mov     eax, [rbp+var_34]
    lea     ecx, [rax+1]
    mov     rax, [rbp+var_48]
    mov     eax, [rax+0B78h]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_48]
    mov     eax, [rax+0B60h]
    lea     esi, [rax+1]
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    send_all_trees
    mov     rax, [rbp+var_48]
    lea     rdx, [rax+9C8h]
    mov     rax, [rbp+var_48]
    lea     rcx, [rax+0D4h]
    mov     rax, [rbp+var_48]
    mov     rsi, rcx
    mov     rdi, rax
    call    compress_block
    
loc_12068:
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    init_block
    cmp     [rbp+var_5C], 0
    jz      short loc_12086
    mov     rax, [rbp+var_48]
    mov     rdi, rax
    call    bi_windup
    
loc_12086:
    nop
    add     rsp, 58h
    pop     rbx
    pop     rbp
    retn
    

<_tr_tally>:
    
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_8], rdi
    mov     [rbp+var_C], esi
    mov     [rbp+var_10], edx
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+1710h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+170Ch]
    mov     eax, eax
    add     rax, rax
    add     rax, rdx
    mov     edx, [rbp+var_C]
    mov     [rax], dx
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+1700h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+170Ch]
    lea     ecx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+170Ch], ecx
    mov     eax, eax
    add     rax, rsi
    mov     edx, [rbp+var_10]
    mov     [rax], dl
    cmp     [rbp+var_C], 0
    jnz     short loc_12119
    mov     rax, [rbp+var_8]
    mov     edx, [rbp+var_10]
    add     rdx, 34h
    movzx   eax, word ptr [rax+rdx*4+4]
    lea     ecx, [rax+1]
    mov     rax, [rbp+var_8]
    mov     edx, [rbp+var_10]
    add     rdx, 34h
    mov     [rax+rdx*4+4], cx
    jmp     loc_121CA
    
loc_12119:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1728h]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_8]
    mov     [rax+1728h], edx
    sub     [rbp+var_C], 1
    mov     edx, [rbp+var_10]
    lea     rax, _length_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    add     eax, 101h
    mov     rdx, [rbp+var_8]
    movsxd  rcx, eax
    add     rcx, 34h
    movzx   edx, word ptr [rdx+rcx*4+4]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_8]
    cdqe
    add     rax, 34h
    mov     [rdx+rax*4+4], cx
    cmp     [rbp+var_C], 0FFh
    ja      short loc_12188
    mov     edx, [rbp+var_C]
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    jmp     short loc_121A3
    
loc_12188:
    mov     eax, [rbp+var_C]
    shr     eax, 7
    add     eax, 100h
    mov     edx, eax
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    
loc_121A3:
    mov     rdx, [rbp+var_8]
    movsxd  rcx, eax
    add     rcx, 270h
    movzx   edx, word ptr [rdx+rcx*4+8]
    lea     ecx, [rdx+1]
    mov     rdx, [rbp+var_8]
    cdqe
    add     rax, 270h
    mov     [rdx+rax*4+8], cx
    
loc_121CA:
    mov     rax, [rbp+var_8]
    mov     edx, [rax+170Ch]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1708h]
    sub     eax, 1
    cmp     edx, eax
    setz    al
    movzx   eax, al
    pop     rbp
    retn
    

<compress_block>:
    
    var_68= qword ptr -68h
    var_60= qword ptr -60h
    var_58= qword ptr -58h
    var_44= dword ptr -44h
    var_40= dword ptr -40h
    var_3C= dword ptr -3Ch
    var_38= dword ptr -38h
    var_34= dword ptr -34h
    var_30= dword ptr -30h
    var_2C= dword ptr -2Ch
    var_28= dword ptr -28h
    var_24= dword ptr -24h
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    var_14= dword ptr -14h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= dword ptr -8
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_58], rdi
    mov     [rbp+var_60], rsi
    mov     [rbp+var_68], rdx
    mov     [rbp+var_44], 0
    mov     rax, [rbp+var_58]
    mov     eax, [rax+170Ch]
    test    eax, eax
    jz      loc_12A9E
    
loc_12214:
    mov     rax, [rbp+var_58]
    mov     rax, [rax+1710h]
    mov     edx, [rbp+var_44]
    add     rdx, rdx
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_40], eax
    mov     rax, [rbp+var_58]
    mov     rcx, [rax+1700h]
    mov     eax, [rbp+var_44]
    lea     edx, [rax+1]
    mov     [rbp+var_44], edx
    mov     eax, eax
    add     rax, rcx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    mov     [rbp+var_3C], eax
    cmp     [rbp+var_40], 0
    jnz     loc_123F7
    mov     eax, [rbp+var_3C]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_60]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_10], eax
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_10]
    cmp     edx, eax
    jle     loc_12393
    mov     eax, [rbp+var_3C]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_60]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_C], eax
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_C]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_58]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_58]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_C]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_10]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    jmp     loc_12A8B
    
loc_12393:
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_3C]
    cdqe
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_60]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_10]
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    jmp     loc_12A8B
    
loc_123F7:
    mov     eax, [rbp+var_3C]
    movsxd  rdx, eax
    lea     rax, _length_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    mov     [rbp+var_38], eax
    mov     eax, [rbp+var_38]
    add     eax, 101h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_60]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_34], eax
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_34]
    cmp     edx, eax
    jle     loc_1254B
    mov     eax, [rbp+var_38]
    add     eax, 101h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_60]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_30], eax
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_30]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_58]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_58]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_30]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_34]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    jmp     short loc_125AF
    
loc_1254B:
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_38]
    add     eax, 101h
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_60]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_34]
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    
loc_125AF:
    mov     eax, [rbp+var_38]
    lea     rdx, ds:0[rax*4]
    lea     rax, extra_lbits
    mov     eax, [rdx+rax]
    mov     [rbp+var_2C], eax
    cmp     [rbp+var_2C], 0
    jz      loc_12738
    mov     eax, [rbp+var_38]
    lea     rdx, ds:0[rax*4]
    lea     rax, base_length
    mov     eax, [rdx+rax]
    sub     [rbp+var_3C], eax
    mov     eax, [rbp+var_2C]
    mov     [rbp+var_28], eax
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_28]
    cmp     edx, eax
    jle     loc_126ED
    mov     eax, [rbp+var_3C]
    mov     [rbp+var_24], eax
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_24]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_58]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_58]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_24]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_28]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    jmp     short loc_12738
    
loc_126ED:
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_3C]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_28]
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    
loc_12738:
    sub     [rbp+var_40], 1
    cmp     [rbp+var_40], 0FFh
    ja      short loc_12758
    mov     edx, [rbp+var_40]
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    jmp     short loc_12773
    
loc_12758:
    mov     eax, [rbp+var_40]
    shr     eax, 7
    add     eax, 100h
    mov     edx, eax
    lea     rax, _dist_code
    movzx   eax, byte ptr [rdx+rax]
    movzx   eax, al
    
loc_12773:
    mov     [rbp+var_38], eax
    mov     eax, [rbp+var_38]
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_68]
    add     rax, rdx
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_20], eax
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_20]
    cmp     edx, eax
    jle     loc_128A5
    mov     eax, [rbp+var_38]
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_68]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_1C], eax
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_1C]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_58]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_58]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_1C]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_20]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    jmp     short loc_12902
    
loc_128A5:
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_38]
    lea     rdx, ds:0[rax*4]
    mov     rax, [rbp+var_68]
    add     rax, rdx
    movzx   eax, word ptr [rax]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_20]
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    
loc_12902:
    mov     eax, [rbp+var_38]
    lea     rdx, ds:0[rax*4]
    lea     rax, extra_dbits
    mov     eax, [rdx+rax]
    mov     [rbp+var_2C], eax
    cmp     [rbp+var_2C], 0
    jz      loc_12A8B
    mov     eax, [rbp+var_38]
    lea     rdx, ds:0[rax*4]
    lea     rax, base_dist
    mov     eax, [rdx+rax]
    sub     [rbp+var_40], eax
    mov     eax, [rbp+var_2C]
    mov     [rbp+var_18], eax
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_18]
    cmp     edx, eax
    jle     loc_12A40
    mov     eax, [rbp+var_40]
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_14]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_58]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_58]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_14]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_18]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    jmp     short loc_12A8B
    
loc_12A40:
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_40]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_18]
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    
loc_12A8B:
    mov     rax, [rbp+var_58]
    mov     eax, [rax+170Ch]
    cmp     [rbp+var_44], eax
    jb      loc_12214
    
loc_12A9E:
    mov     rax, [rbp+var_60]
    add     rax, 400h
    movzx   eax, word ptr [rax+2]
    movzx   eax, ax
    mov     [rbp+var_8], eax
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, 10h
    sub     eax, [rbp+var_8]
    cmp     edx, eax
    jle     loc_12BBD
    mov     rax, [rbp+var_60]
    add     rax, 400h
    movzx   eax, word ptr [rax]
    movzx   eax, ax
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_58]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_58]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_58]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_58]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     eax, [rbp+var_4]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, 10h
    sub     ecx, eax
    mov     eax, ecx
    mov     ecx, eax
    sar     edx, cl
    mov     eax, edx
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     edx, [rbp+var_8]
    sub     edx, 10h
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    jmp     short loc_12C12
    
loc_12BBD:
    mov     rax, [rbp+var_58]
    movzx   eax, word ptr [rax+1730h]
    mov     esi, eax
    mov     rax, [rbp+var_60]
    add     rax, 400h
    movzx   eax, word ptr [rax]
    movzx   edx, ax
    mov     rax, [rbp+var_58]
    mov     eax, [rax+1734h]
    mov     ecx, eax
    shl     edx, cl
    mov     eax, edx
    or      eax, esi
    mov     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_58]
    mov     edx, [rax+1734h]
    mov     eax, [rbp+var_8]
    add     edx, eax
    mov     rax, [rbp+var_58]
    mov     [rax+1734h], edx
    
loc_12C12:
    nop
    pop     rbp
    retn
    

<detect_data_type>:
    
    var_18= qword ptr -18h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    mov     eax, 0F3FFC07Fh
    mov     [rbp+var_8], rax
    mov     [rbp+var_C], 0
    jmp     short loc_12C62
    
loc_12C2F:
    mov     rax, [rbp+var_8]
    and     eax, 1
    test    rax, rax
    jz      short loc_12C5A
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_C]
    movsxd  rdx, edx
    add     rdx, 34h
    movzx   eax, word ptr [rax+rdx*4+4]
    test    ax, ax
    jz      short loc_12C5A
    mov     eax, 0
    jmp     short loc_12CD9
    
loc_12C5A:
    add     [rbp+var_C], 1
    shr     [rbp+var_8], 1
    
loc_12C62:
    cmp     [rbp+var_C], 1Fh
    jle     short loc_12C2F
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+0F8h]
    test    ax, ax
    jnz     short loc_12C98
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+0FCh]
    test    ax, ax
    jnz     short loc_12C98
    mov     rax, [rbp+var_18]
    movzx   eax, word ptr [rax+108h]
    test    ax, ax
    jz      short loc_12C9F
    
loc_12C98:
    mov     eax, 1
    jmp     short loc_12CD9
    
loc_12C9F:
    mov     [rbp+var_C], 20h
    jmp     short loc_12CCB
    
loc_12CA8:
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_C]
    movsxd  rdx, edx
    add     rdx, 34h
    movzx   eax, word ptr [rax+rdx*4+4]
    test    ax, ax
    jz      short loc_12CC7
    mov     eax, 1
    jmp     short loc_12CD9
    
loc_12CC7:
    add     [rbp+var_C], 1
    
loc_12CCB:
    cmp     [rbp+var_C], 0FFh
    jle     short loc_12CA8
    mov     eax, 0
    
loc_12CD9:
    pop     rbp
    retn
    

<bi_reverse>:
    
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    
    
    push    rbp
    mov     rbp, rsp
    push    rbx
    mov     [rbp+var_C], edi
    mov     [rbp+var_10], esi
    mov     ebx, 0
    
loc_12CEB:
    mov     eax, [rbp+var_C]
    and     eax, 1
    or      ebx, eax
    shr     [rbp+var_C], 1
    add     ebx, ebx
    sub     [rbp+var_10], 1
    cmp     [rbp+var_10], 0
    jg      short loc_12CEB
    mov     eax, ebx
    shr     eax, 1
    pop     rbx
    pop     rbp
    retn
    

<bi_flush>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1734h]
    cmp     eax, 10h
    jnz     short loc_12D9F
    mov     rax, [rbp+var_8]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     word ptr [rax+1730h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+1734h], 0
    jmp     short loc_12E0F
    
loc_12D9F:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1734h]
    cmp     eax, 7
    jle     short loc_12E0F
    mov     rax, [rbp+var_8]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+1730h], dx
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1734h]
    lea     edx, [rax-8]
    mov     rax, [rbp+var_8]
    mov     [rax+1734h], edx
    
loc_12E0F:
    nop
    pop     rbp
    retn
    

<bi_windup>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1734h]
    cmp     eax, 8
    jle     short loc_12E8D
    mov     rax, [rbp+var_8]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    movzx   eax, word ptr [rax+1730h]
    shr     ax, 8
    mov     edi, eax
    mov     rax, [rbp+var_8]
    mov     rsi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rsi
    mov     edx, edi
    mov     [rax], dl
    jmp     short loc_12EC9
    
loc_12E8D:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1734h]
    test    eax, eax
    jle     short loc_12EC9
    mov     rax, [rbp+var_8]
    movzx   esi, word ptr [rax+1730h]
    mov     rax, [rbp+var_8]
    mov     rdi, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+28h]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_8]
    mov     [rdx+28h], rcx
    add     rax, rdi
    mov     edx, esi
    mov     [rax], dl
    
loc_12EC9:
    mov     rax, [rbp+var_8]
    mov     word ptr [rax+1730h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+1734h], 0
    nop
    pop     rbp
    retn
    

<zlibVersion>:
    
    push    rbp
    mov     rbp, rsp
    lea     rax, a1211
    pop     rbp
    retn
    

<zlibCompileFlags>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_8], 0
    add     [rbp+var_8], 1
    nop
    add     [rbp+var_8], 8
    nop
    add     [rbp+var_8], 20h
    nop
    sub     [rbp+var_8], 0FFFFFFFFFFFFFF80h
    nop
    mov     rax, [rbp+var_8]
    pop     rbp
    retn
    

<zError>:
    
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_4], edi
    mov     eax, 2
    sub     eax, [rbp+var_4]
    mov     edx, eax
    lea     rax, z_errmsg
    movsxd  rdx, edx
    mov     rax, [rax+rdx*8]
    pop     rbp
    retn
    

<zcalloc>:
    
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_C], esi
    mov     [rbp+var_10], edx
    mov     eax, [rbp+var_C]
    imul    eax, [rbp+var_10]
    mov     eax, eax
    mov     rdi, rax
    call    _malloc
    leave
    retn
    

<zcfree>:
    
    ptr= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     [rbp+ptr], rsi
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    _free
    nop
    leave
    retn
    

<compress2>:
    
    var_B4= dword ptr -0B4h
    var_B0= qword ptr -0B0h
    var_A8= qword ptr -0A8h
    var_A0= qword ptr -0A0h
    var_98= qword ptr -98h
    var_90= dword ptr -90h
    var_8C= dword ptr -8Ch
    var_88= qword ptr -88h
    var_80= qword ptr -80h
    var_78= dword ptr -78h
    var_68= qword ptr -68h
    var_60= dword ptr -60h
    var_58= qword ptr -58h
    var_40= qword ptr -40h
    var_38= qword ptr -38h
    var_30= qword ptr -30h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 0C0h
    mov     [rbp+var_98], rdi
    mov     [rbp+var_A0], rsi
    mov     [rbp+var_A8], rdx
    mov     [rbp+var_B0], rcx
    mov     [rbp+var_B4], r8d
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    mov     [rbp+var_90], 0FFFFFFFFh
    mov     rax, [rbp+var_A0]
    mov     rax, [rax]
    mov     [rbp+var_88], rax
    mov     rax, [rbp+var_A0]
    mov     qword ptr [rax], 0
    mov     [rbp+var_40], 0
    mov     [rbp+var_38], 0
    mov     [rbp+var_30], 0
    mov     esi, [rbp+var_B4]
    lea     rax, [rbp+var_80]
    mov     ecx, 70h
    lea     rdx, a1211_0
    mov     rdi, rax
    call    _deflateInit_
    mov     [rbp+var_8C], eax
    cmp     [rbp+var_8C], 0
    jz      short loc_13039
    mov     eax, [rbp+var_8C]
    jmp     loc_1312C
    
loc_13039:
    mov     rax, [rbp+var_98]
    mov     [rbp+var_68], rax
    mov     [rbp+var_60], 0
    mov     rax, [rbp+var_A8]
    mov     [rbp+var_80], rax
    mov     [rbp+var_78], 0
    
loc_1305D:
    mov     eax, [rbp+var_60]
    test    eax, eax
    jnz     short loc_13091
    mov     eax, [rbp+var_90]
    cmp     [rbp+var_88], rax
    ja      short loc_1307C
    mov     rax, [rbp+var_88]
    jmp     short loc_13082
    
loc_1307C:
    mov     eax, [rbp+var_90]
    
loc_13082:
    mov     [rbp+var_60], eax
    mov     eax, [rbp+var_60]
    mov     eax, eax
    sub     [rbp+var_88], rax
    
loc_13091:
    mov     eax, [rbp+var_78]
    test    eax, eax
    jnz     short loc_130C5
    mov     eax, [rbp+var_90]
    cmp     [rbp+var_B0], rax
    ja      short loc_130B0
    mov     rax, [rbp+var_B0]
    jmp     short loc_130B6
    
loc_130B0:
    mov     eax, [rbp+var_90]
    
loc_130B6:
    mov     [rbp+var_78], eax
    mov     eax, [rbp+var_78]
    mov     eax, eax
    sub     [rbp+var_B0], rax
    
loc_130C5:
    cmp     [rbp+var_B0], 0
    jz      short loc_130D6
    mov     edx, 0
    jmp     short loc_130DB
    
loc_130D6:
    mov     edx, 4
    
loc_130DB:
    lea     rax, [rbp+var_80]
    mov     esi, edx
    mov     rdi, rax
    call    _deflate
    mov     [rbp+var_8C], eax
    cmp     [rbp+var_8C], 0
    jz      loc_1305D
    mov     rdx, [rbp+var_58]
    mov     rax, [rbp+var_A0]
    mov     [rax], rdx
    lea     rax, [rbp+var_80]
    mov     rdi, rax
    call    _deflateEnd
    cmp     [rbp+var_8C], 1
    jz      short loc_13127
    mov     eax, [rbp+var_8C]
    jmp     short loc_1312C
    
loc_13127:
    mov     eax, 0
    
loc_1312C:
    mov     rcx, [rbp+var_8]
    xor     rcx, fs:28h
    jz      short locret_13140
    call    ___stack_chk_fail
    
locret_13140:
    leave
    retn
    

<compress>:
    
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_18], rdx
    mov     [rbp+var_20], rcx
    mov     rcx, [rbp+var_20]
    mov     rdx, [rbp+var_18]
    mov     rsi, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     r8d, 0FFFFFFFFh
    mov     rdi, rax
    call    _compress2
    leave
    retn
    

<compressBound>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    shr     rax, 0Ch
    mov     rdx, rax
    mov     rax, [rbp+var_8]
    add     rdx, rax
    mov     rax, [rbp+var_8]
    shr     rax, 0Eh
    add     rdx, rax
    mov     rax, [rbp+var_8]
    shr     rax, 19h
    add     rax, rdx
    add     rax, 0Dh
    pop     rbp
    retn
    

<uncompress2>:
    
    var_C0= qword ptr -0C0h
    var_B8= qword ptr -0B8h
    var_B0= qword ptr -0B0h
    var_A8= qword ptr -0A8h
    var_98= dword ptr -98h
    var_94= dword ptr -94h
    var_90= qword ptr -90h
    var_88= qword ptr -88h
    var_80= qword ptr -80h
    var_78= dword ptr -78h
    var_68= qword ptr -68h
    var_60= dword ptr -60h
    var_58= qword ptr -58h
    var_40= qword ptr -40h
    var_38= qword ptr -38h
    var_30= qword ptr -30h
    var_9= byte ptr -9
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 0C0h
    mov     [rbp+var_A8], rdi
    mov     [rbp+var_B0], rsi
    mov     [rbp+var_B8], rdx
    mov     [rbp+var_C0], rcx
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    mov     [rbp+var_98], 0FFFFFFFFh
    mov     rax, [rbp+var_C0]
    mov     rax, [rax]
    mov     [rbp+var_90], rax
    mov     rax, [rbp+var_B0]
    mov     rax, [rax]
    test    rax, rax
    jz      short loc_13231
    mov     rax, [rbp+var_B0]
    mov     rax, [rax]
    mov     [rbp+var_88], rax
    mov     rax, [rbp+var_B0]
    mov     qword ptr [rax], 0
    jmp     short loc_13247
    
loc_13231:
    mov     [rbp+var_88], 1
    lea     rax, [rbp+var_9]
    mov     [rbp+var_A8], rax
    
loc_13247:
    mov     rax, [rbp+var_B8]
    mov     [rbp+var_80], rax
    mov     [rbp+var_78], 0
    mov     [rbp+var_40], 0
    mov     [rbp+var_38], 0
    mov     [rbp+var_30], 0
    lea     rax, [rbp+var_80]
    mov     edx, 70h
    lea     rsi, a1211_1
    mov     rdi, rax
    call    _inflateInit_
    mov     [rbp+var_94], eax
    cmp     [rbp+var_94], 0
    jz      short loc_132A3
    mov     eax, [rbp+var_94]
    jmp     loc_133FB
    
loc_132A3:
    mov     rax, [rbp+var_A8]
    mov     [rbp+var_68], rax
    mov     [rbp+var_60], 0
    
loc_132B5:
    mov     eax, [rbp+var_60]
    test    eax, eax
    jnz     short loc_132E9
    mov     eax, [rbp+var_98]
    cmp     [rbp+var_88], rax
    ja      short loc_132D4
    mov     rax, [rbp+var_88]
    jmp     short loc_132DA
    
loc_132D4:
    mov     eax, [rbp+var_98]
    
loc_132DA:
    mov     [rbp+var_60], eax
    mov     eax, [rbp+var_60]
    mov     eax, eax
    sub     [rbp+var_88], rax
    
loc_132E9:
    mov     eax, [rbp+var_78]
    test    eax, eax
    jnz     short loc_1331D
    mov     eax, [rbp+var_98]
    cmp     [rbp+var_90], rax
    ja      short loc_13308
    mov     rax, [rbp+var_90]
    jmp     short loc_1330E
    
loc_13308:
    mov     eax, [rbp+var_98]
    
loc_1330E:
    mov     [rbp+var_78], eax
    mov     eax, [rbp+var_78]
    mov     eax, eax
    sub     [rbp+var_90], rax
    
loc_1331D:
    lea     rax, [rbp+var_80]
    mov     esi, 0
    mov     rdi, rax
    call    _inflate
    mov     [rbp+var_94], eax
    cmp     [rbp+var_94], 0
    jz      loc_132B5
    mov     rax, [rbp+var_C0]
    mov     rax, [rax]
    mov     edx, [rbp+var_78]
    mov     ecx, edx
    mov     rdx, [rbp+var_90]
    add     rdx, rcx
    sub     rax, rdx
    mov     rdx, rax
    mov     rax, [rbp+var_C0]
    mov     [rax], rdx
    lea     rax, [rbp+var_9]
    cmp     [rbp+var_A8], rax
    jz      short loc_13387
    mov     rdx, [rbp+var_58]
    mov     rax, [rbp+var_B0]
    mov     [rax], rdx
    jmp     short loc_133A4
    
loc_13387:
    mov     rax, [rbp+var_58]
    test    rax, rax
    jz      short loc_133A4
    cmp     [rbp+var_94], 0FFFFFFFBh
    jnz     short loc_133A4
    mov     [rbp+var_88], 1
    
loc_133A4:
    lea     rax, [rbp+var_80]
    mov     rdi, rax
    call    _inflateEnd
    cmp     [rbp+var_94], 1
    jz      short loc_133F5
    cmp     [rbp+var_94], 2
    jz      short loc_133EE
    cmp     [rbp+var_94], 0FFFFFFFBh
    jnz     short loc_133DF
    mov     eax, [rbp+var_60]
    mov     edx, eax
    mov     rax, [rbp+var_88]
    add     rax, rdx
    test    rax, rax
    jnz     short loc_133E7
    
loc_133DF:
    mov     eax, [rbp+var_94]
    jmp     short loc_133FA
    
loc_133E7:
    mov     eax, 0FFFFFFFDh
    jmp     short loc_133FB
    
loc_133EE:
    mov     eax, 0FFFFFFFDh
    jmp     short loc_133FB
    
loc_133F5:
    mov     eax, 0
    
loc_133FA:
    nop
    
loc_133FB:
    mov     rcx, [rbp+var_8]
    xor     rcx, fs:28h
    jz      short locret_1340F
    call    ___stack_chk_fail
    
locret_1340F:
    leave
    retn
    

<uncompress>:
    
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     [rbp+var_18], rdx
    mov     [rbp+var_20], rcx
    lea     rcx, [rbp+var_20]
    mov     rdx, [rbp+var_18]
    mov     rsi, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    _uncompress2
    leave
    retn
    

<gzclose>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jnz     short loc_1345D
    mov     eax, 0FFFFFFFEh
    jmp     short locret_1348D
    
loc_1345D:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_13481
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    _gzclose_r
    jmp     short locret_1348D
    
loc_13481:
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    _gzclose_w
    
locret_1348D:
    leave
    retn
    

<gz_reset>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax], 0
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_134D4
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+50h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+54h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+44h], 0
    
loc_134D4:
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_8]
    mov     edx, 0
    mov     esi, 0
    mov     rdi, rax
    call    gz_error
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+10h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+80h], 0
    nop
    leave
    retn
    

<gz_open>:
    
    var_38= qword ptr -38h
    var_2C= dword ptr -2Ch
    s= qword ptr -28h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    oflag= dword ptr -14h
    ptr= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+s], rdi
    mov     [rbp+var_2C], esi
    mov     [rbp+var_38], rdx
    mov     [rbp+var_1C], 0
    mov     [rbp+var_18], 0
    cmp     [rbp+s], 0
    jnz     short loc_13544
    mov     eax, 0
    jmp     locret_138DB
    
loc_13544:
    mov     edi, 0E8h
    call    _malloc
    mov     [rbp+ptr], rax
    cmp     [rbp+ptr], 0
    jnz     short loc_13563
    mov     eax, 0
    jmp     locret_138DB
    
loc_13563:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+28h], 0
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+2Ch], 2000h
    mov     rax, [rbp+ptr]
    mov     qword ptr [rax+70h], 0
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+18h], 0
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+58h], 0FFFFFFFFh
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+5Ch], 0
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+40h], 0
    jmp     loc_136B5
    
loc_135B6:
    mov     rax, [rbp+var_38]
    movzx   eax, byte ptr [rax]
    cmp     al, 2Fh
    jle     short loc_135E5
    mov     rax, [rbp+var_38]
    movzx   eax, byte ptr [rax]
    cmp     al, 39h
    jg      short loc_135E5
    mov     rax, [rbp+var_38]
    movzx   eax, byte ptr [rax]
    movsx   eax, al
    lea     edx, [rax-30h]
    mov     rax, [rbp+ptr]
    mov     [rax+58h], edx
    jmp     def_1361C
    
loc_135E5:
    mov     rax, [rbp+var_38]
    movzx   eax, byte ptr [rax]
    movsx   eax, al
    sub     eax, 2Bh
    cmp     eax, 4Dh
    ja      def_1361C
    mov     eax, eax
    lea     rdx, ds:0[rax*4]
    lea     rax, jpt_1361C
    mov     eax, ds:(jpt_1361C - 1A748h)[rdx+rax]
    movsxd  rdx, eax
    lea     rax, jpt_1361C
    add     rax, rdx
    jmp     rax
    
loc_1361E:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+18h], 1C4Fh
    jmp     def_1361C
    
loc_1362E:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+18h], 79B1h
    jmp     short def_1361C
    
loc_1363B:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+18h], 1
    jmp     short def_1361C
    
loc_13648:
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    _free
    mov     eax, 0
    jmp     locret_138DB
    
loc_1365E:
    mov     [rbp+var_1C], 1
    jmp     short def_1361C
    
loc_13667:
    mov     [rbp+var_18], 1
    jmp     short def_1361C
    
loc_13670:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+5Ch], 1
    jmp     short def_1361C
    
loc_1367D:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+5Ch], 2
    jmp     short def_1361C
    
loc_1368A:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+5Ch], 3
    jmp     short def_1361C
    
loc_13697:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+5Ch], 4
    jmp     short def_1361C
    
loc_136A4:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+40h], 1
    nop
    
def_1361C:
    add     [rbp+var_38], 1
    
loc_136B5:
    mov     rax, [rbp+var_38]
    movzx   eax, byte ptr [rax]
    test    al, al
    jnz     loc_135B6
    mov     rax, [rbp+ptr]
    mov     eax, [rax+18h]
    test    eax, eax
    jnz     short loc_136E5
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    _free
    mov     eax, 0
    jmp     locret_138DB
    
loc_136E5:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_1371F
    mov     rax, [rbp+ptr]
    mov     eax, [rax+40h]
    test    eax, eax
    jz      short loc_13714
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    _free
    mov     eax, 0
    jmp     locret_138DB
    
loc_13714:
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+40h], 1
    
loc_1371F:
    mov     rax, [rbp+s]
    mov     rdi, rax
    call    _strlen
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    add     rax, 1
    mov     rdi, rax
    call    _malloc
    mov     rdx, rax
    mov     rax, [rbp+ptr]
    mov     [rax+20h], rdx
    mov     rax, [rbp+ptr]
    mov     rax, [rax+20h]
    test    rax, rax
    jnz     short loc_1376D
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    _free
    mov     eax, 0
    jmp     locret_138DB
    
loc_1376D:
    mov     rax, [rbp+var_8]
    lea     rsi, [rax+1]
    mov     rax, [rbp+ptr]
    mov     rax, [rax+20h]
    mov     rdx, [rbp+s]
    mov     rcx, rdx
    lea     rdx, format
    mov     rdi, rax
    mov     eax, 0
    call    _snprintf
    cmp     [rbp+var_1C], 0
    jz      short loc_137A5
    mov     edx, 80000h
    jmp     short loc_137AA
    
loc_137A5:
    mov     edx, 0
    
loc_137AA:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_137E8
    cmp     [rbp+var_18], 0
    jz      short loc_137C5
    mov     ecx, 0C1h
    jmp     short loc_137CA
    
loc_137C5:
    mov     ecx, 41h
    
loc_137CA:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_137DF
    mov     eax, 200h
    jmp     short loc_137E4
    
loc_137DF:
    mov     eax, 400h
    
loc_137E4:
    or      eax, ecx
    jmp     short loc_137ED
    
loc_137E8:
    mov     eax, 0
    
loc_137ED:
    or      eax, edx
    mov     [rbp+oflag], eax
    cmp     [rbp+var_2C], 0
    jns     short loc_13815
    mov     ecx, [rbp+oflag]
    mov     rax, [rbp+s]
    mov     edx, 1B6h
    mov     esi, ecx
    mov     rdi, rax
    mov     eax, 0
    call    _open
    jmp     short loc_13818
    
loc_13815:
    mov     eax, [rbp+var_2C]
    
loc_13818:
    mov     rdx, [rbp+ptr]
    mov     [rdx+1Ch], eax
    mov     rax, [rbp+ptr]
    mov     eax, [rax+1Ch]
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_13851
    mov     rax, [rbp+ptr]
    mov     rax, [rax+20h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    _free
    mov     eax, 0
    jmp     locret_138DB
    
loc_13851:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+18h]
    cmp     eax, 1
    jnz     short loc_13880
    mov     rax, [rbp+ptr]
    mov     eax, [rax+1Ch]
    mov     edx, 2
    mov     esi, 0
    mov     edi, eax
    call    _lseek64
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+18h], 79B1h
    
loc_13880:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_138CB
    mov     rax, [rbp+ptr]
    mov     eax, [rax+1Ch]
    mov     edx, 1
    mov     esi, 0
    mov     edi, eax
    call    _lseek64
    mov     rdx, rax
    mov     rax, [rbp+ptr]
    mov     [rax+48h], rdx
    mov     rax, [rbp+ptr]
    mov     rax, [rax+48h]
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    jnz     short loc_138CB
    mov     rax, [rbp+ptr]
    mov     qword ptr [rax+48h], 0
    
loc_138CB:
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    gz_reset
    mov     rax, [rbp+ptr]
    
locret_138DB:
    leave
    retn
    

<gzopen>:
    
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     rdx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     esi, 0FFFFFFFFh
    mov     rdi, rax
    call    gz_open
    leave
    retn
    

<gzopen64>:
    
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     [rbp+var_10], rsi
    mov     rdx, [rbp+var_10]
    mov     rax, [rbp+var_8]
    mov     esi, 0FFFFFFFFh
    mov     rdi, rax
    call    gz_open
    leave
    retn
    

<gzdopen>:
    
    var_20= qword ptr -20h
    var_14= dword ptr -14h
    s= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_14], edi
    mov     [rbp+var_20], rsi
    cmp     [rbp+var_14], 0FFFFFFFFh
    jz      short loc_13955
    mov     edi, 13h
    call    _malloc
    mov     [rbp+s], rax
    cmp     [rbp+s], 0
    jnz     short loc_1395C
    
loc_13955:
    mov     eax, 0
    jmp     short locret_139A7
    
loc_1395C:
    mov     edx, [rbp+var_14]
    mov     rax, [rbp+s]
    mov     ecx, edx
    lea     rdx, aFdD
    mov     esi, 13h
    mov     rdi, rax
    mov     eax, 0
    call    _snprintf
    mov     rdx, [rbp+var_20]
    mov     ecx, [rbp+var_14]
    mov     rax, [rbp+s]
    mov     esi, ecx
    mov     rdi, rax
    call    gz_open
    mov     [rbp+var_8], rax
    mov     rax, [rbp+s]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+var_8]
    
locret_139A7:
    leave
    retn
    

<gzbuffer>:
    
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    cmp     [rbp+var_18], 0
    jnz     short loc_139C2
    mov     eax, 0FFFFFFFFh
    jmp     short loc_13A2C
    
loc_139C2:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_139ED
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jz      short loc_139ED
    mov     eax, 0FFFFFFFFh
    jmp     short loc_13A2C
    
loc_139ED:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+28h]
    test    eax, eax
    jz      short loc_139FF
    mov     eax, 0FFFFFFFFh
    jmp     short loc_13A2C
    
loc_139FF:
    mov     eax, [rbp+var_1C]
    add     eax, eax
    cmp     [rbp+var_1C], eax
    jbe     short loc_13A10
    mov     eax, 0FFFFFFFFh
    jmp     short loc_13A2C
    
loc_13A10:
    cmp     [rbp+var_1C], 1
    ja      short loc_13A1D
    mov     [rbp+var_1C], 2
    
loc_13A1D:
    mov     rax, [rbp+var_8]
    mov     edx, [rbp+var_1C]
    mov     [rax+2Ch], edx
    mov     eax, 0
    
loc_13A2C:
    pop     rbp
    retn
    

<gzrewind>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jnz     short loc_13A48
    mov     eax, 0FFFFFFFFh
    jmp     short locret_13AB8
    
loc_13A48:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_13A75
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_13A7C
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_13A7C
    
loc_13A75:
    mov     eax, 0FFFFFFFFh
    jmp     short locret_13AB8
    
loc_13A7C:
    mov     rax, [rbp+var_8]
    mov     rcx, [rax+48h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1Ch]
    mov     edx, 0
    mov     rsi, rcx
    mov     edi, eax
    call    _lseek64
    cmp     rax, 0FFFFFFFFFFFFFFFFh
    jnz     short loc_13AA7
    mov     eax, 0FFFFFFFFh
    jmp     short locret_13AB8
    
loc_13AA7:
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    gz_reset
    mov     eax, 0
    
locret_13AB8:
    leave
    retn
    

<gzseek64>:
    
    var_34= dword ptr -34h
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_30], rsi
    mov     [rbp+var_34], edx
    cmp     [rbp+var_28], 0
    jnz     short loc_13AE0
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     locret_13D66
    
loc_13AE0:
    mov     rax, [rbp+var_28]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_13B10
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jz      short loc_13B10
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     locret_13D66
    
loc_13B10:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_13B33
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_13B33
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     locret_13D66
    
loc_13B33:
    cmp     [rbp+var_34], 0
    jz      short loc_13B4B
    cmp     [rbp+var_34], 1
    jz      short loc_13B4B
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     locret_13D66
    
loc_13B4B:
    cmp     [rbp+var_34], 0
    jnz     short loc_13B5F
    mov     rax, [rbp+var_10]
    mov     rax, [rax+10h]
    sub     [rbp+var_30], rax
    jmp     short loc_13B76
    
loc_13B5F:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_13B76
    mov     rax, [rbp+var_10]
    mov     rax, [rax+60h]
    add     [rbp+var_30], rax
    
loc_13B76:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     loc_13C6D
    mov     rax, [rbp+var_10]
    mov     eax, [rax+44h]
    cmp     eax, 1
    jnz     loc_13C6D
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_30]
    add     rax, rdx
    test    rax, rax
    js      loc_13C6D
    mov     rax, [rbp+var_10]
    mov     eax, [rax]
    mov     edx, eax
    mov     rax, [rbp+var_30]
    sub     rax, rdx
    mov     rcx, rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+1Ch]
    mov     edx, 1
    mov     rsi, rcx
    mov     edi, eax
    call    _lseek64
    mov     [rbp+var_8], rax
    cmp     [rbp+var_8], 0FFFFFFFFFFFFFFFFh
    jnz     short loc_13BFA
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     locret_13D66
    
loc_13BFA:
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax], 0
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+50h], 0
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+54h], 0
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_10]
    mov     edx, 0
    mov     esi, 0
    mov     rdi, rax
    call    gz_error
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+80h], 0
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_30]
    add     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_10]
    mov     rax, [rax+10h]
    jmp     locret_13D66
    
loc_13C6D:
    cmp     [rbp+var_30], 0
    jns     short loc_13CCA
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_13C8E
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     locret_13D66
    
loc_13C8E:
    mov     rax, [rbp+var_10]
    mov     rax, [rax+10h]
    add     [rbp+var_30], rax
    cmp     [rbp+var_30], 0
    jns     short loc_13CAD
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     locret_13D66
    
loc_13CAD:
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    _gzrewind
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_13CCA
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     locret_13D66
    
loc_13CCA:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_13D39
    mov     rax, [rbp+var_10]
    mov     eax, [rax]
    mov     eax, eax
    cmp     [rbp+var_30], rax
    jge     short loc_13CEC
    mov     rax, [rbp+var_30]
    jmp     short loc_13CF2
    
loc_13CEC:
    mov     rax, [rbp+var_10]
    mov     eax, [rax]
    
loc_13CF2:
    mov     [rbp+var_14], eax
    mov     rax, [rbp+var_10]
    mov     eax, [rax]
    sub     eax, [rbp+var_14]
    mov     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax], edx
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+8]
    mov     eax, [rbp+var_14]
    add     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+8], rdx
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+10h]
    mov     eax, [rbp+var_14]
    add     rdx, rax
    mov     rax, [rbp+var_10]
    mov     [rax+10h], rdx
    mov     eax, [rbp+var_14]
    sub     [rbp+var_30], rax
    
loc_13D39:
    cmp     [rbp+var_30], 0
    jz      short loc_13D57
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+68h], 1
    mov     rax, [rbp+var_10]
    mov     rdx, [rbp+var_30]
    mov     [rax+60h], rdx
    
loc_13D57:
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_30]
    add     rax, rdx
    
locret_13D66:
    leave
    retn
    

<gzseek>:
    
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_24], edx
    mov     edx, [rbp+var_24]
    mov     rcx, [rbp+var_20]
    mov     rax, [rbp+var_18]
    mov     rsi, rcx
    mov     rdi, rax
    call    _gzseek64
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    leave
    retn
    

<gztell64>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jnz     short loc_13DB3
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     short loc_13E05
    
loc_13DB3:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_13DE0
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jz      short loc_13DE0
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     short loc_13E05
    
loc_13DE0:
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+10h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_13DFD
    mov     rax, [rbp+var_8]
    mov     rax, [rax+60h]
    jmp     short loc_13E02
    
loc_13DFD:
    mov     eax, 0
    
loc_13E02:
    add     rax, rdx
    
loc_13E05:
    pop     rbp
    retn
    

<gztell>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    _gztell64
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    leave
    retn
    

<gzoffset64>:
    
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jnz     short loc_13E45
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     short locret_13EC0
    
loc_13E45:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_13E72
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jz      short loc_13E72
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     short locret_13EC0
    
loc_13E72:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+1Ch]
    mov     edx, 1
    mov     esi, 0
    mov     edi, eax
    call    _lseek64
    mov     [rbp+var_10], rax
    cmp     [rbp+var_10], 0FFFFFFFFFFFFFFFFh
    jnz     short loc_13E9E
    mov     rax, 0FFFFFFFFFFFFFFFFh
    jmp     short locret_13EC0
    
loc_13E9E:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_13EBC
    mov     rax, [rbp+var_8]
    mov     eax, [rax+80h]
    mov     eax, eax
    sub     [rbp+var_10], rax
    
loc_13EBC:
    mov     rax, [rbp+var_10]
    
locret_13EC0:
    leave
    retn
    

<gzoffset>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    _gzoffset64
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    leave
    retn
    

<gzeof>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jnz     short loc_13EFA
    mov     eax, 0
    jmp     short loc_13F41
    
loc_13EFA:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_13F25
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jz      short loc_13F25
    mov     eax, 0
    jmp     short loc_13F41
    
loc_13F25:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_13F3C
    mov     rax, [rbp+var_8]
    mov     eax, [rax+54h]
    jmp     short loc_13F41
    
loc_13F3C:
    mov     eax, 0
    
loc_13F41:
    pop     rbp
    retn
    

<gzerror>:
    
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    cmp     [rbp+var_18], 0
    jnz     short loc_13F5D
    mov     eax, 0
    jmp     short loc_13FCF
    
loc_13F5D:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_13F88
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jz      short loc_13F88
    mov     eax, 0
    jmp     short loc_13FCF
    
loc_13F88:
    cmp     [rbp+var_20], 0
    jz      short loc_13F9C
    mov     rax, [rbp+var_8]
    mov     edx, [rax+6Ch]
    mov     rax, [rbp+var_20]
    mov     [rax], edx
    
loc_13F9C:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFCh
    jz      short loc_13FC8
    mov     rax, [rbp+var_8]
    mov     rax, [rax+70h]
    test    rax, rax
    jz      short loc_13FBF
    mov     rax, [rbp+var_8]
    mov     rax, [rax+70h]
    jmp     short loc_13FCF
    
loc_13FBF:
    lea     rax, unk_1A888
    jmp     short loc_13FCF
    
loc_13FC8:
    lea     rax, aOutOfMemory
    
loc_13FCF:
    pop     rbp
    retn
    

<gzclearerr>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jz      short loc_14044
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_14008
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_14047
    
loc_14008:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_1402C
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+50h], 0
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+54h], 0
    
loc_1402C:
    mov     rax, [rbp+var_8]
    mov     edx, 0
    mov     esi, 0
    mov     rdi, rax
    call    gz_error
    jmp     short locret_14048
    
loc_14044:
    nop
    jmp     short locret_14048
    
loc_14047:
    nop
    
locret_14048:
    leave
    retn
    

<gz_error>:
    
    s= qword ptr -28h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    
    
    push    rbp
    mov     rbp, rsp
    push    r12
    push    rbx
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     [rbp+s], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+70h]
    test    rax, rax
    jz      short loc_14095
    mov     rax, [rbp+var_18]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFCh
    jz      short loc_14089
    mov     rax, [rbp+var_18]
    mov     rax, [rax+70h]
    mov     rdi, rax
    call    _free
    
loc_14089:
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+70h], 0
    
loc_14095:
    cmp     [rbp+var_1C], 0
    jz      short loc_140AB
    cmp     [rbp+var_1C], 0FFFFFFFBh
    jz      short loc_140AB
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax], 0
    
loc_140AB:
    mov     rax, [rbp+var_18]
    mov     edx, [rbp+var_1C]
    mov     [rax+6Ch], edx
    cmp     [rbp+s], 0
    jz      loc_1417A
    cmp     [rbp+var_1C], 0FFFFFFFCh
    jz      loc_1417D
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     rdi, rax
    call    _strlen
    mov     rbx, rax
    mov     rax, [rbp+s]
    mov     rdi, rax
    call    _strlen
    add     rax, rbx
    add     rax, 3
    mov     rdi, rax
    call    _malloc
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+70h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+70h]
    test    rax, rax
    jnz     short loc_1411D
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+6Ch], 0FFFFFFFCh
    jmp     short loc_1417E
    
loc_1411D:
    mov     rax, [rbp+var_18]
    mov     rbx, [rax+20h]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+20h]
    mov     rdi, rax
    call    _strlen
    mov     r12, rax
    mov     rax, [rbp+s]
    mov     rdi, rax
    call    _strlen
    add     rax, r12
    lea     rsi, [rax+3]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+70h]
    mov     rdx, [rbp+s]
    mov     r9, rdx
    lea     r8, asc_1A897
    mov     rcx, rbx
    lea     rdx, aSSS
    mov     rdi, rax
    mov     eax, 0
    call    _snprintf
    jmp     short loc_1417E
    
loc_1417A:
    nop
    jmp     short loc_1417E
    
loc_1417D:
    nop
    
loc_1417E:
    add     rsp, 20h
    pop     rbx
    pop     r12
    pop     rbp
    retn
    

<gz_load>:
    
    var_30= qword ptr -30h
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    nbytes= qword ptr -0Ch
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_24], edx
    mov     [rbp+var_30], rcx
    mov     dword ptr [rbp+nbytes+4], 40000000h
    mov     rax, [rbp+var_30]
    mov     dword ptr [rax], 0
    
loc_141AF:
    mov     rax, [rbp+var_30]
    mov     eax, [rax]
    mov     edx, [rbp+var_24]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+nbytes], eax
    mov     eax, dword ptr [rbp+nbytes]
    cmp     eax, dword ptr [rbp+nbytes+4]
    jbe     short loc_141CD
    mov     eax, dword ptr [rbp+nbytes+4]
    mov     dword ptr [rbp+nbytes], eax
    
loc_141CD:
    mov     edx, dword ptr [rbp+nbytes]
    mov     rax, [rbp+var_30]
    mov     eax, [rax]
    mov     ecx, eax
    mov     rax, [rbp+var_20]
    add     rcx, rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+1Ch]
    mov     rsi, rcx
    mov     edi, eax
    call    _read
    mov     [rbp+var_4], eax
    cmp     [rbp+var_4], 0
    jle     short loc_14217
    mov     rax, [rbp+var_30]
    mov     edx, [rax]
    mov     eax, [rbp+var_4]
    add     edx, eax
    mov     rax, [rbp+var_30]
    mov     [rax], edx
    mov     rax, [rbp+var_30]
    mov     eax, [rax]
    cmp     [rbp+var_24], eax
    ja      short loc_141AF
    jmp     short loc_14218
    
loc_14217:
    nop
    
loc_14218:
    cmp     [rbp+var_4], 0
    jns     short loc_14247
    call    ___errno_location
    mov     eax, [rax]
    mov     edi, eax
    call    _strerror
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     esi, 0FFFFFFFFh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     short locret_1425D
    
loc_14247:
    cmp     [rbp+var_4], 0
    jnz     short loc_14258
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+50h], 1
    
loc_14258:
    mov     eax, 0
    
locret_1425D:
    leave
    retn
    

<gz_avail>:
    
    var_38= qword ptr -38h
    var_28= dword ptr -28h
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_38], rdi
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    mov     rax, [rbp+var_38]
    add     rax, 78h
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_38]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_142A7
    mov     rax, [rbp+var_38]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_142A7
    mov     eax, 0FFFFFFFFh
    jmp     loc_14378
    
loc_142A7:
    mov     rax, [rbp+var_38]
    mov     eax, [rax+50h]
    test    eax, eax
    jnz     loc_14373
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    test    eax, eax
    jz      short loc_14309
    mov     rax, [rbp+var_38]
    mov     rax, [rax+30h]
    mov     [rbp+var_20], rax
    mov     rax, [rbp+var_10]
    mov     rax, [rax]
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    mov     [rbp+var_24], eax
    
loc_142E2:
    mov     rdx, [rbp+var_18]
    lea     rax, [rdx+1]
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_20]
    lea     rcx, [rax+1]
    mov     [rbp+var_20], rcx
    movzx   edx, byte ptr [rdx]
    mov     [rax], dl
    sub     [rbp+var_24], 1
    cmp     [rbp+var_24], 0
    jnz     short loc_142E2
    
loc_14309:
    mov     rax, [rbp+var_38]
    mov     edx, [rax+28h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    mov     edi, edx
    sub     edi, eax
    mov     rax, [rbp+var_38]
    mov     rdx, [rax+30h]
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    mov     eax, eax
    lea     rsi, [rdx+rax]
    lea     rdx, [rbp+var_28]
    mov     rax, [rbp+var_38]
    mov     rcx, rdx
    mov     edx, edi
    mov     rdi, rax
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14351
    mov     eax, 0FFFFFFFFh
    jmp     short loc_14378
    
loc_14351:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+8]
    mov     eax, [rbp+var_28]
    add     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+8], edx
    mov     rax, [rbp+var_38]
    mov     rdx, [rax+30h]
    mov     rax, [rbp+var_10]
    mov     [rax], rdx
    
loc_14373:
    mov     eax, 0
    
loc_14378:
    mov     rcx, [rbp+var_8]
    xor     rcx, fs:28h
    jz      short locret_1438C
    call    ___stack_chk_fail
    
locret_1438C:
    leave
    retn
    

<gz_look>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    add     rax, 78h
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+28h]
    test    eax, eax
    jnz     loc_14512
    mov     rax, [rbp+var_18]
    mov     eax, [rax+2Ch]
    mov     eax, eax
    mov     rdi, rax
    call    _malloc
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+2Ch]
    add     eax, eax
    mov     eax, eax
    mov     rdi, rax
    call    _malloc
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+38h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_14409
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    test    rax, rax
    jnz     short loc_1444B
    
loc_14409:
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+var_18]
    lea     rdx, aOutOfMemory_0
    mov     esi, 0FFFFFFFCh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_14649
    
loc_1444B:
    mov     rax, [rbp+var_18]
    mov     edx, [rax+2Ch]
    mov     rax, [rbp+var_18]
    mov     [rax+28h], edx
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+0B8h], 0
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+0C0h], 0
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+0C8h], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+80h], 0
    mov     rax, [rbp+var_18]
    mov     qword ptr [rax+78h], 0
    mov     rax, [rbp+var_18]
    add     rax, 78h
    mov     ecx, 70h
    lea     rdx, a1211_2
    mov     esi, 1Fh
    mov     rdi, rax
    call    _inflateInit2_
    test    eax, eax
    jz      short loc_14512
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+28h], 0
    mov     rax, [rbp+var_18]
    lea     rdx, aOutOfMemory_0
    mov     esi, 0FFFFFFFCh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_14649
    
loc_14512:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 1
    ja      short loc_1454E
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    gz_avail
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14539
    mov     eax, 0FFFFFFFFh
    jmp     locret_14649
    
loc_14539:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_1454E
    mov     eax, 0
    jmp     locret_14649
    
loc_1454E:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     eax, 1
    jbe     short loc_145A6
    mov     rax, [rbp+var_8]
    mov     rax, [rax]
    movzx   eax, byte ptr [rax]
    cmp     al, 1Fh
    jnz     short loc_145A6
    mov     rax, [rbp+var_8]
    mov     rax, [rax]
    add     rax, 1
    movzx   eax, byte ptr [rax]
    cmp     al, 8Bh
    jnz     short loc_145A6
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    _inflateReset
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+44h], 2
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+40h], 0
    mov     eax, 0
    jmp     locret_14649
    
loc_145A6:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+40h]
    test    eax, eax
    jnz     short loc_145D8
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 0
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+50h], 1
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax], 0
    mov     eax, 0
    jmp     short locret_14649
    
loc_145D8:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_18]
    mov     [rax+8], rdx
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    test    eax, eax
    jz      short loc_1462E
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    mov     edx, eax
    mov     rax, [rbp+var_8]
    mov     rcx, [rax]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+8]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_8]
    mov     edx, [rax+8]
    mov     rax, [rbp+var_18]
    mov     [rax], edx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+8], 0
    
loc_1462E:
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+44h], 1
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+40h], 1
    mov     eax, 0
    
locret_14649:
    leave
    retn
    

<gz_decomp>:
    
    var_18= qword ptr -18h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_10], 0
    mov     rax, [rbp+var_18]
    add     rax, 78h
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+20h]
    mov     [rbp+var_C], eax
    
loc_14674:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_1469A
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    gz_avail
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_1469A
    mov     eax, 0FFFFFFFFh
    jmp     locret_147C6
    
loc_1469A:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_146C2
    mov     rax, [rbp+var_18]
    lea     rdx, aUnexpectedEndO
    mov     esi, 0FFFFFFFBh
    mov     rdi, rax
    call    gz_error
    jmp     loc_14780
    
loc_146C2:
    mov     rax, [rbp+var_8]
    mov     esi, 0
    mov     rdi, rax
    call    _inflate
    mov     [rbp+var_10], eax
    cmp     [rbp+var_10], 0FFFFFFFEh
    jz      short loc_146E2
    cmp     [rbp+var_10], 2
    jnz     short loc_14704
    
loc_146E2:
    mov     rax, [rbp+var_18]
    lea     rdx, aInternalErrorI
    mov     esi, 0FFFFFFFEh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_147C6
    
loc_14704:
    cmp     [rbp+var_10], 0FFFFFFFCh
    jnz     short loc_1472C
    mov     rax, [rbp+var_18]
    lea     rdx, aOutOfMemory_0
    mov     esi, 0FFFFFFFCh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_147C6
    
loc_1472C:
    cmp     [rbp+var_10], 0FFFFFFFDh
    jnz     short loc_1476B
    mov     rax, [rbp+var_8]
    mov     rax, [rax+30h]
    test    rax, rax
    jz      short loc_14749
    mov     rax, [rbp+var_8]
    mov     rax, [rax+30h]
    jmp     short loc_14750
    
loc_14749:
    lea     rax, aCompressedData
    
loc_14750:
    mov     rcx, [rbp+var_18]
    mov     rdx, rax
    mov     esi, 0FFFFFFFDh
    mov     rdi, rcx
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     short locret_147C6
    
loc_1476B:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+20h]
    test    eax, eax
    jz      short loc_14780
    cmp     [rbp+var_10], 1
    jnz     loc_14674
    
loc_14780:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+20h]
    mov     edx, [rbp+var_C]
    sub     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax], edx
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+18h]
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    mov     eax, eax
    neg     rax
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+8], rdx
    cmp     [rbp+var_10], 1
    jnz     short loc_147C1
    mov     rax, [rbp+var_18]
    mov     dword ptr [rax+44h], 0
    
loc_147C1:
    mov     eax, 0
    
locret_147C6:
    leave
    retn
    

<gz_fetch>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    add     rax, 78h
    mov     [rbp+var_8], rax
    
loc_147E0:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+44h]
    cmp     eax, 1
    jz      short loc_14831
    cmp     eax, 2
    jz      loc_1487B
    test    eax, eax
    jnz     loc_148B5
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    gz_look
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14818
    mov     eax, 0FFFFFFFFh
    jmp     locret_148E2
    
loc_14818:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+44h]
    test    eax, eax
    jnz     loc_148B4
    mov     eax, 0
    jmp     locret_148E2
    
loc_14831:
    mov     rdx, [rbp+var_18]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+28h]
    lea     edi, [rax+rax]
    mov     rax, [rbp+var_18]
    mov     rsi, [rax+38h]
    mov     rax, [rbp+var_18]
    mov     rcx, rdx
    mov     edx, edi
    mov     rdi, rax
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14864
    mov     eax, 0FFFFFFFFh
    jmp     short locret_148E2
    
loc_14864:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_18]
    mov     [rax+8], rdx
    mov     eax, 0
    jmp     short locret_148E2
    
loc_1487B:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+28h]
    lea     edx, [rax+rax]
    mov     rax, [rbp+var_8]
    mov     [rax+20h], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_8]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_148B5
    mov     eax, 0FFFFFFFFh
    jmp     short locret_148E2
    
loc_148B4:
    nop
    
loc_148B5:
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    test    eax, eax
    jnz     short loc_148DD
    mov     rax, [rbp+var_18]
    mov     eax, [rax+50h]
    test    eax, eax
    jz      loc_147E0
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     loc_147E0
    
loc_148DD:
    mov     eax, 0
    
locret_148E2:
    leave
    retn
    

<gz_skip>:
    
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_4= dword ptr -4
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    jmp     loc_14997
    
loc_148F9:
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    test    eax, eax
    jz      short loc_14966
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    mov     eax, eax
    cmp     [rbp+var_20], rax
    jge     short loc_14917
    mov     rax, [rbp+var_20]
    jmp     short loc_1491D
    
loc_14917:
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    
loc_1491D:
    mov     [rbp+var_4], eax
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    sub     eax, [rbp+var_4]
    mov     edx, eax
    mov     rax, [rbp+var_18]
    mov     [rax], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+8]
    mov     eax, [rbp+var_4]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+8], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+10h]
    mov     eax, [rbp+var_4]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+10h], rdx
    mov     eax, [rbp+var_4]
    sub     [rbp+var_20], rax
    jmp     short loc_14997
    
loc_14966:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+50h]
    test    eax, eax
    jz      short loc_1497F
    mov     rax, [rbp+var_18]
    mov     eax, [rax+80h]
    test    eax, eax
    jz      short loc_149A2
    
loc_1497F:
    mov     rax, [rbp+var_18]
    mov     rdi, rax
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14997
    mov     eax, 0FFFFFFFFh
    jmp     short locret_149A7
    
loc_14997:
    cmp     [rbp+var_20], 0
    jnz     loc_148F9
    
loc_149A2:
    mov     eax, 0
    
locret_149A7:
    leave
    retn
    

<gz_read>:
    
    var_38= qword ptr -38h
    dest= qword ptr -30h
    var_28= qword ptr -28h
    n= qword ptr -14h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_28], rdi
    mov     [rbp+dest], rsi
    mov     [rbp+var_38], rdx
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    cmp     [rbp+var_38], 0
    jnz     short loc_149DD
    mov     eax, 0
    jmp     loc_14BC6
    
loc_149DD:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_14A19
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_skip
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14A19
    mov     eax, 0
    jmp     loc_14BC6
    
loc_14A19:
    mov     [rbp+n+4], 0
    
loc_14A21:
    mov     dword ptr [rbp+n], 0FFFFFFFFh
    mov     eax, dword ptr [rbp+n]
    mov     eax, eax
    cmp     [rbp+var_38], rax
    jnb     short loc_14A3A
    mov     rax, [rbp+var_38]
    mov     dword ptr [rbp+n], eax
    
loc_14A3A:
    mov     rax, [rbp+var_28]
    mov     eax, [rax]
    test    eax, eax
    jz      short loc_14AA4
    mov     rax, [rbp+var_28]
    mov     edx, [rax]
    mov     eax, dword ptr [rbp+n]
    cmp     edx, eax
    jnb     short loc_14A5A
    mov     rax, [rbp+var_28]
    mov     eax, [rax]
    mov     dword ptr [rbp+n], eax
    
loc_14A5A:
    mov     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+8]
    mov     rax, [rbp+dest]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+var_28]
    mov     rax, [rax+8]
    mov     edx, dword ptr [rbp+n]
    mov     edx, edx
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+8], rdx
    mov     rax, [rbp+var_28]
    mov     edx, [rax]
    mov     eax, dword ptr [rbp+n]
    sub     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax], edx
    jmp     loc_14B81
    
loc_14AA4:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+50h]
    test    eax, eax
    jz      short loc_14ACD
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    test    eax, eax
    jnz     short loc_14ACD
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+54h], 1
    jmp     loc_14BC2
    
loc_14ACD:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+44h]
    test    eax, eax
    jz      short loc_14AE9
    mov     rax, [rbp+var_28]
    mov     eax, [rax+28h]
    lea     edx, [rax+rax]
    mov     eax, dword ptr [rbp+n]
    cmp     edx, eax
    jbe     short loc_14B08
    
loc_14AE9:
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jnz     loc_14BB6
    mov     eax, 0
    jmp     loc_14BC6
    
loc_14B08:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+44h]
    cmp     eax, 1
    jnz     short loc_14B3A
    mov     edx, dword ptr [rbp+n]
    lea     rcx, [rbp+n]
    mov     rsi, [rbp+dest]
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    gz_load
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14B81
    mov     eax, 0
    jmp     loc_14BC6
    
loc_14B3A:
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_28]
    mov     [rax+98h], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rbp+dest]
    mov     [rax+90h], rdx
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    gz_decomp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14B6E
    mov     eax, 0
    jmp     short loc_14BC6
    
loc_14B6E:
    mov     rax, [rbp+var_28]
    mov     eax, [rax]
    mov     dword ptr [rbp+n], eax
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax], 0
    
loc_14B81:
    mov     eax, dword ptr [rbp+n]
    mov     eax, eax
    sub     [rbp+var_38], rax
    mov     eax, dword ptr [rbp+n]
    mov     eax, eax
    add     [rbp+dest], rax
    mov     eax, dword ptr [rbp+n]
    mov     eax, eax
    add     [rbp+n+4], rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+10h]
    mov     edx, dword ptr [rbp+n]
    mov     edx, edx
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+10h], rdx
    jmp     short loc_14BB7
    
loc_14BB6:
    nop
    
loc_14BB7:
    cmp     [rbp+var_38], 0
    jnz     loc_14A21
    
loc_14BC2:
    mov     rax, [rbp+n+4]
    
loc_14BC6:
    mov     rcx, [rbp+var_8]
    xor     rcx, fs:28h
    jz      short locret_14BDA
    call    ___stack_chk_fail
    
locret_14BDA:
    leave
    retn
    

<gzread>:
    
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_24], edx
    cmp     [rbp+var_18], 0
    jnz     short loc_14C00
    mov     eax, 0FFFFFFFFh
    jmp     locret_14C9A
    
loc_14C00:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_14C2D
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_14C34
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_14C34
    
loc_14C2D:
    mov     eax, 0FFFFFFFFh
    jmp     short locret_14C9A
    
loc_14C34:
    mov     eax, [rbp+var_24]
    test    eax, eax
    jns     short loc_14C5A
    mov     rax, [rbp+var_8]
    lea     rdx, aRequestDoesNot
    mov     esi, 0FFFFFFFEh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     short locret_14C9A
    
loc_14C5A:
    mov     edx, [rbp+var_24]
    mov     rcx, [rbp+var_20]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    gz_read
    mov     [rbp+var_24], eax
    cmp     [rbp+var_24], 0
    jnz     short loc_14C97
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_14C97
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_14C97
    mov     eax, 0FFFFFFFFh
    jmp     short locret_14C9A
    
loc_14C97:
    mov     eax, [rbp+var_24]
    
locret_14C9A:
    leave
    retn
    

<gzfread>:
    
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_28], rdx
    mov     [rbp+var_30], rcx
    cmp     [rbp+var_30], 0
    jnz     short loc_14CC5
    mov     eax, 0
    jmp     locret_14D6D
    
loc_14CC5:
    mov     rax, [rbp+var_30]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_14CF2
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_14CF9
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_14CF9
    
loc_14CF2:
    mov     eax, 0
    jmp     short locret_14D6D
    
loc_14CF9:
    mov     rax, [rbp+var_28]
    imul    rax, [rbp+var_20]
    mov     [rbp+var_8], rax
    cmp     [rbp+var_20], 0
    jz      short loc_14D3F
    mov     rax, [rbp+var_8]
    mov     edx, 0
    div     [rbp+var_20]
    cmp     [rbp+var_28], rax
    jz      short loc_14D3F
    mov     rax, [rbp+var_10]
    lea     rdx, aRequestDoesNot_0
    mov     esi, 0FFFFFFFEh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0
    jmp     short locret_14D6D
    
loc_14D3F:
    cmp     [rbp+var_8], 0
    jz      short loc_14D68
    mov     rdx, [rbp+var_8]
    mov     rcx, [rbp+var_18]
    mov     rax, [rbp+var_10]
    mov     rsi, rcx
    mov     rdi, rax
    call    gz_read
    mov     edx, 0
    div     [rbp+var_20]
    jmp     short locret_14D6D
    
loc_14D68:
    mov     eax, 0
    
locret_14D6D:
    leave
    retn
    

<gzgetc>:
    
    var_28= qword ptr -28h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_9= byte ptr -9
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    cmp     [rbp+var_28], 0
    jnz     short loc_14D9B
    mov     eax, 0FFFFFFFFh
    jmp     loc_14E47
    
loc_14D9B:
    mov     rax, [rbp+var_28]
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_14DC8
    mov     rax, [rbp+var_18]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_14DCF
    mov     rax, [rbp+var_18]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_14DCF
    
loc_14DC8:
    mov     eax, 0FFFFFFFFh
    jmp     short loc_14E47
    
loc_14DCF:
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    test    eax, eax
    jz      short loc_14E18
    mov     rax, [rbp+var_18]
    mov     eax, [rax]
    lea     edx, [rax-1]
    mov     rax, [rbp+var_18]
    mov     [rax], edx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+10h]
    lea     rdx, [rax+1]
    mov     rax, [rbp+var_18]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+8]
    lea     rcx, [rax+1]
    mov     rdx, [rbp+var_18]
    mov     [rdx+8], rcx
    movzx   eax, byte ptr [rax]
    movzx   eax, al
    jmp     short loc_14E47
    
loc_14E18:
    lea     rcx, [rbp+var_9]
    mov     rax, [rbp+var_18]
    mov     edx, 1
    mov     rsi, rcx
    mov     rdi, rax
    call    gz_read
    mov     [rbp+var_1C], eax
    cmp     [rbp+var_1C], 0
    jle     short loc_14E42
    movzx   eax, [rbp+var_9]
    movzx   eax, al
    jmp     short loc_14E47
    
loc_14E42:
    mov     eax, 0FFFFFFFFh
    
loc_14E47:
    mov     rsi, [rbp+var_8]
    xor     rsi, fs:28h
    jz      short locret_14E5B
    call    ___stack_chk_fail
    
locret_14E5B:
    leave
    retn
    

<gzgetc_>:
    
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 10h
    mov     [rbp+var_8], rdi
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    _gzgetc
    leave
    retn
    

<gzungetc>:
    
    var_30= qword ptr -30h
    var_24= dword ptr -24h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_24], edi
    mov     [rbp+var_30], rsi
    cmp     [rbp+var_30], 0
    jnz     short loc_14E97
    mov     eax, 0FFFFFFFFh
    jmp     locret_15084
    
loc_14E97:
    mov     rax, [rbp+var_30]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_14EC4
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_14ECE
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_14ECE
    
loc_14EC4:
    mov     eax, 0FFFFFFFFh
    jmp     locret_15084
    
loc_14ECE:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_14F0A
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_8]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_skip
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_14F0A
    mov     eax, 0FFFFFFFFh
    jmp     locret_15084
    
loc_14F0A:
    cmp     [rbp+var_24], 0
    jns     short loc_14F1A
    mov     eax, 0FFFFFFFFh
    jmp     locret_15084
    
loc_14F1A:
    mov     rax, [rbp+var_8]
    mov     eax, [rax]
    test    eax, eax
    jnz     short loc_14F84
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax], 1
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+28h]
    add     eax, eax
    mov     eax, eax
    sub     rax, 1
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     [rax+8], rdx
    mov     rax, [rbp+var_8]
    mov     rax, [rax+8]
    mov     edx, [rbp+var_24]
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+10h]
    lea     rdx, [rax-1]
    mov     rax, [rbp+var_8]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+54h], 0
    mov     eax, [rbp+var_24]
    jmp     locret_15084
    
loc_14F84:
    mov     rax, [rbp+var_8]
    mov     edx, [rax]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+28h]
    add     eax, eax
    cmp     edx, eax
    jnz     short loc_14FB9
    mov     rax, [rbp+var_8]
    lea     rdx, aOutOfRoomToPus
    mov     esi, 0FFFFFFFDh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_15084
    
loc_14FB9:
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+8]
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    cmp     rdx, rax
    jnz     short loc_15032
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax]
    mov     eax, eax
    add     rax, rdx
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_8]
    mov     eax, [rax+28h]
    add     eax, eax
    mov     eax, eax
    add     rax, rdx
    mov     [rbp+var_10], rax
    jmp     short loc_15018
    
loc_15001:
    sub     [rbp+var_18], 1
    sub     [rbp+var_10], 1
    mov     rax, [rbp+var_18]
    movzx   edx, byte ptr [rax]
    mov     rax, [rbp+var_10]
    mov     [rax], dl
    
loc_15018:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+38h]
    cmp     [rbp+var_18], rax
    ja      short loc_15001
    mov     rax, [rbp+var_8]
    mov     rdx, [rbp+var_10]
    mov     [rax+8], rdx
    
loc_15032:
    mov     rax, [rbp+var_8]
    mov     eax, [rax]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_8]
    mov     [rax], edx
    mov     rax, [rbp+var_8]
    mov     rax, [rax+8]
    lea     rdx, [rax-1]
    mov     rax, [rbp+var_8]
    mov     [rax+8], rdx
    mov     rax, [rbp+var_8]
    mov     rax, [rax+8]
    mov     edx, [rbp+var_24]
    mov     [rax], dl
    mov     rax, [rbp+var_8]
    mov     rax, [rax+10h]
    lea     rdx, [rax-1]
    mov     rax, [rbp+var_8]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+54h], 0
    mov     eax, [rbp+var_24]
    
locret_15084:
    leave
    retn
    

<gzgets>:
    
    var_34= dword ptr -34h
    dest= qword ptr -30h
    var_28= qword ptr -28h
    var_20= dword ptr -20h
    n= qword ptr -1Ch
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_28], rdi
    mov     [rbp+dest], rsi
    mov     [rbp+var_34], edx
    cmp     [rbp+var_28], 0
    jz      short loc_150AD
    cmp     [rbp+dest], 0
    jz      short loc_150AD
    cmp     [rbp+var_34], 0
    jg      short loc_150B7
    
loc_150AD:
    mov     eax, 0
    jmp     locret_15260
    
loc_150B7:
    mov     rax, [rbp+var_28]
    mov     [rbp+n+4], rax
    mov     rax, [rbp+n+4]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_150E4
    mov     rax, [rbp+n+4]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_150EE
    mov     rax, [rbp+n+4]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jz      short loc_150EE
    
loc_150E4:
    mov     eax, 0
    jmp     locret_15260
    
loc_150EE:
    mov     rax, [rbp+n+4]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_1512A
    mov     rax, [rbp+n+4]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+n+4]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_skip
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_1512A
    mov     eax, 0
    jmp     locret_15260
    
loc_1512A:
    mov     rax, [rbp+dest]
    mov     [rbp+var_10], rax
    mov     eax, [rbp+var_34]
    sub     eax, 1
    mov     [rbp+var_20], eax
    cmp     [rbp+var_20], 0
    jz      loc_15244
    
loc_15145:
    mov     rax, [rbp+n+4]
    mov     eax, [rax]
    test    eax, eax
    jnz     short loc_1516A
    mov     rax, [rbp+n+4]
    mov     rdi, rax
    call    gz_fetch
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_1516A
    mov     eax, 0
    jmp     locret_15260
    
loc_1516A:
    mov     rax, [rbp+n+4]
    mov     eax, [rax]
    test    eax, eax
    jnz     short loc_15184
    mov     rax, [rbp+n+4]
    mov     dword ptr [rax+54h], 1
    jmp     loc_15244
    
loc_15184:
    mov     rax, [rbp+n+4]
    mov     eax, [rax]
    cmp     [rbp+var_20], eax
    cmovbe  eax, [rbp+var_20]
    mov     dword ptr [rbp+n], eax
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+n+4]
    mov     rax, [rax+8]
    mov     esi, 0Ah
    mov     rdi, rax
    call    _memchr
    mov     [rbp+var_8], rax
    cmp     [rbp+var_8], 0
    jz      short loc_151CF
    mov     rdx, [rbp+var_8]
    mov     rax, [rbp+n+4]
    mov     rax, [rax+8]
    sub     rdx, rax
    mov     rax, rdx
    add     eax, 1
    mov     dword ptr [rbp+n], eax
    
loc_151CF:
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+n+4]
    mov     rcx, [rax+8]
    mov     rax, [rbp+dest]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+n+4]
    mov     eax, [rax]
    sub     eax, dword ptr [rbp+n]
    mov     edx, eax
    mov     rax, [rbp+n+4]
    mov     [rax], edx
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+8]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+n+4]
    mov     [rax+8], rdx
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+10h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+n+4]
    mov     [rax+10h], rdx
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_20], eax
    mov     eax, dword ptr [rbp+n]
    add     [rbp+dest], rax
    cmp     [rbp+var_20], 0
    jz      short loc_15244
    cmp     [rbp+var_8], 0
    jz      loc_15145
    
loc_15244:
    mov     rax, [rbp+dest]
    cmp     rax, [rbp+var_10]
    jnz     short loc_15255
    mov     eax, 0
    jmp     short locret_15260
    
loc_15255:
    mov     rax, [rbp+dest]
    mov     byte ptr [rax], 0
    mov     rax, [rbp+var_10]
    
locret_15260:
    leave
    retn
    

<gzdirect>:
    
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jnz     short loc_1527C
    mov     eax, 0
    jmp     short locret_152BA
    
loc_1527C:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jnz     short loc_152B3
    mov     rax, [rbp+var_8]
    mov     eax, [rax+44h]
    test    eax, eax
    jnz     short loc_152B3
    mov     rax, [rbp+var_8]
    mov     eax, [rax]
    test    eax, eax
    jnz     short loc_152B3
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    gz_look
    
loc_152B3:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+40h]
    
locret_152BA:
    leave
    retn
    

<gzclose_r>:
    
    var_18= qword ptr -18h
    var_10= dword ptr -10h
    var_C= dword ptr -0Ch
    ptr= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    cmp     [rbp+var_18], 0
    jnz     short loc_152D9
    mov     eax, 0FFFFFFFEh
    jmp     locret_153A2
    
loc_152D9:
    mov     rax, [rbp+var_18]
    mov     [rbp+ptr], rax
    mov     rax, [rbp+ptr]
    mov     eax, [rax+18h]
    cmp     eax, 1C4Fh
    jz      short loc_152F9
    mov     eax, 0FFFFFFFEh
    jmp     locret_153A2
    
loc_152F9:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+28h]
    test    eax, eax
    jz      short loc_15334
    mov     rax, [rbp+ptr]
    add     rax, 78h
    mov     rdi, rax
    call    _inflateEnd
    mov     rax, [rbp+ptr]
    mov     rax, [rax+38h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+ptr]
    mov     rax, [rax+30h]
    mov     rdi, rax
    call    _free
    
loc_15334:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+6Ch]
    cmp     eax, 0FFFFFFFBh
    jnz     short loc_15347
    mov     eax, 0FFFFFFFBh
    jmp     short loc_1534C
    
loc_15347:
    mov     eax, 0
    
loc_1534C:
    mov     [rbp+var_10], eax
    mov     rax, [rbp+ptr]
    mov     edx, 0
    mov     esi, 0
    mov     rdi, rax
    call    gz_error
    mov     rax, [rbp+ptr]
    mov     rax, [rax+20h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+ptr]
    mov     eax, [rax+1Ch]
    mov     edi, eax
    call    _close
    mov     [rbp+var_C], eax
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    _free
    cmp     [rbp+var_C], 0
    jnz     short loc_1539D
    mov     eax, [rbp+var_10]
    jmp     short locret_153A2
    
loc_1539D:
    mov     eax, 0FFFFFFFFh
    
locret_153A2:
    leave
    retn
    

<gz_init>:
    
    var_18= qword ptr -18h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     rax, [rbp+var_18]
    add     rax, 78h
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_18]
    mov     eax, [rax+2Ch]
    add     eax, eax
    mov     eax, eax
    mov     rdi, rax
    call    _malloc
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+30h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    test    rax, rax
    jnz     short loc_15409
    mov     rax, [rbp+var_18]
    lea     rdx, aOutOfMemory_1
    mov     esi, 0FFFFFFFCh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_15571
    
loc_15409:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+40h]
    test    eax, eax
    jnz     loc_15525
    mov     rax, [rbp+var_18]
    mov     eax, [rax+2Ch]
    mov     eax, eax
    mov     rdi, rax
    call    _malloc
    mov     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+38h], rdx
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    test    rax, rax
    jnz     short loc_15473
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+var_18]
    lea     rdx, aOutOfMemory_1
    mov     esi, 0FFFFFFFCh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_15571
    
loc_15473:
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+40h], 0
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+48h], 0
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax+50h], 0
    mov     rax, [rbp+var_18]
    mov     ecx, [rax+5Ch]
    mov     rax, [rbp+var_18]
    mov     esi, [rax+58h]
    mov     rax, [rbp+var_8]
    push    70h
    lea     rdx, a1211_3
    push    rdx
    mov     r9d, ecx
    mov     r8d, 8
    mov     ecx, 1Fh
    mov     edx, 8
    mov     rdi, rax
    call    _deflateInit2_
    add     rsp, 10h
    mov     [rbp+var_C], eax
    cmp     [rbp+var_C], 0
    jz      short loc_1551A
    mov     rax, [rbp+var_18]
    mov     rax, [rax+38h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+var_18]
    lea     rdx, aOutOfMemory_1
    mov     esi, 0FFFFFFFCh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     short locret_15571
    
loc_1551A:
    mov     rax, [rbp+var_8]
    mov     qword ptr [rax], 0
    
loc_15525:
    mov     rax, [rbp+var_18]
    mov     edx, [rax+2Ch]
    mov     rax, [rbp+var_18]
    mov     [rax+28h], edx
    mov     rax, [rbp+var_18]
    mov     eax, [rax+40h]
    test    eax, eax
    jnz     short loc_1556C
    mov     rax, [rbp+var_18]
    mov     edx, [rax+28h]
    mov     rax, [rbp+var_8]
    mov     [rax+20h], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_8]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+18h]
    mov     rax, [rbp+var_18]
    mov     [rax+8], rdx
    
loc_1556C:
    mov     eax, 0
    
locret_15571:
    leave
    retn
    

<gz_comp>:
    
    var_2C= dword ptr -2Ch
    var_28= qword ptr -28h
    var_1C= dword ptr -1Ch
    var_18= dword ptr -18h
    n= qword ptr -14h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     [rbp+var_2C], esi
    mov     [rbp+var_18], 40000000h
    mov     rax, [rbp+var_28]
    add     rax, 78h
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+28h]
    test    eax, eax
    jnz     short loc_155BB
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_155BB
    mov     eax, 0FFFFFFFFh
    jmp     locret_15815
    
loc_155BB:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+40h]
    test    eax, eax
    jz      loc_15672
    jmp     loc_15659
    
loc_155CF:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    cmp     [rbp+var_18], eax
    cmovbe  eax, [rbp+var_18]
    mov     dword ptr [rbp+n], eax
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_8]
    mov     rcx, [rax]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1Ch]
    mov     rsi, rcx
    mov     edi, eax
    call    _write
    mov     dword ptr [rbp+n+4], eax
    cmp     dword ptr [rbp+n+4], 0
    jns     short loc_15630
    call    ___errno_location
    mov     eax, [rax]
    mov     edi, eax
    call    _strerror
    mov     rdx, rax
    mov     rax, [rbp+var_28]
    mov     esi, 0FFFFFFFFh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_15815
    
loc_15630:
    mov     rax, [rbp+var_8]
    mov     edx, [rax+8]
    mov     eax, dword ptr [rbp+n+4]
    sub     edx, eax
    mov     rax, [rbp+var_8]
    mov     [rax+8], edx
    mov     rax, [rbp+var_8]
    mov     rdx, [rax]
    mov     eax, dword ptr [rbp+n+4]
    cdqe
    add     rdx, rax
    mov     rax, [rbp+var_8]
    mov     [rax], rdx
    
loc_15659:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     loc_155CF
    mov     eax, 0
    jmp     locret_15815
    
loc_15672:
    mov     [rbp+var_1C], 0
    
loc_15679:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+20h]
    test    eax, eax
    jz      loc_15755
    cmp     [rbp+var_2C], 0
    jz      loc_157A7
    cmp     [rbp+var_2C], 4
    jnz     loc_15755
    cmp     [rbp+var_1C], 1
    jnz     loc_157A7
    jmp     loc_15755
    
loc_156AB:
    mov     rax, [rbp+var_8]
    mov     rax, [rax+18h]
    mov     rdx, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+8]
    sub     rdx, rax
    mov     eax, [rbp+var_18]
    cdqe
    cmp     rdx, rax
    jg      short loc_156E6
    mov     rax, [rbp+var_8]
    mov     rax, [rax+18h]
    mov     rdx, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+8]
    sub     rdx, rax
    mov     rax, rdx
    jmp     short loc_156E9
    
loc_156E6:
    mov     eax, [rbp+var_18]
    
loc_156E9:
    mov     dword ptr [rbp+n], eax
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+8]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+1Ch]
    mov     rsi, rcx
    mov     edi, eax
    call    _write
    mov     dword ptr [rbp+n+4], eax
    cmp     dword ptr [rbp+n+4], 0
    jns     short loc_1573D
    call    ___errno_location
    mov     eax, [rax]
    mov     edi, eax
    call    _strerror
    mov     rdx, rax
    mov     rax, [rbp+var_28]
    mov     esi, 0FFFFFFFFh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     locret_15815
    
loc_1573D:
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+8]
    mov     eax, dword ptr [rbp+n+4]
    cdqe
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+8], rdx
    
loc_15755:
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+18h]
    mov     rax, [rbp+var_28]
    mov     rax, [rax+8]
    cmp     rdx, rax
    ja      loc_156AB
    mov     rax, [rbp+var_8]
    mov     eax, [rax+20h]
    test    eax, eax
    jnz     short loc_157A7
    mov     rax, [rbp+var_28]
    mov     edx, [rax+28h]
    mov     rax, [rbp+var_8]
    mov     [rax+20h], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_8]
    mov     [rax+18h], rdx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+38h]
    mov     rax, [rbp+var_28]
    mov     [rax+8], rdx
    
loc_157A7:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+20h]
    mov     [rbp+var_C], eax
    mov     edx, [rbp+var_2C]
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    _deflate
    mov     [rbp+var_1C], eax
    cmp     [rbp+var_1C], 0FFFFFFFEh
    jnz     short loc_157EA
    mov     rax, [rbp+var_28]
    lea     rdx, aInternalErrorD
    mov     esi, 0FFFFFFFEh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0FFFFFFFFh
    jmp     short locret_15815
    
loc_157EA:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+20h]
    sub     [rbp+var_C], eax
    cmp     [rbp+var_C], 0
    jnz     loc_15679
    cmp     [rbp+var_2C], 4
    jnz     short loc_15810
    mov     rax, [rbp+var_8]
    mov     rdi, rax
    call    _deflateReset
    
loc_15810:
    mov     eax, 0
    
locret_15815:
    leave
    retn
    

<gz_zero>:
    
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= dword ptr -10h
    n= qword ptr -0Ch
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     rax, [rbp+var_18]
    add     rax, 78h
    mov     [rbp+n+4], rax
    mov     rax, [rbp+n+4]
    mov     eax, [rax+8]
    test    eax, eax
    jz      short loc_1585E
    mov     rax, [rbp+var_18]
    mov     esi, 0
    mov     rdi, rax
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_1585E
    mov     eax, 0FFFFFFFFh
    jmp     locret_15911
    
loc_1585E:
    mov     [rbp+var_10], 1
    jmp     loc_15901
    
loc_1586A:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+28h]
    mov     eax, eax
    cmp     [rbp+var_20], rax
    jge     short loc_1587F
    mov     rax, [rbp+var_20]
    jmp     short loc_15886
    
loc_1587F:
    mov     rax, [rbp+var_18]
    mov     eax, [rax+28h]
    
loc_15886:
    mov     dword ptr [rbp+n], eax
    cmp     [rbp+var_10], 0
    jz      short loc_158AE
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_18]
    mov     rax, [rax+30h]
    mov     esi, 0
    mov     rdi, rax
    call    _memset
    mov     [rbp+var_10], 0
    
loc_158AE:
    mov     rax, [rbp+n+4]
    mov     edx, dword ptr [rbp+n]
    mov     [rax+8], edx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+30h]
    mov     rax, [rbp+n+4]
    mov     [rax], rdx
    mov     rax, [rbp+var_18]
    mov     rdx, [rax+10h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_18]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_18]
    mov     esi, 0
    mov     rdi, rax
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_158FA
    mov     eax, 0FFFFFFFFh
    jmp     short locret_15911
    
loc_158FA:
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_20], rax
    
loc_15901:
    cmp     [rbp+var_20], 0
    jnz     loc_1586A
    mov     eax, 0
    
locret_15911:
    leave
    retn
    

<gz_write>:
    
    var_38= qword ptr -38h
    src= qword ptr -30h
    var_28= qword ptr -28h
    n= qword ptr -14h
    var_C= dword ptr -0Ch
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_28], rdi
    mov     [rbp+src], rsi
    mov     [rbp+var_38], rdx
    mov     rax, [rbp+var_38]
    mov     [rbp+var_8], rax
    cmp     [rbp+var_38], 0
    jnz     short loc_15940
    mov     eax, 0
    jmp     locret_15B4F
    
loc_15940:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+28h]
    test    eax, eax
    jnz     short loc_15966
    mov     rax, [rbp+var_28]
    mov     rdi, rax
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_15966
    mov     eax, 0
    jmp     locret_15B4F
    
loc_15966:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_159A2
    mov     rax, [rbp+var_28]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_28]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_159A2
    mov     eax, 0
    jmp     locret_15B4F
    
loc_159A2:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+28h]
    mov     eax, eax
    cmp     [rbp+var_38], rax
    jnb     loc_15AAF
    
loc_159B5:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    test    eax, eax
    jnz     short loc_159D3
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+30h]
    mov     rax, [rbp+var_28]
    mov     [rax+78h], rdx
    
loc_159D3:
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+78h]
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    mov     eax, eax
    add     rax, rdx
    mov     rdx, rax
    mov     rax, [rbp+var_28]
    mov     rax, [rax+30h]
    sub     rdx, rax
    mov     rax, rdx
    mov     [rbp+var_C], eax
    mov     rax, [rbp+var_28]
    mov     eax, [rax+28h]
    sub     eax, [rbp+var_C]
    mov     dword ptr [rbp+n], eax
    mov     eax, dword ptr [rbp+n]
    cmp     [rbp+var_38], rax
    jnb     short loc_15A1B
    mov     rax, [rbp+var_38]
    mov     dword ptr [rbp+n], eax
    
loc_15A1B:
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+var_28]
    mov     rcx, [rax+30h]
    mov     eax, [rbp+var_C]
    add     rcx, rax
    mov     rax, [rbp+src]
    mov     rsi, rax
    mov     rdi, rcx
    call    _memcpy
    mov     rax, [rbp+var_28]
    mov     edx, [rax+80h]
    mov     eax, dword ptr [rbp+n]
    add     edx, eax
    mov     rax, [rbp+var_28]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+10h]
    mov     eax, dword ptr [rbp+n]
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+10h], rdx
    mov     eax, dword ptr [rbp+n]
    add     [rbp+src], rax
    mov     eax, dword ptr [rbp+n]
    sub     [rbp+var_38], rax
    cmp     [rbp+var_38], 0
    jz      short loc_15A9F
    mov     rax, [rbp+var_28]
    mov     esi, 0
    mov     rdi, rax
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_15A9F
    mov     eax, 0
    jmp     locret_15B4F
    
loc_15A9F:
    cmp     [rbp+var_38], 0
    jnz     loc_159B5
    jmp     loc_15B4B
    
loc_15AAF:
    mov     rax, [rbp+var_28]
    mov     eax, [rax+80h]
    test    eax, eax
    jz      short loc_15ADA
    mov     rax, [rbp+var_28]
    mov     esi, 0
    mov     rdi, rax
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_15ADA
    mov     eax, 0
    jmp     short locret_15B4F
    
loc_15ADA:
    mov     rax, [rbp+var_28]
    mov     rdx, [rbp+src]
    mov     [rax+78h], rdx
    
loc_15AE6:
    mov     dword ptr [rbp+n+4], 0FFFFFFFFh
    mov     eax, dword ptr [rbp+n+4]
    cmp     [rbp+var_38], rax
    jnb     short loc_15AFD
    mov     rax, [rbp+var_38]
    mov     dword ptr [rbp+n+4], eax
    
loc_15AFD:
    mov     rax, [rbp+var_28]
    mov     edx, dword ptr [rbp+n+4]
    mov     [rax+80h], edx
    mov     rax, [rbp+var_28]
    mov     rdx, [rax+10h]
    mov     eax, dword ptr [rbp+n+4]
    add     rdx, rax
    mov     rax, [rbp+var_28]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_28]
    mov     esi, 0
    mov     rdi, rax
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_15B3D
    mov     eax, 0
    jmp     short locret_15B4F
    
loc_15B3D:
    mov     eax, dword ptr [rbp+n+4]
    sub     [rbp+var_38], rax
    cmp     [rbp+var_38], 0
    jnz     short loc_15AE6
    
loc_15B4B:
    mov     rax, [rbp+var_8]
    
locret_15B4F:
    leave
    retn
    

<gzwrite>:
    
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_24], edx
    cmp     [rbp+var_18], 0
    jnz     short loc_15B72
    mov     eax, 0
    jmp     short locret_15BD6
    
loc_15B72:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_15B93
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_15B9A
    
loc_15B93:
    mov     eax, 0
    jmp     short locret_15BD6
    
loc_15B9A:
    mov     eax, [rbp+var_24]
    test    eax, eax
    jns     short loc_15BC0
    mov     rax, [rbp+var_8]
    lea     rdx, aRequestedLengt
    mov     esi, 0FFFFFFFDh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0
    jmp     short locret_15BD6
    
loc_15BC0:
    mov     edx, [rbp+var_24]
    mov     rcx, [rbp+var_20]
    mov     rax, [rbp+var_8]
    mov     rsi, rcx
    mov     rdi, rax
    call    gz_write
    
locret_15BD6:
    leave
    retn
    

<gzfwrite>:
    
    var_30= qword ptr -30h
    var_28= qword ptr -28h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_20], rsi
    mov     [rbp+var_28], rdx
    mov     [rbp+var_30], rcx
    cmp     [rbp+var_30], 0
    jnz     short loc_15C01
    mov     eax, 0
    jmp     locret_15C9D
    
loc_15C01:
    mov     rax, [rbp+var_30]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_15C22
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_15C29
    
loc_15C22:
    mov     eax, 0
    jmp     short locret_15C9D
    
loc_15C29:
    mov     rax, [rbp+var_28]
    imul    rax, [rbp+var_20]
    mov     [rbp+var_8], rax
    cmp     [rbp+var_20], 0
    jz      short loc_15C6F
    mov     rax, [rbp+var_8]
    mov     edx, 0
    div     [rbp+var_20]
    cmp     [rbp+var_28], rax
    jz      short loc_15C6F
    mov     rax, [rbp+var_10]
    lea     rdx, aRequestDoesNot_1
    mov     esi, 0FFFFFFFEh
    mov     rdi, rax
    call    gz_error
    mov     eax, 0
    jmp     short locret_15C9D
    
loc_15C6F:
    cmp     [rbp+var_8], 0
    jz      short loc_15C98
    mov     rdx, [rbp+var_8]
    mov     rcx, [rbp+var_18]
    mov     rax, [rbp+var_10]
    mov     rsi, rcx
    mov     rdi, rax
    call    gz_write
    mov     edx, 0
    div     [rbp+var_20]
    jmp     short locret_15C9D
    
loc_15C98:
    mov     eax, 0
    
locret_15C9D:
    leave
    retn
    

<gzputc>:
    
    var_3C= dword ptr -3Ch
    var_38= qword ptr -38h
    var_24= dword ptr -24h
    var_20= qword ptr -20h
    var_18= qword ptr -18h
    var_9= byte ptr -9
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_38], rdi
    mov     [rbp+var_3C], esi
    mov     rax, fs:28h
    mov     [rbp+var_8], rax
    xor     eax, eax
    cmp     [rbp+var_38], 0
    jnz     short loc_15CCE
    mov     eax, 0FFFFFFFFh
    jmp     loc_15E0E
    
loc_15CCE:
    mov     rax, [rbp+var_38]
    mov     [rbp+var_20], rax
    mov     rax, [rbp+var_20]
    add     rax, 78h
    mov     [rbp+var_18], rax
    mov     rax, [rbp+var_20]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_15CFB
    mov     rax, [rbp+var_20]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_15D05
    
loc_15CFB:
    mov     eax, 0FFFFFFFFh
    jmp     loc_15E0E
    
loc_15D05:
    mov     rax, [rbp+var_20]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_15D41
    mov     rax, [rbp+var_20]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_20]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_20]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_15D41
    mov     eax, 0FFFFFFFFh
    jmp     loc_15E0E
    
loc_15D41:
    mov     rax, [rbp+var_20]
    mov     eax, [rax+28h]
    test    eax, eax
    jz      loc_15DDD
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_15D6A
    mov     rax, [rbp+var_20]
    mov     rdx, [rax+30h]
    mov     rax, [rbp+var_18]
    mov     [rax], rdx
    
loc_15D6A:
    mov     rax, [rbp+var_18]
    mov     rdx, [rax]
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    mov     eax, eax
    add     rax, rdx
    mov     rdx, rax
    mov     rax, [rbp+var_20]
    mov     rax, [rax+30h]
    sub     rdx, rax
    mov     rax, rdx
    mov     [rbp+var_24], eax
    mov     rax, [rbp+var_20]
    mov     eax, [rax+28h]
    cmp     [rbp+var_24], eax
    jnb     short loc_15DDD
    mov     rax, [rbp+var_20]
    mov     rdx, [rax+30h]
    mov     eax, [rbp+var_24]
    add     rax, rdx
    mov     edx, [rbp+var_3C]
    mov     [rax], dl
    mov     rax, [rbp+var_18]
    mov     eax, [rax+8]
    lea     edx, [rax+1]
    mov     rax, [rbp+var_18]
    mov     [rax+8], edx
    mov     rax, [rbp+var_20]
    mov     rax, [rax+10h]
    lea     rdx, [rax+1]
    mov     rax, [rbp+var_20]
    mov     [rax+10h], rdx
    mov     eax, [rbp+var_3C]
    movzx   eax, al
    jmp     short loc_15E0E
    
loc_15DDD:
    mov     eax, [rbp+var_3C]
    mov     [rbp+var_9], al
    lea     rcx, [rbp+var_9]
    mov     rax, [rbp+var_20]
    mov     edx, 1
    mov     rsi, rcx
    mov     rdi, rax
    call    gz_write
    cmp     rax, 1
    jz      short loc_15E08
    mov     eax, 0FFFFFFFFh
    jmp     short loc_15E0E
    
loc_15E08:
    mov     eax, [rbp+var_3C]
    movzx   eax, al
    
loc_15E0E:
    mov     rcx, [rbp+var_8]
    xor     rcx, fs:28h
    jz      short locret_15E22
    call    ___stack_chk_fail
    
locret_15E22:
    leave
    retn
    

<gzputs>:
    
    s= qword ptr -30h
    var_28= qword ptr -28h
    var_14= dword ptr -14h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 30h
    mov     [rbp+var_28], rdi
    mov     [rbp+s], rsi
    cmp     [rbp+var_28], 0
    jnz     short loc_15E42
    mov     eax, 0FFFFFFFFh
    jmp     short locret_15EAB
    
loc_15E42:
    mov     rax, [rbp+var_28]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_15E63
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_15E6A
    
loc_15E63:
    mov     eax, 0FFFFFFFFh
    jmp     short locret_15EAB
    
loc_15E6A:
    mov     rax, [rbp+s]
    mov     rdi, rax
    call    _strlen
    mov     [rbp+var_8], rax
    mov     rdx, [rbp+var_8]
    mov     rcx, [rbp+s]
    mov     rax, [rbp+var_10]
    mov     rsi, rcx
    mov     rdi, rax
    call    gz_write
    mov     [rbp+var_14], eax
    cmp     [rbp+var_14], 0
    jnz     short loc_15EA1
    cmp     [rbp+var_8], 0
    jnz     short loc_15EA6
    
loc_15EA1:
    mov     eax, [rbp+var_14]
    jmp     short locret_15EAB
    
loc_15EA6:
    mov     eax, 0FFFFFFFFh
    
locret_15EAB:
    leave
    retn
    

<gzvprintf>:
    
    arg= qword ptr -38h
    format= qword ptr -30h
    var_28= qword ptr -28h
    var_20= dword ptr -20h
    n= qword ptr -1Ch
    var_10= qword ptr -10h
    s= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 40h
    mov     [rbp+var_28], rdi
    mov     [rbp+format], rsi
    mov     [rbp+arg], rdx
    cmp     [rbp+var_28], 0
    jnz     short loc_15ED2
    mov     eax, 0FFFFFFFEh
    jmp     locret_160F6
    
loc_15ED2:
    mov     rax, [rbp+var_28]
    mov     [rbp+n+4], rax
    mov     rax, [rbp+n+4]
    add     rax, 78h
    mov     [rbp+var_10], rax
    mov     rax, [rbp+n+4]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_15EFF
    mov     rax, [rbp+n+4]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_15F09
    
loc_15EFF:
    mov     eax, 0FFFFFFFEh
    jmp     locret_160F6
    
loc_15F09:
    mov     rax, [rbp+n+4]
    mov     eax, [rax+28h]
    test    eax, eax
    jnz     short loc_15F31
    mov     rax, [rbp+n+4]
    mov     rdi, rax
    call    gz_init
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_15F31
    mov     rax, [rbp+n+4]
    mov     eax, [rax+6Ch]
    jmp     locret_160F6
    
loc_15F31:
    mov     rax, [rbp+n+4]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_15F6F
    mov     rax, [rbp+n+4]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+n+4]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_15F6F
    mov     rax, [rbp+n+4]
    mov     eax, [rax+6Ch]
    jmp     locret_160F6
    
loc_15F6F:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    test    eax, eax
    jnz     short loc_15F89
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+30h]
    mov     rax, [rbp+var_10]
    mov     [rax], rdx
    
loc_15F89:
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+30h]
    mov     rax, [rbp+var_10]
    mov     rax, [rax]
    mov     rcx, rax
    mov     rax, [rbp+n+4]
    mov     rax, [rax+30h]
    sub     rcx, rax
    mov     rax, rcx
    mov     rcx, rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+8]
    mov     eax, eax
    add     rax, rcx
    add     rax, rdx
    mov     [rbp+s], rax
    mov     rax, [rbp+n+4]
    mov     eax, [rax+28h]
    sub     eax, 1
    mov     edx, eax
    mov     rax, [rbp+s]
    add     rax, rdx
    mov     byte ptr [rax], 0
    mov     rax, [rbp+n+4]
    mov     eax, [rax+28h]
    mov     esi, eax
    mov     rcx, [rbp+arg]
    mov     rdx, [rbp+format]
    mov     rax, [rbp+s]
    mov     rdi, rax
    call    _vsnprintf
    mov     [rbp+var_20], eax
    cmp     [rbp+var_20], 0
    jz      short loc_16023
    mov     rax, [rbp+n+4]
    mov     edx, [rax+28h]
    mov     eax, [rbp+var_20]
    cmp     edx, eax
    jbe     short loc_16023
    mov     rax, [rbp+n+4]
    mov     eax, [rax+28h]
    sub     eax, 1
    mov     edx, eax
    mov     rax, [rbp+s]
    add     rax, rdx
    movzx   eax, byte ptr [rax]
    test    al, al
    jz      short loc_1602D
    
loc_16023:
    mov     eax, 0
    jmp     locret_160F6
    
loc_1602D:
    mov     rax, [rbp+var_10]
    mov     edx, [rax+8]
    mov     eax, [rbp+var_20]
    add     edx, eax
    mov     rax, [rbp+var_10]
    mov     [rax+8], edx
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+10h]
    mov     eax, [rbp+var_20]
    cdqe
    add     rdx, rax
    mov     rax, [rbp+n+4]
    mov     [rax+10h], rdx
    mov     rax, [rbp+var_10]
    mov     edx, [rax+8]
    mov     rax, [rbp+n+4]
    mov     eax, [rax+28h]
    cmp     edx, eax
    jb      loc_160F3
    mov     rax, [rbp+var_10]
    mov     edx, [rax+8]
    mov     rax, [rbp+n+4]
    mov     eax, [rax+28h]
    sub     edx, eax
    mov     eax, edx
    mov     dword ptr [rbp+n], eax
    mov     rax, [rbp+n+4]
    mov     edx, [rax+28h]
    mov     rax, [rbp+var_10]
    mov     [rax+8], edx
    mov     rax, [rbp+n+4]
    mov     esi, 0
    mov     rdi, rax
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_160B0
    mov     rax, [rbp+n+4]
    mov     eax, [rax+6Ch]
    jmp     short locret_160F6
    
loc_160B0:
    mov     edx, dword ptr [rbp+n]
    mov     rax, [rbp+n+4]
    mov     rcx, [rax+30h]
    mov     rax, [rbp+n+4]
    mov     eax, [rax+28h]
    mov     eax, eax
    add     rcx, rax
    mov     rax, [rbp+n+4]
    mov     rax, [rax+30h]
    mov     rsi, rcx
    mov     rdi, rax
    call    _memcpy
    mov     rax, [rbp+n+4]
    mov     rdx, [rax+30h]
    mov     rax, [rbp+var_10]
    mov     [rax], rdx
    mov     rax, [rbp+var_10]
    mov     edx, dword ptr [rbp+n]
    mov     [rax+8], edx
    
loc_160F3:
    mov     eax, [rbp+var_20]
    
locret_160F6:
    leave
    retn
    

<gzprintf>:
    
    var_F0= qword ptr -0F0h
    var_E8= qword ptr -0E8h
    var_D4= dword ptr -0D4h
    var_D0= dword ptr -0D0h
    var_CC= dword ptr -0CCh
    var_C8= qword ptr -0C8h
    var_C0= qword ptr -0C0h
    var_B8= qword ptr -0B8h
    var_B0= byte ptr -0B0h
    var_A0= qword ptr -0A0h
    var_98= qword ptr -98h
    var_90= qword ptr -90h
    var_88= qword ptr -88h
    var_80= xmmword ptr -80h
    var_70= xmmword ptr -70h
    var_60= xmmword ptr -60h
    var_50= xmmword ptr -50h
    var_40= xmmword ptr -40h
    var_30= xmmword ptr -30h
    var_20= xmmword ptr -20h
    var_10= xmmword ptr -10h
    arg_0= byte ptr  10h
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 0F0h
    mov     [rbp+var_E8], rdi
    mov     [rbp+var_F0], rsi
    mov     [rbp+var_A0], rdx
    mov     [rbp+var_98], rcx
    mov     [rbp+var_90], r8
    mov     [rbp+var_88], r9
    test    al, al
    jz      short loc_16151
    movaps  [rbp+var_80], xmm0
    movaps  [rbp+var_70], xmm1
    movaps  [rbp+var_60], xmm2
    movaps  [rbp+var_50], xmm3
    movaps  [rbp+var_40], xmm4
    movaps  [rbp+var_30], xmm5
    movaps  [rbp+var_20], xmm6
    movaps  [rbp+var_10], xmm7
    
loc_16151:
    mov     rax, fs:28h
    mov     [rbp+var_B8], rax
    xor     eax, eax
    mov     [rbp+var_D0], 10h
    mov     [rbp+var_CC], 30h
    lea     rax, [rbp+arg_0]
    mov     [rbp+var_C8], rax
    lea     rax, [rbp+var_B0]
    mov     [rbp+var_C0], rax
    lea     rdx, [rbp+var_D0]
    mov     rcx, [rbp+var_F0]
    mov     rax, [rbp+var_E8]
    mov     rsi, rcx
    mov     rdi, rax
    call    _gzvprintf
    mov     [rbp+var_D4], eax
    mov     eax, [rbp+var_D4]
    mov     rsi, [rbp+var_B8]
    xor     rsi, fs:28h
    jz      short locret_161D3
    call    ___stack_chk_fail
    
locret_161D3:
    leave
    retn
    

<gzflush>:
    
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    cmp     [rbp+var_18], 0
    jnz     short loc_161F5
    mov     eax, 0FFFFFFFEh
    jmp     locret_16283
    
loc_161F5:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_8]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_16216
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_1621D
    
loc_16216:
    mov     eax, 0FFFFFFFEh
    jmp     short locret_16283
    
loc_1621D:
    cmp     [rbp+var_1C], 0
    js      short loc_16229
    cmp     [rbp+var_1C], 4
    jle     short loc_16230
    
loc_16229:
    mov     eax, 0FFFFFFFEh
    jmp     short locret_16283
    
loc_16230:
    mov     rax, [rbp+var_8]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_1626B
    mov     rax, [rbp+var_8]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_8]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_8]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_1626B
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    jmp     short locret_16283
    
loc_1626B:
    mov     edx, [rbp+var_1C]
    mov     rax, [rbp+var_8]
    mov     esi, edx
    mov     rdi, rax
    call    gz_comp
    mov     rax, [rbp+var_8]
    mov     eax, [rax+6Ch]
    
locret_16283:
    leave
    retn
    

<gzsetparams>:
    
    var_20= dword ptr -20h
    var_1C= dword ptr -1Ch
    var_18= qword ptr -18h
    var_10= qword ptr -10h
    var_8= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_1C], esi
    mov     [rbp+var_20], edx
    cmp     [rbp+var_18], 0
    jnz     short loc_162A8
    mov     eax, 0FFFFFFFEh
    jmp     locret_1639E
    
loc_162A8:
    mov     rax, [rbp+var_18]
    mov     [rbp+var_10], rax
    mov     rax, [rbp+var_10]
    add     rax, 78h
    mov     [rbp+var_8], rax
    mov     rax, [rbp+var_10]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jnz     short loc_162D5
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    test    eax, eax
    jz      short loc_162DF
    
loc_162D5:
    mov     eax, 0FFFFFFFEh
    jmp     locret_1639E
    
loc_162DF:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+58h]
    cmp     [rbp+var_1C], eax
    jnz     short loc_16301
    mov     rax, [rbp+var_10]
    mov     eax, [rax+5Ch]
    cmp     [rbp+var_20], eax
    jnz     short loc_16301
    mov     eax, 0
    jmp     locret_1639E
    
loc_16301:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_1633C
    mov     rax, [rbp+var_10]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+var_10]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+var_10]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_1633C
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    jmp     short locret_1639E
    
loc_1633C:
    mov     rax, [rbp+var_10]
    mov     eax, [rax+28h]
    test    eax, eax
    jz      short loc_16385
    mov     rax, [rbp+var_8]
    mov     eax, [rax+8]
    test    eax, eax
    jz      short loc_16371
    mov     rax, [rbp+var_10]
    mov     esi, 5
    mov     rdi, rax
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_16371
    mov     rax, [rbp+var_10]
    mov     eax, [rax+6Ch]
    jmp     short locret_1639E
    
loc_16371:
    mov     edx, [rbp+var_20]
    mov     ecx, [rbp+var_1C]
    mov     rax, [rbp+var_8]
    mov     esi, ecx
    mov     rdi, rax
    call    _deflateParams
    
loc_16385:
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_1C]
    mov     [rax+58h], edx
    mov     rax, [rbp+var_10]
    mov     edx, [rbp+var_20]
    mov     [rax+5Ch], edx
    mov     eax, 0
    
locret_1639E:
    leave
    retn
    

<gzclose_w>:
    
    var_18= qword ptr -18h
    var_C= dword ptr -0Ch
    ptr= qword ptr -8
    
    
    push    rbp
    mov     rbp, rsp
    sub     rsp, 20h
    mov     [rbp+var_18], rdi
    mov     [rbp+var_C], 0
    cmp     [rbp+var_18], 0
    jnz     short loc_163C4
    mov     eax, 0FFFFFFFEh
    jmp     locret_164D5
    
loc_163C4:
    mov     rax, [rbp+var_18]
    mov     [rbp+ptr], rax
    mov     rax, [rbp+ptr]
    mov     eax, [rax+18h]
    cmp     eax, 79B1h
    jz      short loc_163E4
    mov     eax, 0FFFFFFFEh
    jmp     locret_164D5
    
loc_163E4:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+68h]
    test    eax, eax
    jz      short loc_16420
    mov     rax, [rbp+ptr]
    mov     dword ptr [rax+68h], 0
    mov     rax, [rbp+ptr]
    mov     rdx, [rax+60h]
    mov     rax, [rbp+ptr]
    mov     rsi, rdx
    mov     rdi, rax
    call    gz_zero
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_16420
    mov     rax, [rbp+ptr]
    mov     eax, [rax+6Ch]
    mov     [rbp+var_C], eax
    
loc_16420:
    mov     rax, [rbp+ptr]
    mov     esi, 4
    mov     rdi, rax
    call    gz_comp
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_16440
    mov     rax, [rbp+ptr]
    mov     eax, [rax+6Ch]
    mov     [rbp+var_C], eax
    
loc_16440:
    mov     rax, [rbp+ptr]
    mov     eax, [rax+28h]
    test    eax, eax
    jz      short loc_16486
    mov     rax, [rbp+ptr]
    mov     eax, [rax+40h]
    test    eax, eax
    jnz     short loc_16476
    mov     rax, [rbp+ptr]
    add     rax, 78h
    mov     rdi, rax
    call    _deflateEnd
    mov     rax, [rbp+ptr]
    mov     rax, [rax+38h]
    mov     rdi, rax
    call    _free
    
loc_16476:
    mov     rax, [rbp+ptr]
    mov     rax, [rax+30h]
    mov     rdi, rax
    call    _free
    
loc_16486:
    mov     rax, [rbp+ptr]
    mov     edx, 0
    mov     esi, 0
    mov     rdi, rax
    call    gz_error
    mov     rax, [rbp+ptr]
    mov     rax, [rax+20h]
    mov     rdi, rax
    call    _free
    mov     rax, [rbp+ptr]
    mov     eax, [rax+1Ch]
    mov     edi, eax
    call    _close
    cmp     eax, 0FFFFFFFFh
    jnz     short loc_164C6
    mov     [rbp+var_C], 0FFFFFFFFh
    
loc_164C6:
    mov     rax, [rbp+ptr]
    mov     rdi, rax
    call    _free
    mov     eax, [rbp+var_C]
    
locret_164D5:
    leave
    retn
    

<_term_proc>:
    sub     rsp, 8
    add     rsp, 8
    retn

